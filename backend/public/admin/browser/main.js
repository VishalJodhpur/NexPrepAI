import {
  APP_BOOTSTRAP_LISTENER,
  APP_ID,
  ApplicationModule,
  ApplicationRef,
  Attribute,
  BehaviorSubject,
  CSP_NONCE,
  ChangeDetectorRef,
  CheckboxControlValueAccessor,
  CommonModule,
  Compiler,
  Component,
  ConnectableObservable,
  Console,
  ContentChildren,
  DOCUMENT,
  DatePipe,
  DefaultValueAccessor,
  DestroyRef,
  Directive,
  DomAdapter,
  EMPTY,
  ENVIRONMENT_INITIALIZER,
  ElementRef,
  EmptyError,
  EnvironmentInjector,
  ErrorHandler,
  EventEmitter,
  FormArrayName,
  FormBuilder,
  FormControlName,
  FormGroupDirective,
  FormGroupName,
  FormsModule,
  HTTP_INTERCEPTORS,
  HashLocationStrategy,
  HostBinding,
  HostListener,
  HttpClient,
  HttpHeaders,
  HttpParams,
  INJECTOR_SCOPE,
  Inject,
  InjectFlags,
  Injectable,
  InjectionToken,
  Injector,
  Input,
  LOCATION_INITIALIZED,
  Location,
  LocationStrategy,
  MaxValidator,
  MinValidator,
  NgClass,
  NgControlStatus,
  NgControlStatusGroup,
  NgForOf,
  NgForm,
  NgIf,
  NgModel,
  NgModule,
  NgModuleFactory$1,
  NgSelectOption,
  NgSwitch,
  NgSwitchCase,
  NgZone,
  NumberValueAccessor,
  Optional,
  Output,
  PLATFORM_BROWSER_ID,
  PLATFORM_ID,
  PLATFORM_INITIALIZER,
  PathLocationStrategy,
  PendingTasksInternal,
  Pipe,
  ReactiveFormsModule,
  Renderer2,
  RendererFactory2,
  RendererStyleFlags2,
  RequiredValidator,
  RuntimeError,
  SecurityContext,
  SelectControlValueAccessor,
  SkipSelf,
  SlicePipe,
  Subject,
  Subscription,
  TESTABILITY,
  TESTABILITY_GETTER,
  Testability,
  TestabilityRegistry,
  TitleCasePipe,
  TracingService,
  Validators,
  Version,
  ViewContainerRef,
  ViewEncapsulation,
  ViewportScroller,
  XSS_SECURITY_URL,
  XhrFactory,
  __commonJS,
  __spreadProps,
  __spreadValues,
  __toESM,
  _global,
  _sanitizeHtml,
  _sanitizeUrl,
  afterNextRender,
  allowSanitizationBypassAndThrow,
  booleanAttribute,
  bypassSanitizationTrustHtml,
  bypassSanitizationTrustResourceUrl,
  bypassSanitizationTrustScript,
  bypassSanitizationTrustStyle,
  bypassSanitizationTrustUrl,
  catchError,
  combineLatest,
  concat,
  concatMap,
  createEnvironmentInjector,
  createPlatformFactory,
  debounceTime,
  defaultIfEmpty,
  defer,
  distinctUntilChanged,
  environment,
  filter,
  finalize,
  first,
  forwardRef,
  from,
  getDOM,
  inject,
  input,
  internalCreateApplication,
  isInjectable,
  isNgModule,
  isObservable,
  isPlatformServer,
  isPromise,
  isStandalone,
  last,
  makeEnvironmentProviders,
  map,
  mergeAll,
  mergeMap,
  of,
  parseCookieValue,
  performanceMarkFeature,
  pipe,
  platformCore,
  provideAppInitializer,
  provideHttpClient,
  refCount,
  reflectComponentType,
  runInInjectionContext,
  scan,
  setClassMetadata,
  setDocument,
  setRootDomAdapter,
  startWith,
  switchMap,
  take,
  takeLast,
  takeUntil,
  tap,
  throwError,
  unwrapSafeValue,
  withInterceptorsFromDi,
  ɵNgNoValidate,
  ɵNgSelectMultipleOption,
  ɵsetClassDebugInfo,
  ɵɵNgOnChangesFeature,
  ɵɵadvance,
  ɵɵattribute,
  ɵɵclassMap,
  ɵɵclassProp,
  ɵɵcontentQuery,
  ɵɵdefineComponent,
  ɵɵdefineDirective,
  ɵɵdefineInjectable,
  ɵɵdefineInjector,
  ɵɵdefineNgModule,
  ɵɵdefinePipe,
  ɵɵdirectiveInject,
  ɵɵelement,
  ɵɵelementContainerEnd,
  ɵɵelementContainerStart,
  ɵɵelementEnd,
  ɵɵelementStart,
  ɵɵgetCurrentView,
  ɵɵgetInheritedFactory,
  ɵɵinject,
  ɵɵinjectAttribute,
  ɵɵinvalidFactory,
  ɵɵlistener,
  ɵɵloadQuery,
  ɵɵnamespaceHTML,
  ɵɵnamespaceSVG,
  ɵɵnextContext,
  ɵɵpipe,
  ɵɵpipeBind1,
  ɵɵpipeBind2,
  ɵɵpipeBind3,
  ɵɵproperty,
  ɵɵpropertyInterpolate,
  ɵɵpropertyInterpolate1,
  ɵɵpropertyInterpolate2,
  ɵɵpureFunction0,
  ɵɵpureFunction1,
  ɵɵpureFunction2,
  ɵɵpureFunction3,
  ɵɵpureFunction4,
  ɵɵpureFunction5,
  ɵɵqueryRefresh,
  ɵɵreference,
  ɵɵresetView,
  ɵɵresolveDocument,
  ɵɵrestoreView,
  ɵɵsanitizeHtml,
  ɵɵsanitizeUrl,
  ɵɵsanitizeUrlOrResourceUrl,
  ɵɵtemplate,
  ɵɵtemplateRefExtractor,
  ɵɵtext,
  ɵɵtextInterpolate,
  ɵɵtextInterpolate1,
  ɵɵtextInterpolate2,
  ɵɵtextInterpolate3,
  ɵɵtwoWayBindingSet,
  ɵɵtwoWayListener,
  ɵɵtwoWayProperty
} from "./chunk-YFFBMBX7.js";

// node_modules/file-saver/dist/FileSaver.min.js
var require_FileSaver_min = __commonJS({
  "node_modules/file-saver/dist/FileSaver.min.js"(exports, module) {
    "use strict";
    (function(a, b) {
      if ("function" == typeof define && define.amd) define([], b);
      else if ("undefined" != typeof exports) b();
      else {
        b(), a.FileSaver = {
          exports: {}
        }.exports;
      }
    })(exports, function() {
      "use strict";
      function b(a2, b2) {
        return "undefined" == typeof b2 ? b2 = {
          autoBom: false
        } : "object" != typeof b2 && (console.warn("Deprecated: Expected third argument to be a object"), b2 = {
          autoBom: !b2
        }), b2.autoBom && /^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(a2.type) ? new Blob(["\uFEFF", a2], {
          type: a2.type
        }) : a2;
      }
      function c(a2, b2, c2) {
        var d2 = new XMLHttpRequest();
        d2.open("GET", a2), d2.responseType = "blob", d2.onload = function() {
          g(d2.response, b2, c2);
        }, d2.onerror = function() {
          console.error("could not download file");
        }, d2.send();
      }
      function d(a2) {
        var b2 = new XMLHttpRequest();
        b2.open("HEAD", a2, false);
        try {
          b2.send();
        } catch (a3) {
        }
        return 200 <= b2.status && 299 >= b2.status;
      }
      function e(a2) {
        try {
          a2.dispatchEvent(new MouseEvent("click"));
        } catch (c2) {
          var b2 = document.createEvent("MouseEvents");
          b2.initMouseEvent("click", true, true, window, 0, 0, 0, 80, 20, false, false, false, false, 0, null), a2.dispatchEvent(b2);
        }
      }
      var f = "object" == typeof window && window.window === window ? window : "object" == typeof self && self.self === self ? self : "object" == typeof global && global.global === global ? global : void 0, a = f.navigator && /Macintosh/.test(navigator.userAgent) && /AppleWebKit/.test(navigator.userAgent) && !/Safari/.test(navigator.userAgent), g = f.saveAs || ("object" != typeof window || window !== f ? function() {
      } : "download" in HTMLAnchorElement.prototype && !a ? function(b2, g2, h) {
        var i = f.URL || f.webkitURL, j = document.createElement("a");
        g2 = g2 || b2.name || "download", j.download = g2, j.rel = "noopener", "string" == typeof b2 ? (j.href = b2, j.origin === location.origin ? e(j) : d(j.href) ? c(b2, g2, h) : e(j, j.target = "_blank")) : (j.href = i.createObjectURL(b2), setTimeout(function() {
          i.revokeObjectURL(j.href);
        }, 4e4), setTimeout(function() {
          e(j);
        }, 0));
      } : "msSaveOrOpenBlob" in navigator ? function(f2, g2, h) {
        if (g2 = g2 || f2.name || "download", "string" != typeof f2) navigator.msSaveOrOpenBlob(b(f2, h), g2);
        else if (d(f2)) c(f2, g2, h);
        else {
          var i = document.createElement("a");
          i.href = f2, i.target = "_blank", setTimeout(function() {
            e(i);
          });
        }
      } : function(b2, d2, e2, g2) {
        if (g2 = g2 || open("", "_blank"), g2 && (g2.document.title = g2.document.body.innerText = "downloading..."), "string" == typeof b2) return c(b2, d2, e2);
        var h = "application/octet-stream" === b2.type, i = /constructor/i.test(f.HTMLElement) || f.safari, j = /CriOS\/[\d]+/.test(navigator.userAgent);
        if ((j || h && i || a) && "undefined" != typeof FileReader) {
          var k = new FileReader();
          k.onloadend = function() {
            var a2 = k.result;
            a2 = j ? a2 : a2.replace(/^data:[^;]*;/, "data:attachment/file;"), g2 ? g2.location.href = a2 : location = a2, g2 = null;
          }, k.readAsDataURL(b2);
        } else {
          var l = f.URL || f.webkitURL, m = l.createObjectURL(b2);
          g2 ? g2.location = m : location.href = m, g2 = null, setTimeout(function() {
            l.revokeObjectURL(m);
          }, 4e4);
        }
      });
      f.saveAs = g.saveAs = g, "undefined" != typeof module && (module.exports = g);
    });
  }
});

// node_modules/papaparse/papaparse.min.js
var require_papaparse_min = __commonJS({
  "node_modules/papaparse/papaparse.min.js"(exports, module) {
    "use strict";
    ((e, t) => {
      "function" == typeof define && define.amd ? define([], t) : "object" == typeof module && "undefined" != typeof exports ? module.exports = t() : e.Papa = t();
    })(exports, function r() {
      var n = "undefined" != typeof self ? self : "undefined" != typeof window ? window : void 0 !== n ? n : {};
      var d, s = !n.document && !!n.postMessage, a = n.IS_PAPA_WORKER || false, o = {}, h = 0, v = {};
      function u(e) {
        this._handle = null, this._finished = false, this._completed = false, this._halted = false, this._input = null, this._baseIndex = 0, this._partialLine = "", this._rowCount = 0, this._start = 0, this._nextChunk = null, this.isFirstChunk = true, this._completeResults = {
          data: [],
          errors: [],
          meta: {}
        }, function(e2) {
          var t = b(e2);
          t.chunkSize = parseInt(t.chunkSize), e2.step || e2.chunk || (t.chunkSize = null);
          this._handle = new i(t), (this._handle.streamer = this)._config = t;
        }.call(this, e), this.parseChunk = function(t, e2) {
          var i2 = parseInt(this._config.skipFirstNLines) || 0;
          if (this.isFirstChunk && 0 < i2) {
            let e3 = this._config.newline;
            e3 || (r2 = this._config.quoteChar || '"', e3 = this._handle.guessLineEndings(t, r2)), t = [...t.split(e3).slice(i2)].join(e3);
          }
          this.isFirstChunk && U(this._config.beforeFirstChunk) && void 0 !== (r2 = this._config.beforeFirstChunk(t)) && (t = r2), this.isFirstChunk = false, this._halted = false;
          var i2 = this._partialLine + t, r2 = (this._partialLine = "", this._handle.parse(i2, this._baseIndex, !this._finished));
          if (!this._handle.paused() && !this._handle.aborted()) {
            t = r2.meta.cursor, i2 = (this._finished || (this._partialLine = i2.substring(t - this._baseIndex), this._baseIndex = t), r2 && r2.data && (this._rowCount += r2.data.length), this._finished || this._config.preview && this._rowCount >= this._config.preview);
            if (a) n.postMessage({
              results: r2,
              workerId: v.WORKER_ID,
              finished: i2
            });
            else if (U(this._config.chunk) && !e2) {
              if (this._config.chunk(r2, this._handle), this._handle.paused() || this._handle.aborted()) return void (this._halted = true);
              this._completeResults = r2 = void 0;
            }
            return this._config.step || this._config.chunk || (this._completeResults.data = this._completeResults.data.concat(r2.data), this._completeResults.errors = this._completeResults.errors.concat(r2.errors), this._completeResults.meta = r2.meta), this._completed || !i2 || !U(this._config.complete) || r2 && r2.meta.aborted || (this._config.complete(this._completeResults, this._input), this._completed = true), i2 || r2 && r2.meta.paused || this._nextChunk(), r2;
          }
          this._halted = true;
        }, this._sendError = function(e2) {
          U(this._config.error) ? this._config.error(e2) : a && this._config.error && n.postMessage({
            workerId: v.WORKER_ID,
            error: e2,
            finished: false
          });
        };
      }
      function f(e) {
        var r2;
        (e = e || {}).chunkSize || (e.chunkSize = v.RemoteChunkSize), u.call(this, e), this._nextChunk = s ? function() {
          this._readChunk(), this._chunkLoaded();
        } : function() {
          this._readChunk();
        }, this.stream = function(e2) {
          this._input = e2, this._nextChunk();
        }, this._readChunk = function() {
          if (this._finished) this._chunkLoaded();
          else {
            if (r2 = new XMLHttpRequest(), this._config.withCredentials && (r2.withCredentials = this._config.withCredentials), s || (r2.onload = y(this._chunkLoaded, this), r2.onerror = y(this._chunkError, this)), r2.open(this._config.downloadRequestBody ? "POST" : "GET", this._input, !s), this._config.downloadRequestHeaders) {
              var e2, t = this._config.downloadRequestHeaders;
              for (e2 in t) r2.setRequestHeader(e2, t[e2]);
            }
            var i2;
            this._config.chunkSize && (i2 = this._start + this._config.chunkSize - 1, r2.setRequestHeader("Range", "bytes=" + this._start + "-" + i2));
            try {
              r2.send(this._config.downloadRequestBody);
            } catch (e3) {
              this._chunkError(e3.message);
            }
            s && 0 === r2.status && this._chunkError();
          }
        }, this._chunkLoaded = function() {
          4 === r2.readyState && (r2.status < 200 || 400 <= r2.status ? this._chunkError() : (this._start += this._config.chunkSize || r2.responseText.length, this._finished = !this._config.chunkSize || this._start >= ((e2) => null !== (e2 = e2.getResponseHeader("Content-Range")) ? parseInt(e2.substring(e2.lastIndexOf("/") + 1)) : -1)(r2), this.parseChunk(r2.responseText)));
        }, this._chunkError = function(e2) {
          e2 = r2.statusText || e2;
          this._sendError(new Error(e2));
        };
      }
      function l(e) {
        (e = e || {}).chunkSize || (e.chunkSize = v.LocalChunkSize), u.call(this, e);
        var i2, r2, n2 = "undefined" != typeof FileReader;
        this.stream = function(e2) {
          this._input = e2, r2 = e2.slice || e2.webkitSlice || e2.mozSlice, n2 ? ((i2 = new FileReader()).onload = y(this._chunkLoaded, this), i2.onerror = y(this._chunkError, this)) : i2 = new FileReaderSync(), this._nextChunk();
        }, this._nextChunk = function() {
          this._finished || this._config.preview && !(this._rowCount < this._config.preview) || this._readChunk();
        }, this._readChunk = function() {
          var e2 = this._input, t = (this._config.chunkSize && (t = Math.min(this._start + this._config.chunkSize, this._input.size), e2 = r2.call(e2, this._start, t)), i2.readAsText(e2, this._config.encoding));
          n2 || this._chunkLoaded({
            target: {
              result: t
            }
          });
        }, this._chunkLoaded = function(e2) {
          this._start += this._config.chunkSize, this._finished = !this._config.chunkSize || this._start >= this._input.size, this.parseChunk(e2.target.result);
        }, this._chunkError = function() {
          this._sendError(i2.error);
        };
      }
      function c(e) {
        var i2;
        u.call(this, e = e || {}), this.stream = function(e2) {
          return i2 = e2, this._nextChunk();
        }, this._nextChunk = function() {
          var e2, t;
          if (!this._finished) return e2 = this._config.chunkSize, i2 = e2 ? (t = i2.substring(0, e2), i2.substring(e2)) : (t = i2, ""), this._finished = !i2, this.parseChunk(t);
        };
      }
      function p(e) {
        u.call(this, e = e || {});
        var t = [], i2 = true, r2 = false;
        this.pause = function() {
          u.prototype.pause.apply(this, arguments), this._input.pause();
        }, this.resume = function() {
          u.prototype.resume.apply(this, arguments), this._input.resume();
        }, this.stream = function(e2) {
          this._input = e2, this._input.on("data", this._streamData), this._input.on("end", this._streamEnd), this._input.on("error", this._streamError);
        }, this._checkIsFinished = function() {
          r2 && 1 === t.length && (this._finished = true);
        }, this._nextChunk = function() {
          this._checkIsFinished(), t.length ? this.parseChunk(t.shift()) : i2 = true;
        }, this._streamData = y(function(e2) {
          try {
            t.push("string" == typeof e2 ? e2 : e2.toString(this._config.encoding)), i2 && (i2 = false, this._checkIsFinished(), this.parseChunk(t.shift()));
          } catch (e3) {
            this._streamError(e3);
          }
        }, this), this._streamError = y(function(e2) {
          this._streamCleanUp(), this._sendError(e2);
        }, this), this._streamEnd = y(function() {
          this._streamCleanUp(), r2 = true, this._streamData("");
        }, this), this._streamCleanUp = y(function() {
          this._input.removeListener("data", this._streamData), this._input.removeListener("end", this._streamEnd), this._input.removeListener("error", this._streamError);
        }, this);
      }
      function i(m2) {
        var n2, s2, a2, t, o2 = Math.pow(2, 53), h2 = -o2, u2 = /^\s*-?(\d+\.?|\.\d+|\d+\.\d+)([eE][-+]?\d+)?\s*$/, d2 = /^((\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z)))$/, i2 = this, r2 = 0, f2 = 0, l2 = false, e = false, c2 = [], p2 = {
          data: [],
          errors: [],
          meta: {}
        };
        function y2(e2) {
          return "greedy" === m2.skipEmptyLines ? "" === e2.join("").trim() : 1 === e2.length && 0 === e2[0].length;
        }
        function g2() {
          if (p2 && a2 && (k("Delimiter", "UndetectableDelimiter", "Unable to auto-detect delimiting character; defaulted to '" + v.DefaultDelimiter + "'"), a2 = false), m2.skipEmptyLines && (p2.data = p2.data.filter(function(e3) {
            return !y2(e3);
          })), _2()) {
            let t3 = function(e3, t4) {
              U(m2.transformHeader) && (e3 = m2.transformHeader(e3, t4)), c2.push(e3);
            };
            var t2 = t3;
            if (p2) if (Array.isArray(p2.data[0])) {
              for (var e2 = 0; _2() && e2 < p2.data.length; e2++) p2.data[e2].forEach(t3);
              p2.data.splice(0, 1);
            } else p2.data.forEach(t3);
          }
          function i3(e3, t3) {
            for (var i4 = m2.header ? {} : [], r4 = 0; r4 < e3.length; r4++) {
              var n3 = r4, s3 = e3[r4], s3 = ((e4, t4) => ((e5) => (m2.dynamicTypingFunction && void 0 === m2.dynamicTyping[e5] && (m2.dynamicTyping[e5] = m2.dynamicTypingFunction(e5)), true === (m2.dynamicTyping[e5] || m2.dynamicTyping)))(e4) ? "true" === t4 || "TRUE" === t4 || "false" !== t4 && "FALSE" !== t4 && (((e5) => {
                if (u2.test(e5)) {
                  e5 = parseFloat(e5);
                  if (h2 < e5 && e5 < o2) return 1;
                }
              })(t4) ? parseFloat(t4) : d2.test(t4) ? new Date(t4) : "" === t4 ? null : t4) : t4)(n3 = m2.header ? r4 >= c2.length ? "__parsed_extra" : c2[r4] : n3, s3 = m2.transform ? m2.transform(s3, n3) : s3);
              "__parsed_extra" === n3 ? (i4[n3] = i4[n3] || [], i4[n3].push(s3)) : i4[n3] = s3;
            }
            return m2.header && (r4 > c2.length ? k("FieldMismatch", "TooManyFields", "Too many fields: expected " + c2.length + " fields but parsed " + r4, f2 + t3) : r4 < c2.length && k("FieldMismatch", "TooFewFields", "Too few fields: expected " + c2.length + " fields but parsed " + r4, f2 + t3)), i4;
          }
          var r3;
          p2 && (m2.header || m2.dynamicTyping || m2.transform) && (r3 = 1, !p2.data.length || Array.isArray(p2.data[0]) ? (p2.data = p2.data.map(i3), r3 = p2.data.length) : p2.data = i3(p2.data, 0), m2.header && p2.meta && (p2.meta.fields = c2), f2 += r3);
        }
        function _2() {
          return m2.header && 0 === c2.length;
        }
        function k(e2, t2, i3, r3) {
          e2 = {
            type: e2,
            code: t2,
            message: i3
          };
          void 0 !== r3 && (e2.row = r3), p2.errors.push(e2);
        }
        U(m2.step) && (t = m2.step, m2.step = function(e2) {
          p2 = e2, _2() ? g2() : (g2(), 0 !== p2.data.length && (r2 += e2.data.length, m2.preview && r2 > m2.preview ? s2.abort() : (p2.data = p2.data[0], t(p2, i2))));
        }), this.parse = function(e2, t2, i3) {
          var r3 = m2.quoteChar || '"', r3 = (m2.newline || (m2.newline = this.guessLineEndings(e2, r3)), a2 = false, m2.delimiter ? U(m2.delimiter) && (m2.delimiter = m2.delimiter(e2), p2.meta.delimiter = m2.delimiter) : ((r3 = ((e3, t3, i4, r4, n3) => {
            var s3, a3, o3, h3;
            n3 = n3 || [",", "	", "|", ";", v.RECORD_SEP, v.UNIT_SEP];
            for (var u3 = 0; u3 < n3.length; u3++) {
              for (var d3, f3 = n3[u3], l3 = 0, c3 = 0, p3 = 0, g3 = (o3 = void 0, new E({
                comments: r4,
                delimiter: f3,
                newline: t3,
                preview: 10
              }).parse(e3)), _3 = 0; _3 < g3.data.length; _3++) i4 && y2(g3.data[_3]) ? p3++ : (d3 = g3.data[_3].length, c3 += d3, void 0 === o3 ? o3 = d3 : 0 < d3 && (l3 += Math.abs(d3 - o3), o3 = d3));
              0 < g3.data.length && (c3 /= g3.data.length - p3), (void 0 === a3 || l3 <= a3) && (void 0 === h3 || h3 < c3) && 1.99 < c3 && (a3 = l3, s3 = f3, h3 = c3);
            }
            return {
              successful: !!(m2.delimiter = s3),
              bestDelimiter: s3
            };
          })(e2, m2.newline, m2.skipEmptyLines, m2.comments, m2.delimitersToGuess)).successful ? m2.delimiter = r3.bestDelimiter : (a2 = true, m2.delimiter = v.DefaultDelimiter), p2.meta.delimiter = m2.delimiter), b(m2));
          return m2.preview && m2.header && r3.preview++, n2 = e2, s2 = new E(r3), p2 = s2.parse(n2, t2, i3), g2(), l2 ? {
            meta: {
              paused: true
            }
          } : p2 || {
            meta: {
              paused: false
            }
          };
        }, this.paused = function() {
          return l2;
        }, this.pause = function() {
          l2 = true, s2.abort(), n2 = U(m2.chunk) ? "" : n2.substring(s2.getCharIndex());
        }, this.resume = function() {
          i2.streamer._halted ? (l2 = false, i2.streamer.parseChunk(n2, true)) : setTimeout(i2.resume, 3);
        }, this.aborted = function() {
          return e;
        }, this.abort = function() {
          e = true, s2.abort(), p2.meta.aborted = true, U(m2.complete) && m2.complete(p2), n2 = "";
        }, this.guessLineEndings = function(e2, t2) {
          e2 = e2.substring(0, 1048576);
          var t2 = new RegExp(P(t2) + "([^]*?)" + P(t2), "gm"), i3 = (e2 = e2.replace(t2, "")).split("\r"), t2 = e2.split("\n"), e2 = 1 < t2.length && t2[0].length < i3[0].length;
          if (1 === i3.length || e2) return "\n";
          for (var r3 = 0, n3 = 0; n3 < i3.length; n3++) "\n" === i3[n3][0] && r3++;
          return r3 >= i3.length / 2 ? "\r\n" : "\r";
        };
      }
      function P(e) {
        return e.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
      }
      function E(C) {
        var S2 = (C = C || {}).delimiter, O = C.newline, x = C.comments, I = C.step, A = C.preview, T2 = C.fastMode, D2 = null, L = false, F = null == C.quoteChar ? '"' : C.quoteChar, j = F;
        if (void 0 !== C.escapeChar && (j = C.escapeChar), ("string" != typeof S2 || -1 < v.BAD_DELIMITERS.indexOf(S2)) && (S2 = ","), x === S2) throw new Error("Comment character same as delimiter");
        true === x ? x = "#" : ("string" != typeof x || -1 < v.BAD_DELIMITERS.indexOf(x)) && (x = false), "\n" !== O && "\r" !== O && "\r\n" !== O && (O = "\n");
        var z = 0, M = false;
        this.parse = function(i2, t, r2) {
          if ("string" != typeof i2) throw new Error("Input must be a string");
          var n2 = i2.length, e = S2.length, s2 = O.length, a2 = x.length, o2 = U(I), h2 = [], u2 = [], d2 = [], f2 = z = 0;
          if (!i2) return w();
          if (T2 || false !== T2 && -1 === i2.indexOf(F)) {
            for (var l2 = i2.split(O), c2 = 0; c2 < l2.length; c2++) {
              if (d2 = l2[c2], z += d2.length, c2 !== l2.length - 1) z += O.length;
              else if (r2) return w();
              if (!x || d2.substring(0, a2) !== x) {
                if (o2) {
                  if (h2 = [], k(d2.split(S2)), R(), M) return w();
                } else k(d2.split(S2));
                if (A && A <= c2) return h2 = h2.slice(0, A), w(true);
              }
            }
            return w();
          }
          for (var p2 = i2.indexOf(S2, z), g2 = i2.indexOf(O, z), _2 = new RegExp(P(j) + P(F), "g"), m2 = i2.indexOf(F, z); ; ) if (i2[z] === F) for (m2 = z, z++; ; ) {
            if (-1 === (m2 = i2.indexOf(F, m2 + 1))) return r2 || u2.push({
              type: "Quotes",
              code: "MissingQuotes",
              message: "Quoted field unterminated",
              row: h2.length,
              index: z
            }), E2();
            if (m2 === n2 - 1) return E2(i2.substring(z, m2).replace(_2, F));
            if (F === j && i2[m2 + 1] === j) m2++;
            else if (F === j || 0 === m2 || i2[m2 - 1] !== j) {
              -1 !== p2 && p2 < m2 + 1 && (p2 = i2.indexOf(S2, m2 + 1));
              var y2 = v2(-1 === (g2 = -1 !== g2 && g2 < m2 + 1 ? i2.indexOf(O, m2 + 1) : g2) ? p2 : Math.min(p2, g2));
              if (i2.substr(m2 + 1 + y2, e) === S2) {
                d2.push(i2.substring(z, m2).replace(_2, F)), i2[z = m2 + 1 + y2 + e] !== F && (m2 = i2.indexOf(F, z)), p2 = i2.indexOf(S2, z), g2 = i2.indexOf(O, z);
                break;
              }
              y2 = v2(g2);
              if (i2.substring(m2 + 1 + y2, m2 + 1 + y2 + s2) === O) {
                if (d2.push(i2.substring(z, m2).replace(_2, F)), b2(m2 + 1 + y2 + s2), p2 = i2.indexOf(S2, z), m2 = i2.indexOf(F, z), o2 && (R(), M)) return w();
                if (A && h2.length >= A) return w(true);
                break;
              }
              u2.push({
                type: "Quotes",
                code: "InvalidQuotes",
                message: "Trailing quote on quoted field is malformed",
                row: h2.length,
                index: z
              }), m2++;
            }
          }
          else if (x && 0 === d2.length && i2.substring(z, z + a2) === x) {
            if (-1 === g2) return w();
            z = g2 + s2, g2 = i2.indexOf(O, z), p2 = i2.indexOf(S2, z);
          } else if (-1 !== p2 && (p2 < g2 || -1 === g2)) d2.push(i2.substring(z, p2)), z = p2 + e, p2 = i2.indexOf(S2, z);
          else {
            if (-1 === g2) break;
            if (d2.push(i2.substring(z, g2)), b2(g2 + s2), o2 && (R(), M)) return w();
            if (A && h2.length >= A) return w(true);
          }
          return E2();
          function k(e2) {
            h2.push(e2), f2 = z;
          }
          function v2(e2) {
            var t2 = 0;
            return t2 = -1 !== e2 && (e2 = i2.substring(m2 + 1, e2)) && "" === e2.trim() ? e2.length : t2;
          }
          function E2(e2) {
            return r2 || (void 0 === e2 && (e2 = i2.substring(z)), d2.push(e2), z = n2, k(d2), o2 && R()), w();
          }
          function b2(e2) {
            z = e2, k(d2), d2 = [], g2 = i2.indexOf(O, z);
          }
          function w(e2) {
            if (C.header && !t && h2.length && !L) {
              var s3 = h2[0], a3 = /* @__PURE__ */ Object.create(null), o3 = new Set(s3);
              let n3 = false;
              for (let r3 = 0; r3 < s3.length; r3++) {
                let i3 = s3[r3];
                if (a3[i3 = U(C.transformHeader) ? C.transformHeader(i3, r3) : i3]) {
                  let e3, t2 = a3[i3];
                  for (; e3 = i3 + "_" + t2, t2++, o3.has(e3); ) ;
                  o3.add(e3), s3[r3] = e3, a3[i3]++, n3 = true, (D2 = null === D2 ? {} : D2)[e3] = i3;
                } else a3[i3] = 1, s3[r3] = i3;
                o3.add(i3);
              }
              n3 && console.warn("Duplicate headers found and renamed."), L = true;
            }
            return {
              data: h2,
              errors: u2,
              meta: {
                delimiter: S2,
                linebreak: O,
                aborted: M,
                truncated: !!e2,
                cursor: f2 + (t || 0),
                renamedHeaders: D2
              }
            };
          }
          function R() {
            I(w()), h2 = [], u2 = [];
          }
        }, this.abort = function() {
          M = true;
        }, this.getCharIndex = function() {
          return z;
        };
      }
      function g(e) {
        var t = e.data, i2 = o[t.workerId], r2 = false;
        if (t.error) i2.userError(t.error, t.file);
        else if (t.results && t.results.data) {
          var n2 = {
            abort: function() {
              r2 = true, _(t.workerId, {
                data: [],
                errors: [],
                meta: {
                  aborted: true
                }
              });
            },
            pause: m,
            resume: m
          };
          if (U(i2.userStep)) {
            for (var s2 = 0; s2 < t.results.data.length && (i2.userStep({
              data: t.results.data[s2],
              errors: t.results.errors,
              meta: t.results.meta
            }, n2), !r2); s2++) ;
            delete t.results;
          } else U(i2.userChunk) && (i2.userChunk(t.results, n2, t.file), delete t.results);
        }
        t.finished && !r2 && _(t.workerId, t.results);
      }
      function _(e, t) {
        var i2 = o[e];
        U(i2.userComplete) && i2.userComplete(t), i2.terminate(), delete o[e];
      }
      function m() {
        throw new Error("Not implemented.");
      }
      function b(e) {
        if ("object" != typeof e || null === e) return e;
        var t, i2 = Array.isArray(e) ? [] : {};
        for (t in e) i2[t] = b(e[t]);
        return i2;
      }
      function y(e, t) {
        return function() {
          e.apply(t, arguments);
        };
      }
      function U(e) {
        return "function" == typeof e;
      }
      return v.parse = function(e, t) {
        var i2 = (t = t || {}).dynamicTyping || false;
        U(i2) && (t.dynamicTypingFunction = i2, i2 = {});
        if (t.dynamicTyping = i2, t.transform = !!U(t.transform) && t.transform, !t.worker || !v.WORKERS_SUPPORTED) return i2 = null, v.NODE_STREAM_INPUT, "string" == typeof e ? (e = ((e2) => 65279 !== e2.charCodeAt(0) ? e2 : e2.slice(1))(e), i2 = new (t.download ? f : c)(t)) : true === e.readable && U(e.read) && U(e.on) ? i2 = new p(t) : (n.File && e instanceof File || e instanceof Object) && (i2 = new l(t)), i2.stream(e);
        (i2 = (() => {
          var e2;
          return !!v.WORKERS_SUPPORTED && (e2 = (() => {
            var e3 = n.URL || n.webkitURL || null, t2 = r.toString();
            return v.BLOB_URL || (v.BLOB_URL = e3.createObjectURL(new Blob(["var global = (function() { if (typeof self !== 'undefined') { return self; } if (typeof window !== 'undefined') { return window; } if (typeof global !== 'undefined') { return global; } return {}; })(); global.IS_PAPA_WORKER=true; ", "(", t2, ")();"], {
              type: "text/javascript"
            })));
          })(), (e2 = new n.Worker(e2)).onmessage = g, e2.id = h++, o[e2.id] = e2);
        })()).userStep = t.step, i2.userChunk = t.chunk, i2.userComplete = t.complete, i2.userError = t.error, t.step = U(t.step), t.chunk = U(t.chunk), t.complete = U(t.complete), t.error = U(t.error), delete t.worker, i2.postMessage({
          input: e,
          config: t,
          workerId: i2.id
        });
      }, v.unparse = function(e, t) {
        var n2 = false, _2 = true, m2 = ",", y2 = "\r\n", s2 = '"', a2 = s2 + s2, i2 = false, r2 = null, o2 = false, h2 = ((() => {
          if ("object" == typeof t) {
            if ("string" != typeof t.delimiter || v.BAD_DELIMITERS.filter(function(e2) {
              return -1 !== t.delimiter.indexOf(e2);
            }).length || (m2 = t.delimiter), "boolean" != typeof t.quotes && "function" != typeof t.quotes && !Array.isArray(t.quotes) || (n2 = t.quotes), "boolean" != typeof t.skipEmptyLines && "string" != typeof t.skipEmptyLines || (i2 = t.skipEmptyLines), "string" == typeof t.newline && (y2 = t.newline), "string" == typeof t.quoteChar && (s2 = t.quoteChar), "boolean" == typeof t.header && (_2 = t.header), Array.isArray(t.columns)) {
              if (0 === t.columns.length) throw new Error("Option columns is empty");
              r2 = t.columns;
            }
            void 0 !== t.escapeChar && (a2 = t.escapeChar + s2), t.escapeFormulae instanceof RegExp ? o2 = t.escapeFormulae : "boolean" == typeof t.escapeFormulae && t.escapeFormulae && (o2 = /^[=+\-@\t\r].*$/);
          }
        })(), new RegExp(P(s2), "g"));
        "string" == typeof e && (e = JSON.parse(e));
        if (Array.isArray(e)) {
          if (!e.length || Array.isArray(e[0])) return u2(null, e, i2);
          if ("object" == typeof e[0]) return u2(r2 || Object.keys(e[0]), e, i2);
        } else if ("object" == typeof e) return "string" == typeof e.data && (e.data = JSON.parse(e.data)), Array.isArray(e.data) && (e.fields || (e.fields = e.meta && e.meta.fields || r2), e.fields || (e.fields = Array.isArray(e.data[0]) ? e.fields : "object" == typeof e.data[0] ? Object.keys(e.data[0]) : []), Array.isArray(e.data[0]) || "object" == typeof e.data[0] || (e.data = [e.data])), u2(e.fields || [], e.data || [], i2);
        throw new Error("Unable to serialize unrecognized input");
        function u2(e2, t2, i3) {
          var r3 = "", n3 = ("string" == typeof e2 && (e2 = JSON.parse(e2)), "string" == typeof t2 && (t2 = JSON.parse(t2)), Array.isArray(e2) && 0 < e2.length), s3 = !Array.isArray(t2[0]);
          if (n3 && _2) {
            for (var a3 = 0; a3 < e2.length; a3++) 0 < a3 && (r3 += m2), r3 += k(e2[a3], a3);
            0 < t2.length && (r3 += y2);
          }
          for (var o3 = 0; o3 < t2.length; o3++) {
            var h3 = (n3 ? e2 : t2[o3]).length, u3 = false, d2 = n3 ? 0 === Object.keys(t2[o3]).length : 0 === t2[o3].length;
            if (i3 && !n3 && (u3 = "greedy" === i3 ? "" === t2[o3].join("").trim() : 1 === t2[o3].length && 0 === t2[o3][0].length), "greedy" === i3 && n3) {
              for (var f2 = [], l2 = 0; l2 < h3; l2++) {
                var c2 = s3 ? e2[l2] : l2;
                f2.push(t2[o3][c2]);
              }
              u3 = "" === f2.join("").trim();
            }
            if (!u3) {
              for (var p2 = 0; p2 < h3; p2++) {
                0 < p2 && !d2 && (r3 += m2);
                var g2 = n3 && s3 ? e2[p2] : p2;
                r3 += k(t2[o3][g2], p2);
              }
              o3 < t2.length - 1 && (!i3 || 0 < h3 && !d2) && (r3 += y2);
            }
          }
          return r3;
        }
        function k(e2, t2) {
          var i3, r3;
          return null == e2 ? "" : e2.constructor === Date ? JSON.stringify(e2).slice(1, 25) : (r3 = false, o2 && "string" == typeof e2 && o2.test(e2) && (e2 = "'" + e2, r3 = true), i3 = e2.toString().replace(h2, a2), (r3 = r3 || true === n2 || "function" == typeof n2 && n2(e2, t2) || Array.isArray(n2) && n2[t2] || ((e3, t3) => {
            for (var i4 = 0; i4 < t3.length; i4++) if (-1 < e3.indexOf(t3[i4])) return true;
            return false;
          })(i3, v.BAD_DELIMITERS) || -1 < i3.indexOf(m2) || " " === i3.charAt(0) || " " === i3.charAt(i3.length - 1)) ? s2 + i3 + s2 : i3);
        }
      }, v.RECORD_SEP = String.fromCharCode(30), v.UNIT_SEP = String.fromCharCode(31), v.BYTE_ORDER_MARK = "\uFEFF", v.BAD_DELIMITERS = ["\r", "\n", '"', v.BYTE_ORDER_MARK], v.WORKERS_SUPPORTED = !s && !!n.Worker, v.NODE_STREAM_INPUT = 1, v.LocalChunkSize = 10485760, v.RemoteChunkSize = 5242880, v.DefaultDelimiter = ",", v.Parser = E, v.ParserHandle = i, v.NetworkStreamer = f, v.FileStreamer = l, v.StringStreamer = c, v.ReadableStreamStreamer = p, n.jQuery && ((d = n.jQuery).fn.parse = function(o2) {
        var i2 = o2.config || {}, h2 = [];
        return this.each(function(e2) {
          if (!("INPUT" === d(this).prop("tagName").toUpperCase() && "file" === d(this).attr("type").toLowerCase() && n.FileReader) || !this.files || 0 === this.files.length) return true;
          for (var t = 0; t < this.files.length; t++) h2.push({
            file: this.files[t],
            inputElem: this,
            instanceConfig: d.extend({}, i2)
          });
        }), e(), this;
        function e() {
          if (0 === h2.length) U(o2.complete) && o2.complete();
          else {
            var e2, t, i3, r2, n2 = h2[0];
            if (U(o2.before)) {
              var s2 = o2.before(n2.file, n2.inputElem);
              if ("object" == typeof s2) {
                if ("abort" === s2.action) return e2 = "AbortError", t = n2.file, i3 = n2.inputElem, r2 = s2.reason, void (U(o2.error) && o2.error({
                  name: e2
                }, t, i3, r2));
                if ("skip" === s2.action) return void u2();
                "object" == typeof s2.config && (n2.instanceConfig = d.extend(n2.instanceConfig, s2.config));
              } else if ("skip" === s2) return void u2();
            }
            var a2 = n2.instanceConfig.complete;
            n2.instanceConfig.complete = function(e3) {
              U(a2) && a2(e3, n2.file, n2.inputElem), u2();
            }, v.parse(n2.file, n2.instanceConfig);
          }
        }
        function u2() {
          h2.splice(0, 1), e();
        }
      }), a && (n.onmessage = function(e) {
        e = e.data;
        void 0 === v.WORKER_ID && e && (v.WORKER_ID = e.workerId);
        "string" == typeof e.input ? n.postMessage({
          workerId: v.WORKER_ID,
          results: v.parse(e.input, e.config),
          finished: true
        }) : (n.File && e.input instanceof File || e.input instanceof Object) && (e = v.parse(e.input, e.config)) && n.postMessage({
          workerId: v.WORKER_ID,
          results: e,
          finished: true
        });
      }), (f.prototype = Object.create(u.prototype)).constructor = f, (l.prototype = Object.create(u.prototype)).constructor = l, (c.prototype = Object.create(c.prototype)).constructor = c, (p.prototype = Object.create(u.prototype)).constructor = p, v;
    });
  }
});

// node_modules/@angular/compiler/fesm2022/compiler.mjs
var _SELECTOR_REGEXP = new RegExp(
  `(\\:not\\()|(([\\.\\#]?)[-\\w]+)|(?:\\[([-.\\w*\\\\$]+)(?:=(["']?)([^\\]"']*)\\5)?\\])|(\\))|(\\s*,\\s*)`,
  // 8: ","
  "g"
);
var CssSelector = class _CssSelector {
  element = null;
  classNames = [];
  /**
   * The selectors are encoded in pairs where:
   * - even locations are attribute names
   * - odd locations are attribute values.
   *
   * Example:
   * Selector: `[key1=value1][key2]` would parse to:
   * ```
   * ['key1', 'value1', 'key2', '']
   * ```
   */
  attrs = [];
  notSelectors = [];
  static parse(selector) {
    const results = [];
    const _addResult = (res, cssSel) => {
      if (cssSel.notSelectors.length > 0 && !cssSel.element && cssSel.classNames.length == 0 && cssSel.attrs.length == 0) {
        cssSel.element = "*";
      }
      res.push(cssSel);
    };
    let cssSelector = new _CssSelector();
    let match2;
    let current = cssSelector;
    let inNot = false;
    _SELECTOR_REGEXP.lastIndex = 0;
    while (match2 = _SELECTOR_REGEXP.exec(selector)) {
      if (match2[
        1
        /* SelectorRegexp.NOT */
      ]) {
        if (inNot) {
          throw new Error("Nesting :not in a selector is not allowed");
        }
        inNot = true;
        current = new _CssSelector();
        cssSelector.notSelectors.push(current);
      }
      const tag = match2[
        2
        /* SelectorRegexp.TAG */
      ];
      if (tag) {
        const prefix = match2[
          3
          /* SelectorRegexp.PREFIX */
        ];
        if (prefix === "#") {
          current.addAttribute("id", tag.slice(1));
        } else if (prefix === ".") {
          current.addClassName(tag.slice(1));
        } else {
          current.setElement(tag);
        }
      }
      const attribute2 = match2[
        4
        /* SelectorRegexp.ATTRIBUTE */
      ];
      if (attribute2) {
        current.addAttribute(current.unescapeAttribute(attribute2), match2[
          6
          /* SelectorRegexp.ATTRIBUTE_VALUE */
        ]);
      }
      if (match2[
        7
        /* SelectorRegexp.NOT_END */
      ]) {
        inNot = false;
        current = cssSelector;
      }
      if (match2[
        8
        /* SelectorRegexp.SEPARATOR */
      ]) {
        if (inNot) {
          throw new Error("Multiple selectors in :not are not supported");
        }
        _addResult(results, cssSelector);
        cssSelector = current = new _CssSelector();
      }
    }
    _addResult(results, cssSelector);
    return results;
  }
  /**
   * Unescape `\$` sequences from the CSS attribute selector.
   *
   * This is needed because `$` can have a special meaning in CSS selectors,
   * but we might want to match an attribute that contains `$`.
   * [MDN web link for more
   * info](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors).
   * @param attr the attribute to unescape.
   * @returns the unescaped string.
   */
  unescapeAttribute(attr) {
    let result = "";
    let escaping = false;
    for (let i = 0; i < attr.length; i++) {
      const char = attr.charAt(i);
      if (char === "\\") {
        escaping = true;
        continue;
      }
      if (char === "$" && !escaping) {
        throw new Error(`Error in attribute selector "${attr}". Unescaped "$" is not supported. Please escape with "\\$".`);
      }
      escaping = false;
      result += char;
    }
    return result;
  }
  /**
   * Escape `$` sequences from the CSS attribute selector.
   *
   * This is needed because `$` can have a special meaning in CSS selectors,
   * with this method we are escaping `$` with `\$'.
   * [MDN web link for more
   * info](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors).
   * @param attr the attribute to escape.
   * @returns the escaped string.
   */
  escapeAttribute(attr) {
    return attr.replace(/\\/g, "\\\\").replace(/\$/g, "\\$");
  }
  isElementSelector() {
    return this.hasElementSelector() && this.classNames.length == 0 && this.attrs.length == 0 && this.notSelectors.length === 0;
  }
  hasElementSelector() {
    return !!this.element;
  }
  setElement(element2 = null) {
    this.element = element2;
  }
  getAttrs() {
    const result = [];
    if (this.classNames.length > 0) {
      result.push("class", this.classNames.join(" "));
    }
    return result.concat(this.attrs);
  }
  addAttribute(name, value = "") {
    this.attrs.push(name, value && value.toLowerCase() || "");
  }
  addClassName(name) {
    this.classNames.push(name.toLowerCase());
  }
  toString() {
    let res = this.element || "";
    if (this.classNames) {
      this.classNames.forEach((klass) => res += `.${klass}`);
    }
    if (this.attrs) {
      for (let i = 0; i < this.attrs.length; i += 2) {
        const name = this.escapeAttribute(this.attrs[i]);
        const value = this.attrs[i + 1];
        res += `[${name}${value ? "=" + value : ""}]`;
      }
    }
    this.notSelectors.forEach((notSelector) => res += `:not(${notSelector})`);
    return res;
  }
};
var SelectorMatcher = class _SelectorMatcher {
  static createNotMatcher(notSelectors) {
    const notMatcher = new _SelectorMatcher();
    notMatcher.addSelectables(notSelectors, null);
    return notMatcher;
  }
  _elementMap = /* @__PURE__ */ new Map();
  _elementPartialMap = /* @__PURE__ */ new Map();
  _classMap = /* @__PURE__ */ new Map();
  _classPartialMap = /* @__PURE__ */ new Map();
  _attrValueMap = /* @__PURE__ */ new Map();
  _attrValuePartialMap = /* @__PURE__ */ new Map();
  _listContexts = [];
  addSelectables(cssSelectors, callbackCtxt) {
    let listContext = null;
    if (cssSelectors.length > 1) {
      listContext = new SelectorListContext(cssSelectors);
      this._listContexts.push(listContext);
    }
    for (let i = 0; i < cssSelectors.length; i++) {
      this._addSelectable(cssSelectors[i], callbackCtxt, listContext);
    }
  }
  /**
   * Add an object that can be found later on by calling `match`.
   * @param cssSelector A css selector
   * @param callbackCtxt An opaque object that will be given to the callback of the `match` function
   */
  _addSelectable(cssSelector, callbackCtxt, listContext) {
    let matcher = this;
    const element2 = cssSelector.element;
    const classNames = cssSelector.classNames;
    const attrs = cssSelector.attrs;
    const selectable = new SelectorContext(cssSelector, callbackCtxt, listContext);
    if (element2) {
      const isTerminal = attrs.length === 0 && classNames.length === 0;
      if (isTerminal) {
        this._addTerminal(matcher._elementMap, element2, selectable);
      } else {
        matcher = this._addPartial(matcher._elementPartialMap, element2);
      }
    }
    if (classNames) {
      for (let i = 0; i < classNames.length; i++) {
        const isTerminal = attrs.length === 0 && i === classNames.length - 1;
        const className = classNames[i];
        if (isTerminal) {
          this._addTerminal(matcher._classMap, className, selectable);
        } else {
          matcher = this._addPartial(matcher._classPartialMap, className);
        }
      }
    }
    if (attrs) {
      for (let i = 0; i < attrs.length; i += 2) {
        const isTerminal = i === attrs.length - 2;
        const name = attrs[i];
        const value = attrs[i + 1];
        if (isTerminal) {
          const terminalMap = matcher._attrValueMap;
          let terminalValuesMap = terminalMap.get(name);
          if (!terminalValuesMap) {
            terminalValuesMap = /* @__PURE__ */ new Map();
            terminalMap.set(name, terminalValuesMap);
          }
          this._addTerminal(terminalValuesMap, value, selectable);
        } else {
          const partialMap = matcher._attrValuePartialMap;
          let partialValuesMap = partialMap.get(name);
          if (!partialValuesMap) {
            partialValuesMap = /* @__PURE__ */ new Map();
            partialMap.set(name, partialValuesMap);
          }
          matcher = this._addPartial(partialValuesMap, value);
        }
      }
    }
  }
  _addTerminal(map2, name, selectable) {
    let terminalList = map2.get(name);
    if (!terminalList) {
      terminalList = [];
      map2.set(name, terminalList);
    }
    terminalList.push(selectable);
  }
  _addPartial(map2, name) {
    let matcher = map2.get(name);
    if (!matcher) {
      matcher = new _SelectorMatcher();
      map2.set(name, matcher);
    }
    return matcher;
  }
  /**
   * Find the objects that have been added via `addSelectable`
   * whose css selector is contained in the given css selector.
   * @param cssSelector A css selector
   * @param matchedCallback This callback will be called with the object handed into `addSelectable`
   * @return boolean true if a match was found
   */
  match(cssSelector, matchedCallback) {
    let result = false;
    const element2 = cssSelector.element;
    const classNames = cssSelector.classNames;
    const attrs = cssSelector.attrs;
    for (let i = 0; i < this._listContexts.length; i++) {
      this._listContexts[i].alreadyMatched = false;
    }
    result = this._matchTerminal(this._elementMap, element2, cssSelector, matchedCallback) || result;
    result = this._matchPartial(this._elementPartialMap, element2, cssSelector, matchedCallback) || result;
    if (classNames) {
      for (let i = 0; i < classNames.length; i++) {
        const className = classNames[i];
        result = this._matchTerminal(this._classMap, className, cssSelector, matchedCallback) || result;
        result = this._matchPartial(this._classPartialMap, className, cssSelector, matchedCallback) || result;
      }
    }
    if (attrs) {
      for (let i = 0; i < attrs.length; i += 2) {
        const name = attrs[i];
        const value = attrs[i + 1];
        const terminalValuesMap = this._attrValueMap.get(name);
        if (value) {
          result = this._matchTerminal(terminalValuesMap, "", cssSelector, matchedCallback) || result;
        }
        result = this._matchTerminal(terminalValuesMap, value, cssSelector, matchedCallback) || result;
        const partialValuesMap = this._attrValuePartialMap.get(name);
        if (value) {
          result = this._matchPartial(partialValuesMap, "", cssSelector, matchedCallback) || result;
        }
        result = this._matchPartial(partialValuesMap, value, cssSelector, matchedCallback) || result;
      }
    }
    return result;
  }
  /** @internal */
  _matchTerminal(map2, name, cssSelector, matchedCallback) {
    if (!map2 || typeof name !== "string") {
      return false;
    }
    let selectables = map2.get(name) || [];
    const starSelectables = map2.get("*");
    if (starSelectables) {
      selectables = selectables.concat(starSelectables);
    }
    if (selectables.length === 0) {
      return false;
    }
    let selectable;
    let result = false;
    for (let i = 0; i < selectables.length; i++) {
      selectable = selectables[i];
      result = selectable.finalize(cssSelector, matchedCallback) || result;
    }
    return result;
  }
  /** @internal */
  _matchPartial(map2, name, cssSelector, matchedCallback) {
    if (!map2 || typeof name !== "string") {
      return false;
    }
    const nestedSelector = map2.get(name);
    if (!nestedSelector) {
      return false;
    }
    return nestedSelector.match(cssSelector, matchedCallback);
  }
};
var SelectorListContext = class {
  selectors;
  alreadyMatched = false;
  constructor(selectors) {
    this.selectors = selectors;
  }
};
var SelectorContext = class {
  selector;
  cbContext;
  listContext;
  notSelectors;
  constructor(selector, cbContext, listContext) {
    this.selector = selector;
    this.cbContext = cbContext;
    this.listContext = listContext;
    this.notSelectors = selector.notSelectors;
  }
  finalize(cssSelector, callback) {
    let result = true;
    if (this.notSelectors.length > 0 && (!this.listContext || !this.listContext.alreadyMatched)) {
      const notMatcher = SelectorMatcher.createNotMatcher(this.notSelectors);
      result = !notMatcher.match(cssSelector, null);
    }
    if (result && callback && (!this.listContext || !this.listContext.alreadyMatched)) {
      if (this.listContext) {
        this.listContext.alreadyMatched = true;
      }
      callback(this.selector, this.cbContext);
    }
    return result;
  }
};
var ViewEncapsulation$1;
(function(ViewEncapsulation3) {
  ViewEncapsulation3[ViewEncapsulation3["Emulated"] = 0] = "Emulated";
  ViewEncapsulation3[ViewEncapsulation3["None"] = 2] = "None";
  ViewEncapsulation3[ViewEncapsulation3["ShadowDom"] = 3] = "ShadowDom";
})(ViewEncapsulation$1 || (ViewEncapsulation$1 = {}));
var ChangeDetectionStrategy;
(function(ChangeDetectionStrategy2) {
  ChangeDetectionStrategy2[ChangeDetectionStrategy2["OnPush"] = 0] = "OnPush";
  ChangeDetectionStrategy2[ChangeDetectionStrategy2["Default"] = 1] = "Default";
})(ChangeDetectionStrategy || (ChangeDetectionStrategy = {}));
var InputFlags;
(function(InputFlags2) {
  InputFlags2[InputFlags2["None"] = 0] = "None";
  InputFlags2[InputFlags2["SignalBased"] = 1] = "SignalBased";
  InputFlags2[InputFlags2["HasDecoratorInputTransform"] = 2] = "HasDecoratorInputTransform";
})(InputFlags || (InputFlags = {}));
var CUSTOM_ELEMENTS_SCHEMA = {
  name: "custom-elements"
};
var NO_ERRORS_SCHEMA = {
  name: "no-errors-schema"
};
var SecurityContext2;
(function(SecurityContext3) {
  SecurityContext3[SecurityContext3["NONE"] = 0] = "NONE";
  SecurityContext3[SecurityContext3["HTML"] = 1] = "HTML";
  SecurityContext3[SecurityContext3["STYLE"] = 2] = "STYLE";
  SecurityContext3[SecurityContext3["SCRIPT"] = 3] = "SCRIPT";
  SecurityContext3[SecurityContext3["URL"] = 4] = "URL";
  SecurityContext3[SecurityContext3["RESOURCE_URL"] = 5] = "RESOURCE_URL";
})(SecurityContext2 || (SecurityContext2 = {}));
var MissingTranslationStrategy;
(function(MissingTranslationStrategy2) {
  MissingTranslationStrategy2[MissingTranslationStrategy2["Error"] = 0] = "Error";
  MissingTranslationStrategy2[MissingTranslationStrategy2["Warning"] = 1] = "Warning";
  MissingTranslationStrategy2[MissingTranslationStrategy2["Ignore"] = 2] = "Ignore";
})(MissingTranslationStrategy || (MissingTranslationStrategy = {}));
function parserSelectorToSimpleSelector(selector) {
  const classes = selector.classNames && selector.classNames.length ? [8, ...selector.classNames] : [];
  const elementName = selector.element && selector.element !== "*" ? selector.element : "";
  return [elementName, ...selector.attrs, ...classes];
}
function parserSelectorToNegativeSelector(selector) {
  const classes = selector.classNames && selector.classNames.length ? [8, ...selector.classNames] : [];
  if (selector.element) {
    return [1 | 4, selector.element, ...selector.attrs, ...classes];
  } else if (selector.attrs.length) {
    return [1 | 2, ...selector.attrs, ...classes];
  } else {
    return selector.classNames && selector.classNames.length ? [1 | 8, ...selector.classNames] : [];
  }
}
function parserSelectorToR3Selector(selector) {
  const positive = parserSelectorToSimpleSelector(selector);
  const negative = selector.notSelectors && selector.notSelectors.length ? selector.notSelectors.map((notSelector) => parserSelectorToNegativeSelector(notSelector)) : [];
  return positive.concat(...negative);
}
function parseSelectorToR3Selector(selector) {
  return selector ? CssSelector.parse(selector).map(parserSelectorToR3Selector) : [];
}
var FactoryTarget;
(function(FactoryTarget2) {
  FactoryTarget2[FactoryTarget2["Directive"] = 0] = "Directive";
  FactoryTarget2[FactoryTarget2["Component"] = 1] = "Component";
  FactoryTarget2[FactoryTarget2["Injectable"] = 2] = "Injectable";
  FactoryTarget2[FactoryTarget2["Pipe"] = 3] = "Pipe";
  FactoryTarget2[FactoryTarget2["NgModule"] = 4] = "NgModule";
})(FactoryTarget || (FactoryTarget = {}));
var R3TemplateDependencyKind$1;
(function(R3TemplateDependencyKind2) {
  R3TemplateDependencyKind2[R3TemplateDependencyKind2["Directive"] = 0] = "Directive";
  R3TemplateDependencyKind2[R3TemplateDependencyKind2["Pipe"] = 1] = "Pipe";
  R3TemplateDependencyKind2[R3TemplateDependencyKind2["NgModule"] = 2] = "NgModule";
})(R3TemplateDependencyKind$1 || (R3TemplateDependencyKind$1 = {}));
var ViewEncapsulation2;
(function(ViewEncapsulation3) {
  ViewEncapsulation3[ViewEncapsulation3["Emulated"] = 0] = "Emulated";
  ViewEncapsulation3[ViewEncapsulation3["None"] = 2] = "None";
  ViewEncapsulation3[ViewEncapsulation3["ShadowDom"] = 3] = "ShadowDom";
})(ViewEncapsulation2 || (ViewEncapsulation2 = {}));
var textEncoder;
function computeDigest(message) {
  return sha1(serializeNodes(message.nodes).join("") + `[${message.meaning}]`);
}
function decimalDigest(message) {
  return message.id || computeDecimalDigest(message);
}
function computeDecimalDigest(message) {
  const visitor = new _SerializerIgnoreIcuExpVisitor();
  const parts = message.nodes.map((a) => a.visit(visitor, null));
  return computeMsgId(parts.join(""), message.meaning);
}
var _SerializerVisitor = class {
  visitText(text3, context) {
    return text3.value;
  }
  visitContainer(container, context) {
    return `[${container.children.map((child) => child.visit(this)).join(", ")}]`;
  }
  visitIcu(icu, context) {
    const strCases = Object.keys(icu.cases).map((k) => `${k} {${icu.cases[k].visit(this)}}`);
    return `{${icu.expression}, ${icu.type}, ${strCases.join(", ")}}`;
  }
  visitTagPlaceholder(ph, context) {
    return ph.isVoid ? `<ph tag name="${ph.startName}"/>` : `<ph tag name="${ph.startName}">${ph.children.map((child) => child.visit(this)).join(", ")}</ph name="${ph.closeName}">`;
  }
  visitPlaceholder(ph, context) {
    return ph.value ? `<ph name="${ph.name}">${ph.value}</ph>` : `<ph name="${ph.name}"/>`;
  }
  visitIcuPlaceholder(ph, context) {
    return `<ph icu name="${ph.name}">${ph.value.visit(this)}</ph>`;
  }
  visitBlockPlaceholder(ph, context) {
    return `<ph block name="${ph.startName}">${ph.children.map((child) => child.visit(this)).join(", ")}</ph name="${ph.closeName}">`;
  }
};
var serializerVisitor$1 = new _SerializerVisitor();
function serializeNodes(nodes) {
  return nodes.map((a) => a.visit(serializerVisitor$1, null));
}
var _SerializerIgnoreIcuExpVisitor = class extends _SerializerVisitor {
  visitIcu(icu) {
    let strCases = Object.keys(icu.cases).map((k) => `${k} {${icu.cases[k].visit(this)}}`);
    return `{${icu.type}, ${strCases.join(", ")}}`;
  }
};
function sha1(str) {
  textEncoder ??= new TextEncoder();
  const utf8 = [...textEncoder.encode(str)];
  const words32 = bytesToWords32(utf8, Endian.Big);
  const len = utf8.length * 8;
  const w = new Uint32Array(80);
  let a = 1732584193, b = 4023233417, c = 2562383102, d = 271733878, e = 3285377520;
  words32[len >> 5] |= 128 << 24 - len % 32;
  words32[(len + 64 >> 9 << 4) + 15] = len;
  for (let i = 0; i < words32.length; i += 16) {
    const h0 = a, h1 = b, h2 = c, h3 = d, h4 = e;
    for (let j = 0; j < 80; j++) {
      if (j < 16) {
        w[j] = words32[i + j];
      } else {
        w[j] = rol32(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);
      }
      const fkVal = fk(j, b, c, d);
      const f = fkVal[0];
      const k = fkVal[1];
      const temp = [rol32(a, 5), f, e, k, w[j]].reduce(add32);
      e = d;
      d = c;
      c = rol32(b, 30);
      b = a;
      a = temp;
    }
    a = add32(a, h0);
    b = add32(b, h1);
    c = add32(c, h2);
    d = add32(d, h3);
    e = add32(e, h4);
  }
  return toHexU32(a) + toHexU32(b) + toHexU32(c) + toHexU32(d) + toHexU32(e);
}
function toHexU32(value) {
  return (value >>> 0).toString(16).padStart(8, "0");
}
function fk(index, b, c, d) {
  if (index < 20) {
    return [b & c | ~b & d, 1518500249];
  }
  if (index < 40) {
    return [b ^ c ^ d, 1859775393];
  }
  if (index < 60) {
    return [b & c | b & d | c & d, 2400959708];
  }
  return [b ^ c ^ d, 3395469782];
}
function fingerprint(str) {
  textEncoder ??= new TextEncoder();
  const utf8 = textEncoder.encode(str);
  const view = new DataView(utf8.buffer, utf8.byteOffset, utf8.byteLength);
  let hi = hash32(view, utf8.length, 0);
  let lo = hash32(view, utf8.length, 102072);
  if (hi == 0 && (lo == 0 || lo == 1)) {
    hi = hi ^ 319790063;
    lo = lo ^ -1801410264;
  }
  return BigInt.asUintN(32, BigInt(hi)) << BigInt(32) | BigInt.asUintN(32, BigInt(lo));
}
function computeMsgId(msg, meaning = "") {
  let msgFingerprint = fingerprint(msg);
  if (meaning) {
    msgFingerprint = BigInt.asUintN(64, msgFingerprint << BigInt(1)) | msgFingerprint >> BigInt(63) & BigInt(1);
    msgFingerprint += fingerprint(meaning);
  }
  return BigInt.asUintN(63, msgFingerprint).toString();
}
function hash32(view, length, c) {
  let a = 2654435769, b = 2654435769;
  let index = 0;
  const end = length - 12;
  for (; index <= end; index += 12) {
    a += view.getUint32(index, true);
    b += view.getUint32(index + 4, true);
    c += view.getUint32(index + 8, true);
    const res = mix(a, b, c);
    a = res[0], b = res[1], c = res[2];
  }
  const remainder = length - index;
  c += length;
  if (remainder >= 4) {
    a += view.getUint32(index, true);
    index += 4;
    if (remainder >= 8) {
      b += view.getUint32(index, true);
      index += 4;
      if (remainder >= 9) {
        c += view.getUint8(index++) << 8;
      }
      if (remainder >= 10) {
        c += view.getUint8(index++) << 16;
      }
      if (remainder === 11) {
        c += view.getUint8(index++) << 24;
      }
    } else {
      if (remainder >= 5) {
        b += view.getUint8(index++);
      }
      if (remainder >= 6) {
        b += view.getUint8(index++) << 8;
      }
      if (remainder === 7) {
        b += view.getUint8(index++) << 16;
      }
    }
  } else {
    if (remainder >= 1) {
      a += view.getUint8(index++);
    }
    if (remainder >= 2) {
      a += view.getUint8(index++) << 8;
    }
    if (remainder === 3) {
      a += view.getUint8(index++) << 16;
    }
  }
  return mix(a, b, c)[2];
}
function mix(a, b, c) {
  a -= b;
  a -= c;
  a ^= c >>> 13;
  b -= c;
  b -= a;
  b ^= a << 8;
  c -= a;
  c -= b;
  c ^= b >>> 13;
  a -= b;
  a -= c;
  a ^= c >>> 12;
  b -= c;
  b -= a;
  b ^= a << 16;
  c -= a;
  c -= b;
  c ^= b >>> 5;
  a -= b;
  a -= c;
  a ^= c >>> 3;
  b -= c;
  b -= a;
  b ^= a << 10;
  c -= a;
  c -= b;
  c ^= b >>> 15;
  return [a, b, c];
}
var Endian;
(function(Endian2) {
  Endian2[Endian2["Little"] = 0] = "Little";
  Endian2[Endian2["Big"] = 1] = "Big";
})(Endian || (Endian = {}));
function add32(a, b) {
  return add32to64(a, b)[1];
}
function add32to64(a, b) {
  const low = (a & 65535) + (b & 65535);
  const high = (a >>> 16) + (b >>> 16) + (low >>> 16);
  return [high >>> 16, high << 16 | low & 65535];
}
function rol32(a, count) {
  return a << count | a >>> 32 - count;
}
function bytesToWords32(bytes, endian) {
  const size = bytes.length + 3 >>> 2;
  const words32 = [];
  for (let i = 0; i < size; i++) {
    words32[i] = wordAt(bytes, i * 4, endian);
  }
  return words32;
}
function byteAt(bytes, index) {
  return index >= bytes.length ? 0 : bytes[index];
}
function wordAt(bytes, index, endian) {
  let word = 0;
  if (endian === Endian.Big) {
    for (let i = 0; i < 4; i++) {
      word += byteAt(bytes, index + i) << 24 - 8 * i;
    }
  } else {
    for (let i = 0; i < 4; i++) {
      word += byteAt(bytes, index + i) << 8 * i;
    }
  }
  return word;
}
var TypeModifier;
(function(TypeModifier2) {
  TypeModifier2[TypeModifier2["None"] = 0] = "None";
  TypeModifier2[TypeModifier2["Const"] = 1] = "Const";
})(TypeModifier || (TypeModifier = {}));
var Type = class {
  modifiers;
  constructor(modifiers = TypeModifier.None) {
    this.modifiers = modifiers;
  }
  hasModifier(modifier) {
    return (this.modifiers & modifier) !== 0;
  }
};
var BuiltinTypeName;
(function(BuiltinTypeName2) {
  BuiltinTypeName2[BuiltinTypeName2["Dynamic"] = 0] = "Dynamic";
  BuiltinTypeName2[BuiltinTypeName2["Bool"] = 1] = "Bool";
  BuiltinTypeName2[BuiltinTypeName2["String"] = 2] = "String";
  BuiltinTypeName2[BuiltinTypeName2["Int"] = 3] = "Int";
  BuiltinTypeName2[BuiltinTypeName2["Number"] = 4] = "Number";
  BuiltinTypeName2[BuiltinTypeName2["Function"] = 5] = "Function";
  BuiltinTypeName2[BuiltinTypeName2["Inferred"] = 6] = "Inferred";
  BuiltinTypeName2[BuiltinTypeName2["None"] = 7] = "None";
})(BuiltinTypeName || (BuiltinTypeName = {}));
var BuiltinType = class extends Type {
  name;
  constructor(name, modifiers) {
    super(modifiers);
    this.name = name;
  }
  visitType(visitor, context) {
    return visitor.visitBuiltinType(this, context);
  }
};
var ExpressionType = class extends Type {
  value;
  typeParams;
  constructor(value, modifiers, typeParams = null) {
    super(modifiers);
    this.value = value;
    this.typeParams = typeParams;
  }
  visitType(visitor, context) {
    return visitor.visitExpressionType(this, context);
  }
};
var DYNAMIC_TYPE = new BuiltinType(BuiltinTypeName.Dynamic);
var INFERRED_TYPE = new BuiltinType(BuiltinTypeName.Inferred);
var BOOL_TYPE = new BuiltinType(BuiltinTypeName.Bool);
var INT_TYPE = new BuiltinType(BuiltinTypeName.Int);
var NUMBER_TYPE = new BuiltinType(BuiltinTypeName.Number);
var STRING_TYPE = new BuiltinType(BuiltinTypeName.String);
var FUNCTION_TYPE = new BuiltinType(BuiltinTypeName.Function);
var NONE_TYPE = new BuiltinType(BuiltinTypeName.None);
var UnaryOperator;
(function(UnaryOperator2) {
  UnaryOperator2[UnaryOperator2["Minus"] = 0] = "Minus";
  UnaryOperator2[UnaryOperator2["Plus"] = 1] = "Plus";
})(UnaryOperator || (UnaryOperator = {}));
var BinaryOperator;
(function(BinaryOperator2) {
  BinaryOperator2[BinaryOperator2["Equals"] = 0] = "Equals";
  BinaryOperator2[BinaryOperator2["NotEquals"] = 1] = "NotEquals";
  BinaryOperator2[BinaryOperator2["Identical"] = 2] = "Identical";
  BinaryOperator2[BinaryOperator2["NotIdentical"] = 3] = "NotIdentical";
  BinaryOperator2[BinaryOperator2["Minus"] = 4] = "Minus";
  BinaryOperator2[BinaryOperator2["Plus"] = 5] = "Plus";
  BinaryOperator2[BinaryOperator2["Divide"] = 6] = "Divide";
  BinaryOperator2[BinaryOperator2["Multiply"] = 7] = "Multiply";
  BinaryOperator2[BinaryOperator2["Modulo"] = 8] = "Modulo";
  BinaryOperator2[BinaryOperator2["And"] = 9] = "And";
  BinaryOperator2[BinaryOperator2["Or"] = 10] = "Or";
  BinaryOperator2[BinaryOperator2["BitwiseOr"] = 11] = "BitwiseOr";
  BinaryOperator2[BinaryOperator2["BitwiseAnd"] = 12] = "BitwiseAnd";
  BinaryOperator2[BinaryOperator2["Lower"] = 13] = "Lower";
  BinaryOperator2[BinaryOperator2["LowerEquals"] = 14] = "LowerEquals";
  BinaryOperator2[BinaryOperator2["Bigger"] = 15] = "Bigger";
  BinaryOperator2[BinaryOperator2["BiggerEquals"] = 16] = "BiggerEquals";
  BinaryOperator2[BinaryOperator2["NullishCoalesce"] = 17] = "NullishCoalesce";
})(BinaryOperator || (BinaryOperator = {}));
function nullSafeIsEquivalent(base, other) {
  if (base == null || other == null) {
    return base == other;
  }
  return base.isEquivalent(other);
}
function areAllEquivalentPredicate(base, other, equivalentPredicate) {
  const len = base.length;
  if (len !== other.length) {
    return false;
  }
  for (let i = 0; i < len; i++) {
    if (!equivalentPredicate(base[i], other[i])) {
      return false;
    }
  }
  return true;
}
function areAllEquivalent(base, other) {
  return areAllEquivalentPredicate(base, other, (baseElement2, otherElement) => baseElement2.isEquivalent(otherElement));
}
var Expression = class {
  type;
  sourceSpan;
  constructor(type, sourceSpan) {
    this.type = type || null;
    this.sourceSpan = sourceSpan || null;
  }
  prop(name, sourceSpan) {
    return new ReadPropExpr(this, name, null, sourceSpan);
  }
  key(index, type, sourceSpan) {
    return new ReadKeyExpr(this, index, type, sourceSpan);
  }
  callFn(params, sourceSpan, pure) {
    return new InvokeFunctionExpr(this, params, null, sourceSpan, pure);
  }
  instantiate(params, type, sourceSpan) {
    return new InstantiateExpr(this, params, type, sourceSpan);
  }
  conditional(trueCase, falseCase = null, sourceSpan) {
    return new ConditionalExpr(this, trueCase, falseCase, null, sourceSpan);
  }
  equals(rhs, sourceSpan) {
    return new BinaryOperatorExpr(BinaryOperator.Equals, this, rhs, null, sourceSpan);
  }
  notEquals(rhs, sourceSpan) {
    return new BinaryOperatorExpr(BinaryOperator.NotEquals, this, rhs, null, sourceSpan);
  }
  identical(rhs, sourceSpan) {
    return new BinaryOperatorExpr(BinaryOperator.Identical, this, rhs, null, sourceSpan);
  }
  notIdentical(rhs, sourceSpan) {
    return new BinaryOperatorExpr(BinaryOperator.NotIdentical, this, rhs, null, sourceSpan);
  }
  minus(rhs, sourceSpan) {
    return new BinaryOperatorExpr(BinaryOperator.Minus, this, rhs, null, sourceSpan);
  }
  plus(rhs, sourceSpan) {
    return new BinaryOperatorExpr(BinaryOperator.Plus, this, rhs, null, sourceSpan);
  }
  divide(rhs, sourceSpan) {
    return new BinaryOperatorExpr(BinaryOperator.Divide, this, rhs, null, sourceSpan);
  }
  multiply(rhs, sourceSpan) {
    return new BinaryOperatorExpr(BinaryOperator.Multiply, this, rhs, null, sourceSpan);
  }
  modulo(rhs, sourceSpan) {
    return new BinaryOperatorExpr(BinaryOperator.Modulo, this, rhs, null, sourceSpan);
  }
  and(rhs, sourceSpan) {
    return new BinaryOperatorExpr(BinaryOperator.And, this, rhs, null, sourceSpan);
  }
  bitwiseOr(rhs, sourceSpan, parens = true) {
    return new BinaryOperatorExpr(BinaryOperator.BitwiseOr, this, rhs, null, sourceSpan, parens);
  }
  bitwiseAnd(rhs, sourceSpan, parens = true) {
    return new BinaryOperatorExpr(BinaryOperator.BitwiseAnd, this, rhs, null, sourceSpan, parens);
  }
  or(rhs, sourceSpan) {
    return new BinaryOperatorExpr(BinaryOperator.Or, this, rhs, null, sourceSpan);
  }
  lower(rhs, sourceSpan) {
    return new BinaryOperatorExpr(BinaryOperator.Lower, this, rhs, null, sourceSpan);
  }
  lowerEquals(rhs, sourceSpan) {
    return new BinaryOperatorExpr(BinaryOperator.LowerEquals, this, rhs, null, sourceSpan);
  }
  bigger(rhs, sourceSpan) {
    return new BinaryOperatorExpr(BinaryOperator.Bigger, this, rhs, null, sourceSpan);
  }
  biggerEquals(rhs, sourceSpan) {
    return new BinaryOperatorExpr(BinaryOperator.BiggerEquals, this, rhs, null, sourceSpan);
  }
  isBlank(sourceSpan) {
    return this.equals(TYPED_NULL_EXPR, sourceSpan);
  }
  nullishCoalesce(rhs, sourceSpan) {
    return new BinaryOperatorExpr(BinaryOperator.NullishCoalesce, this, rhs, null, sourceSpan);
  }
  toStmt() {
    return new ExpressionStatement(this, null);
  }
};
var ReadVarExpr = class _ReadVarExpr extends Expression {
  name;
  constructor(name, type, sourceSpan) {
    super(type, sourceSpan);
    this.name = name;
  }
  isEquivalent(e) {
    return e instanceof _ReadVarExpr && this.name === e.name;
  }
  isConstant() {
    return false;
  }
  visitExpression(visitor, context) {
    return visitor.visitReadVarExpr(this, context);
  }
  clone() {
    return new _ReadVarExpr(this.name, this.type, this.sourceSpan);
  }
  set(value) {
    return new WriteVarExpr(this.name, value, null, this.sourceSpan);
  }
};
var TypeofExpr = class _TypeofExpr extends Expression {
  expr;
  constructor(expr, type, sourceSpan) {
    super(type, sourceSpan);
    this.expr = expr;
  }
  visitExpression(visitor, context) {
    return visitor.visitTypeofExpr(this, context);
  }
  isEquivalent(e) {
    return e instanceof _TypeofExpr && e.expr.isEquivalent(this.expr);
  }
  isConstant() {
    return this.expr.isConstant();
  }
  clone() {
    return new _TypeofExpr(this.expr.clone());
  }
};
var WrappedNodeExpr = class _WrappedNodeExpr extends Expression {
  node;
  constructor(node, type, sourceSpan) {
    super(type, sourceSpan);
    this.node = node;
  }
  isEquivalent(e) {
    return e instanceof _WrappedNodeExpr && this.node === e.node;
  }
  isConstant() {
    return false;
  }
  visitExpression(visitor, context) {
    return visitor.visitWrappedNodeExpr(this, context);
  }
  clone() {
    return new _WrappedNodeExpr(this.node, this.type, this.sourceSpan);
  }
};
var WriteVarExpr = class _WriteVarExpr extends Expression {
  name;
  value;
  constructor(name, value, type, sourceSpan) {
    super(type || value.type, sourceSpan);
    this.name = name;
    this.value = value;
  }
  isEquivalent(e) {
    return e instanceof _WriteVarExpr && this.name === e.name && this.value.isEquivalent(e.value);
  }
  isConstant() {
    return false;
  }
  visitExpression(visitor, context) {
    return visitor.visitWriteVarExpr(this, context);
  }
  clone() {
    return new _WriteVarExpr(this.name, this.value.clone(), this.type, this.sourceSpan);
  }
  toDeclStmt(type, modifiers) {
    return new DeclareVarStmt(this.name, this.value, type, modifiers, this.sourceSpan);
  }
  toConstDecl() {
    return this.toDeclStmt(INFERRED_TYPE, StmtModifier.Final);
  }
};
var WriteKeyExpr = class _WriteKeyExpr extends Expression {
  receiver;
  index;
  value;
  constructor(receiver, index, value, type, sourceSpan) {
    super(type || value.type, sourceSpan);
    this.receiver = receiver;
    this.index = index;
    this.value = value;
  }
  isEquivalent(e) {
    return e instanceof _WriteKeyExpr && this.receiver.isEquivalent(e.receiver) && this.index.isEquivalent(e.index) && this.value.isEquivalent(e.value);
  }
  isConstant() {
    return false;
  }
  visitExpression(visitor, context) {
    return visitor.visitWriteKeyExpr(this, context);
  }
  clone() {
    return new _WriteKeyExpr(this.receiver.clone(), this.index.clone(), this.value.clone(), this.type, this.sourceSpan);
  }
};
var WritePropExpr = class _WritePropExpr extends Expression {
  receiver;
  name;
  value;
  constructor(receiver, name, value, type, sourceSpan) {
    super(type || value.type, sourceSpan);
    this.receiver = receiver;
    this.name = name;
    this.value = value;
  }
  isEquivalent(e) {
    return e instanceof _WritePropExpr && this.receiver.isEquivalent(e.receiver) && this.name === e.name && this.value.isEquivalent(e.value);
  }
  isConstant() {
    return false;
  }
  visitExpression(visitor, context) {
    return visitor.visitWritePropExpr(this, context);
  }
  clone() {
    return new _WritePropExpr(this.receiver.clone(), this.name, this.value.clone(), this.type, this.sourceSpan);
  }
};
var InvokeFunctionExpr = class _InvokeFunctionExpr extends Expression {
  fn;
  args;
  pure;
  constructor(fn2, args, type, sourceSpan, pure = false) {
    super(type, sourceSpan);
    this.fn = fn2;
    this.args = args;
    this.pure = pure;
  }
  // An alias for fn, which allows other logic to handle calls and property reads together.
  get receiver() {
    return this.fn;
  }
  isEquivalent(e) {
    return e instanceof _InvokeFunctionExpr && this.fn.isEquivalent(e.fn) && areAllEquivalent(this.args, e.args) && this.pure === e.pure;
  }
  isConstant() {
    return false;
  }
  visitExpression(visitor, context) {
    return visitor.visitInvokeFunctionExpr(this, context);
  }
  clone() {
    return new _InvokeFunctionExpr(this.fn.clone(), this.args.map((arg) => arg.clone()), this.type, this.sourceSpan, this.pure);
  }
};
var TaggedTemplateLiteralExpr = class _TaggedTemplateLiteralExpr extends Expression {
  tag;
  template;
  constructor(tag, template2, type, sourceSpan) {
    super(type, sourceSpan);
    this.tag = tag;
    this.template = template2;
  }
  isEquivalent(e) {
    return e instanceof _TaggedTemplateLiteralExpr && this.tag.isEquivalent(e.tag) && this.template.isEquivalent(e.template);
  }
  isConstant() {
    return false;
  }
  visitExpression(visitor, context) {
    return visitor.visitTaggedTemplateLiteralExpr(this, context);
  }
  clone() {
    return new _TaggedTemplateLiteralExpr(this.tag.clone(), this.template.clone(), this.type, this.sourceSpan);
  }
};
var InstantiateExpr = class _InstantiateExpr extends Expression {
  classExpr;
  args;
  constructor(classExpr, args, type, sourceSpan) {
    super(type, sourceSpan);
    this.classExpr = classExpr;
    this.args = args;
  }
  isEquivalent(e) {
    return e instanceof _InstantiateExpr && this.classExpr.isEquivalent(e.classExpr) && areAllEquivalent(this.args, e.args);
  }
  isConstant() {
    return false;
  }
  visitExpression(visitor, context) {
    return visitor.visitInstantiateExpr(this, context);
  }
  clone() {
    return new _InstantiateExpr(this.classExpr.clone(), this.args.map((arg) => arg.clone()), this.type, this.sourceSpan);
  }
};
var LiteralExpr = class _LiteralExpr extends Expression {
  value;
  constructor(value, type, sourceSpan) {
    super(type, sourceSpan);
    this.value = value;
  }
  isEquivalent(e) {
    return e instanceof _LiteralExpr && this.value === e.value;
  }
  isConstant() {
    return true;
  }
  visitExpression(visitor, context) {
    return visitor.visitLiteralExpr(this, context);
  }
  clone() {
    return new _LiteralExpr(this.value, this.type, this.sourceSpan);
  }
};
var TemplateLiteralExpr = class _TemplateLiteralExpr extends Expression {
  elements;
  expressions;
  constructor(elements, expressions, sourceSpan) {
    super(null, sourceSpan);
    this.elements = elements;
    this.expressions = expressions;
  }
  isEquivalent(e) {
    return e instanceof _TemplateLiteralExpr && areAllEquivalentPredicate(this.elements, e.elements, (a, b) => a.text === b.text) && areAllEquivalent(this.expressions, e.expressions);
  }
  isConstant() {
    return false;
  }
  visitExpression(visitor, context) {
    return visitor.visitTemplateLiteralExpr(this, context);
  }
  clone() {
    return new _TemplateLiteralExpr(this.elements.map((el) => el.clone()), this.expressions.map((expr) => expr.clone()));
  }
};
var TemplateLiteralElementExpr = class _TemplateLiteralElementExpr extends Expression {
  text;
  rawText;
  constructor(text3, sourceSpan, rawText) {
    super(STRING_TYPE, sourceSpan);
    this.text = text3;
    this.rawText = rawText ?? escapeForTemplateLiteral(escapeSlashes(text3));
  }
  visitExpression(visitor, context) {
    return visitor.visitTemplateLiteralElementExpr(this, context);
  }
  isEquivalent(e) {
    return e instanceof _TemplateLiteralElementExpr && e.text === this.text && e.rawText === this.rawText;
  }
  isConstant() {
    return true;
  }
  clone() {
    return new _TemplateLiteralElementExpr(this.text, this.sourceSpan, this.rawText);
  }
};
var LiteralPiece = class {
  text;
  sourceSpan;
  constructor(text3, sourceSpan) {
    this.text = text3;
    this.sourceSpan = sourceSpan;
  }
};
var PlaceholderPiece = class {
  text;
  sourceSpan;
  associatedMessage;
  /**
   * Create a new instance of a `PlaceholderPiece`.
   *
   * @param text the name of this placeholder (e.g. `PH_1`).
   * @param sourceSpan the location of this placeholder in its localized message the source code.
   * @param associatedMessage reference to another message that this placeholder is associated with.
   * The `associatedMessage` is mainly used to provide a relationship to an ICU message that has
   * been extracted out from the message containing the placeholder.
   */
  constructor(text3, sourceSpan, associatedMessage) {
    this.text = text3;
    this.sourceSpan = sourceSpan;
    this.associatedMessage = associatedMessage;
  }
};
var MEANING_SEPARATOR$1 = "|";
var ID_SEPARATOR$1 = "@@";
var LEGACY_ID_INDICATOR = "\u241F";
var LocalizedString = class _LocalizedString extends Expression {
  metaBlock;
  messageParts;
  placeHolderNames;
  expressions;
  constructor(metaBlock, messageParts, placeHolderNames, expressions, sourceSpan) {
    super(STRING_TYPE, sourceSpan);
    this.metaBlock = metaBlock;
    this.messageParts = messageParts;
    this.placeHolderNames = placeHolderNames;
    this.expressions = expressions;
  }
  isEquivalent(e) {
    return false;
  }
  isConstant() {
    return false;
  }
  visitExpression(visitor, context) {
    return visitor.visitLocalizedString(this, context);
  }
  clone() {
    return new _LocalizedString(this.metaBlock, this.messageParts, this.placeHolderNames, this.expressions.map((expr) => expr.clone()), this.sourceSpan);
  }
  /**
   * Serialize the given `meta` and `messagePart` into "cooked" and "raw" strings that can be used
   * in a `$localize` tagged string. The format of the metadata is the same as that parsed by
   * `parseI18nMeta()`.
   *
   * @param meta The metadata to serialize
   * @param messagePart The first part of the tagged string
   */
  serializeI18nHead() {
    let metaBlock = this.metaBlock.description || "";
    if (this.metaBlock.meaning) {
      metaBlock = `${this.metaBlock.meaning}${MEANING_SEPARATOR$1}${metaBlock}`;
    }
    if (this.metaBlock.customId) {
      metaBlock = `${metaBlock}${ID_SEPARATOR$1}${this.metaBlock.customId}`;
    }
    if (this.metaBlock.legacyIds) {
      this.metaBlock.legacyIds.forEach((legacyId) => {
        metaBlock = `${metaBlock}${LEGACY_ID_INDICATOR}${legacyId}`;
      });
    }
    return createCookedRawString(metaBlock, this.messageParts[0].text, this.getMessagePartSourceSpan(0));
  }
  getMessagePartSourceSpan(i) {
    return this.messageParts[i]?.sourceSpan ?? this.sourceSpan;
  }
  getPlaceholderSourceSpan(i) {
    return this.placeHolderNames[i]?.sourceSpan ?? this.expressions[i]?.sourceSpan ?? this.sourceSpan;
  }
  /**
   * Serialize the given `placeholderName` and `messagePart` into "cooked" and "raw" strings that
   * can be used in a `$localize` tagged string.
   *
   * The format is `:<placeholder-name>[@@<associated-id>]:`.
   *
   * The `associated-id` is the message id of the (usually an ICU) message to which this placeholder
   * refers.
   *
   * @param partIndex The index of the message part to serialize.
   */
  serializeI18nTemplatePart(partIndex) {
    const placeholder = this.placeHolderNames[partIndex - 1];
    const messagePart = this.messageParts[partIndex];
    let metaBlock = placeholder.text;
    if (placeholder.associatedMessage?.legacyIds.length === 0) {
      metaBlock += `${ID_SEPARATOR$1}${computeMsgId(placeholder.associatedMessage.messageString, placeholder.associatedMessage.meaning)}`;
    }
    return createCookedRawString(metaBlock, messagePart.text, this.getMessagePartSourceSpan(partIndex));
  }
};
var escapeSlashes = (str) => str.replace(/\\/g, "\\\\");
var escapeStartingColon = (str) => str.replace(/^:/, "\\:");
var escapeColons = (str) => str.replace(/:/g, "\\:");
var escapeForTemplateLiteral = (str) => str.replace(/`/g, "\\`").replace(/\${/g, "$\\{");
function createCookedRawString(metaBlock, messagePart, range) {
  if (metaBlock === "") {
    return {
      cooked: messagePart,
      raw: escapeForTemplateLiteral(escapeStartingColon(escapeSlashes(messagePart))),
      range
    };
  } else {
    return {
      cooked: `:${metaBlock}:${messagePart}`,
      raw: escapeForTemplateLiteral(`:${escapeColons(escapeSlashes(metaBlock))}:${escapeSlashes(messagePart)}`),
      range
    };
  }
}
var ExternalExpr = class _ExternalExpr extends Expression {
  value;
  typeParams;
  constructor(value, type, typeParams = null, sourceSpan) {
    super(type, sourceSpan);
    this.value = value;
    this.typeParams = typeParams;
  }
  isEquivalent(e) {
    return e instanceof _ExternalExpr && this.value.name === e.value.name && this.value.moduleName === e.value.moduleName;
  }
  isConstant() {
    return false;
  }
  visitExpression(visitor, context) {
    return visitor.visitExternalExpr(this, context);
  }
  clone() {
    return new _ExternalExpr(this.value, this.type, this.typeParams, this.sourceSpan);
  }
};
var ConditionalExpr = class _ConditionalExpr extends Expression {
  condition;
  falseCase;
  trueCase;
  constructor(condition, trueCase, falseCase = null, type, sourceSpan) {
    super(type || trueCase.type, sourceSpan);
    this.condition = condition;
    this.falseCase = falseCase;
    this.trueCase = trueCase;
  }
  isEquivalent(e) {
    return e instanceof _ConditionalExpr && this.condition.isEquivalent(e.condition) && this.trueCase.isEquivalent(e.trueCase) && nullSafeIsEquivalent(this.falseCase, e.falseCase);
  }
  isConstant() {
    return false;
  }
  visitExpression(visitor, context) {
    return visitor.visitConditionalExpr(this, context);
  }
  clone() {
    return new _ConditionalExpr(this.condition.clone(), this.trueCase.clone(), this.falseCase?.clone(), this.type, this.sourceSpan);
  }
};
var NotExpr = class _NotExpr extends Expression {
  condition;
  constructor(condition, sourceSpan) {
    super(BOOL_TYPE, sourceSpan);
    this.condition = condition;
  }
  isEquivalent(e) {
    return e instanceof _NotExpr && this.condition.isEquivalent(e.condition);
  }
  isConstant() {
    return false;
  }
  visitExpression(visitor, context) {
    return visitor.visitNotExpr(this, context);
  }
  clone() {
    return new _NotExpr(this.condition.clone(), this.sourceSpan);
  }
};
var FnParam = class _FnParam {
  name;
  type;
  constructor(name, type = null) {
    this.name = name;
    this.type = type;
  }
  isEquivalent(param) {
    return this.name === param.name;
  }
  clone() {
    return new _FnParam(this.name, this.type);
  }
};
var FunctionExpr = class _FunctionExpr extends Expression {
  params;
  statements;
  name;
  constructor(params, statements, type, sourceSpan, name) {
    super(type, sourceSpan);
    this.params = params;
    this.statements = statements;
    this.name = name;
  }
  isEquivalent(e) {
    return (e instanceof _FunctionExpr || e instanceof DeclareFunctionStmt) && areAllEquivalent(this.params, e.params) && areAllEquivalent(this.statements, e.statements);
  }
  isConstant() {
    return false;
  }
  visitExpression(visitor, context) {
    return visitor.visitFunctionExpr(this, context);
  }
  toDeclStmt(name, modifiers) {
    return new DeclareFunctionStmt(name, this.params, this.statements, this.type, modifiers, this.sourceSpan);
  }
  clone() {
    return new _FunctionExpr(this.params.map((p) => p.clone()), this.statements, this.type, this.sourceSpan, this.name);
  }
};
var ArrowFunctionExpr = class _ArrowFunctionExpr extends Expression {
  params;
  body;
  // Note that `body: Expression` represents `() => expr` whereas
  // `body: Statement[]` represents `() => { expr }`.
  constructor(params, body, type, sourceSpan) {
    super(type, sourceSpan);
    this.params = params;
    this.body = body;
  }
  isEquivalent(e) {
    if (!(e instanceof _ArrowFunctionExpr) || !areAllEquivalent(this.params, e.params)) {
      return false;
    }
    if (this.body instanceof Expression && e.body instanceof Expression) {
      return this.body.isEquivalent(e.body);
    }
    if (Array.isArray(this.body) && Array.isArray(e.body)) {
      return areAllEquivalent(this.body, e.body);
    }
    return false;
  }
  isConstant() {
    return false;
  }
  visitExpression(visitor, context) {
    return visitor.visitArrowFunctionExpr(this, context);
  }
  clone() {
    return new _ArrowFunctionExpr(this.params.map((p) => p.clone()), Array.isArray(this.body) ? this.body : this.body.clone(), this.type, this.sourceSpan);
  }
  toDeclStmt(name, modifiers) {
    return new DeclareVarStmt(name, this, INFERRED_TYPE, modifiers, this.sourceSpan);
  }
};
var UnaryOperatorExpr = class _UnaryOperatorExpr extends Expression {
  operator;
  expr;
  parens;
  constructor(operator, expr, type, sourceSpan, parens = true) {
    super(type || NUMBER_TYPE, sourceSpan);
    this.operator = operator;
    this.expr = expr;
    this.parens = parens;
  }
  isEquivalent(e) {
    return e instanceof _UnaryOperatorExpr && this.operator === e.operator && this.expr.isEquivalent(e.expr);
  }
  isConstant() {
    return false;
  }
  visitExpression(visitor, context) {
    return visitor.visitUnaryOperatorExpr(this, context);
  }
  clone() {
    return new _UnaryOperatorExpr(this.operator, this.expr.clone(), this.type, this.sourceSpan, this.parens);
  }
};
var BinaryOperatorExpr = class _BinaryOperatorExpr extends Expression {
  operator;
  rhs;
  parens;
  lhs;
  constructor(operator, lhs, rhs, type, sourceSpan, parens = true) {
    super(type || lhs.type, sourceSpan);
    this.operator = operator;
    this.rhs = rhs;
    this.parens = parens;
    this.lhs = lhs;
  }
  isEquivalent(e) {
    return e instanceof _BinaryOperatorExpr && this.operator === e.operator && this.lhs.isEquivalent(e.lhs) && this.rhs.isEquivalent(e.rhs);
  }
  isConstant() {
    return false;
  }
  visitExpression(visitor, context) {
    return visitor.visitBinaryOperatorExpr(this, context);
  }
  clone() {
    return new _BinaryOperatorExpr(this.operator, this.lhs.clone(), this.rhs.clone(), this.type, this.sourceSpan, this.parens);
  }
};
var ReadPropExpr = class _ReadPropExpr extends Expression {
  receiver;
  name;
  constructor(receiver, name, type, sourceSpan) {
    super(type, sourceSpan);
    this.receiver = receiver;
    this.name = name;
  }
  // An alias for name, which allows other logic to handle property reads and keyed reads together.
  get index() {
    return this.name;
  }
  isEquivalent(e) {
    return e instanceof _ReadPropExpr && this.receiver.isEquivalent(e.receiver) && this.name === e.name;
  }
  isConstant() {
    return false;
  }
  visitExpression(visitor, context) {
    return visitor.visitReadPropExpr(this, context);
  }
  set(value) {
    return new WritePropExpr(this.receiver, this.name, value, null, this.sourceSpan);
  }
  clone() {
    return new _ReadPropExpr(this.receiver.clone(), this.name, this.type, this.sourceSpan);
  }
};
var ReadKeyExpr = class _ReadKeyExpr extends Expression {
  receiver;
  index;
  constructor(receiver, index, type, sourceSpan) {
    super(type, sourceSpan);
    this.receiver = receiver;
    this.index = index;
  }
  isEquivalent(e) {
    return e instanceof _ReadKeyExpr && this.receiver.isEquivalent(e.receiver) && this.index.isEquivalent(e.index);
  }
  isConstant() {
    return false;
  }
  visitExpression(visitor, context) {
    return visitor.visitReadKeyExpr(this, context);
  }
  set(value) {
    return new WriteKeyExpr(this.receiver, this.index, value, null, this.sourceSpan);
  }
  clone() {
    return new _ReadKeyExpr(this.receiver.clone(), this.index.clone(), this.type, this.sourceSpan);
  }
};
var LiteralArrayExpr = class _LiteralArrayExpr extends Expression {
  entries;
  constructor(entries, type, sourceSpan) {
    super(type, sourceSpan);
    this.entries = entries;
  }
  isConstant() {
    return this.entries.every((e) => e.isConstant());
  }
  isEquivalent(e) {
    return e instanceof _LiteralArrayExpr && areAllEquivalent(this.entries, e.entries);
  }
  visitExpression(visitor, context) {
    return visitor.visitLiteralArrayExpr(this, context);
  }
  clone() {
    return new _LiteralArrayExpr(this.entries.map((e) => e.clone()), this.type, this.sourceSpan);
  }
};
var LiteralMapEntry = class _LiteralMapEntry {
  key;
  value;
  quoted;
  constructor(key, value, quoted) {
    this.key = key;
    this.value = value;
    this.quoted = quoted;
  }
  isEquivalent(e) {
    return this.key === e.key && this.value.isEquivalent(e.value);
  }
  clone() {
    return new _LiteralMapEntry(this.key, this.value.clone(), this.quoted);
  }
};
var LiteralMapExpr = class _LiteralMapExpr extends Expression {
  entries;
  valueType = null;
  constructor(entries, type, sourceSpan) {
    super(type, sourceSpan);
    this.entries = entries;
    if (type) {
      this.valueType = type.valueType;
    }
  }
  isEquivalent(e) {
    return e instanceof _LiteralMapExpr && areAllEquivalent(this.entries, e.entries);
  }
  isConstant() {
    return this.entries.every((e) => e.value.isConstant());
  }
  visitExpression(visitor, context) {
    return visitor.visitLiteralMapExpr(this, context);
  }
  clone() {
    const entriesClone = this.entries.map((entry) => entry.clone());
    return new _LiteralMapExpr(entriesClone, this.type, this.sourceSpan);
  }
};
var NULL_EXPR = new LiteralExpr(null, null, null);
var TYPED_NULL_EXPR = new LiteralExpr(null, INFERRED_TYPE, null);
var StmtModifier;
(function(StmtModifier2) {
  StmtModifier2[StmtModifier2["None"] = 0] = "None";
  StmtModifier2[StmtModifier2["Final"] = 1] = "Final";
  StmtModifier2[StmtModifier2["Private"] = 2] = "Private";
  StmtModifier2[StmtModifier2["Exported"] = 4] = "Exported";
  StmtModifier2[StmtModifier2["Static"] = 8] = "Static";
})(StmtModifier || (StmtModifier = {}));
var LeadingComment = class {
  text;
  multiline;
  trailingNewline;
  constructor(text3, multiline, trailingNewline) {
    this.text = text3;
    this.multiline = multiline;
    this.trailingNewline = trailingNewline;
  }
  toString() {
    return this.multiline ? ` ${this.text} ` : this.text;
  }
};
var JSDocComment = class extends LeadingComment {
  tags;
  constructor(tags) {
    super(
      "",
      /* multiline */
      true,
      /* trailingNewline */
      true
    );
    this.tags = tags;
  }
  toString() {
    return serializeTags(this.tags);
  }
};
var Statement = class {
  modifiers;
  sourceSpan;
  leadingComments;
  constructor(modifiers = StmtModifier.None, sourceSpan = null, leadingComments) {
    this.modifiers = modifiers;
    this.sourceSpan = sourceSpan;
    this.leadingComments = leadingComments;
  }
  hasModifier(modifier) {
    return (this.modifiers & modifier) !== 0;
  }
  addLeadingComment(leadingComment) {
    this.leadingComments = this.leadingComments ?? [];
    this.leadingComments.push(leadingComment);
  }
};
var DeclareVarStmt = class _DeclareVarStmt extends Statement {
  name;
  value;
  type;
  constructor(name, value, type, modifiers, sourceSpan, leadingComments) {
    super(modifiers, sourceSpan, leadingComments);
    this.name = name;
    this.value = value;
    this.type = type || value && value.type || null;
  }
  isEquivalent(stmt) {
    return stmt instanceof _DeclareVarStmt && this.name === stmt.name && (this.value ? !!stmt.value && this.value.isEquivalent(stmt.value) : !stmt.value);
  }
  visitStatement(visitor, context) {
    return visitor.visitDeclareVarStmt(this, context);
  }
};
var DeclareFunctionStmt = class _DeclareFunctionStmt extends Statement {
  name;
  params;
  statements;
  type;
  constructor(name, params, statements, type, modifiers, sourceSpan, leadingComments) {
    super(modifiers, sourceSpan, leadingComments);
    this.name = name;
    this.params = params;
    this.statements = statements;
    this.type = type || null;
  }
  isEquivalent(stmt) {
    return stmt instanceof _DeclareFunctionStmt && areAllEquivalent(this.params, stmt.params) && areAllEquivalent(this.statements, stmt.statements);
  }
  visitStatement(visitor, context) {
    return visitor.visitDeclareFunctionStmt(this, context);
  }
};
var ExpressionStatement = class _ExpressionStatement extends Statement {
  expr;
  constructor(expr, sourceSpan, leadingComments) {
    super(StmtModifier.None, sourceSpan, leadingComments);
    this.expr = expr;
  }
  isEquivalent(stmt) {
    return stmt instanceof _ExpressionStatement && this.expr.isEquivalent(stmt.expr);
  }
  visitStatement(visitor, context) {
    return visitor.visitExpressionStmt(this, context);
  }
};
var ReturnStatement = class _ReturnStatement extends Statement {
  value;
  constructor(value, sourceSpan = null, leadingComments) {
    super(StmtModifier.None, sourceSpan, leadingComments);
    this.value = value;
  }
  isEquivalent(stmt) {
    return stmt instanceof _ReturnStatement && this.value.isEquivalent(stmt.value);
  }
  visitStatement(visitor, context) {
    return visitor.visitReturnStmt(this, context);
  }
};
var IfStmt = class _IfStmt extends Statement {
  condition;
  trueCase;
  falseCase;
  constructor(condition, trueCase, falseCase = [], sourceSpan, leadingComments) {
    super(StmtModifier.None, sourceSpan, leadingComments);
    this.condition = condition;
    this.trueCase = trueCase;
    this.falseCase = falseCase;
  }
  isEquivalent(stmt) {
    return stmt instanceof _IfStmt && this.condition.isEquivalent(stmt.condition) && areAllEquivalent(this.trueCase, stmt.trueCase) && areAllEquivalent(this.falseCase, stmt.falseCase);
  }
  visitStatement(visitor, context) {
    return visitor.visitIfStmt(this, context);
  }
};
function jsDocComment(tags = []) {
  return new JSDocComment(tags);
}
function variable(name, type, sourceSpan) {
  return new ReadVarExpr(name, type, sourceSpan);
}
function importExpr(id, typeParams = null, sourceSpan) {
  return new ExternalExpr(id, null, typeParams, sourceSpan);
}
function expressionType(expr, typeModifiers, typeParams) {
  return new ExpressionType(expr, typeModifiers, typeParams);
}
function typeofExpr(expr) {
  return new TypeofExpr(expr);
}
function literalArr(values, type, sourceSpan) {
  return new LiteralArrayExpr(values, type, sourceSpan);
}
function literalMap(values, type = null) {
  return new LiteralMapExpr(values.map((e) => new LiteralMapEntry(e.key, e.value, e.quoted)), type, null);
}
function not(expr, sourceSpan) {
  return new NotExpr(expr, sourceSpan);
}
function fn(params, body, type, sourceSpan, name) {
  return new FunctionExpr(params, body, type, sourceSpan, name);
}
function arrowFn(params, body, type, sourceSpan) {
  return new ArrowFunctionExpr(params, body, type, sourceSpan);
}
function ifStmt(condition, thenClause, elseClause, sourceSpan, leadingComments) {
  return new IfStmt(condition, thenClause, elseClause, sourceSpan, leadingComments);
}
function taggedTemplate(tag, template2, type, sourceSpan) {
  return new TaggedTemplateLiteralExpr(tag, template2, type, sourceSpan);
}
function literal(value, type, sourceSpan) {
  return new LiteralExpr(value, type, sourceSpan);
}
function localizedString(metaBlock, messageParts, placeholderNames, expressions, sourceSpan) {
  return new LocalizedString(metaBlock, messageParts, placeholderNames, expressions, sourceSpan);
}
function tagToString(tag) {
  let out = "";
  if (tag.tagName) {
    out += ` @${tag.tagName}`;
  }
  if (tag.text) {
    if (tag.text.match(/\/\*|\*\//)) {
      throw new Error('JSDoc text cannot contain "/*" and "*/"');
    }
    out += " " + tag.text.replace(/@/g, "\\@");
  }
  return out;
}
function serializeTags(tags) {
  if (tags.length === 0) return "";
  if (tags.length === 1 && tags[0].tagName && !tags[0].text) {
    return `*${tagToString(tags[0])} `;
  }
  let out = "*\n";
  for (const tag of tags) {
    out += " *";
    out += tagToString(tag).replace(/\n/g, "\n * ");
    out += "\n";
  }
  out += " ";
  return out;
}
var CONSTANT_PREFIX = "_c";
var UNKNOWN_VALUE_KEY = variable("<unknown>");
var KEY_CONTEXT = {};
var POOL_INCLUSION_LENGTH_THRESHOLD_FOR_STRINGS = 50;
var FixupExpression = class _FixupExpression extends Expression {
  resolved;
  original;
  shared = false;
  constructor(resolved) {
    super(resolved.type);
    this.resolved = resolved;
    this.original = resolved;
  }
  visitExpression(visitor, context) {
    if (context === KEY_CONTEXT) {
      return this.original.visitExpression(visitor, context);
    } else {
      return this.resolved.visitExpression(visitor, context);
    }
  }
  isEquivalent(e) {
    return e instanceof _FixupExpression && this.resolved.isEquivalent(e.resolved);
  }
  isConstant() {
    return true;
  }
  clone() {
    throw new Error(`Not supported.`);
  }
  fixup(expression) {
    this.resolved = expression;
    this.shared = true;
  }
};
var ConstantPool = class {
  isClosureCompilerEnabled;
  statements = [];
  literals = /* @__PURE__ */ new Map();
  literalFactories = /* @__PURE__ */ new Map();
  sharedConstants = /* @__PURE__ */ new Map();
  /**
   * Constant pool also tracks claimed names from {@link uniqueName}.
   * This is useful to avoid collisions if variables are intended to be
   * named a certain way- but may conflict. We wouldn't want to always suffix
   * them with unique numbers.
   */
  _claimedNames = /* @__PURE__ */ new Map();
  nextNameIndex = 0;
  constructor(isClosureCompilerEnabled = false) {
    this.isClosureCompilerEnabled = isClosureCompilerEnabled;
  }
  getConstLiteral(literal2, forceShared) {
    if (literal2 instanceof LiteralExpr && !isLongStringLiteral(literal2) || literal2 instanceof FixupExpression) {
      return literal2;
    }
    const key = GenericKeyFn.INSTANCE.keyOf(literal2);
    let fixup = this.literals.get(key);
    let newValue = false;
    if (!fixup) {
      fixup = new FixupExpression(literal2);
      this.literals.set(key, fixup);
      newValue = true;
    }
    if (!newValue && !fixup.shared || newValue && forceShared) {
      const name = this.freshName();
      let definition;
      let usage;
      if (this.isClosureCompilerEnabled && isLongStringLiteral(literal2)) {
        definition = variable(name).set(new FunctionExpr(
          [],
          // Params.
          [
            // Statements.
            new ReturnStatement(literal2)
          ]
        ));
        usage = variable(name).callFn([]);
      } else {
        definition = variable(name).set(literal2);
        usage = variable(name);
      }
      this.statements.push(definition.toDeclStmt(INFERRED_TYPE, StmtModifier.Final));
      fixup.fixup(usage);
    }
    return fixup;
  }
  getSharedConstant(def, expr) {
    const key = def.keyOf(expr);
    if (!this.sharedConstants.has(key)) {
      const id = this.freshName();
      this.sharedConstants.set(key, variable(id));
      this.statements.push(def.toSharedConstantDeclaration(id, expr));
    }
    return this.sharedConstants.get(key);
  }
  getLiteralFactory(literal2) {
    if (literal2 instanceof LiteralArrayExpr) {
      const argumentsForKey = literal2.entries.map((e) => e.isConstant() ? e : UNKNOWN_VALUE_KEY);
      const key = GenericKeyFn.INSTANCE.keyOf(literalArr(argumentsForKey));
      return this._getLiteralFactory(key, literal2.entries, (entries) => literalArr(entries));
    } else {
      const expressionForKey = literalMap(literal2.entries.map((e) => ({
        key: e.key,
        value: e.value.isConstant() ? e.value : UNKNOWN_VALUE_KEY,
        quoted: e.quoted
      })));
      const key = GenericKeyFn.INSTANCE.keyOf(expressionForKey);
      return this._getLiteralFactory(key, literal2.entries.map((e) => e.value), (entries) => literalMap(entries.map((value, index) => ({
        key: literal2.entries[index].key,
        value,
        quoted: literal2.entries[index].quoted
      }))));
    }
  }
  // TODO: useUniqueName(false) is necessary for naming compatibility with
  // TemplateDefinitionBuilder, but should be removed once Template Pipeline is the default.
  getSharedFunctionReference(fn2, prefix, useUniqueName = true) {
    const isArrow = fn2 instanceof ArrowFunctionExpr;
    for (const current of this.statements) {
      if (isArrow && current instanceof DeclareVarStmt && current.value?.isEquivalent(fn2)) {
        return variable(current.name);
      }
      if (!isArrow && current instanceof DeclareFunctionStmt && fn2 instanceof FunctionExpr && fn2.isEquivalent(current)) {
        return variable(current.name);
      }
    }
    const name = useUniqueName ? this.uniqueName(prefix) : prefix;
    this.statements.push(fn2 instanceof FunctionExpr ? fn2.toDeclStmt(name, StmtModifier.Final) : new DeclareVarStmt(name, fn2, INFERRED_TYPE, StmtModifier.Final, fn2.sourceSpan));
    return variable(name);
  }
  _getLiteralFactory(key, values, resultMap) {
    let literalFactory = this.literalFactories.get(key);
    const literalFactoryArguments = values.filter((e) => !e.isConstant());
    if (!literalFactory) {
      const resultExpressions = values.map((e, index) => e.isConstant() ? this.getConstLiteral(e, true) : variable(`a${index}`));
      const parameters = resultExpressions.filter(isVariable).map((e) => new FnParam(e.name, DYNAMIC_TYPE));
      const pureFunctionDeclaration = arrowFn(parameters, resultMap(resultExpressions), INFERRED_TYPE);
      const name = this.freshName();
      this.statements.push(variable(name).set(pureFunctionDeclaration).toDeclStmt(INFERRED_TYPE, StmtModifier.Final));
      literalFactory = variable(name);
      this.literalFactories.set(key, literalFactory);
    }
    return {
      literalFactory,
      literalFactoryArguments
    };
  }
  /**
   * Produce a unique name in the context of this pool.
   *
   * The name might be unique among different prefixes if any of the prefixes end in
   * a digit so the prefix should be a constant string (not based on user input) and
   * must not end in a digit.
   */
  uniqueName(name, alwaysIncludeSuffix = true) {
    const count = this._claimedNames.get(name) ?? 0;
    const result = count === 0 && !alwaysIncludeSuffix ? `${name}` : `${name}${count}`;
    this._claimedNames.set(name, count + 1);
    return result;
  }
  freshName() {
    return this.uniqueName(CONSTANT_PREFIX);
  }
};
var GenericKeyFn = class _GenericKeyFn {
  static INSTANCE = new _GenericKeyFn();
  keyOf(expr) {
    if (expr instanceof LiteralExpr && typeof expr.value === "string") {
      return `"${expr.value}"`;
    } else if (expr instanceof LiteralExpr) {
      return String(expr.value);
    } else if (expr instanceof LiteralArrayExpr) {
      const entries = [];
      for (const entry of expr.entries) {
        entries.push(this.keyOf(entry));
      }
      return `[${entries.join(",")}]`;
    } else if (expr instanceof LiteralMapExpr) {
      const entries = [];
      for (const entry of expr.entries) {
        let key = entry.key;
        if (entry.quoted) {
          key = `"${key}"`;
        }
        entries.push(key + ":" + this.keyOf(entry.value));
      }
      return `{${entries.join(",")}}`;
    } else if (expr instanceof ExternalExpr) {
      return `import("${expr.value.moduleName}", ${expr.value.name})`;
    } else if (expr instanceof ReadVarExpr) {
      return `read(${expr.name})`;
    } else if (expr instanceof TypeofExpr) {
      return `typeof(${this.keyOf(expr.expr)})`;
    } else {
      throw new Error(`${this.constructor.name} does not handle expressions of type ${expr.constructor.name}`);
    }
  }
};
function isVariable(e) {
  return e instanceof ReadVarExpr;
}
function isLongStringLiteral(expr) {
  return expr instanceof LiteralExpr && typeof expr.value === "string" && expr.value.length >= POOL_INCLUSION_LENGTH_THRESHOLD_FOR_STRINGS;
}
var CORE = "@angular/core";
var Identifiers = class {
  /* Methods */
  static NEW_METHOD = "factory";
  static TRANSFORM_METHOD = "transform";
  static PATCH_DEPS = "patchedDeps";
  static core = {
    name: null,
    moduleName: CORE
  };
  /* Instructions */
  static namespaceHTML = {
    name: "\u0275\u0275namespaceHTML",
    moduleName: CORE
  };
  static namespaceMathML = {
    name: "\u0275\u0275namespaceMathML",
    moduleName: CORE
  };
  static namespaceSVG = {
    name: "\u0275\u0275namespaceSVG",
    moduleName: CORE
  };
  static element = {
    name: "\u0275\u0275element",
    moduleName: CORE
  };
  static elementStart = {
    name: "\u0275\u0275elementStart",
    moduleName: CORE
  };
  static elementEnd = {
    name: "\u0275\u0275elementEnd",
    moduleName: CORE
  };
  static advance = {
    name: "\u0275\u0275advance",
    moduleName: CORE
  };
  static syntheticHostProperty = {
    name: "\u0275\u0275syntheticHostProperty",
    moduleName: CORE
  };
  static syntheticHostListener = {
    name: "\u0275\u0275syntheticHostListener",
    moduleName: CORE
  };
  static attribute = {
    name: "\u0275\u0275attribute",
    moduleName: CORE
  };
  static attributeInterpolate1 = {
    name: "\u0275\u0275attributeInterpolate1",
    moduleName: CORE
  };
  static attributeInterpolate2 = {
    name: "\u0275\u0275attributeInterpolate2",
    moduleName: CORE
  };
  static attributeInterpolate3 = {
    name: "\u0275\u0275attributeInterpolate3",
    moduleName: CORE
  };
  static attributeInterpolate4 = {
    name: "\u0275\u0275attributeInterpolate4",
    moduleName: CORE
  };
  static attributeInterpolate5 = {
    name: "\u0275\u0275attributeInterpolate5",
    moduleName: CORE
  };
  static attributeInterpolate6 = {
    name: "\u0275\u0275attributeInterpolate6",
    moduleName: CORE
  };
  static attributeInterpolate7 = {
    name: "\u0275\u0275attributeInterpolate7",
    moduleName: CORE
  };
  static attributeInterpolate8 = {
    name: "\u0275\u0275attributeInterpolate8",
    moduleName: CORE
  };
  static attributeInterpolateV = {
    name: "\u0275\u0275attributeInterpolateV",
    moduleName: CORE
  };
  static classProp = {
    name: "\u0275\u0275classProp",
    moduleName: CORE
  };
  static elementContainerStart = {
    name: "\u0275\u0275elementContainerStart",
    moduleName: CORE
  };
  static elementContainerEnd = {
    name: "\u0275\u0275elementContainerEnd",
    moduleName: CORE
  };
  static elementContainer = {
    name: "\u0275\u0275elementContainer",
    moduleName: CORE
  };
  static styleMap = {
    name: "\u0275\u0275styleMap",
    moduleName: CORE
  };
  static styleMapInterpolate1 = {
    name: "\u0275\u0275styleMapInterpolate1",
    moduleName: CORE
  };
  static styleMapInterpolate2 = {
    name: "\u0275\u0275styleMapInterpolate2",
    moduleName: CORE
  };
  static styleMapInterpolate3 = {
    name: "\u0275\u0275styleMapInterpolate3",
    moduleName: CORE
  };
  static styleMapInterpolate4 = {
    name: "\u0275\u0275styleMapInterpolate4",
    moduleName: CORE
  };
  static styleMapInterpolate5 = {
    name: "\u0275\u0275styleMapInterpolate5",
    moduleName: CORE
  };
  static styleMapInterpolate6 = {
    name: "\u0275\u0275styleMapInterpolate6",
    moduleName: CORE
  };
  static styleMapInterpolate7 = {
    name: "\u0275\u0275styleMapInterpolate7",
    moduleName: CORE
  };
  static styleMapInterpolate8 = {
    name: "\u0275\u0275styleMapInterpolate8",
    moduleName: CORE
  };
  static styleMapInterpolateV = {
    name: "\u0275\u0275styleMapInterpolateV",
    moduleName: CORE
  };
  static classMap = {
    name: "\u0275\u0275classMap",
    moduleName: CORE
  };
  static classMapInterpolate1 = {
    name: "\u0275\u0275classMapInterpolate1",
    moduleName: CORE
  };
  static classMapInterpolate2 = {
    name: "\u0275\u0275classMapInterpolate2",
    moduleName: CORE
  };
  static classMapInterpolate3 = {
    name: "\u0275\u0275classMapInterpolate3",
    moduleName: CORE
  };
  static classMapInterpolate4 = {
    name: "\u0275\u0275classMapInterpolate4",
    moduleName: CORE
  };
  static classMapInterpolate5 = {
    name: "\u0275\u0275classMapInterpolate5",
    moduleName: CORE
  };
  static classMapInterpolate6 = {
    name: "\u0275\u0275classMapInterpolate6",
    moduleName: CORE
  };
  static classMapInterpolate7 = {
    name: "\u0275\u0275classMapInterpolate7",
    moduleName: CORE
  };
  static classMapInterpolate8 = {
    name: "\u0275\u0275classMapInterpolate8",
    moduleName: CORE
  };
  static classMapInterpolateV = {
    name: "\u0275\u0275classMapInterpolateV",
    moduleName: CORE
  };
  static styleProp = {
    name: "\u0275\u0275styleProp",
    moduleName: CORE
  };
  static stylePropInterpolate1 = {
    name: "\u0275\u0275stylePropInterpolate1",
    moduleName: CORE
  };
  static stylePropInterpolate2 = {
    name: "\u0275\u0275stylePropInterpolate2",
    moduleName: CORE
  };
  static stylePropInterpolate3 = {
    name: "\u0275\u0275stylePropInterpolate3",
    moduleName: CORE
  };
  static stylePropInterpolate4 = {
    name: "\u0275\u0275stylePropInterpolate4",
    moduleName: CORE
  };
  static stylePropInterpolate5 = {
    name: "\u0275\u0275stylePropInterpolate5",
    moduleName: CORE
  };
  static stylePropInterpolate6 = {
    name: "\u0275\u0275stylePropInterpolate6",
    moduleName: CORE
  };
  static stylePropInterpolate7 = {
    name: "\u0275\u0275stylePropInterpolate7",
    moduleName: CORE
  };
  static stylePropInterpolate8 = {
    name: "\u0275\u0275stylePropInterpolate8",
    moduleName: CORE
  };
  static stylePropInterpolateV = {
    name: "\u0275\u0275stylePropInterpolateV",
    moduleName: CORE
  };
  static nextContext = {
    name: "\u0275\u0275nextContext",
    moduleName: CORE
  };
  static resetView = {
    name: "\u0275\u0275resetView",
    moduleName: CORE
  };
  static templateCreate = {
    name: "\u0275\u0275template",
    moduleName: CORE
  };
  static defer = {
    name: "\u0275\u0275defer",
    moduleName: CORE
  };
  static deferWhen = {
    name: "\u0275\u0275deferWhen",
    moduleName: CORE
  };
  static deferOnIdle = {
    name: "\u0275\u0275deferOnIdle",
    moduleName: CORE
  };
  static deferOnImmediate = {
    name: "\u0275\u0275deferOnImmediate",
    moduleName: CORE
  };
  static deferOnTimer = {
    name: "\u0275\u0275deferOnTimer",
    moduleName: CORE
  };
  static deferOnHover = {
    name: "\u0275\u0275deferOnHover",
    moduleName: CORE
  };
  static deferOnInteraction = {
    name: "\u0275\u0275deferOnInteraction",
    moduleName: CORE
  };
  static deferOnViewport = {
    name: "\u0275\u0275deferOnViewport",
    moduleName: CORE
  };
  static deferPrefetchWhen = {
    name: "\u0275\u0275deferPrefetchWhen",
    moduleName: CORE
  };
  static deferPrefetchOnIdle = {
    name: "\u0275\u0275deferPrefetchOnIdle",
    moduleName: CORE
  };
  static deferPrefetchOnImmediate = {
    name: "\u0275\u0275deferPrefetchOnImmediate",
    moduleName: CORE
  };
  static deferPrefetchOnTimer = {
    name: "\u0275\u0275deferPrefetchOnTimer",
    moduleName: CORE
  };
  static deferPrefetchOnHover = {
    name: "\u0275\u0275deferPrefetchOnHover",
    moduleName: CORE
  };
  static deferPrefetchOnInteraction = {
    name: "\u0275\u0275deferPrefetchOnInteraction",
    moduleName: CORE
  };
  static deferPrefetchOnViewport = {
    name: "\u0275\u0275deferPrefetchOnViewport",
    moduleName: CORE
  };
  static deferHydrateWhen = {
    name: "\u0275\u0275deferHydrateWhen",
    moduleName: CORE
  };
  static deferHydrateNever = {
    name: "\u0275\u0275deferHydrateNever",
    moduleName: CORE
  };
  static deferHydrateOnIdle = {
    name: "\u0275\u0275deferHydrateOnIdle",
    moduleName: CORE
  };
  static deferHydrateOnImmediate = {
    name: "\u0275\u0275deferHydrateOnImmediate",
    moduleName: CORE
  };
  static deferHydrateOnTimer = {
    name: "\u0275\u0275deferHydrateOnTimer",
    moduleName: CORE
  };
  static deferHydrateOnHover = {
    name: "\u0275\u0275deferHydrateOnHover",
    moduleName: CORE
  };
  static deferHydrateOnInteraction = {
    name: "\u0275\u0275deferHydrateOnInteraction",
    moduleName: CORE
  };
  static deferHydrateOnViewport = {
    name: "\u0275\u0275deferHydrateOnViewport",
    moduleName: CORE
  };
  static deferEnableTimerScheduling = {
    name: "\u0275\u0275deferEnableTimerScheduling",
    moduleName: CORE
  };
  static conditional = {
    name: "\u0275\u0275conditional",
    moduleName: CORE
  };
  static repeater = {
    name: "\u0275\u0275repeater",
    moduleName: CORE
  };
  static repeaterCreate = {
    name: "\u0275\u0275repeaterCreate",
    moduleName: CORE
  };
  static repeaterTrackByIndex = {
    name: "\u0275\u0275repeaterTrackByIndex",
    moduleName: CORE
  };
  static repeaterTrackByIdentity = {
    name: "\u0275\u0275repeaterTrackByIdentity",
    moduleName: CORE
  };
  static componentInstance = {
    name: "\u0275\u0275componentInstance",
    moduleName: CORE
  };
  static text = {
    name: "\u0275\u0275text",
    moduleName: CORE
  };
  static enableBindings = {
    name: "\u0275\u0275enableBindings",
    moduleName: CORE
  };
  static disableBindings = {
    name: "\u0275\u0275disableBindings",
    moduleName: CORE
  };
  static getCurrentView = {
    name: "\u0275\u0275getCurrentView",
    moduleName: CORE
  };
  static textInterpolate = {
    name: "\u0275\u0275textInterpolate",
    moduleName: CORE
  };
  static textInterpolate1 = {
    name: "\u0275\u0275textInterpolate1",
    moduleName: CORE
  };
  static textInterpolate2 = {
    name: "\u0275\u0275textInterpolate2",
    moduleName: CORE
  };
  static textInterpolate3 = {
    name: "\u0275\u0275textInterpolate3",
    moduleName: CORE
  };
  static textInterpolate4 = {
    name: "\u0275\u0275textInterpolate4",
    moduleName: CORE
  };
  static textInterpolate5 = {
    name: "\u0275\u0275textInterpolate5",
    moduleName: CORE
  };
  static textInterpolate6 = {
    name: "\u0275\u0275textInterpolate6",
    moduleName: CORE
  };
  static textInterpolate7 = {
    name: "\u0275\u0275textInterpolate7",
    moduleName: CORE
  };
  static textInterpolate8 = {
    name: "\u0275\u0275textInterpolate8",
    moduleName: CORE
  };
  static textInterpolateV = {
    name: "\u0275\u0275textInterpolateV",
    moduleName: CORE
  };
  static restoreView = {
    name: "\u0275\u0275restoreView",
    moduleName: CORE
  };
  static pureFunction0 = {
    name: "\u0275\u0275pureFunction0",
    moduleName: CORE
  };
  static pureFunction1 = {
    name: "\u0275\u0275pureFunction1",
    moduleName: CORE
  };
  static pureFunction2 = {
    name: "\u0275\u0275pureFunction2",
    moduleName: CORE
  };
  static pureFunction3 = {
    name: "\u0275\u0275pureFunction3",
    moduleName: CORE
  };
  static pureFunction4 = {
    name: "\u0275\u0275pureFunction4",
    moduleName: CORE
  };
  static pureFunction5 = {
    name: "\u0275\u0275pureFunction5",
    moduleName: CORE
  };
  static pureFunction6 = {
    name: "\u0275\u0275pureFunction6",
    moduleName: CORE
  };
  static pureFunction7 = {
    name: "\u0275\u0275pureFunction7",
    moduleName: CORE
  };
  static pureFunction8 = {
    name: "\u0275\u0275pureFunction8",
    moduleName: CORE
  };
  static pureFunctionV = {
    name: "\u0275\u0275pureFunctionV",
    moduleName: CORE
  };
  static pipeBind1 = {
    name: "\u0275\u0275pipeBind1",
    moduleName: CORE
  };
  static pipeBind2 = {
    name: "\u0275\u0275pipeBind2",
    moduleName: CORE
  };
  static pipeBind3 = {
    name: "\u0275\u0275pipeBind3",
    moduleName: CORE
  };
  static pipeBind4 = {
    name: "\u0275\u0275pipeBind4",
    moduleName: CORE
  };
  static pipeBindV = {
    name: "\u0275\u0275pipeBindV",
    moduleName: CORE
  };
  static hostProperty = {
    name: "\u0275\u0275hostProperty",
    moduleName: CORE
  };
  static property = {
    name: "\u0275\u0275property",
    moduleName: CORE
  };
  static propertyInterpolate = {
    name: "\u0275\u0275propertyInterpolate",
    moduleName: CORE
  };
  static propertyInterpolate1 = {
    name: "\u0275\u0275propertyInterpolate1",
    moduleName: CORE
  };
  static propertyInterpolate2 = {
    name: "\u0275\u0275propertyInterpolate2",
    moduleName: CORE
  };
  static propertyInterpolate3 = {
    name: "\u0275\u0275propertyInterpolate3",
    moduleName: CORE
  };
  static propertyInterpolate4 = {
    name: "\u0275\u0275propertyInterpolate4",
    moduleName: CORE
  };
  static propertyInterpolate5 = {
    name: "\u0275\u0275propertyInterpolate5",
    moduleName: CORE
  };
  static propertyInterpolate6 = {
    name: "\u0275\u0275propertyInterpolate6",
    moduleName: CORE
  };
  static propertyInterpolate7 = {
    name: "\u0275\u0275propertyInterpolate7",
    moduleName: CORE
  };
  static propertyInterpolate8 = {
    name: "\u0275\u0275propertyInterpolate8",
    moduleName: CORE
  };
  static propertyInterpolateV = {
    name: "\u0275\u0275propertyInterpolateV",
    moduleName: CORE
  };
  static i18n = {
    name: "\u0275\u0275i18n",
    moduleName: CORE
  };
  static i18nAttributes = {
    name: "\u0275\u0275i18nAttributes",
    moduleName: CORE
  };
  static i18nExp = {
    name: "\u0275\u0275i18nExp",
    moduleName: CORE
  };
  static i18nStart = {
    name: "\u0275\u0275i18nStart",
    moduleName: CORE
  };
  static i18nEnd = {
    name: "\u0275\u0275i18nEnd",
    moduleName: CORE
  };
  static i18nApply = {
    name: "\u0275\u0275i18nApply",
    moduleName: CORE
  };
  static i18nPostprocess = {
    name: "\u0275\u0275i18nPostprocess",
    moduleName: CORE
  };
  static pipe = {
    name: "\u0275\u0275pipe",
    moduleName: CORE
  };
  static projection = {
    name: "\u0275\u0275projection",
    moduleName: CORE
  };
  static projectionDef = {
    name: "\u0275\u0275projectionDef",
    moduleName: CORE
  };
  static reference = {
    name: "\u0275\u0275reference",
    moduleName: CORE
  };
  static inject = {
    name: "\u0275\u0275inject",
    moduleName: CORE
  };
  static injectAttribute = {
    name: "\u0275\u0275injectAttribute",
    moduleName: CORE
  };
  static directiveInject = {
    name: "\u0275\u0275directiveInject",
    moduleName: CORE
  };
  static invalidFactory = {
    name: "\u0275\u0275invalidFactory",
    moduleName: CORE
  };
  static invalidFactoryDep = {
    name: "\u0275\u0275invalidFactoryDep",
    moduleName: CORE
  };
  static templateRefExtractor = {
    name: "\u0275\u0275templateRefExtractor",
    moduleName: CORE
  };
  static forwardRef = {
    name: "forwardRef",
    moduleName: CORE
  };
  static resolveForwardRef = {
    name: "resolveForwardRef",
    moduleName: CORE
  };
  static replaceMetadata = {
    name: "\u0275\u0275replaceMetadata",
    moduleName: CORE
  };
  static getReplaceMetadataURL = {
    name: "\u0275\u0275getReplaceMetadataURL",
    moduleName: CORE
  };
  static \u0275\u0275defineInjectable = {
    name: "\u0275\u0275defineInjectable",
    moduleName: CORE
  };
  static declareInjectable = {
    name: "\u0275\u0275ngDeclareInjectable",
    moduleName: CORE
  };
  static InjectableDeclaration = {
    name: "\u0275\u0275InjectableDeclaration",
    moduleName: CORE
  };
  static resolveWindow = {
    name: "\u0275\u0275resolveWindow",
    moduleName: CORE
  };
  static resolveDocument = {
    name: "\u0275\u0275resolveDocument",
    moduleName: CORE
  };
  static resolveBody = {
    name: "\u0275\u0275resolveBody",
    moduleName: CORE
  };
  static getComponentDepsFactory = {
    name: "\u0275\u0275getComponentDepsFactory",
    moduleName: CORE
  };
  static defineComponent = {
    name: "\u0275\u0275defineComponent",
    moduleName: CORE
  };
  static declareComponent = {
    name: "\u0275\u0275ngDeclareComponent",
    moduleName: CORE
  };
  static setComponentScope = {
    name: "\u0275\u0275setComponentScope",
    moduleName: CORE
  };
  static ChangeDetectionStrategy = {
    name: "ChangeDetectionStrategy",
    moduleName: CORE
  };
  static ViewEncapsulation = {
    name: "ViewEncapsulation",
    moduleName: CORE
  };
  static ComponentDeclaration = {
    name: "\u0275\u0275ComponentDeclaration",
    moduleName: CORE
  };
  static FactoryDeclaration = {
    name: "\u0275\u0275FactoryDeclaration",
    moduleName: CORE
  };
  static declareFactory = {
    name: "\u0275\u0275ngDeclareFactory",
    moduleName: CORE
  };
  static FactoryTarget = {
    name: "\u0275\u0275FactoryTarget",
    moduleName: CORE
  };
  static defineDirective = {
    name: "\u0275\u0275defineDirective",
    moduleName: CORE
  };
  static declareDirective = {
    name: "\u0275\u0275ngDeclareDirective",
    moduleName: CORE
  };
  static DirectiveDeclaration = {
    name: "\u0275\u0275DirectiveDeclaration",
    moduleName: CORE
  };
  static InjectorDef = {
    name: "\u0275\u0275InjectorDef",
    moduleName: CORE
  };
  static InjectorDeclaration = {
    name: "\u0275\u0275InjectorDeclaration",
    moduleName: CORE
  };
  static defineInjector = {
    name: "\u0275\u0275defineInjector",
    moduleName: CORE
  };
  static declareInjector = {
    name: "\u0275\u0275ngDeclareInjector",
    moduleName: CORE
  };
  static NgModuleDeclaration = {
    name: "\u0275\u0275NgModuleDeclaration",
    moduleName: CORE
  };
  static ModuleWithProviders = {
    name: "ModuleWithProviders",
    moduleName: CORE
  };
  static defineNgModule = {
    name: "\u0275\u0275defineNgModule",
    moduleName: CORE
  };
  static declareNgModule = {
    name: "\u0275\u0275ngDeclareNgModule",
    moduleName: CORE
  };
  static setNgModuleScope = {
    name: "\u0275\u0275setNgModuleScope",
    moduleName: CORE
  };
  static registerNgModuleType = {
    name: "\u0275\u0275registerNgModuleType",
    moduleName: CORE
  };
  static PipeDeclaration = {
    name: "\u0275\u0275PipeDeclaration",
    moduleName: CORE
  };
  static definePipe = {
    name: "\u0275\u0275definePipe",
    moduleName: CORE
  };
  static declarePipe = {
    name: "\u0275\u0275ngDeclarePipe",
    moduleName: CORE
  };
  static declareClassMetadata = {
    name: "\u0275\u0275ngDeclareClassMetadata",
    moduleName: CORE
  };
  static declareClassMetadataAsync = {
    name: "\u0275\u0275ngDeclareClassMetadataAsync",
    moduleName: CORE
  };
  static setClassMetadata = {
    name: "\u0275setClassMetadata",
    moduleName: CORE
  };
  static setClassMetadataAsync = {
    name: "\u0275setClassMetadataAsync",
    moduleName: CORE
  };
  static setClassDebugInfo = {
    name: "\u0275setClassDebugInfo",
    moduleName: CORE
  };
  static queryRefresh = {
    name: "\u0275\u0275queryRefresh",
    moduleName: CORE
  };
  static viewQuery = {
    name: "\u0275\u0275viewQuery",
    moduleName: CORE
  };
  static loadQuery = {
    name: "\u0275\u0275loadQuery",
    moduleName: CORE
  };
  static contentQuery = {
    name: "\u0275\u0275contentQuery",
    moduleName: CORE
  };
  // Signal queries
  static viewQuerySignal = {
    name: "\u0275\u0275viewQuerySignal",
    moduleName: CORE
  };
  static contentQuerySignal = {
    name: "\u0275\u0275contentQuerySignal",
    moduleName: CORE
  };
  static queryAdvance = {
    name: "\u0275\u0275queryAdvance",
    moduleName: CORE
  };
  // Two-way bindings
  static twoWayProperty = {
    name: "\u0275\u0275twoWayProperty",
    moduleName: CORE
  };
  static twoWayBindingSet = {
    name: "\u0275\u0275twoWayBindingSet",
    moduleName: CORE
  };
  static twoWayListener = {
    name: "\u0275\u0275twoWayListener",
    moduleName: CORE
  };
  static declareLet = {
    name: "\u0275\u0275declareLet",
    moduleName: CORE
  };
  static storeLet = {
    name: "\u0275\u0275storeLet",
    moduleName: CORE
  };
  static readContextLet = {
    name: "\u0275\u0275readContextLet",
    moduleName: CORE
  };
  static attachSourceLocations = {
    name: "\u0275\u0275attachSourceLocations",
    moduleName: CORE
  };
  static NgOnChangesFeature = {
    name: "\u0275\u0275NgOnChangesFeature",
    moduleName: CORE
  };
  static InheritDefinitionFeature = {
    name: "\u0275\u0275InheritDefinitionFeature",
    moduleName: CORE
  };
  static CopyDefinitionFeature = {
    name: "\u0275\u0275CopyDefinitionFeature",
    moduleName: CORE
  };
  static ProvidersFeature = {
    name: "\u0275\u0275ProvidersFeature",
    moduleName: CORE
  };
  static HostDirectivesFeature = {
    name: "\u0275\u0275HostDirectivesFeature",
    moduleName: CORE
  };
  static ExternalStylesFeature = {
    name: "\u0275\u0275ExternalStylesFeature",
    moduleName: CORE
  };
  static listener = {
    name: "\u0275\u0275listener",
    moduleName: CORE
  };
  static getInheritedFactory = {
    name: "\u0275\u0275getInheritedFactory",
    moduleName: CORE
  };
  // sanitization-related functions
  static sanitizeHtml = {
    name: "\u0275\u0275sanitizeHtml",
    moduleName: CORE
  };
  static sanitizeStyle = {
    name: "\u0275\u0275sanitizeStyle",
    moduleName: CORE
  };
  static sanitizeResourceUrl = {
    name: "\u0275\u0275sanitizeResourceUrl",
    moduleName: CORE
  };
  static sanitizeScript = {
    name: "\u0275\u0275sanitizeScript",
    moduleName: CORE
  };
  static sanitizeUrl = {
    name: "\u0275\u0275sanitizeUrl",
    moduleName: CORE
  };
  static sanitizeUrlOrResourceUrl = {
    name: "\u0275\u0275sanitizeUrlOrResourceUrl",
    moduleName: CORE
  };
  static trustConstantHtml = {
    name: "\u0275\u0275trustConstantHtml",
    moduleName: CORE
  };
  static trustConstantResourceUrl = {
    name: "\u0275\u0275trustConstantResourceUrl",
    moduleName: CORE
  };
  static validateIframeAttribute = {
    name: "\u0275\u0275validateIframeAttribute",
    moduleName: CORE
  };
  // type-checking
  static InputSignalBrandWriteType = {
    name: "\u0275INPUT_SIGNAL_BRAND_WRITE_TYPE",
    moduleName: CORE
  };
  static UnwrapDirectiveSignalInputs = {
    name: "\u0275UnwrapDirectiveSignalInputs",
    moduleName: CORE
  };
  static unwrapWritableSignal = {
    name: "\u0275unwrapWritableSignal",
    moduleName: CORE
  };
};
var DASH_CASE_REGEXP = /-+([a-z0-9])/g;
function dashCaseToCamelCase(input2) {
  return input2.replace(DASH_CASE_REGEXP, (...m) => m[1].toUpperCase());
}
function splitAtColon(input2, defaultValues) {
  return _splitAt(input2, ":", defaultValues);
}
function splitAtPeriod(input2, defaultValues) {
  return _splitAt(input2, ".", defaultValues);
}
function _splitAt(input2, character, defaultValues) {
  const characterIndex = input2.indexOf(character);
  if (characterIndex == -1) return defaultValues;
  return [input2.slice(0, characterIndex).trim(), input2.slice(characterIndex + 1).trim()];
}
function utf8Encode(str) {
  let encoded = [];
  for (let index = 0; index < str.length; index++) {
    let codePoint = str.charCodeAt(index);
    if (codePoint >= 55296 && codePoint <= 56319 && str.length > index + 1) {
      const low = str.charCodeAt(index + 1);
      if (low >= 56320 && low <= 57343) {
        index++;
        codePoint = (codePoint - 55296 << 10) + low - 56320 + 65536;
      }
    }
    if (codePoint <= 127) {
      encoded.push(codePoint);
    } else if (codePoint <= 2047) {
      encoded.push(codePoint >> 6 & 31 | 192, codePoint & 63 | 128);
    } else if (codePoint <= 65535) {
      encoded.push(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
    } else if (codePoint <= 2097151) {
      encoded.push(codePoint >> 18 & 7 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
    }
  }
  return encoded;
}
function stringify(token) {
  if (typeof token === "string") {
    return token;
  }
  if (Array.isArray(token)) {
    return `[${token.map(stringify).join(", ")}]`;
  }
  if (token == null) {
    return "" + token;
  }
  const name = token.overriddenName || token.name;
  if (name) {
    return `${name}`;
  }
  if (!token.toString) {
    return "object";
  }
  const result = token.toString();
  if (result == null) {
    return "" + result;
  }
  const newLineIndex = result.indexOf("\n");
  return newLineIndex >= 0 ? result.slice(0, newLineIndex) : result;
}
var Version2 = class {
  full;
  major;
  minor;
  patch;
  constructor(full) {
    this.full = full;
    const splits = full.split(".");
    this.major = splits[0];
    this.minor = splits[1];
    this.patch = splits.slice(2).join(".");
  }
};
var _global2 = globalThis;
var V1_TO_18 = /^([1-9]|1[0-8])\./;
function getJitStandaloneDefaultForVersion(version) {
  if (version.startsWith("0.")) {
    return true;
  }
  if (V1_TO_18.test(version)) {
    return false;
  }
  return true;
}
var VERSION$1 = 3;
var JS_B64_PREFIX = "# sourceMappingURL=data:application/json;base64,";
var SourceMapGenerator = class {
  file;
  sourcesContent = /* @__PURE__ */ new Map();
  lines = [];
  lastCol0 = 0;
  hasMappings = false;
  constructor(file = null) {
    this.file = file;
  }
  // The content is `null` when the content is expected to be loaded using the URL
  addSource(url, content = null) {
    if (!this.sourcesContent.has(url)) {
      this.sourcesContent.set(url, content);
    }
    return this;
  }
  addLine() {
    this.lines.push([]);
    this.lastCol0 = 0;
    return this;
  }
  addMapping(col0, sourceUrl, sourceLine0, sourceCol0) {
    if (!this.currentLine) {
      throw new Error(`A line must be added before mappings can be added`);
    }
    if (sourceUrl != null && !this.sourcesContent.has(sourceUrl)) {
      throw new Error(`Unknown source file "${sourceUrl}"`);
    }
    if (col0 == null) {
      throw new Error(`The column in the generated code must be provided`);
    }
    if (col0 < this.lastCol0) {
      throw new Error(`Mapping should be added in output order`);
    }
    if (sourceUrl && (sourceLine0 == null || sourceCol0 == null)) {
      throw new Error(`The source location must be provided when a source url is provided`);
    }
    this.hasMappings = true;
    this.lastCol0 = col0;
    this.currentLine.push({
      col0,
      sourceUrl,
      sourceLine0,
      sourceCol0
    });
    return this;
  }
  /**
   * @internal strip this from published d.ts files due to
   * https://github.com/microsoft/TypeScript/issues/36216
   */
  get currentLine() {
    return this.lines.slice(-1)[0];
  }
  toJSON() {
    if (!this.hasMappings) {
      return null;
    }
    const sourcesIndex = /* @__PURE__ */ new Map();
    const sources = [];
    const sourcesContent = [];
    Array.from(this.sourcesContent.keys()).forEach((url, i) => {
      sourcesIndex.set(url, i);
      sources.push(url);
      sourcesContent.push(this.sourcesContent.get(url) || null);
    });
    let mappings = "";
    let lastCol0 = 0;
    let lastSourceIndex = 0;
    let lastSourceLine0 = 0;
    let lastSourceCol0 = 0;
    this.lines.forEach((segments) => {
      lastCol0 = 0;
      mappings += segments.map((segment) => {
        let segAsStr = toBase64VLQ(segment.col0 - lastCol0);
        lastCol0 = segment.col0;
        if (segment.sourceUrl != null) {
          segAsStr += toBase64VLQ(sourcesIndex.get(segment.sourceUrl) - lastSourceIndex);
          lastSourceIndex = sourcesIndex.get(segment.sourceUrl);
          segAsStr += toBase64VLQ(segment.sourceLine0 - lastSourceLine0);
          lastSourceLine0 = segment.sourceLine0;
          segAsStr += toBase64VLQ(segment.sourceCol0 - lastSourceCol0);
          lastSourceCol0 = segment.sourceCol0;
        }
        return segAsStr;
      }).join(",");
      mappings += ";";
    });
    mappings = mappings.slice(0, -1);
    return {
      "file": this.file || "",
      "version": VERSION$1,
      "sourceRoot": "",
      "sources": sources,
      "sourcesContent": sourcesContent,
      "mappings": mappings
    };
  }
  toJsComment() {
    return this.hasMappings ? "//" + JS_B64_PREFIX + toBase64String(JSON.stringify(this, null, 0)) : "";
  }
};
function toBase64String(value) {
  let b64 = "";
  const encoded = utf8Encode(value);
  for (let i = 0; i < encoded.length; ) {
    const i1 = encoded[i++];
    const i2 = i < encoded.length ? encoded[i++] : null;
    const i3 = i < encoded.length ? encoded[i++] : null;
    b64 += toBase64Digit(i1 >> 2);
    b64 += toBase64Digit((i1 & 3) << 4 | (i2 === null ? 0 : i2 >> 4));
    b64 += i2 === null ? "=" : toBase64Digit((i2 & 15) << 2 | (i3 === null ? 0 : i3 >> 6));
    b64 += i2 === null || i3 === null ? "=" : toBase64Digit(i3 & 63);
  }
  return b64;
}
function toBase64VLQ(value) {
  value = value < 0 ? (-value << 1) + 1 : value << 1;
  let out = "";
  do {
    let digit = value & 31;
    value = value >> 5;
    if (value > 0) {
      digit = digit | 32;
    }
    out += toBase64Digit(digit);
  } while (value > 0);
  return out;
}
var B64_DIGITS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
function toBase64Digit(value) {
  if (value < 0 || value >= 64) {
    throw new Error(`Can only encode value in the range [0, 63]`);
  }
  return B64_DIGITS[value];
}
var _SINGLE_QUOTE_ESCAPE_STRING_RE = /'|\\|\n|\r|\$/g;
var _LEGAL_IDENTIFIER_RE = /^[$A-Z_][0-9A-Z_$]*$/i;
var _INDENT_WITH = "  ";
var _EmittedLine = class {
  indent;
  partsLength = 0;
  parts = [];
  srcSpans = [];
  constructor(indent) {
    this.indent = indent;
  }
};
var EmitterVisitorContext = class _EmitterVisitorContext {
  _indent;
  static createRoot() {
    return new _EmitterVisitorContext(0);
  }
  _lines;
  constructor(_indent) {
    this._indent = _indent;
    this._lines = [new _EmittedLine(_indent)];
  }
  /**
   * @internal strip this from published d.ts files due to
   * https://github.com/microsoft/TypeScript/issues/36216
   */
  get _currentLine() {
    return this._lines[this._lines.length - 1];
  }
  println(from2, lastPart = "") {
    this.print(from2 || null, lastPart, true);
  }
  lineIsEmpty() {
    return this._currentLine.parts.length === 0;
  }
  lineLength() {
    return this._currentLine.indent * _INDENT_WITH.length + this._currentLine.partsLength;
  }
  print(from2, part, newLine = false) {
    if (part.length > 0) {
      this._currentLine.parts.push(part);
      this._currentLine.partsLength += part.length;
      this._currentLine.srcSpans.push(from2 && from2.sourceSpan || null);
    }
    if (newLine) {
      this._lines.push(new _EmittedLine(this._indent));
    }
  }
  removeEmptyLastLine() {
    if (this.lineIsEmpty()) {
      this._lines.pop();
    }
  }
  incIndent() {
    this._indent++;
    if (this.lineIsEmpty()) {
      this._currentLine.indent = this._indent;
    }
  }
  decIndent() {
    this._indent--;
    if (this.lineIsEmpty()) {
      this._currentLine.indent = this._indent;
    }
  }
  toSource() {
    return this.sourceLines.map((l) => l.parts.length > 0 ? _createIndent(l.indent) + l.parts.join("") : "").join("\n");
  }
  toSourceMapGenerator(genFilePath, startsAtLine = 0) {
    const map2 = new SourceMapGenerator(genFilePath);
    let firstOffsetMapped = false;
    const mapFirstOffsetIfNeeded = () => {
      if (!firstOffsetMapped) {
        map2.addSource(genFilePath, " ").addMapping(0, genFilePath, 0, 0);
        firstOffsetMapped = true;
      }
    };
    for (let i = 0; i < startsAtLine; i++) {
      map2.addLine();
      mapFirstOffsetIfNeeded();
    }
    this.sourceLines.forEach((line, lineIdx) => {
      map2.addLine();
      const spans = line.srcSpans;
      const parts = line.parts;
      let col0 = line.indent * _INDENT_WITH.length;
      let spanIdx = 0;
      while (spanIdx < spans.length && !spans[spanIdx]) {
        col0 += parts[spanIdx].length;
        spanIdx++;
      }
      if (spanIdx < spans.length && lineIdx === 0 && col0 === 0) {
        firstOffsetMapped = true;
      } else {
        mapFirstOffsetIfNeeded();
      }
      while (spanIdx < spans.length) {
        const span = spans[spanIdx];
        const source = span.start.file;
        const sourceLine = span.start.line;
        const sourceCol = span.start.col;
        map2.addSource(source.url, source.content).addMapping(col0, source.url, sourceLine, sourceCol);
        col0 += parts[spanIdx].length;
        spanIdx++;
        while (spanIdx < spans.length && (span === spans[spanIdx] || !spans[spanIdx])) {
          col0 += parts[spanIdx].length;
          spanIdx++;
        }
      }
    });
    return map2;
  }
  spanOf(line, column) {
    const emittedLine = this._lines[line];
    if (emittedLine) {
      let columnsLeft = column - _createIndent(emittedLine.indent).length;
      for (let partIndex = 0; partIndex < emittedLine.parts.length; partIndex++) {
        const part = emittedLine.parts[partIndex];
        if (part.length > columnsLeft) {
          return emittedLine.srcSpans[partIndex];
        }
        columnsLeft -= part.length;
      }
    }
    return null;
  }
  /**
   * @internal strip this from published d.ts files due to
   * https://github.com/microsoft/TypeScript/issues/36216
   */
  get sourceLines() {
    if (this._lines.length && this._lines[this._lines.length - 1].parts.length === 0) {
      return this._lines.slice(0, -1);
    }
    return this._lines;
  }
};
var AbstractEmitterVisitor = class {
  _escapeDollarInStrings;
  constructor(_escapeDollarInStrings) {
    this._escapeDollarInStrings = _escapeDollarInStrings;
  }
  printLeadingComments(stmt, ctx) {
    if (stmt.leadingComments === void 0) {
      return;
    }
    for (const comment of stmt.leadingComments) {
      if (comment instanceof JSDocComment) {
        ctx.print(stmt, `/*${comment.toString()}*/`, comment.trailingNewline);
      } else {
        if (comment.multiline) {
          ctx.print(stmt, `/* ${comment.text} */`, comment.trailingNewline);
        } else {
          comment.text.split("\n").forEach((line) => {
            ctx.println(stmt, `// ${line}`);
          });
        }
      }
    }
  }
  visitExpressionStmt(stmt, ctx) {
    this.printLeadingComments(stmt, ctx);
    stmt.expr.visitExpression(this, ctx);
    ctx.println(stmt, ";");
    return null;
  }
  visitReturnStmt(stmt, ctx) {
    this.printLeadingComments(stmt, ctx);
    ctx.print(stmt, `return `);
    stmt.value.visitExpression(this, ctx);
    ctx.println(stmt, ";");
    return null;
  }
  visitIfStmt(stmt, ctx) {
    this.printLeadingComments(stmt, ctx);
    ctx.print(stmt, `if (`);
    stmt.condition.visitExpression(this, ctx);
    ctx.print(stmt, `) {`);
    const hasElseCase = stmt.falseCase != null && stmt.falseCase.length > 0;
    if (stmt.trueCase.length <= 1 && !hasElseCase) {
      ctx.print(stmt, ` `);
      this.visitAllStatements(stmt.trueCase, ctx);
      ctx.removeEmptyLastLine();
      ctx.print(stmt, ` `);
    } else {
      ctx.println();
      ctx.incIndent();
      this.visitAllStatements(stmt.trueCase, ctx);
      ctx.decIndent();
      if (hasElseCase) {
        ctx.println(stmt, `} else {`);
        ctx.incIndent();
        this.visitAllStatements(stmt.falseCase, ctx);
        ctx.decIndent();
      }
    }
    ctx.println(stmt, `}`);
    return null;
  }
  visitWriteVarExpr(expr, ctx) {
    const lineWasEmpty = ctx.lineIsEmpty();
    if (!lineWasEmpty) {
      ctx.print(expr, "(");
    }
    ctx.print(expr, `${expr.name} = `);
    expr.value.visitExpression(this, ctx);
    if (!lineWasEmpty) {
      ctx.print(expr, ")");
    }
    return null;
  }
  visitWriteKeyExpr(expr, ctx) {
    const lineWasEmpty = ctx.lineIsEmpty();
    if (!lineWasEmpty) {
      ctx.print(expr, "(");
    }
    expr.receiver.visitExpression(this, ctx);
    ctx.print(expr, `[`);
    expr.index.visitExpression(this, ctx);
    ctx.print(expr, `] = `);
    expr.value.visitExpression(this, ctx);
    if (!lineWasEmpty) {
      ctx.print(expr, ")");
    }
    return null;
  }
  visitWritePropExpr(expr, ctx) {
    const lineWasEmpty = ctx.lineIsEmpty();
    if (!lineWasEmpty) {
      ctx.print(expr, "(");
    }
    expr.receiver.visitExpression(this, ctx);
    ctx.print(expr, `.${expr.name} = `);
    expr.value.visitExpression(this, ctx);
    if (!lineWasEmpty) {
      ctx.print(expr, ")");
    }
    return null;
  }
  visitInvokeFunctionExpr(expr, ctx) {
    const shouldParenthesize = expr.fn instanceof ArrowFunctionExpr;
    if (shouldParenthesize) {
      ctx.print(expr.fn, "(");
    }
    expr.fn.visitExpression(this, ctx);
    if (shouldParenthesize) {
      ctx.print(expr.fn, ")");
    }
    ctx.print(expr, `(`);
    this.visitAllExpressions(expr.args, ctx, ",");
    ctx.print(expr, `)`);
    return null;
  }
  visitTaggedTemplateLiteralExpr(expr, ctx) {
    expr.tag.visitExpression(this, ctx);
    expr.template.visitExpression(this, ctx);
    return null;
  }
  visitTemplateLiteralExpr(expr, ctx) {
    ctx.print(expr, "`");
    for (let i = 0; i < expr.elements.length; i++) {
      expr.elements[i].visitExpression(this, ctx);
      const expression = i < expr.expressions.length ? expr.expressions[i] : null;
      if (expression !== null) {
        ctx.print(expression, "${");
        expression.visitExpression(this, ctx);
        ctx.print(expression, "}");
      }
    }
    ctx.print(expr, "`");
  }
  visitTemplateLiteralElementExpr(expr, ctx) {
    ctx.print(expr, expr.rawText);
  }
  visitWrappedNodeExpr(ast, ctx) {
    throw new Error("Abstract emitter cannot visit WrappedNodeExpr.");
  }
  visitTypeofExpr(expr, ctx) {
    ctx.print(expr, "typeof ");
    expr.expr.visitExpression(this, ctx);
  }
  visitReadVarExpr(ast, ctx) {
    ctx.print(ast, ast.name);
    return null;
  }
  visitInstantiateExpr(ast, ctx) {
    ctx.print(ast, `new `);
    ast.classExpr.visitExpression(this, ctx);
    ctx.print(ast, `(`);
    this.visitAllExpressions(ast.args, ctx, ",");
    ctx.print(ast, `)`);
    return null;
  }
  visitLiteralExpr(ast, ctx) {
    const value = ast.value;
    if (typeof value === "string") {
      ctx.print(ast, escapeIdentifier(value, this._escapeDollarInStrings));
    } else {
      ctx.print(ast, `${value}`);
    }
    return null;
  }
  visitLocalizedString(ast, ctx) {
    const head = ast.serializeI18nHead();
    ctx.print(ast, "$localize `" + head.raw);
    for (let i = 1; i < ast.messageParts.length; i++) {
      ctx.print(ast, "${");
      ast.expressions[i - 1].visitExpression(this, ctx);
      ctx.print(ast, `}${ast.serializeI18nTemplatePart(i).raw}`);
    }
    ctx.print(ast, "`");
    return null;
  }
  visitConditionalExpr(ast, ctx) {
    ctx.print(ast, `(`);
    ast.condition.visitExpression(this, ctx);
    ctx.print(ast, "? ");
    ast.trueCase.visitExpression(this, ctx);
    ctx.print(ast, ": ");
    ast.falseCase.visitExpression(this, ctx);
    ctx.print(ast, `)`);
    return null;
  }
  visitDynamicImportExpr(ast, ctx) {
    ctx.print(ast, `import(${ast.url})`);
  }
  visitNotExpr(ast, ctx) {
    ctx.print(ast, "!");
    ast.condition.visitExpression(this, ctx);
    return null;
  }
  visitUnaryOperatorExpr(ast, ctx) {
    let opStr;
    switch (ast.operator) {
      case UnaryOperator.Plus:
        opStr = "+";
        break;
      case UnaryOperator.Minus:
        opStr = "-";
        break;
      default:
        throw new Error(`Unknown operator ${ast.operator}`);
    }
    if (ast.parens) ctx.print(ast, `(`);
    ctx.print(ast, opStr);
    ast.expr.visitExpression(this, ctx);
    if (ast.parens) ctx.print(ast, `)`);
    return null;
  }
  visitBinaryOperatorExpr(ast, ctx) {
    let opStr;
    switch (ast.operator) {
      case BinaryOperator.Equals:
        opStr = "==";
        break;
      case BinaryOperator.Identical:
        opStr = "===";
        break;
      case BinaryOperator.NotEquals:
        opStr = "!=";
        break;
      case BinaryOperator.NotIdentical:
        opStr = "!==";
        break;
      case BinaryOperator.And:
        opStr = "&&";
        break;
      case BinaryOperator.BitwiseOr:
        opStr = "|";
        break;
      case BinaryOperator.BitwiseAnd:
        opStr = "&";
        break;
      case BinaryOperator.Or:
        opStr = "||";
        break;
      case BinaryOperator.Plus:
        opStr = "+";
        break;
      case BinaryOperator.Minus:
        opStr = "-";
        break;
      case BinaryOperator.Divide:
        opStr = "/";
        break;
      case BinaryOperator.Multiply:
        opStr = "*";
        break;
      case BinaryOperator.Modulo:
        opStr = "%";
        break;
      case BinaryOperator.Lower:
        opStr = "<";
        break;
      case BinaryOperator.LowerEquals:
        opStr = "<=";
        break;
      case BinaryOperator.Bigger:
        opStr = ">";
        break;
      case BinaryOperator.BiggerEquals:
        opStr = ">=";
        break;
      case BinaryOperator.NullishCoalesce:
        opStr = "??";
        break;
      default:
        throw new Error(`Unknown operator ${ast.operator}`);
    }
    if (ast.parens) ctx.print(ast, `(`);
    ast.lhs.visitExpression(this, ctx);
    ctx.print(ast, ` ${opStr} `);
    ast.rhs.visitExpression(this, ctx);
    if (ast.parens) ctx.print(ast, `)`);
    return null;
  }
  visitReadPropExpr(ast, ctx) {
    ast.receiver.visitExpression(this, ctx);
    ctx.print(ast, `.`);
    ctx.print(ast, ast.name);
    return null;
  }
  visitReadKeyExpr(ast, ctx) {
    ast.receiver.visitExpression(this, ctx);
    ctx.print(ast, `[`);
    ast.index.visitExpression(this, ctx);
    ctx.print(ast, `]`);
    return null;
  }
  visitLiteralArrayExpr(ast, ctx) {
    ctx.print(ast, `[`);
    this.visitAllExpressions(ast.entries, ctx, ",");
    ctx.print(ast, `]`);
    return null;
  }
  visitLiteralMapExpr(ast, ctx) {
    ctx.print(ast, `{`);
    this.visitAllObjects((entry) => {
      ctx.print(ast, `${escapeIdentifier(entry.key, this._escapeDollarInStrings, entry.quoted)}:`);
      entry.value.visitExpression(this, ctx);
    }, ast.entries, ctx, ",");
    ctx.print(ast, `}`);
    return null;
  }
  visitCommaExpr(ast, ctx) {
    ctx.print(ast, "(");
    this.visitAllExpressions(ast.parts, ctx, ",");
    ctx.print(ast, ")");
    return null;
  }
  visitAllExpressions(expressions, ctx, separator) {
    this.visitAllObjects((expr) => expr.visitExpression(this, ctx), expressions, ctx, separator);
  }
  visitAllObjects(handler, expressions, ctx, separator) {
    let incrementedIndent = false;
    for (let i = 0; i < expressions.length; i++) {
      if (i > 0) {
        if (ctx.lineLength() > 80) {
          ctx.print(null, separator, true);
          if (!incrementedIndent) {
            ctx.incIndent();
            ctx.incIndent();
            incrementedIndent = true;
          }
        } else {
          ctx.print(null, separator, false);
        }
      }
      handler(expressions[i]);
    }
    if (incrementedIndent) {
      ctx.decIndent();
      ctx.decIndent();
    }
  }
  visitAllStatements(statements, ctx) {
    statements.forEach((stmt) => stmt.visitStatement(this, ctx));
  }
};
function escapeIdentifier(input2, escapeDollar, alwaysQuote = true) {
  if (input2 == null) {
    return null;
  }
  const body = input2.replace(_SINGLE_QUOTE_ESCAPE_STRING_RE, (...match2) => {
    if (match2[0] == "$") {
      return escapeDollar ? "\\$" : "$";
    } else if (match2[0] == "\n") {
      return "\\n";
    } else if (match2[0] == "\r") {
      return "\\r";
    } else {
      return `\\${match2[0]}`;
    }
  });
  const requiresQuotes = alwaysQuote || !_LEGAL_IDENTIFIER_RE.test(body);
  return requiresQuotes ? `'${body}'` : body;
}
function _createIndent(count) {
  let res = "";
  for (let i = 0; i < count; i++) {
    res += _INDENT_WITH;
  }
  return res;
}
function typeWithParameters(type, numParams) {
  if (numParams === 0) {
    return expressionType(type);
  }
  const params = [];
  for (let i = 0; i < numParams; i++) {
    params.push(DYNAMIC_TYPE);
  }
  return expressionType(type, void 0, params);
}
function getSafePropertyAccessString(accessor, name) {
  const escapedName = escapeIdentifier(name, false, false);
  return escapedName !== name ? `${accessor}[${escapedName}]` : `${accessor}.${name}`;
}
function jitOnlyGuardedExpression(expr) {
  return guardedExpression("ngJitMode", expr);
}
function guardedExpression(guard, expr) {
  const guardExpr = new ExternalExpr({
    name: guard,
    moduleName: null
  });
  const guardNotDefined = new BinaryOperatorExpr(BinaryOperator.Identical, new TypeofExpr(guardExpr), literal("undefined"));
  const guardUndefinedOrTrue = new BinaryOperatorExpr(
    BinaryOperator.Or,
    guardNotDefined,
    guardExpr,
    /* type */
    void 0,
    /* sourceSpan */
    void 0,
    true
  );
  return new BinaryOperatorExpr(BinaryOperator.And, guardUndefinedOrTrue, expr);
}
function wrapReference(value) {
  const wrapped = new WrappedNodeExpr(value);
  return {
    value: wrapped,
    type: wrapped
  };
}
function refsToArray(refs, shouldForwardDeclare) {
  const values = literalArr(refs.map((ref) => ref.value));
  return shouldForwardDeclare ? arrowFn([], values) : values;
}
function createMayBeForwardRefExpression(expression, forwardRef2) {
  return {
    expression,
    forwardRef: forwardRef2
  };
}
function convertFromMaybeForwardRefExpression({
  expression,
  forwardRef: forwardRef2
}) {
  switch (forwardRef2) {
    case 0:
    case 1:
      return expression;
    case 2:
      return generateForwardRef(expression);
  }
}
function generateForwardRef(expr) {
  return importExpr(Identifiers.forwardRef).callFn([arrowFn([], expr)]);
}
var R3FactoryDelegateType;
(function(R3FactoryDelegateType2) {
  R3FactoryDelegateType2[R3FactoryDelegateType2["Class"] = 0] = "Class";
  R3FactoryDelegateType2[R3FactoryDelegateType2["Function"] = 1] = "Function";
})(R3FactoryDelegateType || (R3FactoryDelegateType = {}));
function compileFactoryFunction(meta) {
  const t = variable("__ngFactoryType__");
  let baseFactoryVar = null;
  const typeForCtor = !isDelegatedFactoryMetadata(meta) ? new BinaryOperatorExpr(BinaryOperator.Or, t, meta.type.value) : t;
  let ctorExpr = null;
  if (meta.deps !== null) {
    if (meta.deps !== "invalid") {
      ctorExpr = new InstantiateExpr(typeForCtor, injectDependencies(meta.deps, meta.target));
    }
  } else {
    baseFactoryVar = variable(`\u0275${meta.name}_BaseFactory`);
    ctorExpr = baseFactoryVar.callFn([typeForCtor]);
  }
  const body = [];
  let retExpr = null;
  function makeConditionalFactory(nonCtorExpr) {
    const r = variable("__ngConditionalFactory__");
    body.push(r.set(NULL_EXPR).toDeclStmt());
    const ctorStmt = ctorExpr !== null ? r.set(ctorExpr).toStmt() : importExpr(Identifiers.invalidFactory).callFn([]).toStmt();
    body.push(ifStmt(t, [ctorStmt], [r.set(nonCtorExpr).toStmt()]));
    return r;
  }
  if (isDelegatedFactoryMetadata(meta)) {
    const delegateArgs = injectDependencies(meta.delegateDeps, meta.target);
    const factoryExpr = new (meta.delegateType === R3FactoryDelegateType.Class ? InstantiateExpr : InvokeFunctionExpr)(meta.delegate, delegateArgs);
    retExpr = makeConditionalFactory(factoryExpr);
  } else if (isExpressionFactoryMetadata(meta)) {
    retExpr = makeConditionalFactory(meta.expression);
  } else {
    retExpr = ctorExpr;
  }
  if (retExpr === null) {
    body.push(importExpr(Identifiers.invalidFactory).callFn([]).toStmt());
  } else if (baseFactoryVar !== null) {
    const getInheritedFactoryCall = importExpr(Identifiers.getInheritedFactory).callFn([meta.type.value]);
    const baseFactory = new BinaryOperatorExpr(BinaryOperator.Or, baseFactoryVar, baseFactoryVar.set(getInheritedFactoryCall));
    body.push(new ReturnStatement(baseFactory.callFn([typeForCtor])));
  } else {
    body.push(new ReturnStatement(retExpr));
  }
  let factoryFn = fn([new FnParam(t.name, DYNAMIC_TYPE)], body, INFERRED_TYPE, void 0, `${meta.name}_Factory`);
  if (baseFactoryVar !== null) {
    factoryFn = arrowFn([], [new DeclareVarStmt(baseFactoryVar.name), new ReturnStatement(factoryFn)]).callFn(
      [],
      /* sourceSpan */
      void 0,
      /* pure */
      true
    );
  }
  return {
    expression: factoryFn,
    statements: [],
    type: createFactoryType(meta)
  };
}
function createFactoryType(meta) {
  const ctorDepsType = meta.deps !== null && meta.deps !== "invalid" ? createCtorDepsType(meta.deps) : NONE_TYPE;
  return expressionType(importExpr(Identifiers.FactoryDeclaration, [typeWithParameters(meta.type.type, meta.typeArgumentCount), ctorDepsType]));
}
function injectDependencies(deps, target) {
  return deps.map((dep, index) => compileInjectDependency(dep, target, index));
}
function compileInjectDependency(dep, target, index) {
  if (dep.token === null) {
    return importExpr(Identifiers.invalidFactoryDep).callFn([literal(index)]);
  } else if (dep.attributeNameType === null) {
    const flags = 0 | (dep.self ? 2 : 0) | (dep.skipSelf ? 4 : 0) | (dep.host ? 1 : 0) | (dep.optional ? 8 : 0) | (target === FactoryTarget.Pipe ? 16 : 0);
    let flagsParam = flags !== 0 || dep.optional ? literal(flags) : null;
    const injectArgs = [dep.token];
    if (flagsParam) {
      injectArgs.push(flagsParam);
    }
    const injectFn = getInjectFn(target);
    return importExpr(injectFn).callFn(injectArgs);
  } else {
    return importExpr(Identifiers.injectAttribute).callFn([dep.token]);
  }
}
function createCtorDepsType(deps) {
  let hasTypes = false;
  const attributeTypes = deps.map((dep) => {
    const type = createCtorDepType(dep);
    if (type !== null) {
      hasTypes = true;
      return type;
    } else {
      return literal(null);
    }
  });
  if (hasTypes) {
    return expressionType(literalArr(attributeTypes));
  } else {
    return NONE_TYPE;
  }
}
function createCtorDepType(dep) {
  const entries = [];
  if (dep.attributeNameType !== null) {
    entries.push({
      key: "attribute",
      value: dep.attributeNameType,
      quoted: false
    });
  }
  if (dep.optional) {
    entries.push({
      key: "optional",
      value: literal(true),
      quoted: false
    });
  }
  if (dep.host) {
    entries.push({
      key: "host",
      value: literal(true),
      quoted: false
    });
  }
  if (dep.self) {
    entries.push({
      key: "self",
      value: literal(true),
      quoted: false
    });
  }
  if (dep.skipSelf) {
    entries.push({
      key: "skipSelf",
      value: literal(true),
      quoted: false
    });
  }
  return entries.length > 0 ? literalMap(entries) : null;
}
function isDelegatedFactoryMetadata(meta) {
  return meta.delegateType !== void 0;
}
function isExpressionFactoryMetadata(meta) {
  return meta.expression !== void 0;
}
function getInjectFn(target) {
  switch (target) {
    case FactoryTarget.Component:
    case FactoryTarget.Directive:
    case FactoryTarget.Pipe:
      return Identifiers.directiveInject;
    case FactoryTarget.NgModule:
    case FactoryTarget.Injectable:
    default:
      return Identifiers.inject;
  }
}
var ParserError = class {
  input;
  errLocation;
  ctxLocation;
  message;
  constructor(message, input2, errLocation, ctxLocation) {
    this.input = input2;
    this.errLocation = errLocation;
    this.ctxLocation = ctxLocation;
    this.message = `Parser Error: ${message} ${errLocation} [${input2}] in ${ctxLocation}`;
  }
};
var ParseSpan = class {
  start;
  end;
  constructor(start, end) {
    this.start = start;
    this.end = end;
  }
  toAbsolute(absoluteOffset) {
    return new AbsoluteSourceSpan(absoluteOffset + this.start, absoluteOffset + this.end);
  }
};
var AST = class {
  span;
  sourceSpan;
  constructor(span, sourceSpan) {
    this.span = span;
    this.sourceSpan = sourceSpan;
  }
  toString() {
    return "AST";
  }
};
var ASTWithName = class extends AST {
  nameSpan;
  constructor(span, sourceSpan, nameSpan) {
    super(span, sourceSpan);
    this.nameSpan = nameSpan;
  }
};
var EmptyExpr$1 = class EmptyExpr extends AST {
  visit(visitor, context = null) {
  }
};
var ImplicitReceiver = class extends AST {
  visit(visitor, context = null) {
    return visitor.visitImplicitReceiver(this, context);
  }
};
var ThisReceiver = class extends ImplicitReceiver {
  visit(visitor, context = null) {
    return visitor.visitThisReceiver?.(this, context);
  }
};
var Chain = class extends AST {
  expressions;
  constructor(span, sourceSpan, expressions) {
    super(span, sourceSpan);
    this.expressions = expressions;
  }
  visit(visitor, context = null) {
    return visitor.visitChain(this, context);
  }
};
var Conditional = class extends AST {
  condition;
  trueExp;
  falseExp;
  constructor(span, sourceSpan, condition, trueExp, falseExp) {
    super(span, sourceSpan);
    this.condition = condition;
    this.trueExp = trueExp;
    this.falseExp = falseExp;
  }
  visit(visitor, context = null) {
    return visitor.visitConditional(this, context);
  }
};
var PropertyRead = class extends ASTWithName {
  receiver;
  name;
  constructor(span, sourceSpan, nameSpan, receiver, name) {
    super(span, sourceSpan, nameSpan);
    this.receiver = receiver;
    this.name = name;
  }
  visit(visitor, context = null) {
    return visitor.visitPropertyRead(this, context);
  }
};
var PropertyWrite = class extends ASTWithName {
  receiver;
  name;
  value;
  constructor(span, sourceSpan, nameSpan, receiver, name, value) {
    super(span, sourceSpan, nameSpan);
    this.receiver = receiver;
    this.name = name;
    this.value = value;
  }
  visit(visitor, context = null) {
    return visitor.visitPropertyWrite(this, context);
  }
};
var SafePropertyRead = class extends ASTWithName {
  receiver;
  name;
  constructor(span, sourceSpan, nameSpan, receiver, name) {
    super(span, sourceSpan, nameSpan);
    this.receiver = receiver;
    this.name = name;
  }
  visit(visitor, context = null) {
    return visitor.visitSafePropertyRead(this, context);
  }
};
var KeyedRead = class extends AST {
  receiver;
  key;
  constructor(span, sourceSpan, receiver, key) {
    super(span, sourceSpan);
    this.receiver = receiver;
    this.key = key;
  }
  visit(visitor, context = null) {
    return visitor.visitKeyedRead(this, context);
  }
};
var SafeKeyedRead = class extends AST {
  receiver;
  key;
  constructor(span, sourceSpan, receiver, key) {
    super(span, sourceSpan);
    this.receiver = receiver;
    this.key = key;
  }
  visit(visitor, context = null) {
    return visitor.visitSafeKeyedRead(this, context);
  }
};
var KeyedWrite = class extends AST {
  receiver;
  key;
  value;
  constructor(span, sourceSpan, receiver, key, value) {
    super(span, sourceSpan);
    this.receiver = receiver;
    this.key = key;
    this.value = value;
  }
  visit(visitor, context = null) {
    return visitor.visitKeyedWrite(this, context);
  }
};
var BindingPipe = class extends ASTWithName {
  exp;
  name;
  args;
  constructor(span, sourceSpan, exp, name, args, nameSpan) {
    super(span, sourceSpan, nameSpan);
    this.exp = exp;
    this.name = name;
    this.args = args;
  }
  visit(visitor, context = null) {
    return visitor.visitPipe(this, context);
  }
};
var LiteralPrimitive = class extends AST {
  value;
  constructor(span, sourceSpan, value) {
    super(span, sourceSpan);
    this.value = value;
  }
  visit(visitor, context = null) {
    return visitor.visitLiteralPrimitive(this, context);
  }
};
var LiteralArray = class extends AST {
  expressions;
  constructor(span, sourceSpan, expressions) {
    super(span, sourceSpan);
    this.expressions = expressions;
  }
  visit(visitor, context = null) {
    return visitor.visitLiteralArray(this, context);
  }
};
var LiteralMap = class extends AST {
  keys;
  values;
  constructor(span, sourceSpan, keys, values) {
    super(span, sourceSpan);
    this.keys = keys;
    this.values = values;
  }
  visit(visitor, context = null) {
    return visitor.visitLiteralMap(this, context);
  }
};
var Interpolation$1 = class Interpolation extends AST {
  strings;
  expressions;
  constructor(span, sourceSpan, strings, expressions) {
    super(span, sourceSpan);
    this.strings = strings;
    this.expressions = expressions;
  }
  visit(visitor, context = null) {
    return visitor.visitInterpolation(this, context);
  }
};
var Binary = class extends AST {
  operation;
  left;
  right;
  constructor(span, sourceSpan, operation, left, right) {
    super(span, sourceSpan);
    this.operation = operation;
    this.left = left;
    this.right = right;
  }
  visit(visitor, context = null) {
    return visitor.visitBinary(this, context);
  }
};
var Unary = class _Unary extends Binary {
  operator;
  expr;
  // Redeclare the properties that are inherited from `Binary` as `never`, as consumers should not
  // depend on these fields when operating on `Unary`.
  left = null;
  right = null;
  operation = null;
  /**
   * Creates a unary minus expression "-x", represented as `Binary` using "0 - x".
   */
  static createMinus(span, sourceSpan, expr) {
    return new _Unary(span, sourceSpan, "-", expr, "-", new LiteralPrimitive(span, sourceSpan, 0), expr);
  }
  /**
   * Creates a unary plus expression "+x", represented as `Binary` using "x - 0".
   */
  static createPlus(span, sourceSpan, expr) {
    return new _Unary(span, sourceSpan, "+", expr, "-", expr, new LiteralPrimitive(span, sourceSpan, 0));
  }
  /**
   * During the deprecation period this constructor is private, to avoid consumers from creating
   * a `Unary` with the fallback properties for `Binary`.
   */
  constructor(span, sourceSpan, operator, expr, binaryOp, binaryLeft, binaryRight) {
    super(span, sourceSpan, binaryOp, binaryLeft, binaryRight);
    this.operator = operator;
    this.expr = expr;
  }
  visit(visitor, context = null) {
    if (visitor.visitUnary !== void 0) {
      return visitor.visitUnary(this, context);
    }
    return visitor.visitBinary(this, context);
  }
};
var PrefixNot = class extends AST {
  expression;
  constructor(span, sourceSpan, expression) {
    super(span, sourceSpan);
    this.expression = expression;
  }
  visit(visitor, context = null) {
    return visitor.visitPrefixNot(this, context);
  }
};
var TypeofExpression = class extends AST {
  expression;
  constructor(span, sourceSpan, expression) {
    super(span, sourceSpan);
    this.expression = expression;
  }
  visit(visitor, context = null) {
    return visitor.visitTypeofExpression(this, context);
  }
};
var NonNullAssert = class extends AST {
  expression;
  constructor(span, sourceSpan, expression) {
    super(span, sourceSpan);
    this.expression = expression;
  }
  visit(visitor, context = null) {
    return visitor.visitNonNullAssert(this, context);
  }
};
var Call = class extends AST {
  receiver;
  args;
  argumentSpan;
  constructor(span, sourceSpan, receiver, args, argumentSpan) {
    super(span, sourceSpan);
    this.receiver = receiver;
    this.args = args;
    this.argumentSpan = argumentSpan;
  }
  visit(visitor, context = null) {
    return visitor.visitCall(this, context);
  }
};
var SafeCall = class extends AST {
  receiver;
  args;
  argumentSpan;
  constructor(span, sourceSpan, receiver, args, argumentSpan) {
    super(span, sourceSpan);
    this.receiver = receiver;
    this.args = args;
    this.argumentSpan = argumentSpan;
  }
  visit(visitor, context = null) {
    return visitor.visitSafeCall(this, context);
  }
};
var TemplateLiteral = class extends AST {
  elements;
  expressions;
  constructor(span, sourceSpan, elements, expressions) {
    super(span, sourceSpan);
    this.elements = elements;
    this.expressions = expressions;
  }
  visit(visitor, context) {
    return visitor.visitTemplateLiteral(this, context);
  }
};
var TemplateLiteralElement = class extends AST {
  text;
  constructor(span, sourceSpan, text3) {
    super(span, sourceSpan);
    this.text = text3;
  }
  visit(visitor, context) {
    return visitor.visitTemplateLiteralElement(this, context);
  }
};
var AbsoluteSourceSpan = class {
  start;
  end;
  constructor(start, end) {
    this.start = start;
    this.end = end;
  }
};
var ASTWithSource = class extends AST {
  ast;
  source;
  location;
  errors;
  constructor(ast, source, location2, absoluteOffset, errors) {
    super(new ParseSpan(0, source === null ? 0 : source.length), new AbsoluteSourceSpan(absoluteOffset, source === null ? absoluteOffset : absoluteOffset + source.length));
    this.ast = ast;
    this.source = source;
    this.location = location2;
    this.errors = errors;
  }
  visit(visitor, context = null) {
    if (visitor.visitASTWithSource) {
      return visitor.visitASTWithSource(this, context);
    }
    return this.ast.visit(visitor, context);
  }
  toString() {
    return `${this.source} in ${this.location}`;
  }
};
var VariableBinding = class {
  sourceSpan;
  key;
  value;
  /**
   * @param sourceSpan entire span of the binding.
   * @param key name of the LHS along with its span.
   * @param value optional value for the RHS along with its span.
   */
  constructor(sourceSpan, key, value) {
    this.sourceSpan = sourceSpan;
    this.key = key;
    this.value = value;
  }
};
var ExpressionBinding = class {
  sourceSpan;
  key;
  value;
  /**
   * @param sourceSpan entire span of the binding.
   * @param key binding name, like ngForOf, ngForTrackBy, ngIf, along with its
   * span. Note that the length of the span may not be the same as
   * `key.source.length`. For example,
   * 1. key.source = ngFor, key.span is for "ngFor"
   * 2. key.source = ngForOf, key.span is for "of"
   * 3. key.source = ngForTrackBy, key.span is for "trackBy"
   * @param value optional expression for the RHS.
   */
  constructor(sourceSpan, key, value) {
    this.sourceSpan = sourceSpan;
    this.key = key;
    this.value = value;
  }
};
var RecursiveAstVisitor = class {
  visit(ast, context) {
    ast.visit(this, context);
  }
  visitUnary(ast, context) {
    this.visit(ast.expr, context);
  }
  visitBinary(ast, context) {
    this.visit(ast.left, context);
    this.visit(ast.right, context);
  }
  visitChain(ast, context) {
    this.visitAll(ast.expressions, context);
  }
  visitConditional(ast, context) {
    this.visit(ast.condition, context);
    this.visit(ast.trueExp, context);
    this.visit(ast.falseExp, context);
  }
  visitPipe(ast, context) {
    this.visit(ast.exp, context);
    this.visitAll(ast.args, context);
  }
  visitImplicitReceiver(ast, context) {
  }
  visitThisReceiver(ast, context) {
  }
  visitInterpolation(ast, context) {
    this.visitAll(ast.expressions, context);
  }
  visitKeyedRead(ast, context) {
    this.visit(ast.receiver, context);
    this.visit(ast.key, context);
  }
  visitKeyedWrite(ast, context) {
    this.visit(ast.receiver, context);
    this.visit(ast.key, context);
    this.visit(ast.value, context);
  }
  visitLiteralArray(ast, context) {
    this.visitAll(ast.expressions, context);
  }
  visitLiteralMap(ast, context) {
    this.visitAll(ast.values, context);
  }
  visitLiteralPrimitive(ast, context) {
  }
  visitPrefixNot(ast, context) {
    this.visit(ast.expression, context);
  }
  visitTypeofExpression(ast, context) {
    this.visit(ast.expression, context);
  }
  visitNonNullAssert(ast, context) {
    this.visit(ast.expression, context);
  }
  visitPropertyRead(ast, context) {
    this.visit(ast.receiver, context);
  }
  visitPropertyWrite(ast, context) {
    this.visit(ast.receiver, context);
    this.visit(ast.value, context);
  }
  visitSafePropertyRead(ast, context) {
    this.visit(ast.receiver, context);
  }
  visitSafeKeyedRead(ast, context) {
    this.visit(ast.receiver, context);
    this.visit(ast.key, context);
  }
  visitCall(ast, context) {
    this.visit(ast.receiver, context);
    this.visitAll(ast.args, context);
  }
  visitSafeCall(ast, context) {
    this.visit(ast.receiver, context);
    this.visitAll(ast.args, context);
  }
  visitTemplateLiteral(ast, context) {
    for (let i = 0; i < ast.elements.length; i++) {
      this.visit(ast.elements[i], context);
      const expression = i < ast.expressions.length ? ast.expressions[i] : null;
      if (expression !== null) {
        this.visit(expression, context);
      }
    }
  }
  visitTemplateLiteralElement(ast, context) {
  }
  // This is not part of the AstVisitor interface, just a helper method
  visitAll(asts, context) {
    for (const ast of asts) {
      this.visit(ast, context);
    }
  }
};
var ParsedProperty = class {
  name;
  expression;
  type;
  sourceSpan;
  keySpan;
  valueSpan;
  isLiteral;
  isAnimation;
  constructor(name, expression, type, sourceSpan, keySpan, valueSpan) {
    this.name = name;
    this.expression = expression;
    this.type = type;
    this.sourceSpan = sourceSpan;
    this.keySpan = keySpan;
    this.valueSpan = valueSpan;
    this.isLiteral = this.type === ParsedPropertyType.LITERAL_ATTR;
    this.isAnimation = this.type === ParsedPropertyType.ANIMATION;
  }
};
var ParsedPropertyType;
(function(ParsedPropertyType2) {
  ParsedPropertyType2[ParsedPropertyType2["DEFAULT"] = 0] = "DEFAULT";
  ParsedPropertyType2[ParsedPropertyType2["LITERAL_ATTR"] = 1] = "LITERAL_ATTR";
  ParsedPropertyType2[ParsedPropertyType2["ANIMATION"] = 2] = "ANIMATION";
  ParsedPropertyType2[ParsedPropertyType2["TWO_WAY"] = 3] = "TWO_WAY";
})(ParsedPropertyType || (ParsedPropertyType = {}));
var ParsedEventType;
(function(ParsedEventType2) {
  ParsedEventType2[ParsedEventType2["Regular"] = 0] = "Regular";
  ParsedEventType2[ParsedEventType2["Animation"] = 1] = "Animation";
  ParsedEventType2[ParsedEventType2["TwoWay"] = 2] = "TwoWay";
})(ParsedEventType || (ParsedEventType = {}));
var ParsedEvent = class {
  name;
  targetOrPhase;
  type;
  handler;
  sourceSpan;
  handlerSpan;
  keySpan;
  constructor(name, targetOrPhase, type, handler, sourceSpan, handlerSpan, keySpan) {
    this.name = name;
    this.targetOrPhase = targetOrPhase;
    this.type = type;
    this.handler = handler;
    this.sourceSpan = sourceSpan;
    this.handlerSpan = handlerSpan;
    this.keySpan = keySpan;
  }
};
var ParsedVariable = class {
  name;
  value;
  sourceSpan;
  keySpan;
  valueSpan;
  constructor(name, value, sourceSpan, keySpan, valueSpan) {
    this.name = name;
    this.value = value;
    this.sourceSpan = sourceSpan;
    this.keySpan = keySpan;
    this.valueSpan = valueSpan;
  }
};
var BindingType;
(function(BindingType2) {
  BindingType2[BindingType2["Property"] = 0] = "Property";
  BindingType2[BindingType2["Attribute"] = 1] = "Attribute";
  BindingType2[BindingType2["Class"] = 2] = "Class";
  BindingType2[BindingType2["Style"] = 3] = "Style";
  BindingType2[BindingType2["Animation"] = 4] = "Animation";
  BindingType2[BindingType2["TwoWay"] = 5] = "TwoWay";
})(BindingType || (BindingType = {}));
var BoundElementProperty = class {
  name;
  type;
  securityContext;
  value;
  unit;
  sourceSpan;
  keySpan;
  valueSpan;
  constructor(name, type, securityContext, value, unit, sourceSpan, keySpan, valueSpan) {
    this.name = name;
    this.type = type;
    this.securityContext = securityContext;
    this.value = value;
    this.unit = unit;
    this.sourceSpan = sourceSpan;
    this.keySpan = keySpan;
    this.valueSpan = valueSpan;
  }
};
var TagContentType;
(function(TagContentType2) {
  TagContentType2[TagContentType2["RAW_TEXT"] = 0] = "RAW_TEXT";
  TagContentType2[TagContentType2["ESCAPABLE_RAW_TEXT"] = 1] = "ESCAPABLE_RAW_TEXT";
  TagContentType2[TagContentType2["PARSABLE_DATA"] = 2] = "PARSABLE_DATA";
})(TagContentType || (TagContentType = {}));
function splitNsName(elementName, fatal = true) {
  if (elementName[0] != ":") {
    return [null, elementName];
  }
  const colonIndex = elementName.indexOf(":", 1);
  if (colonIndex === -1) {
    if (fatal) {
      throw new Error(`Unsupported format "${elementName}" expecting ":namespace:name"`);
    } else {
      return [null, elementName];
    }
  }
  return [elementName.slice(1, colonIndex), elementName.slice(colonIndex + 1)];
}
function isNgContainer(tagName) {
  return splitNsName(tagName)[1] === "ng-container";
}
function isNgContent(tagName) {
  return splitNsName(tagName)[1] === "ng-content";
}
function isNgTemplate(tagName) {
  return splitNsName(tagName)[1] === "ng-template";
}
function getNsPrefix(fullName) {
  return fullName === null ? null : splitNsName(fullName)[0];
}
function mergeNsAndName(prefix, localName) {
  return prefix ? `:${prefix}:${localName}` : localName;
}
var Comment$1 = class Comment {
  value;
  sourceSpan;
  constructor(value, sourceSpan) {
    this.value = value;
    this.sourceSpan = sourceSpan;
  }
  visit(_visitor2) {
    throw new Error("visit() not implemented for Comment");
  }
};
var Text$3 = class Text {
  value;
  sourceSpan;
  constructor(value, sourceSpan) {
    this.value = value;
    this.sourceSpan = sourceSpan;
  }
  visit(visitor) {
    return visitor.visitText(this);
  }
};
var BoundText = class {
  value;
  sourceSpan;
  i18n;
  constructor(value, sourceSpan, i18n2) {
    this.value = value;
    this.sourceSpan = sourceSpan;
    this.i18n = i18n2;
  }
  visit(visitor) {
    return visitor.visitBoundText(this);
  }
};
var TextAttribute = class {
  name;
  value;
  sourceSpan;
  keySpan;
  valueSpan;
  i18n;
  constructor(name, value, sourceSpan, keySpan, valueSpan, i18n2) {
    this.name = name;
    this.value = value;
    this.sourceSpan = sourceSpan;
    this.keySpan = keySpan;
    this.valueSpan = valueSpan;
    this.i18n = i18n2;
  }
  visit(visitor) {
    return visitor.visitTextAttribute(this);
  }
};
var BoundAttribute = class _BoundAttribute {
  name;
  type;
  securityContext;
  value;
  unit;
  sourceSpan;
  keySpan;
  valueSpan;
  i18n;
  constructor(name, type, securityContext, value, unit, sourceSpan, keySpan, valueSpan, i18n2) {
    this.name = name;
    this.type = type;
    this.securityContext = securityContext;
    this.value = value;
    this.unit = unit;
    this.sourceSpan = sourceSpan;
    this.keySpan = keySpan;
    this.valueSpan = valueSpan;
    this.i18n = i18n2;
  }
  static fromBoundElementProperty(prop, i18n2) {
    if (prop.keySpan === void 0) {
      throw new Error(`Unexpected state: keySpan must be defined for bound attributes but was not for ${prop.name}: ${prop.sourceSpan}`);
    }
    return new _BoundAttribute(prop.name, prop.type, prop.securityContext, prop.value, prop.unit, prop.sourceSpan, prop.keySpan, prop.valueSpan, i18n2);
  }
  visit(visitor) {
    return visitor.visitBoundAttribute(this);
  }
};
var BoundEvent = class _BoundEvent {
  name;
  type;
  handler;
  target;
  phase;
  sourceSpan;
  handlerSpan;
  keySpan;
  constructor(name, type, handler, target, phase, sourceSpan, handlerSpan, keySpan) {
    this.name = name;
    this.type = type;
    this.handler = handler;
    this.target = target;
    this.phase = phase;
    this.sourceSpan = sourceSpan;
    this.handlerSpan = handlerSpan;
    this.keySpan = keySpan;
  }
  static fromParsedEvent(event) {
    const target = event.type === ParsedEventType.Regular ? event.targetOrPhase : null;
    const phase = event.type === ParsedEventType.Animation ? event.targetOrPhase : null;
    if (event.keySpan === void 0) {
      throw new Error(`Unexpected state: keySpan must be defined for bound event but was not for ${event.name}: ${event.sourceSpan}`);
    }
    return new _BoundEvent(event.name, event.type, event.handler, target, phase, event.sourceSpan, event.handlerSpan, event.keySpan);
  }
  visit(visitor) {
    return visitor.visitBoundEvent(this);
  }
};
var Element$1 = class Element {
  name;
  attributes;
  inputs;
  outputs;
  children;
  references;
  sourceSpan;
  startSourceSpan;
  endSourceSpan;
  i18n;
  constructor(name, attributes, inputs, outputs, children, references, sourceSpan, startSourceSpan, endSourceSpan, i18n2) {
    this.name = name;
    this.attributes = attributes;
    this.inputs = inputs;
    this.outputs = outputs;
    this.children = children;
    this.references = references;
    this.sourceSpan = sourceSpan;
    this.startSourceSpan = startSourceSpan;
    this.endSourceSpan = endSourceSpan;
    this.i18n = i18n2;
  }
  visit(visitor) {
    return visitor.visitElement(this);
  }
};
var DeferredTrigger = class {
  nameSpan;
  sourceSpan;
  prefetchSpan;
  whenOrOnSourceSpan;
  hydrateSpan;
  constructor(nameSpan, sourceSpan, prefetchSpan, whenOrOnSourceSpan, hydrateSpan) {
    this.nameSpan = nameSpan;
    this.sourceSpan = sourceSpan;
    this.prefetchSpan = prefetchSpan;
    this.whenOrOnSourceSpan = whenOrOnSourceSpan;
    this.hydrateSpan = hydrateSpan;
  }
  visit(visitor) {
    return visitor.visitDeferredTrigger(this);
  }
};
var BoundDeferredTrigger = class extends DeferredTrigger {
  value;
  constructor(value, sourceSpan, prefetchSpan, whenSourceSpan, hydrateSpan) {
    super(
      /** nameSpan */
      null,
      sourceSpan,
      prefetchSpan,
      whenSourceSpan,
      hydrateSpan
    );
    this.value = value;
  }
};
var NeverDeferredTrigger = class extends DeferredTrigger {
};
var IdleDeferredTrigger = class extends DeferredTrigger {
};
var ImmediateDeferredTrigger = class extends DeferredTrigger {
};
var HoverDeferredTrigger = class extends DeferredTrigger {
  reference;
  constructor(reference2, nameSpan, sourceSpan, prefetchSpan, onSourceSpan, hydrateSpan) {
    super(nameSpan, sourceSpan, prefetchSpan, onSourceSpan, hydrateSpan);
    this.reference = reference2;
  }
};
var TimerDeferredTrigger = class extends DeferredTrigger {
  delay;
  constructor(delay, nameSpan, sourceSpan, prefetchSpan, onSourceSpan, hydrateSpan) {
    super(nameSpan, sourceSpan, prefetchSpan, onSourceSpan, hydrateSpan);
    this.delay = delay;
  }
};
var InteractionDeferredTrigger = class extends DeferredTrigger {
  reference;
  constructor(reference2, nameSpan, sourceSpan, prefetchSpan, onSourceSpan, hydrateSpan) {
    super(nameSpan, sourceSpan, prefetchSpan, onSourceSpan, hydrateSpan);
    this.reference = reference2;
  }
};
var ViewportDeferredTrigger = class extends DeferredTrigger {
  reference;
  constructor(reference2, nameSpan, sourceSpan, prefetchSpan, onSourceSpan, hydrateSpan) {
    super(nameSpan, sourceSpan, prefetchSpan, onSourceSpan, hydrateSpan);
    this.reference = reference2;
  }
};
var BlockNode = class {
  nameSpan;
  sourceSpan;
  startSourceSpan;
  endSourceSpan;
  constructor(nameSpan, sourceSpan, startSourceSpan, endSourceSpan) {
    this.nameSpan = nameSpan;
    this.sourceSpan = sourceSpan;
    this.startSourceSpan = startSourceSpan;
    this.endSourceSpan = endSourceSpan;
  }
};
var DeferredBlockPlaceholder = class extends BlockNode {
  children;
  minimumTime;
  i18n;
  constructor(children, minimumTime, nameSpan, sourceSpan, startSourceSpan, endSourceSpan, i18n2) {
    super(nameSpan, sourceSpan, startSourceSpan, endSourceSpan);
    this.children = children;
    this.minimumTime = minimumTime;
    this.i18n = i18n2;
  }
  visit(visitor) {
    return visitor.visitDeferredBlockPlaceholder(this);
  }
};
var DeferredBlockLoading = class extends BlockNode {
  children;
  afterTime;
  minimumTime;
  i18n;
  constructor(children, afterTime, minimumTime, nameSpan, sourceSpan, startSourceSpan, endSourceSpan, i18n2) {
    super(nameSpan, sourceSpan, startSourceSpan, endSourceSpan);
    this.children = children;
    this.afterTime = afterTime;
    this.minimumTime = minimumTime;
    this.i18n = i18n2;
  }
  visit(visitor) {
    return visitor.visitDeferredBlockLoading(this);
  }
};
var DeferredBlockError = class extends BlockNode {
  children;
  i18n;
  constructor(children, nameSpan, sourceSpan, startSourceSpan, endSourceSpan, i18n2) {
    super(nameSpan, sourceSpan, startSourceSpan, endSourceSpan);
    this.children = children;
    this.i18n = i18n2;
  }
  visit(visitor) {
    return visitor.visitDeferredBlockError(this);
  }
};
var DeferredBlock = class extends BlockNode {
  children;
  placeholder;
  loading;
  error;
  mainBlockSpan;
  i18n;
  triggers;
  prefetchTriggers;
  hydrateTriggers;
  definedTriggers;
  definedPrefetchTriggers;
  definedHydrateTriggers;
  constructor(children, triggers, prefetchTriggers, hydrateTriggers, placeholder, loading, error, nameSpan, sourceSpan, mainBlockSpan, startSourceSpan, endSourceSpan, i18n2) {
    super(nameSpan, sourceSpan, startSourceSpan, endSourceSpan);
    this.children = children;
    this.placeholder = placeholder;
    this.loading = loading;
    this.error = error;
    this.mainBlockSpan = mainBlockSpan;
    this.i18n = i18n2;
    this.triggers = triggers;
    this.prefetchTriggers = prefetchTriggers;
    this.hydrateTriggers = hydrateTriggers;
    this.definedTriggers = Object.keys(triggers);
    this.definedPrefetchTriggers = Object.keys(prefetchTriggers);
    this.definedHydrateTriggers = Object.keys(hydrateTriggers);
  }
  visit(visitor) {
    return visitor.visitDeferredBlock(this);
  }
  visitAll(visitor) {
    this.visitTriggers(this.definedHydrateTriggers, this.hydrateTriggers, visitor);
    this.visitTriggers(this.definedTriggers, this.triggers, visitor);
    this.visitTriggers(this.definedPrefetchTriggers, this.prefetchTriggers, visitor);
    visitAll$1(visitor, this.children);
    const remainingBlocks = [this.placeholder, this.loading, this.error].filter((x) => x !== null);
    visitAll$1(visitor, remainingBlocks);
  }
  visitTriggers(keys, triggers, visitor) {
    visitAll$1(visitor, keys.map((k) => triggers[k]));
  }
};
var SwitchBlock = class extends BlockNode {
  expression;
  cases;
  unknownBlocks;
  constructor(expression, cases, unknownBlocks, sourceSpan, startSourceSpan, endSourceSpan, nameSpan) {
    super(nameSpan, sourceSpan, startSourceSpan, endSourceSpan);
    this.expression = expression;
    this.cases = cases;
    this.unknownBlocks = unknownBlocks;
  }
  visit(visitor) {
    return visitor.visitSwitchBlock(this);
  }
};
var SwitchBlockCase = class extends BlockNode {
  expression;
  children;
  i18n;
  constructor(expression, children, sourceSpan, startSourceSpan, endSourceSpan, nameSpan, i18n2) {
    super(nameSpan, sourceSpan, startSourceSpan, endSourceSpan);
    this.expression = expression;
    this.children = children;
    this.i18n = i18n2;
  }
  visit(visitor) {
    return visitor.visitSwitchBlockCase(this);
  }
};
var ForLoopBlock = class extends BlockNode {
  item;
  expression;
  trackBy;
  trackKeywordSpan;
  contextVariables;
  children;
  empty;
  mainBlockSpan;
  i18n;
  constructor(item, expression, trackBy, trackKeywordSpan, contextVariables, children, empty, sourceSpan, mainBlockSpan, startSourceSpan, endSourceSpan, nameSpan, i18n2) {
    super(nameSpan, sourceSpan, startSourceSpan, endSourceSpan);
    this.item = item;
    this.expression = expression;
    this.trackBy = trackBy;
    this.trackKeywordSpan = trackKeywordSpan;
    this.contextVariables = contextVariables;
    this.children = children;
    this.empty = empty;
    this.mainBlockSpan = mainBlockSpan;
    this.i18n = i18n2;
  }
  visit(visitor) {
    return visitor.visitForLoopBlock(this);
  }
};
var ForLoopBlockEmpty = class extends BlockNode {
  children;
  i18n;
  constructor(children, sourceSpan, startSourceSpan, endSourceSpan, nameSpan, i18n2) {
    super(nameSpan, sourceSpan, startSourceSpan, endSourceSpan);
    this.children = children;
    this.i18n = i18n2;
  }
  visit(visitor) {
    return visitor.visitForLoopBlockEmpty(this);
  }
};
var IfBlock = class extends BlockNode {
  branches;
  constructor(branches, sourceSpan, startSourceSpan, endSourceSpan, nameSpan) {
    super(nameSpan, sourceSpan, startSourceSpan, endSourceSpan);
    this.branches = branches;
  }
  visit(visitor) {
    return visitor.visitIfBlock(this);
  }
};
var IfBlockBranch = class extends BlockNode {
  expression;
  children;
  expressionAlias;
  i18n;
  constructor(expression, children, expressionAlias, sourceSpan, startSourceSpan, endSourceSpan, nameSpan, i18n2) {
    super(nameSpan, sourceSpan, startSourceSpan, endSourceSpan);
    this.expression = expression;
    this.children = children;
    this.expressionAlias = expressionAlias;
    this.i18n = i18n2;
  }
  visit(visitor) {
    return visitor.visitIfBlockBranch(this);
  }
};
var UnknownBlock = class {
  name;
  sourceSpan;
  nameSpan;
  constructor(name, sourceSpan, nameSpan) {
    this.name = name;
    this.sourceSpan = sourceSpan;
    this.nameSpan = nameSpan;
  }
  visit(visitor) {
    return visitor.visitUnknownBlock(this);
  }
};
var LetDeclaration$1 = class LetDeclaration {
  name;
  value;
  sourceSpan;
  nameSpan;
  valueSpan;
  constructor(name, value, sourceSpan, nameSpan, valueSpan) {
    this.name = name;
    this.value = value;
    this.sourceSpan = sourceSpan;
    this.nameSpan = nameSpan;
    this.valueSpan = valueSpan;
  }
  visit(visitor) {
    return visitor.visitLetDeclaration(this);
  }
};
var Template = class {
  tagName;
  attributes;
  inputs;
  outputs;
  templateAttrs;
  children;
  references;
  variables;
  sourceSpan;
  startSourceSpan;
  endSourceSpan;
  i18n;
  constructor(tagName, attributes, inputs, outputs, templateAttrs, children, references, variables, sourceSpan, startSourceSpan, endSourceSpan, i18n2) {
    this.tagName = tagName;
    this.attributes = attributes;
    this.inputs = inputs;
    this.outputs = outputs;
    this.templateAttrs = templateAttrs;
    this.children = children;
    this.references = references;
    this.variables = variables;
    this.sourceSpan = sourceSpan;
    this.startSourceSpan = startSourceSpan;
    this.endSourceSpan = endSourceSpan;
    this.i18n = i18n2;
  }
  visit(visitor) {
    return visitor.visitTemplate(this);
  }
};
var Content = class {
  selector;
  attributes;
  children;
  sourceSpan;
  i18n;
  name = "ng-content";
  constructor(selector, attributes, children, sourceSpan, i18n2) {
    this.selector = selector;
    this.attributes = attributes;
    this.children = children;
    this.sourceSpan = sourceSpan;
    this.i18n = i18n2;
  }
  visit(visitor) {
    return visitor.visitContent(this);
  }
};
var Variable = class {
  name;
  value;
  sourceSpan;
  keySpan;
  valueSpan;
  constructor(name, value, sourceSpan, keySpan, valueSpan) {
    this.name = name;
    this.value = value;
    this.sourceSpan = sourceSpan;
    this.keySpan = keySpan;
    this.valueSpan = valueSpan;
  }
  visit(visitor) {
    return visitor.visitVariable(this);
  }
};
var Reference = class {
  name;
  value;
  sourceSpan;
  keySpan;
  valueSpan;
  constructor(name, value, sourceSpan, keySpan, valueSpan) {
    this.name = name;
    this.value = value;
    this.sourceSpan = sourceSpan;
    this.keySpan = keySpan;
    this.valueSpan = valueSpan;
  }
  visit(visitor) {
    return visitor.visitReference(this);
  }
};
var Icu$1 = class Icu {
  vars;
  placeholders;
  sourceSpan;
  i18n;
  constructor(vars, placeholders, sourceSpan, i18n2) {
    this.vars = vars;
    this.placeholders = placeholders;
    this.sourceSpan = sourceSpan;
    this.i18n = i18n2;
  }
  visit(visitor) {
    return visitor.visitIcu(this);
  }
};
function visitAll$1(visitor, nodes) {
  const result = [];
  if (visitor.visit) {
    for (const node of nodes) {
      visitor.visit(node) || node.visit(visitor);
    }
  } else {
    for (const node of nodes) {
      const newNode = node.visit(visitor);
      if (newNode) {
        result.push(newNode);
      }
    }
  }
  return result;
}
var Message = class {
  nodes;
  placeholders;
  placeholderToMessage;
  meaning;
  description;
  customId;
  sources;
  id;
  /** The ids to use if there are no custom id and if `i18nLegacyMessageIdFormat` is not empty */
  legacyIds = [];
  messageString;
  /**
   * @param nodes message AST
   * @param placeholders maps placeholder names to static content and their source spans
   * @param placeholderToMessage maps placeholder names to messages (used for nested ICU messages)
   * @param meaning
   * @param description
   * @param customId
   */
  constructor(nodes, placeholders, placeholderToMessage, meaning, description, customId) {
    this.nodes = nodes;
    this.placeholders = placeholders;
    this.placeholderToMessage = placeholderToMessage;
    this.meaning = meaning;
    this.description = description;
    this.customId = customId;
    this.id = this.customId;
    this.messageString = serializeMessage(this.nodes);
    if (nodes.length) {
      this.sources = [{
        filePath: nodes[0].sourceSpan.start.file.url,
        startLine: nodes[0].sourceSpan.start.line + 1,
        startCol: nodes[0].sourceSpan.start.col + 1,
        endLine: nodes[nodes.length - 1].sourceSpan.end.line + 1,
        endCol: nodes[0].sourceSpan.start.col + 1
      }];
    } else {
      this.sources = [];
    }
  }
};
var Text$2 = class Text2 {
  value;
  sourceSpan;
  constructor(value, sourceSpan) {
    this.value = value;
    this.sourceSpan = sourceSpan;
  }
  visit(visitor, context) {
    return visitor.visitText(this, context);
  }
};
var Container = class {
  children;
  sourceSpan;
  constructor(children, sourceSpan) {
    this.children = children;
    this.sourceSpan = sourceSpan;
  }
  visit(visitor, context) {
    return visitor.visitContainer(this, context);
  }
};
var Icu2 = class {
  expression;
  type;
  cases;
  sourceSpan;
  expressionPlaceholder;
  constructor(expression, type, cases, sourceSpan, expressionPlaceholder) {
    this.expression = expression;
    this.type = type;
    this.cases = cases;
    this.sourceSpan = sourceSpan;
    this.expressionPlaceholder = expressionPlaceholder;
  }
  visit(visitor, context) {
    return visitor.visitIcu(this, context);
  }
};
var TagPlaceholder = class {
  tag;
  attrs;
  startName;
  closeName;
  children;
  isVoid;
  sourceSpan;
  startSourceSpan;
  endSourceSpan;
  constructor(tag, attrs, startName, closeName, children, isVoid, sourceSpan, startSourceSpan, endSourceSpan) {
    this.tag = tag;
    this.attrs = attrs;
    this.startName = startName;
    this.closeName = closeName;
    this.children = children;
    this.isVoid = isVoid;
    this.sourceSpan = sourceSpan;
    this.startSourceSpan = startSourceSpan;
    this.endSourceSpan = endSourceSpan;
  }
  visit(visitor, context) {
    return visitor.visitTagPlaceholder(this, context);
  }
};
var Placeholder = class {
  value;
  name;
  sourceSpan;
  constructor(value, name, sourceSpan) {
    this.value = value;
    this.name = name;
    this.sourceSpan = sourceSpan;
  }
  visit(visitor, context) {
    return visitor.visitPlaceholder(this, context);
  }
};
var IcuPlaceholder = class {
  value;
  name;
  sourceSpan;
  /** Used to capture a message computed from a previous processing pass (see `setI18nRefs()`). */
  previousMessage;
  constructor(value, name, sourceSpan) {
    this.value = value;
    this.name = name;
    this.sourceSpan = sourceSpan;
  }
  visit(visitor, context) {
    return visitor.visitIcuPlaceholder(this, context);
  }
};
var BlockPlaceholder = class {
  name;
  parameters;
  startName;
  closeName;
  children;
  sourceSpan;
  startSourceSpan;
  endSourceSpan;
  constructor(name, parameters, startName, closeName, children, sourceSpan, startSourceSpan, endSourceSpan) {
    this.name = name;
    this.parameters = parameters;
    this.startName = startName;
    this.closeName = closeName;
    this.children = children;
    this.sourceSpan = sourceSpan;
    this.startSourceSpan = startSourceSpan;
    this.endSourceSpan = endSourceSpan;
  }
  visit(visitor, context) {
    return visitor.visitBlockPlaceholder(this, context);
  }
};
function serializeMessage(messageNodes) {
  const visitor = new LocalizeMessageStringVisitor();
  const str = messageNodes.map((n) => n.visit(visitor)).join("");
  return str;
}
var LocalizeMessageStringVisitor = class {
  visitText(text3) {
    return text3.value;
  }
  visitContainer(container) {
    return container.children.map((child) => child.visit(this)).join("");
  }
  visitIcu(icu) {
    const strCases = Object.keys(icu.cases).map((k) => `${k} {${icu.cases[k].visit(this)}}`);
    return `{${icu.expressionPlaceholder}, ${icu.type}, ${strCases.join(" ")}}`;
  }
  visitTagPlaceholder(ph) {
    const children = ph.children.map((child) => child.visit(this)).join("");
    return `{$${ph.startName}}${children}{$${ph.closeName}}`;
  }
  visitPlaceholder(ph) {
    return `{$${ph.name}}`;
  }
  visitIcuPlaceholder(ph) {
    return `{$${ph.name}}`;
  }
  visitBlockPlaceholder(ph) {
    const children = ph.children.map((child) => child.visit(this)).join("");
    return `{$${ph.startName}}${children}{$${ph.closeName}}`;
  }
};
var _Visitor$2 = class _Visitor {
  visitTag(tag) {
    const strAttrs = this._serializeAttributes(tag.attrs);
    if (tag.children.length == 0) {
      return `<${tag.name}${strAttrs}/>`;
    }
    const strChildren = tag.children.map((node) => node.visit(this));
    return `<${tag.name}${strAttrs}>${strChildren.join("")}</${tag.name}>`;
  }
  visitText(text3) {
    return text3.value;
  }
  visitDeclaration(decl) {
    return `<?xml${this._serializeAttributes(decl.attrs)} ?>`;
  }
  _serializeAttributes(attrs) {
    const strAttrs = Object.keys(attrs).map((name) => `${name}="${attrs[name]}"`).join(" ");
    return strAttrs.length > 0 ? " " + strAttrs : "";
  }
  visitDoctype(doctype) {
    return `<!DOCTYPE ${doctype.rootTag} [
${doctype.dtd}
]>`;
  }
};
var _visitor = new _Visitor$2();
function toPublicName(internalName) {
  return internalName.toUpperCase().replace(/[^A-Z0-9_]/g, "_");
}
var I18N_ATTR = "i18n";
var I18N_ATTR_PREFIX = "i18n-";
var I18N_ICU_VAR_PREFIX = "VAR_";
function isI18nAttribute(name) {
  return name === I18N_ATTR || name.startsWith(I18N_ATTR_PREFIX);
}
function hasI18nAttrs(element2) {
  return element2.attrs.some((attr) => isI18nAttribute(attr.name));
}
function icuFromI18nMessage(message) {
  return message.nodes[0];
}
function formatI18nPlaceholderNamesInMap(params = {}, useCamelCase) {
  const _params = {};
  if (params && Object.keys(params).length) {
    Object.keys(params).forEach((key) => _params[formatI18nPlaceholderName(key, useCamelCase)] = params[key]);
  }
  return _params;
}
function formatI18nPlaceholderName(name, useCamelCase = true) {
  const publicName = toPublicName(name);
  if (!useCamelCase) {
    return publicName;
  }
  const chunks = publicName.split("_");
  if (chunks.length === 1) {
    return name.toLowerCase();
  }
  let postfix;
  if (/^\d+$/.test(chunks[chunks.length - 1])) {
    postfix = chunks.pop();
  }
  let raw = chunks.shift().toLowerCase();
  if (chunks.length) {
    raw += chunks.map((c) => c.charAt(0).toUpperCase() + c.slice(1).toLowerCase()).join("");
  }
  return postfix ? `${raw}_${postfix}` : raw;
}
var UNSAFE_OBJECT_KEY_NAME_REGEXP = /[-.]/;
var TEMPORARY_NAME = "_t";
var CONTEXT_NAME = "ctx";
var RENDER_FLAGS = "rf";
function temporaryAllocator(pushStatement, name) {
  let temp = null;
  return () => {
    if (!temp) {
      pushStatement(new DeclareVarStmt(TEMPORARY_NAME, void 0, DYNAMIC_TYPE));
      temp = variable(name);
    }
    return temp;
  };
}
function asLiteral(value) {
  if (Array.isArray(value)) {
    return literalArr(value.map(asLiteral));
  }
  return literal(value, INFERRED_TYPE);
}
function conditionallyCreateDirectiveBindingLiteral(map2, forInputs) {
  const keys = Object.getOwnPropertyNames(map2);
  if (keys.length === 0) {
    return null;
  }
  return literalMap(keys.map((key) => {
    const value = map2[key];
    let declaredName;
    let publicName;
    let minifiedName;
    let expressionValue;
    if (typeof value === "string") {
      declaredName = key;
      minifiedName = key;
      publicName = value;
      expressionValue = asLiteral(publicName);
    } else {
      minifiedName = key;
      declaredName = value.classPropertyName;
      publicName = value.bindingPropertyName;
      const differentDeclaringName = publicName !== declaredName;
      const hasDecoratorInputTransform = value.transformFunction !== null;
      let flags = InputFlags.None;
      if (value.isSignal) {
        flags |= InputFlags.SignalBased;
      }
      if (hasDecoratorInputTransform) {
        flags |= InputFlags.HasDecoratorInputTransform;
      }
      if (forInputs && (differentDeclaringName || hasDecoratorInputTransform || flags !== InputFlags.None)) {
        const result = [literal(flags), asLiteral(publicName)];
        if (differentDeclaringName || hasDecoratorInputTransform) {
          result.push(asLiteral(declaredName));
          if (hasDecoratorInputTransform) {
            result.push(value.transformFunction);
          }
        }
        expressionValue = literalArr(result);
      } else {
        expressionValue = asLiteral(publicName);
      }
    }
    return {
      key: minifiedName,
      // put quotes around keys that contain potentially unsafe characters
      quoted: UNSAFE_OBJECT_KEY_NAME_REGEXP.test(minifiedName),
      value: expressionValue
    };
  }));
}
var DefinitionMap = class {
  values = [];
  set(key, value) {
    if (value) {
      const existing = this.values.find((value2) => value2.key === key);
      if (existing) {
        existing.value = value;
      } else {
        this.values.push({
          key,
          value,
          quoted: false
        });
      }
    }
  }
  toLiteralMap() {
    return literalMap(this.values);
  }
};
function createCssSelectorFromNode(node) {
  const elementName = node instanceof Element$1 ? node.name : "ng-template";
  const attributes = getAttrsForDirectiveMatching(node);
  const cssSelector = new CssSelector();
  const elementNameNoNs = splitNsName(elementName)[1];
  cssSelector.setElement(elementNameNoNs);
  Object.getOwnPropertyNames(attributes).forEach((name) => {
    const nameNoNs = splitNsName(name)[1];
    const value = attributes[name];
    cssSelector.addAttribute(nameNoNs, value);
    if (name.toLowerCase() === "class") {
      const classes = value.trim().split(/\s+/);
      classes.forEach((className) => cssSelector.addClassName(className));
    }
  });
  return cssSelector;
}
function getAttrsForDirectiveMatching(elOrTpl) {
  const attributesMap = {};
  if (elOrTpl instanceof Template && elOrTpl.tagName !== "ng-template") {
    elOrTpl.templateAttrs.forEach((a) => attributesMap[a.name] = "");
  } else {
    elOrTpl.attributes.forEach((a) => {
      if (!isI18nAttribute(a.name)) {
        attributesMap[a.name] = a.value;
      }
    });
    elOrTpl.inputs.forEach((i) => {
      if (i.type === BindingType.Property || i.type === BindingType.TwoWay) {
        attributesMap[i.name] = "";
      }
    });
    elOrTpl.outputs.forEach((o) => {
      attributesMap[o.name] = "";
    });
  }
  return attributesMap;
}
function compileInjectable(meta, resolveForwardRefs) {
  let result = null;
  const factoryMeta = {
    name: meta.name,
    type: meta.type,
    typeArgumentCount: meta.typeArgumentCount,
    deps: [],
    target: FactoryTarget.Injectable
  };
  if (meta.useClass !== void 0) {
    const useClassOnSelf = meta.useClass.expression.isEquivalent(meta.type.value);
    let deps = void 0;
    if (meta.deps !== void 0) {
      deps = meta.deps;
    }
    if (deps !== void 0) {
      result = compileFactoryFunction(__spreadProps(__spreadValues({}, factoryMeta), {
        delegate: meta.useClass.expression,
        delegateDeps: deps,
        delegateType: R3FactoryDelegateType.Class
      }));
    } else if (useClassOnSelf) {
      result = compileFactoryFunction(factoryMeta);
    } else {
      result = {
        statements: [],
        expression: delegateToFactory(meta.type.value, meta.useClass.expression, resolveForwardRefs)
      };
    }
  } else if (meta.useFactory !== void 0) {
    if (meta.deps !== void 0) {
      result = compileFactoryFunction(__spreadProps(__spreadValues({}, factoryMeta), {
        delegate: meta.useFactory,
        delegateDeps: meta.deps || [],
        delegateType: R3FactoryDelegateType.Function
      }));
    } else {
      result = {
        statements: [],
        expression: arrowFn([], meta.useFactory.callFn([]))
      };
    }
  } else if (meta.useValue !== void 0) {
    result = compileFactoryFunction(__spreadProps(__spreadValues({}, factoryMeta), {
      expression: meta.useValue.expression
    }));
  } else if (meta.useExisting !== void 0) {
    result = compileFactoryFunction(__spreadProps(__spreadValues({}, factoryMeta), {
      expression: importExpr(Identifiers.inject).callFn([meta.useExisting.expression])
    }));
  } else {
    result = {
      statements: [],
      expression: delegateToFactory(meta.type.value, meta.type.value, resolveForwardRefs)
    };
  }
  const token = meta.type.value;
  const injectableProps = new DefinitionMap();
  injectableProps.set("token", token);
  injectableProps.set("factory", result.expression);
  if (meta.providedIn.expression.value !== null) {
    injectableProps.set("providedIn", convertFromMaybeForwardRefExpression(meta.providedIn));
  }
  const expression = importExpr(Identifiers.\u0275\u0275defineInjectable).callFn([injectableProps.toLiteralMap()], void 0, true);
  return {
    expression,
    type: createInjectableType(meta),
    statements: result.statements
  };
}
function createInjectableType(meta) {
  return new ExpressionType(importExpr(Identifiers.InjectableDeclaration, [typeWithParameters(meta.type.type, meta.typeArgumentCount)]));
}
function delegateToFactory(type, useType, unwrapForwardRefs) {
  if (type.node === useType.node) {
    return useType.prop("\u0275fac");
  }
  if (!unwrapForwardRefs) {
    return createFactoryFunction(useType);
  }
  const unwrappedType = importExpr(Identifiers.resolveForwardRef).callFn([useType]);
  return createFactoryFunction(unwrappedType);
}
function createFactoryFunction(type) {
  const t = new FnParam("__ngFactoryType__", DYNAMIC_TYPE);
  return arrowFn([t], type.prop("\u0275fac").callFn([variable(t.name)]));
}
var UNUSABLE_INTERPOLATION_REGEXPS = [
  /@/,
  // control flow reserved symbol
  /^\s*$/,
  // empty
  /[<>]/,
  // html tag
  /^[{}]$/,
  // i18n expansion
  /&(#|[a-z])/i,
  // character reference,
  /^\/\//
  // comment
];
function assertInterpolationSymbols(identifier, value) {
  if (value != null && !(Array.isArray(value) && value.length == 2)) {
    throw new Error(`Expected '${identifier}' to be an array, [start, end].`);
  } else if (value != null) {
    const start = value[0];
    const end = value[1];
    UNUSABLE_INTERPOLATION_REGEXPS.forEach((regexp) => {
      if (regexp.test(start) || regexp.test(end)) {
        throw new Error(`['${start}', '${end}'] contains unusable interpolation symbol.`);
      }
    });
  }
}
var InterpolationConfig = class _InterpolationConfig {
  start;
  end;
  static fromArray(markers) {
    if (!markers) {
      return DEFAULT_INTERPOLATION_CONFIG;
    }
    assertInterpolationSymbols("interpolation", markers);
    return new _InterpolationConfig(markers[0], markers[1]);
  }
  constructor(start, end) {
    this.start = start;
    this.end = end;
  }
};
var DEFAULT_INTERPOLATION_CONFIG = new InterpolationConfig("{{", "}}");
var DEFAULT_CONTAINER_BLOCKS = /* @__PURE__ */ new Set(["switch"]);
var $EOF = 0;
var $BSPACE = 8;
var $TAB = 9;
var $LF = 10;
var $VTAB = 11;
var $FF = 12;
var $CR = 13;
var $SPACE = 32;
var $BANG = 33;
var $DQ = 34;
var $HASH = 35;
var $$ = 36;
var $PERCENT = 37;
var $AMPERSAND = 38;
var $SQ = 39;
var $LPAREN = 40;
var $RPAREN = 41;
var $STAR = 42;
var $PLUS = 43;
var $COMMA = 44;
var $MINUS = 45;
var $PERIOD = 46;
var $SLASH = 47;
var $COLON = 58;
var $SEMICOLON = 59;
var $LT = 60;
var $EQ = 61;
var $GT = 62;
var $QUESTION = 63;
var $0 = 48;
var $7 = 55;
var $9 = 57;
var $A = 65;
var $E = 69;
var $F = 70;
var $X = 88;
var $Z = 90;
var $LBRACKET = 91;
var $BACKSLASH = 92;
var $RBRACKET = 93;
var $CARET = 94;
var $_ = 95;
var $a = 97;
var $b = 98;
var $e = 101;
var $f = 102;
var $n = 110;
var $r = 114;
var $t = 116;
var $u = 117;
var $v = 118;
var $x = 120;
var $z = 122;
var $LBRACE = 123;
var $BAR = 124;
var $RBRACE = 125;
var $NBSP = 160;
var $AT = 64;
var $BT = 96;
function isWhitespace(code) {
  return code >= $TAB && code <= $SPACE || code == $NBSP;
}
function isDigit(code) {
  return $0 <= code && code <= $9;
}
function isAsciiLetter(code) {
  return code >= $a && code <= $z || code >= $A && code <= $Z;
}
function isAsciiHexDigit(code) {
  return code >= $a && code <= $f || code >= $A && code <= $F || isDigit(code);
}
function isNewLine(code) {
  return code === $LF || code === $CR;
}
function isOctalDigit(code) {
  return $0 <= code && code <= $7;
}
function isQuote(code) {
  return code === $SQ || code === $DQ || code === $BT;
}
var ParseLocation = class _ParseLocation {
  file;
  offset;
  line;
  col;
  constructor(file, offset, line, col) {
    this.file = file;
    this.offset = offset;
    this.line = line;
    this.col = col;
  }
  toString() {
    return this.offset != null ? `${this.file.url}@${this.line}:${this.col}` : this.file.url;
  }
  moveBy(delta) {
    const source = this.file.content;
    const len = source.length;
    let offset = this.offset;
    let line = this.line;
    let col = this.col;
    while (offset > 0 && delta < 0) {
      offset--;
      delta++;
      const ch = source.charCodeAt(offset);
      if (ch == $LF) {
        line--;
        const priorLine = source.substring(0, offset - 1).lastIndexOf(String.fromCharCode($LF));
        col = priorLine > 0 ? offset - priorLine : offset;
      } else {
        col--;
      }
    }
    while (offset < len && delta > 0) {
      const ch = source.charCodeAt(offset);
      offset++;
      delta--;
      if (ch == $LF) {
        line++;
        col = 0;
      } else {
        col++;
      }
    }
    return new _ParseLocation(this.file, offset, line, col);
  }
  // Return the source around the location
  // Up to `maxChars` or `maxLines` on each side of the location
  getContext(maxChars, maxLines) {
    const content = this.file.content;
    let startOffset = this.offset;
    if (startOffset != null) {
      if (startOffset > content.length - 1) {
        startOffset = content.length - 1;
      }
      let endOffset = startOffset;
      let ctxChars = 0;
      let ctxLines = 0;
      while (ctxChars < maxChars && startOffset > 0) {
        startOffset--;
        ctxChars++;
        if (content[startOffset] == "\n") {
          if (++ctxLines == maxLines) {
            break;
          }
        }
      }
      ctxChars = 0;
      ctxLines = 0;
      while (ctxChars < maxChars && endOffset < content.length - 1) {
        endOffset++;
        ctxChars++;
        if (content[endOffset] == "\n") {
          if (++ctxLines == maxLines) {
            break;
          }
        }
      }
      return {
        before: content.substring(startOffset, this.offset),
        after: content.substring(this.offset, endOffset + 1)
      };
    }
    return null;
  }
};
var ParseSourceFile = class {
  content;
  url;
  constructor(content, url) {
    this.content = content;
    this.url = url;
  }
};
var ParseSourceSpan = class {
  start;
  end;
  fullStart;
  details;
  /**
   * Create an object that holds information about spans of tokens/nodes captured during
   * lexing/parsing of text.
   *
   * @param start
   * The location of the start of the span (having skipped leading trivia).
   * Skipping leading trivia makes source-spans more "user friendly", since things like HTML
   * elements will appear to begin at the start of the opening tag, rather than at the start of any
   * leading trivia, which could include newlines.
   *
   * @param end
   * The location of the end of the span.
   *
   * @param fullStart
   * The start of the token without skipping the leading trivia.
   * This is used by tooling that splits tokens further, such as extracting Angular interpolations
   * from text tokens. Such tooling creates new source-spans relative to the original token's
   * source-span. If leading trivia characters have been skipped then the new source-spans may be
   * incorrectly offset.
   *
   * @param details
   * Additional information (such as identifier names) that should be associated with the span.
   */
  constructor(start, end, fullStart = start, details = null) {
    this.start = start;
    this.end = end;
    this.fullStart = fullStart;
    this.details = details;
  }
  toString() {
    return this.start.file.content.substring(this.start.offset, this.end.offset);
  }
};
var ParseErrorLevel;
(function(ParseErrorLevel2) {
  ParseErrorLevel2[ParseErrorLevel2["WARNING"] = 0] = "WARNING";
  ParseErrorLevel2[ParseErrorLevel2["ERROR"] = 1] = "ERROR";
})(ParseErrorLevel || (ParseErrorLevel = {}));
var ParseError = class {
  span;
  msg;
  level;
  relatedError;
  constructor(span, msg, level = ParseErrorLevel.ERROR, relatedError) {
    this.span = span;
    this.msg = msg;
    this.level = level;
    this.relatedError = relatedError;
  }
  contextualMessage() {
    const ctx = this.span.start.getContext(100, 3);
    return ctx ? `${this.msg} ("${ctx.before}[${ParseErrorLevel[this.level]} ->]${ctx.after}")` : this.msg;
  }
  toString() {
    const details = this.span.details ? `, ${this.span.details}` : "";
    return `${this.contextualMessage()}: ${this.span.start}${details}`;
  }
};
function r3JitTypeSourceSpan(kind, typeName, sourceUrl) {
  const sourceFileName = `in ${kind} ${typeName} in ${sourceUrl}`;
  const sourceFile = new ParseSourceFile("", sourceFileName);
  return new ParseSourceSpan(new ParseLocation(sourceFile, -1, -1, -1), new ParseLocation(sourceFile, -1, -1, -1));
}
var _anonymousTypeIndex = 0;
function identifierName(compileIdentifier) {
  if (!compileIdentifier || !compileIdentifier.reference) {
    return null;
  }
  const ref = compileIdentifier.reference;
  if (ref["__anonymousType"]) {
    return ref["__anonymousType"];
  }
  if (ref["__forward_ref__"]) {
    return "__forward_ref__";
  }
  let identifier = stringify(ref);
  if (identifier.indexOf("(") >= 0) {
    identifier = `anonymous_${_anonymousTypeIndex++}`;
    ref["__anonymousType"] = identifier;
  } else {
    identifier = sanitizeIdentifier(identifier);
  }
  return identifier;
}
function sanitizeIdentifier(name) {
  return name.replace(/\W/g, "_");
}
var makeTemplateObjectPolyfill = '(this&&this.__makeTemplateObject||function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e})';
var AbstractJsEmitterVisitor = class extends AbstractEmitterVisitor {
  constructor() {
    super(false);
  }
  visitWrappedNodeExpr(ast, ctx) {
    throw new Error("Cannot emit a WrappedNodeExpr in Javascript.");
  }
  visitDeclareVarStmt(stmt, ctx) {
    ctx.print(stmt, `var ${stmt.name}`);
    if (stmt.value) {
      ctx.print(stmt, " = ");
      stmt.value.visitExpression(this, ctx);
    }
    ctx.println(stmt, `;`);
    return null;
  }
  visitTaggedTemplateLiteralExpr(ast, ctx) {
    const elements = ast.template.elements;
    ast.tag.visitExpression(this, ctx);
    ctx.print(ast, `(${makeTemplateObjectPolyfill}(`);
    ctx.print(ast, `[${elements.map((part) => escapeIdentifier(part.text, false)).join(", ")}], `);
    ctx.print(ast, `[${elements.map((part) => escapeIdentifier(part.rawText, false)).join(", ")}])`);
    ast.template.expressions.forEach((expression) => {
      ctx.print(ast, ", ");
      expression.visitExpression(this, ctx);
    });
    ctx.print(ast, ")");
    return null;
  }
  visitTemplateLiteralExpr(expr, ctx) {
    ctx.print(expr, "`");
    for (let i = 0; i < expr.elements.length; i++) {
      expr.elements[i].visitExpression(this, ctx);
      const expression = i < expr.expressions.length ? expr.expressions[i] : null;
      if (expression !== null) {
        ctx.print(expression, "${");
        expression.visitExpression(this, ctx);
        ctx.print(expression, "}");
      }
    }
    ctx.print(expr, "`");
  }
  visitTemplateLiteralElementExpr(expr, ctx) {
    ctx.print(expr, expr.rawText);
    return null;
  }
  visitFunctionExpr(ast, ctx) {
    ctx.print(ast, `function${ast.name ? " " + ast.name : ""}(`);
    this._visitParams(ast.params, ctx);
    ctx.println(ast, `) {`);
    ctx.incIndent();
    this.visitAllStatements(ast.statements, ctx);
    ctx.decIndent();
    ctx.print(ast, `}`);
    return null;
  }
  visitArrowFunctionExpr(ast, ctx) {
    ctx.print(ast, "(");
    this._visitParams(ast.params, ctx);
    ctx.print(ast, ") =>");
    if (Array.isArray(ast.body)) {
      ctx.println(ast, `{`);
      ctx.incIndent();
      this.visitAllStatements(ast.body, ctx);
      ctx.decIndent();
      ctx.print(ast, `}`);
    } else {
      const isObjectLiteral = ast.body instanceof LiteralMapExpr;
      if (isObjectLiteral) {
        ctx.print(ast, "(");
      }
      ast.body.visitExpression(this, ctx);
      if (isObjectLiteral) {
        ctx.print(ast, ")");
      }
    }
    return null;
  }
  visitDeclareFunctionStmt(stmt, ctx) {
    ctx.print(stmt, `function ${stmt.name}(`);
    this._visitParams(stmt.params, ctx);
    ctx.println(stmt, `) {`);
    ctx.incIndent();
    this.visitAllStatements(stmt.statements, ctx);
    ctx.decIndent();
    ctx.println(stmt, `}`);
    return null;
  }
  visitLocalizedString(ast, ctx) {
    ctx.print(ast, `$localize(${makeTemplateObjectPolyfill}(`);
    const parts = [ast.serializeI18nHead()];
    for (let i = 1; i < ast.messageParts.length; i++) {
      parts.push(ast.serializeI18nTemplatePart(i));
    }
    ctx.print(ast, `[${parts.map((part) => escapeIdentifier(part.cooked, false)).join(", ")}], `);
    ctx.print(ast, `[${parts.map((part) => escapeIdentifier(part.raw, false)).join(", ")}])`);
    ast.expressions.forEach((expression) => {
      ctx.print(ast, ", ");
      expression.visitExpression(this, ctx);
    });
    ctx.print(ast, ")");
    return null;
  }
  _visitParams(params, ctx) {
    this.visitAllObjects((param) => ctx.print(null, param.name), params, ctx, ",");
  }
};
var policy;
function getPolicy() {
  if (policy === void 0) {
    const trustedTypes = _global2["trustedTypes"];
    policy = null;
    if (trustedTypes) {
      try {
        policy = trustedTypes.createPolicy("angular#unsafe-jit", {
          createScript: (s) => s
        });
      } catch {
      }
    }
  }
  return policy;
}
function trustedScriptFromString(script) {
  return getPolicy()?.createScript(script) || script;
}
function newTrustedFunctionForJIT(...args) {
  if (!_global2["trustedTypes"]) {
    return new Function(...args);
  }
  const fnArgs = args.slice(0, -1).join(",");
  const fnBody = args[args.length - 1];
  const body = `(function anonymous(${fnArgs}
) { ${fnBody}
})`;
  const fn2 = _global2["eval"](trustedScriptFromString(body));
  if (fn2.bind === void 0) {
    return new Function(...args);
  }
  fn2.toString = () => body;
  return fn2.bind(_global2);
}
var JitEvaluator = class {
  /**
   *
   * @param sourceUrl The URL of the generated code.
   * @param statements An array of Angular statement AST nodes to be evaluated.
   * @param refResolver Resolves `o.ExternalReference`s into values.
   * @param createSourceMaps If true then create a source-map for the generated code and include it
   * inline as a source-map comment.
   * @returns A map of all the variables in the generated code.
   */
  evaluateStatements(sourceUrl, statements, refResolver, createSourceMaps) {
    const converter = new JitEmitterVisitor(refResolver);
    const ctx = EmitterVisitorContext.createRoot();
    if (statements.length > 0 && !isUseStrictStatement(statements[0])) {
      statements = [literal("use strict").toStmt(), ...statements];
    }
    converter.visitAllStatements(statements, ctx);
    converter.createReturnStmt(ctx);
    return this.evaluateCode(sourceUrl, ctx, converter.getArgs(), createSourceMaps);
  }
  /**
   * Evaluate a piece of JIT generated code.
   * @param sourceUrl The URL of this generated code.
   * @param ctx A context object that contains an AST of the code to be evaluated.
   * @param vars A map containing the names and values of variables that the evaluated code might
   * reference.
   * @param createSourceMap If true then create a source-map for the generated code and include it
   * inline as a source-map comment.
   * @returns The result of evaluating the code.
   */
  evaluateCode(sourceUrl, ctx, vars, createSourceMap) {
    let fnBody = `"use strict";${ctx.toSource()}
//# sourceURL=${sourceUrl}`;
    const fnArgNames = [];
    const fnArgValues = [];
    for (const argName in vars) {
      fnArgValues.push(vars[argName]);
      fnArgNames.push(argName);
    }
    if (createSourceMap) {
      const emptyFn = newTrustedFunctionForJIT(...fnArgNames.concat("return null;")).toString();
      const headerLines = emptyFn.slice(0, emptyFn.indexOf("return null;")).split("\n").length - 1;
      fnBody += `
${ctx.toSourceMapGenerator(sourceUrl, headerLines).toJsComment()}`;
    }
    const fn2 = newTrustedFunctionForJIT(...fnArgNames.concat(fnBody));
    return this.executeFunction(fn2, fnArgValues);
  }
  /**
   * Execute a JIT generated function by calling it.
   *
   * This method can be overridden in tests to capture the functions that are generated
   * by this `JitEvaluator` class.
   *
   * @param fn A function to execute.
   * @param args The arguments to pass to the function being executed.
   * @returns The return value of the executed function.
   */
  executeFunction(fn2, args) {
    return fn2(...args);
  }
};
var JitEmitterVisitor = class extends AbstractJsEmitterVisitor {
  refResolver;
  _evalArgNames = [];
  _evalArgValues = [];
  _evalExportedVars = [];
  constructor(refResolver) {
    super();
    this.refResolver = refResolver;
  }
  createReturnStmt(ctx) {
    const stmt = new ReturnStatement(new LiteralMapExpr(this._evalExportedVars.map((resultVar) => new LiteralMapEntry(resultVar, variable(resultVar), false))));
    stmt.visitStatement(this, ctx);
  }
  getArgs() {
    const result = {};
    for (let i = 0; i < this._evalArgNames.length; i++) {
      result[this._evalArgNames[i]] = this._evalArgValues[i];
    }
    return result;
  }
  visitExternalExpr(ast, ctx) {
    this._emitReferenceToExternal(ast, this.refResolver.resolveExternalReference(ast.value), ctx);
    return null;
  }
  visitWrappedNodeExpr(ast, ctx) {
    this._emitReferenceToExternal(ast, ast.node, ctx);
    return null;
  }
  visitDeclareVarStmt(stmt, ctx) {
    if (stmt.hasModifier(StmtModifier.Exported)) {
      this._evalExportedVars.push(stmt.name);
    }
    return super.visitDeclareVarStmt(stmt, ctx);
  }
  visitDeclareFunctionStmt(stmt, ctx) {
    if (stmt.hasModifier(StmtModifier.Exported)) {
      this._evalExportedVars.push(stmt.name);
    }
    return super.visitDeclareFunctionStmt(stmt, ctx);
  }
  _emitReferenceToExternal(ast, value, ctx) {
    let id = this._evalArgValues.indexOf(value);
    if (id === -1) {
      id = this._evalArgValues.length;
      this._evalArgValues.push(value);
      const name = identifierName({
        reference: value
      }) || "val";
      this._evalArgNames.push(`jit_${name}_${id}`);
    }
    ctx.print(ast, this._evalArgNames[id]);
  }
};
function isUseStrictStatement(statement) {
  return statement.isEquivalent(literal("use strict").toStmt());
}
function compileInjector(meta) {
  const definitionMap = new DefinitionMap();
  if (meta.providers !== null) {
    definitionMap.set("providers", meta.providers);
  }
  if (meta.imports.length > 0) {
    definitionMap.set("imports", literalArr(meta.imports));
  }
  const expression = importExpr(Identifiers.defineInjector).callFn([definitionMap.toLiteralMap()], void 0, true);
  const type = createInjectorType(meta);
  return {
    expression,
    type,
    statements: []
  };
}
function createInjectorType(meta) {
  return new ExpressionType(importExpr(Identifiers.InjectorDeclaration, [new ExpressionType(meta.type.type)]));
}
var R3JitReflector = class {
  context;
  constructor(context) {
    this.context = context;
  }
  resolveExternalReference(ref) {
    if (ref.moduleName !== "@angular/core") {
      throw new Error(`Cannot resolve external reference to ${ref.moduleName}, only references to @angular/core are supported.`);
    }
    if (!this.context.hasOwnProperty(ref.name)) {
      throw new Error(`No value provided for @angular/core symbol '${ref.name}'.`);
    }
    return this.context[ref.name];
  }
};
var R3SelectorScopeMode;
(function(R3SelectorScopeMode2) {
  R3SelectorScopeMode2[R3SelectorScopeMode2["Inline"] = 0] = "Inline";
  R3SelectorScopeMode2[R3SelectorScopeMode2["SideEffect"] = 1] = "SideEffect";
  R3SelectorScopeMode2[R3SelectorScopeMode2["Omit"] = 2] = "Omit";
})(R3SelectorScopeMode || (R3SelectorScopeMode = {}));
var R3NgModuleMetadataKind;
(function(R3NgModuleMetadataKind2) {
  R3NgModuleMetadataKind2[R3NgModuleMetadataKind2["Global"] = 0] = "Global";
  R3NgModuleMetadataKind2[R3NgModuleMetadataKind2["Local"] = 1] = "Local";
})(R3NgModuleMetadataKind || (R3NgModuleMetadataKind = {}));
function compileNgModule(meta) {
  const statements = [];
  const definitionMap = new DefinitionMap();
  definitionMap.set("type", meta.type.value);
  if (meta.kind === R3NgModuleMetadataKind.Global && meta.bootstrap.length > 0) {
    definitionMap.set("bootstrap", refsToArray(meta.bootstrap, meta.containsForwardDecls));
  }
  if (meta.selectorScopeMode === R3SelectorScopeMode.Inline) {
    if (meta.declarations.length > 0) {
      definitionMap.set("declarations", refsToArray(meta.declarations, meta.containsForwardDecls));
    }
    if (meta.imports.length > 0) {
      definitionMap.set("imports", refsToArray(meta.imports, meta.containsForwardDecls));
    }
    if (meta.exports.length > 0) {
      definitionMap.set("exports", refsToArray(meta.exports, meta.containsForwardDecls));
    }
  } else if (meta.selectorScopeMode === R3SelectorScopeMode.SideEffect) {
    const setNgModuleScopeCall = generateSetNgModuleScopeCall(meta);
    if (setNgModuleScopeCall !== null) {
      statements.push(setNgModuleScopeCall);
    }
  } else ;
  if (meta.schemas !== null && meta.schemas.length > 0) {
    definitionMap.set("schemas", literalArr(meta.schemas.map((ref) => ref.value)));
  }
  if (meta.id !== null) {
    definitionMap.set("id", meta.id);
    statements.push(importExpr(Identifiers.registerNgModuleType).callFn([meta.type.value, meta.id]).toStmt());
  }
  const expression = importExpr(Identifiers.defineNgModule).callFn([definitionMap.toLiteralMap()], void 0, true);
  const type = createNgModuleType(meta);
  return {
    expression,
    type,
    statements
  };
}
function compileNgModuleDeclarationExpression(meta) {
  const definitionMap = new DefinitionMap();
  definitionMap.set("type", new WrappedNodeExpr(meta.type));
  if (meta.bootstrap !== void 0) {
    definitionMap.set("bootstrap", new WrappedNodeExpr(meta.bootstrap));
  }
  if (meta.declarations !== void 0) {
    definitionMap.set("declarations", new WrappedNodeExpr(meta.declarations));
  }
  if (meta.imports !== void 0) {
    definitionMap.set("imports", new WrappedNodeExpr(meta.imports));
  }
  if (meta.exports !== void 0) {
    definitionMap.set("exports", new WrappedNodeExpr(meta.exports));
  }
  if (meta.schemas !== void 0) {
    definitionMap.set("schemas", new WrappedNodeExpr(meta.schemas));
  }
  if (meta.id !== void 0) {
    definitionMap.set("id", new WrappedNodeExpr(meta.id));
  }
  return importExpr(Identifiers.defineNgModule).callFn([definitionMap.toLiteralMap()]);
}
function createNgModuleType(meta) {
  if (meta.kind === R3NgModuleMetadataKind.Local) {
    return new ExpressionType(meta.type.value);
  }
  const {
    type: moduleType,
    declarations,
    exports,
    imports,
    includeImportTypes,
    publicDeclarationTypes
  } = meta;
  return new ExpressionType(importExpr(Identifiers.NgModuleDeclaration, [new ExpressionType(moduleType.type), publicDeclarationTypes === null ? tupleTypeOf(declarations) : tupleOfTypes(publicDeclarationTypes), includeImportTypes ? tupleTypeOf(imports) : NONE_TYPE, tupleTypeOf(exports)]));
}
function generateSetNgModuleScopeCall(meta) {
  const scopeMap = new DefinitionMap();
  if (meta.kind === R3NgModuleMetadataKind.Global) {
    if (meta.declarations.length > 0) {
      scopeMap.set("declarations", refsToArray(meta.declarations, meta.containsForwardDecls));
    }
  } else {
    if (meta.declarationsExpression) {
      scopeMap.set("declarations", meta.declarationsExpression);
    }
  }
  if (meta.kind === R3NgModuleMetadataKind.Global) {
    if (meta.imports.length > 0) {
      scopeMap.set("imports", refsToArray(meta.imports, meta.containsForwardDecls));
    }
  } else {
    if (meta.importsExpression) {
      scopeMap.set("imports", meta.importsExpression);
    }
  }
  if (meta.kind === R3NgModuleMetadataKind.Global) {
    if (meta.exports.length > 0) {
      scopeMap.set("exports", refsToArray(meta.exports, meta.containsForwardDecls));
    }
  } else {
    if (meta.exportsExpression) {
      scopeMap.set("exports", meta.exportsExpression);
    }
  }
  if (meta.kind === R3NgModuleMetadataKind.Local && meta.bootstrapExpression) {
    scopeMap.set("bootstrap", meta.bootstrapExpression);
  }
  if (Object.keys(scopeMap.values).length === 0) {
    return null;
  }
  const fnCall = new InvokeFunctionExpr(
    /* fn */
    importExpr(Identifiers.setNgModuleScope),
    /* args */
    [meta.type.value, scopeMap.toLiteralMap()]
  );
  const guardedCall = jitOnlyGuardedExpression(fnCall);
  const iife = new FunctionExpr(
    /* params */
    [],
    /* statements */
    [guardedCall.toStmt()]
  );
  const iifeCall = new InvokeFunctionExpr(
    /* fn */
    iife,
    /* args */
    []
  );
  return iifeCall.toStmt();
}
function tupleTypeOf(exp) {
  const types = exp.map((ref) => typeofExpr(ref.type));
  return exp.length > 0 ? expressionType(literalArr(types)) : NONE_TYPE;
}
function tupleOfTypes(types) {
  const typeofTypes = types.map((type) => typeofExpr(type));
  return types.length > 0 ? expressionType(literalArr(typeofTypes)) : NONE_TYPE;
}
function compilePipeFromMetadata(metadata) {
  const definitionMapValues = [];
  definitionMapValues.push({
    key: "name",
    value: literal(metadata.pipeName),
    quoted: false
  });
  definitionMapValues.push({
    key: "type",
    value: metadata.type.value,
    quoted: false
  });
  definitionMapValues.push({
    key: "pure",
    value: literal(metadata.pure),
    quoted: false
  });
  if (metadata.isStandalone === false) {
    definitionMapValues.push({
      key: "standalone",
      value: literal(false),
      quoted: false
    });
  }
  const expression = importExpr(Identifiers.definePipe).callFn([literalMap(definitionMapValues)], void 0, true);
  const type = createPipeType(metadata);
  return {
    expression,
    type,
    statements: []
  };
}
function createPipeType(metadata) {
  return new ExpressionType(importExpr(Identifiers.PipeDeclaration, [typeWithParameters(metadata.type.type, metadata.typeArgumentCount), new ExpressionType(new LiteralExpr(metadata.pipeName)), new ExpressionType(new LiteralExpr(metadata.isStandalone))]));
}
var R3TemplateDependencyKind;
(function(R3TemplateDependencyKind2) {
  R3TemplateDependencyKind2[R3TemplateDependencyKind2["Directive"] = 0] = "Directive";
  R3TemplateDependencyKind2[R3TemplateDependencyKind2["Pipe"] = 1] = "Pipe";
  R3TemplateDependencyKind2[R3TemplateDependencyKind2["NgModule"] = 2] = "NgModule";
})(R3TemplateDependencyKind || (R3TemplateDependencyKind = {}));
var animationKeywords = /* @__PURE__ */ new Set([
  // global values
  "inherit",
  "initial",
  "revert",
  "unset",
  // animation-direction
  "alternate",
  "alternate-reverse",
  "normal",
  "reverse",
  // animation-fill-mode
  "backwards",
  "both",
  "forwards",
  "none",
  // animation-play-state
  "paused",
  "running",
  // animation-timing-function
  "ease",
  "ease-in",
  "ease-in-out",
  "ease-out",
  "linear",
  "step-start",
  "step-end",
  // `steps()` function
  "end",
  "jump-both",
  "jump-end",
  "jump-none",
  "jump-start",
  "start"
]);
var scopedAtRuleIdentifiers = ["@media", "@supports", "@document", "@layer", "@container", "@scope", "@starting-style"];
var ShadowCss = class {
  /*
   * Shim some cssText with the given selector. Returns cssText that can be included in the document
   *
   * The selector is the attribute added to all elements inside the host,
   * The hostSelector is the attribute added to the host itself.
   */
  shimCssText(cssText, selector, hostSelector = "") {
    const comments = [];
    cssText = cssText.replace(_commentRe, (m) => {
      if (m.match(_commentWithHashRe)) {
        comments.push(m);
      } else {
        const newLinesMatches = m.match(_newLinesRe);
        comments.push((newLinesMatches?.join("") ?? "") + "\n");
      }
      return COMMENT_PLACEHOLDER;
    });
    cssText = this._insertDirectives(cssText);
    const scopedCssText = this._scopeCssText(cssText, selector, hostSelector);
    let commentIdx = 0;
    return scopedCssText.replace(_commentWithHashPlaceHolderRe, () => comments[commentIdx++]);
  }
  _insertDirectives(cssText) {
    cssText = this._insertPolyfillDirectivesInCssText(cssText);
    return this._insertPolyfillRulesInCssText(cssText);
  }
  /**
   * Process styles to add scope to keyframes.
   *
   * Modify both the names of the keyframes defined in the component styles and also the css
   * animation rules using them.
   *
   * Animation rules using keyframes defined elsewhere are not modified to allow for globally
   * defined keyframes.
   *
   * For example, we convert this css:
   *
   * ```scss
   * .box {
   *   animation: box-animation 1s forwards;
   * }
   *
   * @keyframes box-animation {
   *   to {
   *     background-color: green;
   *   }
   * }
   * ```
   *
   * to this:
   *
   * ```scss
   * .box {
   *   animation: scopeName_box-animation 1s forwards;
   * }
   *
   * @keyframes scopeName_box-animation {
   *   to {
   *     background-color: green;
   *   }
   * }
   * ```
   *
   * @param cssText the component's css text that needs to be scoped.
   * @param scopeSelector the component's scope selector.
   *
   * @returns the scoped css text.
   */
  _scopeKeyframesRelatedCss(cssText, scopeSelector) {
    const unscopedKeyframesSet = /* @__PURE__ */ new Set();
    const scopedKeyframesCssText = processRules(cssText, (rule) => this._scopeLocalKeyframeDeclarations(rule, scopeSelector, unscopedKeyframesSet));
    return processRules(scopedKeyframesCssText, (rule) => this._scopeAnimationRule(rule, scopeSelector, unscopedKeyframesSet));
  }
  /**
   * Scopes local keyframes names, returning the updated css rule and it also
   * adds the original keyframe name to a provided set to collect all keyframes names
   * so that it can later be used to scope the animation rules.
   *
   * For example, it takes a rule such as:
   *
   * ```scss
   * @keyframes box-animation {
   *   to {
   *     background-color: green;
   *   }
   * }
   * ```
   *
   * and returns:
   *
   * ```scss
   * @keyframes scopeName_box-animation {
   *   to {
   *     background-color: green;
   *   }
   * }
   * ```
   * and as a side effect it adds "box-animation" to the `unscopedKeyframesSet` set
   *
   * @param cssRule the css rule to process.
   * @param scopeSelector the component's scope selector.
   * @param unscopedKeyframesSet the set of unscoped keyframes names (which can be
   * modified as a side effect)
   *
   * @returns the css rule modified with the scoped keyframes name.
   */
  _scopeLocalKeyframeDeclarations(rule, scopeSelector, unscopedKeyframesSet) {
    return __spreadProps(__spreadValues({}, rule), {
      selector: rule.selector.replace(/(^@(?:-webkit-)?keyframes(?:\s+))(['"]?)(.+)\2(\s*)$/, (_, start, quote, keyframeName, endSpaces) => {
        unscopedKeyframesSet.add(unescapeQuotes(keyframeName, quote));
        return `${start}${quote}${scopeSelector}_${keyframeName}${quote}${endSpaces}`;
      })
    });
  }
  /**
   * Function used to scope a keyframes name (obtained from an animation declaration)
   * using an existing set of unscopedKeyframes names to discern if the scoping needs to be
   * performed (keyframes names of keyframes not defined in the component's css need not to be
   * scoped).
   *
   * @param keyframe the keyframes name to check.
   * @param scopeSelector the component's scope selector.
   * @param unscopedKeyframesSet the set of unscoped keyframes names.
   *
   * @returns the scoped name of the keyframe, or the original name is the name need not to be
   * scoped.
   */
  _scopeAnimationKeyframe(keyframe, scopeSelector, unscopedKeyframesSet) {
    return keyframe.replace(/^(\s*)(['"]?)(.+?)\2(\s*)$/, (_, spaces1, quote, name, spaces2) => {
      name = `${unscopedKeyframesSet.has(unescapeQuotes(name, quote)) ? scopeSelector + "_" : ""}${name}`;
      return `${spaces1}${quote}${name}${quote}${spaces2}`;
    });
  }
  /**
   * Regular expression used to extrapolate the possible keyframes from an
   * animation declaration (with possibly multiple animation definitions)
   *
   * The regular expression can be divided in three parts
   *  - (^|\s+|,)
   *    captures how many (if any) leading whitespaces are present or a comma
   *  - (?:(?:(['"])((?:\\\\|\\\2|(?!\2).)+)\2)|(-?[A-Za-z][\w\-]*))
   *    captures two different possible keyframes, ones which are quoted or ones which are valid css
   * indents (custom properties excluded)
   *  - (?=[,\s;]|$)
   *    simply matches the end of the possible keyframe, valid endings are: a comma, a space, a
   * semicolon or the end of the string
   */
  _animationDeclarationKeyframesRe = /(^|\s+|,)(?:(?:(['"])((?:\\\\|\\\2|(?!\2).)+)\2)|(-?[A-Za-z][\w\-]*))(?=[,\s]|$)/g;
  /**
   * Scope an animation rule so that the keyframes mentioned in such rule
   * are scoped if defined in the component's css and left untouched otherwise.
   *
   * It can scope values of both the 'animation' and 'animation-name' properties.
   *
   * @param rule css rule to scope.
   * @param scopeSelector the component's scope selector.
   * @param unscopedKeyframesSet the set of unscoped keyframes names.
   *
   * @returns the updated css rule.
   **/
  _scopeAnimationRule(rule, scopeSelector, unscopedKeyframesSet) {
    let content = rule.content.replace(/((?:^|\s+|;)(?:-webkit-)?animation\s*:\s*),*([^;]+)/g, (_, start, animationDeclarations) => start + animationDeclarations.replace(this._animationDeclarationKeyframesRe, (original, leadingSpaces, quote = "", quotedName, nonQuotedName) => {
      if (quotedName) {
        return `${leadingSpaces}${this._scopeAnimationKeyframe(`${quote}${quotedName}${quote}`, scopeSelector, unscopedKeyframesSet)}`;
      } else {
        return animationKeywords.has(nonQuotedName) ? original : `${leadingSpaces}${this._scopeAnimationKeyframe(nonQuotedName, scopeSelector, unscopedKeyframesSet)}`;
      }
    }));
    content = content.replace(/((?:^|\s+|;)(?:-webkit-)?animation-name(?:\s*):(?:\s*))([^;]+)/g, (_match, start, commaSeparatedKeyframes) => `${start}${commaSeparatedKeyframes.split(",").map((keyframe) => this._scopeAnimationKeyframe(keyframe, scopeSelector, unscopedKeyframesSet)).join(",")}`);
    return __spreadProps(__spreadValues({}, rule), {
      content
    });
  }
  /*
   * Process styles to convert native ShadowDOM rules that will trip
   * up the css parser; we rely on decorating the stylesheet with inert rules.
   *
   * For example, we convert this rule:
   *
   * polyfill-next-selector { content: ':host menu-item'; }
   * ::content menu-item {
   *
   * to this:
   *
   * scopeName menu-item {
   *
   **/
  _insertPolyfillDirectivesInCssText(cssText) {
    return cssText.replace(_cssContentNextSelectorRe, function(...m) {
      return m[2] + "{";
    });
  }
  /*
   * Process styles to add rules which will only apply under the polyfill
   *
   * For example, we convert this rule:
   *
   * polyfill-rule {
   *   content: ':host menu-item';
   * ...
   * }
   *
   * to this:
   *
   * scopeName menu-item {...}
   *
   **/
  _insertPolyfillRulesInCssText(cssText) {
    return cssText.replace(_cssContentRuleRe, (...m) => {
      const rule = m[0].replace(m[1], "").replace(m[2], "");
      return m[4] + rule;
    });
  }
  /* Ensure styles are scoped. Pseudo-scoping takes a rule like:
   *
   *  .foo {... }
   *
   *  and converts this to
   *
   *  scopeName .foo { ... }
   */
  _scopeCssText(cssText, scopeSelector, hostSelector) {
    const unscopedRules = this._extractUnscopedRulesFromCssText(cssText);
    cssText = this._insertPolyfillHostInCssText(cssText);
    cssText = this._convertColonHost(cssText);
    cssText = this._convertColonHostContext(cssText);
    cssText = this._convertShadowDOMSelectors(cssText);
    if (scopeSelector) {
      cssText = this._scopeKeyframesRelatedCss(cssText, scopeSelector);
      cssText = this._scopeSelectors(cssText, scopeSelector, hostSelector);
    }
    cssText = cssText + "\n" + unscopedRules;
    return cssText.trim();
  }
  /*
   * Process styles to add rules which will only apply under the polyfill
   * and do not process via CSSOM. (CSSOM is destructive to rules on rare
   * occasions, e.g. -webkit-calc on Safari.)
   * For example, we convert this rule:
   *
   * @polyfill-unscoped-rule {
   *   content: 'menu-item';
   * ... }
   *
   * to this:
   *
   * menu-item {...}
   *
   **/
  _extractUnscopedRulesFromCssText(cssText) {
    let r = "";
    let m;
    _cssContentUnscopedRuleRe.lastIndex = 0;
    while ((m = _cssContentUnscopedRuleRe.exec(cssText)) !== null) {
      const rule = m[0].replace(m[2], "").replace(m[1], m[4]);
      r += rule + "\n\n";
    }
    return r;
  }
  /*
   * convert a rule like :host(.foo) > .bar { }
   *
   * to
   *
   * .foo<scopeName> > .bar
   */
  _convertColonHost(cssText) {
    return cssText.replace(_cssColonHostRe, (_, hostSelectors, otherSelectors) => {
      if (hostSelectors) {
        const convertedSelectors = [];
        const hostSelectorArray = hostSelectors.split(",").map((p) => p.trim());
        for (const hostSelector of hostSelectorArray) {
          if (!hostSelector) break;
          const convertedSelector = _polyfillHostNoCombinator + hostSelector.replace(_polyfillHost, "") + otherSelectors;
          convertedSelectors.push(convertedSelector);
        }
        return convertedSelectors.join(",");
      } else {
        return _polyfillHostNoCombinator + otherSelectors;
      }
    });
  }
  /*
   * convert a rule like :host-context(.foo) > .bar { }
   *
   * to
   *
   * .foo<scopeName> > .bar, .foo <scopeName> > .bar { }
   *
   * and
   *
   * :host-context(.foo:host) .bar { ... }
   *
   * to
   *
   * .foo<scopeName> .bar { ... }
   */
  _convertColonHostContext(cssText) {
    const length = cssText.length;
    let parens = 0;
    let prev = 0;
    let result = "";
    for (let i = 0; i < length; i++) {
      const char = cssText[i];
      if (char === "," && parens === 0) {
        result += this._convertColonHostContextInSelectorPart(cssText.slice(prev, i)) + ",";
        prev = i + 1;
        continue;
      }
      if (i === length - 1) {
        result += this._convertColonHostContextInSelectorPart(cssText.slice(prev));
        break;
      }
      if (char === "(") {
        parens++;
      } else if (char === ")") {
        parens--;
      }
    }
    return result;
  }
  _convertColonHostContextInSelectorPart(cssText) {
    return cssText.replace(_cssColonHostContextReGlobal, (selectorText, pseudoPrefix) => {
      const contextSelectorGroups = [[]];
      let match2;
      while (match2 = _cssColonHostContextRe.exec(selectorText)) {
        const newContextSelectors = (match2[1] ?? "").trim().split(",").map((m) => m.trim()).filter((m) => m !== "");
        const contextSelectorGroupsLength = contextSelectorGroups.length;
        repeatGroups(contextSelectorGroups, newContextSelectors.length);
        for (let i = 0; i < newContextSelectors.length; i++) {
          for (let j = 0; j < contextSelectorGroupsLength; j++) {
            contextSelectorGroups[j + i * contextSelectorGroupsLength].push(newContextSelectors[i]);
          }
        }
        selectorText = match2[2];
      }
      return contextSelectorGroups.map((contextSelectors) => _combineHostContextSelectors(contextSelectors, selectorText, pseudoPrefix)).join(", ");
    });
  }
  /*
   * Convert combinators like ::shadow and pseudo-elements like ::content
   * by replacing with space.
   */
  _convertShadowDOMSelectors(cssText) {
    return _shadowDOMSelectorsRe.reduce((result, pattern) => result.replace(pattern, " "), cssText);
  }
  // change a selector like 'div' to 'name div'
  _scopeSelectors(cssText, scopeSelector, hostSelector) {
    return processRules(cssText, (rule) => {
      let selector = rule.selector;
      let content = rule.content;
      if (rule.selector[0] !== "@") {
        selector = this._scopeSelector({
          selector,
          scopeSelector,
          hostSelector,
          isParentSelector: true
        });
      } else if (scopedAtRuleIdentifiers.some((atRule) => rule.selector.startsWith(atRule))) {
        content = this._scopeSelectors(rule.content, scopeSelector, hostSelector);
      } else if (rule.selector.startsWith("@font-face") || rule.selector.startsWith("@page")) {
        content = this._stripScopingSelectors(rule.content);
      }
      return new CssRule(selector, content);
    });
  }
  /**
   * Handle a css text that is within a rule that should not contain scope selectors by simply
   * removing them! An example of such a rule is `@font-face`.
   *
   * `@font-face` rules cannot contain nested selectors. Nor can they be nested under a selector.
   * Normally this would be a syntax error by the author of the styles. But in some rare cases, such
   * as importing styles from a library, and applying `:host ::ng-deep` to the imported styles, we
   * can end up with broken css if the imported styles happen to contain @font-face rules.
   *
   * For example:
   *
   * ```
   * :host ::ng-deep {
   *   import 'some/lib/containing/font-face';
   * }
   *
   * Similar logic applies to `@page` rules which can contain a particular set of properties,
   * as well as some specific at-rules. Since they can't be encapsulated, we have to strip
   * any scoping selectors from them. For more information: https://www.w3.org/TR/css-page-3
   * ```
   */
  _stripScopingSelectors(cssText) {
    return processRules(cssText, (rule) => {
      const selector = rule.selector.replace(_shadowDeepSelectors, " ").replace(_polyfillHostNoCombinatorRe, " ");
      return new CssRule(selector, rule.content);
    });
  }
  _safeSelector;
  _shouldScopeIndicator;
  // `isParentSelector` is used to distinguish the selectors which are coming from
  // the initial selector string and any nested selectors, parsed recursively,
  // for example `selector = 'a:where(.one)'` could be the parent, while recursive call
  // would have `selector = '.one'`.
  _scopeSelector({
    selector,
    scopeSelector,
    hostSelector,
    isParentSelector = false
  }) {
    const selectorSplitRe = / ?,(?!(?:[^)(]*(?:\([^)(]*(?:\([^)(]*(?:\([^)(]*\)[^)(]*)*\)[^)(]*)*\)[^)(]*)*\))) ?/;
    return selector.split(selectorSplitRe).map((part) => part.split(_shadowDeepSelectors)).map((deepParts) => {
      const [shallowPart, ...otherParts] = deepParts;
      const applyScope = (shallowPart2) => {
        if (this._selectorNeedsScoping(shallowPart2, scopeSelector)) {
          return this._applySelectorScope({
            selector: shallowPart2,
            scopeSelector,
            hostSelector,
            isParentSelector
          });
        } else {
          return shallowPart2;
        }
      };
      return [applyScope(shallowPart), ...otherParts].join(" ");
    }).join(", ");
  }
  _selectorNeedsScoping(selector, scopeSelector) {
    const re = this._makeScopeMatcher(scopeSelector);
    return !re.test(selector);
  }
  _makeScopeMatcher(scopeSelector) {
    const lre = /\[/g;
    const rre = /\]/g;
    scopeSelector = scopeSelector.replace(lre, "\\[").replace(rre, "\\]");
    return new RegExp("^(" + scopeSelector + ")" + _selectorReSuffix, "m");
  }
  // scope via name and [is=name]
  _applySimpleSelectorScope(selector, scopeSelector, hostSelector) {
    _polyfillHostRe.lastIndex = 0;
    if (_polyfillHostRe.test(selector)) {
      const replaceBy = `[${hostSelector}]`;
      let result = selector;
      while (result.match(_polyfillHostNoCombinatorRe)) {
        result = result.replace(_polyfillHostNoCombinatorRe, (_hnc, selector2) => {
          return selector2.replace(/([^:\)]*)(:*)(.*)/, (_, before, colon, after) => {
            return before + replaceBy + colon + after;
          });
        });
      }
      return result.replace(_polyfillHostRe, replaceBy);
    }
    return scopeSelector + " " + selector;
  }
  // return a selector with [name] suffix on each simple selector
  // e.g. .foo.bar > .zot becomes .foo[name].bar[name] > .zot[name]  /** @internal */
  _applySelectorScope({
    selector,
    scopeSelector,
    hostSelector,
    isParentSelector
  }) {
    const isRe = /\[is=([^\]]*)\]/g;
    scopeSelector = scopeSelector.replace(isRe, (_, ...parts) => parts[0]);
    const attrName = `[${scopeSelector}]`;
    const _scopeSelectorPart = (p) => {
      let scopedP = p.trim();
      if (!scopedP) {
        return p;
      }
      if (p.includes(_polyfillHostNoCombinator)) {
        scopedP = this._applySimpleSelectorScope(p, scopeSelector, hostSelector);
        if (!p.match(_polyfillHostNoCombinatorOutsidePseudoFunction)) {
          const [_, before, colon, after] = scopedP.match(/([^:]*)(:*)([\s\S]*)/);
          scopedP = before + attrName + colon + after;
        }
      } else {
        const t = p.replace(_polyfillHostRe, "");
        if (t.length > 0) {
          const matches = t.match(/([^:]*)(:*)([\s\S]*)/);
          if (matches) {
            scopedP = matches[1] + attrName + matches[2] + matches[3];
          }
        }
      }
      return scopedP;
    };
    const _pseudoFunctionAwareScopeSelectorPart = (selectorPart) => {
      let scopedPart = "";
      const pseudoSelectorParts = [];
      let pseudoSelectorMatch;
      while ((pseudoSelectorMatch = _cssPrefixWithPseudoSelectorFunction.exec(selectorPart)) !== null) {
        let openedBrackets = 1;
        let index = _cssPrefixWithPseudoSelectorFunction.lastIndex;
        while (index < selectorPart.length) {
          const currentSymbol = selectorPart[index];
          index++;
          if (currentSymbol === "(") {
            openedBrackets++;
            continue;
          }
          if (currentSymbol === ")") {
            openedBrackets--;
            if (openedBrackets === 0) {
              break;
            }
            continue;
          }
        }
        pseudoSelectorParts.push(`${pseudoSelectorMatch[0]}${selectorPart.slice(_cssPrefixWithPseudoSelectorFunction.lastIndex, index)}`);
        _cssPrefixWithPseudoSelectorFunction.lastIndex = index;
      }
      if (pseudoSelectorParts.join("") === selectorPart) {
        scopedPart = pseudoSelectorParts.map((selectorPart2) => {
          const [cssPseudoSelectorFunction] = selectorPart2.match(_cssPrefixWithPseudoSelectorFunction) ?? [];
          const selectorToScope = selectorPart2.slice(cssPseudoSelectorFunction?.length, -1);
          if (selectorToScope.includes(_polyfillHostNoCombinator)) {
            this._shouldScopeIndicator = true;
          }
          const scopedInnerPart = this._scopeSelector({
            selector: selectorToScope,
            scopeSelector,
            hostSelector
          });
          return `${cssPseudoSelectorFunction}${scopedInnerPart})`;
        }).join("");
      } else {
        this._shouldScopeIndicator = this._shouldScopeIndicator || selectorPart.includes(_polyfillHostNoCombinator);
        scopedPart = this._shouldScopeIndicator ? _scopeSelectorPart(selectorPart) : selectorPart;
      }
      return scopedPart;
    };
    if (isParentSelector) {
      this._safeSelector = new SafeSelector(selector);
      selector = this._safeSelector.content();
    }
    let scopedSelector = "";
    let startIndex = 0;
    let res;
    const sep = /( |>|\+|~(?!=))(?!([^)(]*(?:\([^)(]*(?:\([^)(]*(?:\([^)(]*\)[^)(]*)*\)[^)(]*)*\)[^)(]*)*\)))\s*/g;
    const hasHost = selector.includes(_polyfillHostNoCombinator);
    if (isParentSelector || this._shouldScopeIndicator) {
      this._shouldScopeIndicator = !hasHost;
    }
    while ((res = sep.exec(selector)) !== null) {
      const separator = res[1];
      const part2 = selector.slice(startIndex, res.index);
      if (part2.match(/__esc-ph-(\d+)__/) && selector[res.index + 1]?.match(/[a-fA-F\d]/)) {
        continue;
      }
      const scopedPart = _pseudoFunctionAwareScopeSelectorPart(part2);
      scopedSelector += `${scopedPart} ${separator} `;
      startIndex = sep.lastIndex;
    }
    const part = selector.substring(startIndex);
    scopedSelector += _pseudoFunctionAwareScopeSelectorPart(part);
    return this._safeSelector.restore(scopedSelector);
  }
  _insertPolyfillHostInCssText(selector) {
    return selector.replace(_colonHostContextRe, _polyfillHostContext).replace(_colonHostRe, _polyfillHost);
  }
};
var SafeSelector = class {
  placeholders = [];
  index = 0;
  _content;
  constructor(selector) {
    selector = this._escapeRegexMatches(selector, /(\[[^\]]*\])/g);
    selector = selector.replace(/(\\.)/g, (_, keep) => {
      const replaceBy = `__esc-ph-${this.index}__`;
      this.placeholders.push(keep);
      this.index++;
      return replaceBy;
    });
    this._content = selector.replace(/(:nth-[-\w]+)(\([^)]+\))/g, (_, pseudo, exp) => {
      const replaceBy = `__ph-${this.index}__`;
      this.placeholders.push(exp);
      this.index++;
      return pseudo + replaceBy;
    });
  }
  restore(content) {
    return content.replace(/__(?:ph|esc-ph)-(\d+)__/g, (_ph, index) => this.placeholders[+index]);
  }
  content() {
    return this._content;
  }
  /**
   * Replaces all of the substrings that match a regex within a
   * special string (e.g. `__ph-0__`, `__ph-1__`, etc).
   */
  _escapeRegexMatches(content, pattern) {
    return content.replace(pattern, (_, keep) => {
      const replaceBy = `__ph-${this.index}__`;
      this.placeholders.push(keep);
      this.index++;
      return replaceBy;
    });
  }
};
var _cssScopedPseudoFunctionPrefix = "(:(where|is)\\()?";
var _cssPrefixWithPseudoSelectorFunction = /:(where|is)\(/gi;
var _cssContentNextSelectorRe = /polyfill-next-selector[^}]*content:[\s]*?(['"])(.*?)\1[;\s]*}([^{]*?){/gim;
var _cssContentRuleRe = /(polyfill-rule)[^}]*(content:[\s]*(['"])(.*?)\3)[;\s]*[^}]*}/gim;
var _cssContentUnscopedRuleRe = /(polyfill-unscoped-rule)[^}]*(content:[\s]*(['"])(.*?)\3)[;\s]*[^}]*}/gim;
var _polyfillHost = "-shadowcsshost";
var _polyfillHostContext = "-shadowcsscontext";
var _parenSuffix = "(?:\\(((?:\\([^)(]*\\)|[^)(]*)+?)\\))";
var _cssColonHostRe = new RegExp(_polyfillHost + _parenSuffix + "?([^,{]*)", "gim");
var _hostContextPattern = _polyfillHostContext + _parenSuffix + "?([^{]*)";
var _cssColonHostContextReGlobal = new RegExp(`${_cssScopedPseudoFunctionPrefix}(${_hostContextPattern})`, "gim");
var _cssColonHostContextRe = new RegExp(_hostContextPattern, "im");
var _polyfillHostNoCombinator = _polyfillHost + "-no-combinator";
var _polyfillHostNoCombinatorOutsidePseudoFunction = new RegExp(`${_polyfillHostNoCombinator}(?![^(]*\\))`, "g");
var _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\s,]*)/;
var _shadowDOMSelectorsRe = [
  /::shadow/g,
  /::content/g,
  // Deprecated selectors
  /\/shadow-deep\//g,
  /\/shadow\//g
];
var _shadowDeepSelectors = /(?:>>>)|(?:\/deep\/)|(?:::ng-deep)/g;
var _selectorReSuffix = "([>\\s~+[.,{:][\\s\\S]*)?$";
var _polyfillHostRe = /-shadowcsshost/gim;
var _colonHostRe = /:host/gim;
var _colonHostContextRe = /:host-context/gim;
var _newLinesRe = /\r?\n/g;
var _commentRe = /\/\*[\s\S]*?\*\//g;
var _commentWithHashRe = /\/\*\s*#\s*source(Mapping)?URL=/g;
var COMMENT_PLACEHOLDER = "%COMMENT%";
var _commentWithHashPlaceHolderRe = new RegExp(COMMENT_PLACEHOLDER, "g");
var BLOCK_PLACEHOLDER = "%BLOCK%";
var _ruleRe = new RegExp(`(\\s*(?:${COMMENT_PLACEHOLDER}\\s*)*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))`, "g");
var CONTENT_PAIRS = /* @__PURE__ */ new Map([["{", "}"]]);
var COMMA_IN_PLACEHOLDER = "%COMMA_IN_PLACEHOLDER%";
var SEMI_IN_PLACEHOLDER = "%SEMI_IN_PLACEHOLDER%";
var COLON_IN_PLACEHOLDER = "%COLON_IN_PLACEHOLDER%";
var _cssCommaInPlaceholderReGlobal = new RegExp(COMMA_IN_PLACEHOLDER, "g");
var _cssSemiInPlaceholderReGlobal = new RegExp(SEMI_IN_PLACEHOLDER, "g");
var _cssColonInPlaceholderReGlobal = new RegExp(COLON_IN_PLACEHOLDER, "g");
var CssRule = class {
  selector;
  content;
  constructor(selector, content) {
    this.selector = selector;
    this.content = content;
  }
};
function processRules(input2, ruleCallback) {
  const escaped = escapeInStrings(input2);
  const inputWithEscapedBlocks = escapeBlocks(escaped, CONTENT_PAIRS, BLOCK_PLACEHOLDER);
  let nextBlockIndex = 0;
  const escapedResult = inputWithEscapedBlocks.escapedString.replace(_ruleRe, (...m) => {
    const selector = m[2];
    let content = "";
    let suffix = m[4];
    let contentPrefix = "";
    if (suffix && suffix.startsWith("{" + BLOCK_PLACEHOLDER)) {
      content = inputWithEscapedBlocks.blocks[nextBlockIndex++];
      suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);
      contentPrefix = "{";
    }
    const rule = ruleCallback(new CssRule(selector, content));
    return `${m[1]}${rule.selector}${m[3]}${contentPrefix}${rule.content}${suffix}`;
  });
  return unescapeInStrings(escapedResult);
}
var StringWithEscapedBlocks = class {
  escapedString;
  blocks;
  constructor(escapedString, blocks) {
    this.escapedString = escapedString;
    this.blocks = blocks;
  }
};
function escapeBlocks(input2, charPairs, placeholder) {
  const resultParts = [];
  const escapedBlocks = [];
  let openCharCount = 0;
  let nonBlockStartIndex = 0;
  let blockStartIndex = -1;
  let openChar;
  let closeChar;
  for (let i = 0; i < input2.length; i++) {
    const char = input2[i];
    if (char === "\\") {
      i++;
    } else if (char === closeChar) {
      openCharCount--;
      if (openCharCount === 0) {
        escapedBlocks.push(input2.substring(blockStartIndex, i));
        resultParts.push(placeholder);
        nonBlockStartIndex = i;
        blockStartIndex = -1;
        openChar = closeChar = void 0;
      }
    } else if (char === openChar) {
      openCharCount++;
    } else if (openCharCount === 0 && charPairs.has(char)) {
      openChar = char;
      closeChar = charPairs.get(char);
      openCharCount = 1;
      blockStartIndex = i + 1;
      resultParts.push(input2.substring(nonBlockStartIndex, blockStartIndex));
    }
  }
  if (blockStartIndex !== -1) {
    escapedBlocks.push(input2.substring(blockStartIndex));
    resultParts.push(placeholder);
  } else {
    resultParts.push(input2.substring(nonBlockStartIndex));
  }
  return new StringWithEscapedBlocks(resultParts.join(""), escapedBlocks);
}
var ESCAPE_IN_STRING_MAP = {
  ";": SEMI_IN_PLACEHOLDER,
  ",": COMMA_IN_PLACEHOLDER,
  ":": COLON_IN_PLACEHOLDER
};
function escapeInStrings(input2) {
  let result = input2;
  let currentQuoteChar = null;
  for (let i = 0; i < result.length; i++) {
    const char = result[i];
    if (char === "\\") {
      i++;
    } else {
      if (currentQuoteChar !== null) {
        if (char === currentQuoteChar) {
          currentQuoteChar = null;
        } else {
          const placeholder = ESCAPE_IN_STRING_MAP[char];
          if (placeholder) {
            result = `${result.substr(0, i)}${placeholder}${result.substr(i + 1)}`;
            i += placeholder.length - 1;
          }
        }
      } else if (char === "'" || char === '"') {
        currentQuoteChar = char;
      }
    }
  }
  return result;
}
function unescapeInStrings(input2) {
  let result = input2.replace(_cssCommaInPlaceholderReGlobal, ",");
  result = result.replace(_cssSemiInPlaceholderReGlobal, ";");
  result = result.replace(_cssColonInPlaceholderReGlobal, ":");
  return result;
}
function unescapeQuotes(str, isQuoted) {
  return !isQuoted ? str : str.replace(/((?:^|[^\\])(?:\\\\)*)\\(?=['"])/g, "$1");
}
function _combineHostContextSelectors(contextSelectors, otherSelectors, pseudoPrefix = "") {
  const hostMarker = _polyfillHostNoCombinator;
  _polyfillHostRe.lastIndex = 0;
  const otherSelectorsHasHost = _polyfillHostRe.test(otherSelectors);
  if (contextSelectors.length === 0) {
    return hostMarker + otherSelectors;
  }
  const combined = [contextSelectors.pop() || ""];
  while (contextSelectors.length > 0) {
    const length = combined.length;
    const contextSelector = contextSelectors.pop();
    for (let i = 0; i < length; i++) {
      const previousSelectors = combined[i];
      combined[length * 2 + i] = previousSelectors + " " + contextSelector;
      combined[length + i] = contextSelector + " " + previousSelectors;
      combined[i] = contextSelector + previousSelectors;
    }
  }
  return combined.map((s) => otherSelectorsHasHost ? `${pseudoPrefix}${s}${otherSelectors}` : `${pseudoPrefix}${s}${hostMarker}${otherSelectors}, ${pseudoPrefix}${s} ${hostMarker}${otherSelectors}`).join(",");
}
function repeatGroups(groups, multiples) {
  const length = groups.length;
  for (let i = 1; i < multiples; i++) {
    for (let j = 0; j < length; j++) {
      groups[j + i * length] = groups[j].slice(0);
    }
  }
}
var OpKind;
(function(OpKind2) {
  OpKind2[OpKind2["ListEnd"] = 0] = "ListEnd";
  OpKind2[OpKind2["Statement"] = 1] = "Statement";
  OpKind2[OpKind2["Variable"] = 2] = "Variable";
  OpKind2[OpKind2["ElementStart"] = 3] = "ElementStart";
  OpKind2[OpKind2["Element"] = 4] = "Element";
  OpKind2[OpKind2["Template"] = 5] = "Template";
  OpKind2[OpKind2["ElementEnd"] = 6] = "ElementEnd";
  OpKind2[OpKind2["ContainerStart"] = 7] = "ContainerStart";
  OpKind2[OpKind2["Container"] = 8] = "Container";
  OpKind2[OpKind2["ContainerEnd"] = 9] = "ContainerEnd";
  OpKind2[OpKind2["DisableBindings"] = 10] = "DisableBindings";
  OpKind2[OpKind2["Conditional"] = 11] = "Conditional";
  OpKind2[OpKind2["EnableBindings"] = 12] = "EnableBindings";
  OpKind2[OpKind2["Text"] = 13] = "Text";
  OpKind2[OpKind2["Listener"] = 14] = "Listener";
  OpKind2[OpKind2["InterpolateText"] = 15] = "InterpolateText";
  OpKind2[OpKind2["Binding"] = 16] = "Binding";
  OpKind2[OpKind2["Property"] = 17] = "Property";
  OpKind2[OpKind2["StyleProp"] = 18] = "StyleProp";
  OpKind2[OpKind2["ClassProp"] = 19] = "ClassProp";
  OpKind2[OpKind2["StyleMap"] = 20] = "StyleMap";
  OpKind2[OpKind2["ClassMap"] = 21] = "ClassMap";
  OpKind2[OpKind2["Advance"] = 22] = "Advance";
  OpKind2[OpKind2["Pipe"] = 23] = "Pipe";
  OpKind2[OpKind2["Attribute"] = 24] = "Attribute";
  OpKind2[OpKind2["ExtractedAttribute"] = 25] = "ExtractedAttribute";
  OpKind2[OpKind2["Defer"] = 26] = "Defer";
  OpKind2[OpKind2["DeferOn"] = 27] = "DeferOn";
  OpKind2[OpKind2["DeferWhen"] = 28] = "DeferWhen";
  OpKind2[OpKind2["I18nMessage"] = 29] = "I18nMessage";
  OpKind2[OpKind2["HostProperty"] = 30] = "HostProperty";
  OpKind2[OpKind2["Namespace"] = 31] = "Namespace";
  OpKind2[OpKind2["ProjectionDef"] = 32] = "ProjectionDef";
  OpKind2[OpKind2["Projection"] = 33] = "Projection";
  OpKind2[OpKind2["RepeaterCreate"] = 34] = "RepeaterCreate";
  OpKind2[OpKind2["Repeater"] = 35] = "Repeater";
  OpKind2[OpKind2["TwoWayProperty"] = 36] = "TwoWayProperty";
  OpKind2[OpKind2["TwoWayListener"] = 37] = "TwoWayListener";
  OpKind2[OpKind2["DeclareLet"] = 38] = "DeclareLet";
  OpKind2[OpKind2["StoreLet"] = 39] = "StoreLet";
  OpKind2[OpKind2["I18nStart"] = 40] = "I18nStart";
  OpKind2[OpKind2["I18n"] = 41] = "I18n";
  OpKind2[OpKind2["I18nEnd"] = 42] = "I18nEnd";
  OpKind2[OpKind2["I18nExpression"] = 43] = "I18nExpression";
  OpKind2[OpKind2["I18nApply"] = 44] = "I18nApply";
  OpKind2[OpKind2["IcuStart"] = 45] = "IcuStart";
  OpKind2[OpKind2["IcuEnd"] = 46] = "IcuEnd";
  OpKind2[OpKind2["IcuPlaceholder"] = 47] = "IcuPlaceholder";
  OpKind2[OpKind2["I18nContext"] = 48] = "I18nContext";
  OpKind2[OpKind2["I18nAttributes"] = 49] = "I18nAttributes";
  OpKind2[OpKind2["SourceLocation"] = 50] = "SourceLocation";
})(OpKind || (OpKind = {}));
var ExpressionKind;
(function(ExpressionKind2) {
  ExpressionKind2[ExpressionKind2["LexicalRead"] = 0] = "LexicalRead";
  ExpressionKind2[ExpressionKind2["Context"] = 1] = "Context";
  ExpressionKind2[ExpressionKind2["TrackContext"] = 2] = "TrackContext";
  ExpressionKind2[ExpressionKind2["ReadVariable"] = 3] = "ReadVariable";
  ExpressionKind2[ExpressionKind2["NextContext"] = 4] = "NextContext";
  ExpressionKind2[ExpressionKind2["Reference"] = 5] = "Reference";
  ExpressionKind2[ExpressionKind2["StoreLet"] = 6] = "StoreLet";
  ExpressionKind2[ExpressionKind2["ContextLetReference"] = 7] = "ContextLetReference";
  ExpressionKind2[ExpressionKind2["GetCurrentView"] = 8] = "GetCurrentView";
  ExpressionKind2[ExpressionKind2["RestoreView"] = 9] = "RestoreView";
  ExpressionKind2[ExpressionKind2["ResetView"] = 10] = "ResetView";
  ExpressionKind2[ExpressionKind2["PureFunctionExpr"] = 11] = "PureFunctionExpr";
  ExpressionKind2[ExpressionKind2["PureFunctionParameterExpr"] = 12] = "PureFunctionParameterExpr";
  ExpressionKind2[ExpressionKind2["PipeBinding"] = 13] = "PipeBinding";
  ExpressionKind2[ExpressionKind2["PipeBindingVariadic"] = 14] = "PipeBindingVariadic";
  ExpressionKind2[ExpressionKind2["SafePropertyRead"] = 15] = "SafePropertyRead";
  ExpressionKind2[ExpressionKind2["SafeKeyedRead"] = 16] = "SafeKeyedRead";
  ExpressionKind2[ExpressionKind2["SafeInvokeFunction"] = 17] = "SafeInvokeFunction";
  ExpressionKind2[ExpressionKind2["SafeTernaryExpr"] = 18] = "SafeTernaryExpr";
  ExpressionKind2[ExpressionKind2["EmptyExpr"] = 19] = "EmptyExpr";
  ExpressionKind2[ExpressionKind2["AssignTemporaryExpr"] = 20] = "AssignTemporaryExpr";
  ExpressionKind2[ExpressionKind2["ReadTemporaryExpr"] = 21] = "ReadTemporaryExpr";
  ExpressionKind2[ExpressionKind2["SlotLiteralExpr"] = 22] = "SlotLiteralExpr";
  ExpressionKind2[ExpressionKind2["ConditionalCase"] = 23] = "ConditionalCase";
  ExpressionKind2[ExpressionKind2["ConstCollected"] = 24] = "ConstCollected";
  ExpressionKind2[ExpressionKind2["TwoWayBindingSet"] = 25] = "TwoWayBindingSet";
})(ExpressionKind || (ExpressionKind = {}));
var VariableFlags;
(function(VariableFlags2) {
  VariableFlags2[VariableFlags2["None"] = 0] = "None";
  VariableFlags2[VariableFlags2["AlwaysInline"] = 1] = "AlwaysInline";
})(VariableFlags || (VariableFlags = {}));
var SemanticVariableKind;
(function(SemanticVariableKind2) {
  SemanticVariableKind2[SemanticVariableKind2["Context"] = 0] = "Context";
  SemanticVariableKind2[SemanticVariableKind2["Identifier"] = 1] = "Identifier";
  SemanticVariableKind2[SemanticVariableKind2["SavedView"] = 2] = "SavedView";
  SemanticVariableKind2[SemanticVariableKind2["Alias"] = 3] = "Alias";
})(SemanticVariableKind || (SemanticVariableKind = {}));
var CompatibilityMode;
(function(CompatibilityMode2) {
  CompatibilityMode2[CompatibilityMode2["Normal"] = 0] = "Normal";
  CompatibilityMode2[CompatibilityMode2["TemplateDefinitionBuilder"] = 1] = "TemplateDefinitionBuilder";
})(CompatibilityMode || (CompatibilityMode = {}));
var BindingKind;
(function(BindingKind2) {
  BindingKind2[BindingKind2["Attribute"] = 0] = "Attribute";
  BindingKind2[BindingKind2["ClassName"] = 1] = "ClassName";
  BindingKind2[BindingKind2["StyleProperty"] = 2] = "StyleProperty";
  BindingKind2[BindingKind2["Property"] = 3] = "Property";
  BindingKind2[BindingKind2["Template"] = 4] = "Template";
  BindingKind2[BindingKind2["I18n"] = 5] = "I18n";
  BindingKind2[BindingKind2["Animation"] = 6] = "Animation";
  BindingKind2[BindingKind2["TwoWayProperty"] = 7] = "TwoWayProperty";
})(BindingKind || (BindingKind = {}));
var I18nParamResolutionTime;
(function(I18nParamResolutionTime2) {
  I18nParamResolutionTime2[I18nParamResolutionTime2["Creation"] = 0] = "Creation";
  I18nParamResolutionTime2[I18nParamResolutionTime2["Postproccessing"] = 1] = "Postproccessing";
})(I18nParamResolutionTime || (I18nParamResolutionTime = {}));
var I18nExpressionFor;
(function(I18nExpressionFor2) {
  I18nExpressionFor2[I18nExpressionFor2["I18nText"] = 0] = "I18nText";
  I18nExpressionFor2[I18nExpressionFor2["I18nAttribute"] = 1] = "I18nAttribute";
})(I18nExpressionFor || (I18nExpressionFor = {}));
var I18nParamValueFlags;
(function(I18nParamValueFlags2) {
  I18nParamValueFlags2[I18nParamValueFlags2["None"] = 0] = "None";
  I18nParamValueFlags2[I18nParamValueFlags2["ElementTag"] = 1] = "ElementTag";
  I18nParamValueFlags2[I18nParamValueFlags2["TemplateTag"] = 2] = "TemplateTag";
  I18nParamValueFlags2[I18nParamValueFlags2["OpenTag"] = 4] = "OpenTag";
  I18nParamValueFlags2[I18nParamValueFlags2["CloseTag"] = 8] = "CloseTag";
  I18nParamValueFlags2[I18nParamValueFlags2["ExpressionIndex"] = 16] = "ExpressionIndex";
})(I18nParamValueFlags || (I18nParamValueFlags = {}));
var Namespace;
(function(Namespace3) {
  Namespace3[Namespace3["HTML"] = 0] = "HTML";
  Namespace3[Namespace3["SVG"] = 1] = "SVG";
  Namespace3[Namespace3["Math"] = 2] = "Math";
})(Namespace || (Namespace = {}));
var DeferTriggerKind;
(function(DeferTriggerKind2) {
  DeferTriggerKind2[DeferTriggerKind2["Idle"] = 0] = "Idle";
  DeferTriggerKind2[DeferTriggerKind2["Immediate"] = 1] = "Immediate";
  DeferTriggerKind2[DeferTriggerKind2["Timer"] = 2] = "Timer";
  DeferTriggerKind2[DeferTriggerKind2["Hover"] = 3] = "Hover";
  DeferTriggerKind2[DeferTriggerKind2["Interaction"] = 4] = "Interaction";
  DeferTriggerKind2[DeferTriggerKind2["Viewport"] = 5] = "Viewport";
  DeferTriggerKind2[DeferTriggerKind2["Never"] = 6] = "Never";
})(DeferTriggerKind || (DeferTriggerKind = {}));
var I18nContextKind;
(function(I18nContextKind2) {
  I18nContextKind2[I18nContextKind2["RootI18n"] = 0] = "RootI18n";
  I18nContextKind2[I18nContextKind2["Icu"] = 1] = "Icu";
  I18nContextKind2[I18nContextKind2["Attr"] = 2] = "Attr";
})(I18nContextKind || (I18nContextKind = {}));
var TemplateKind;
(function(TemplateKind2) {
  TemplateKind2[TemplateKind2["NgTemplate"] = 0] = "NgTemplate";
  TemplateKind2[TemplateKind2["Structural"] = 1] = "Structural";
  TemplateKind2[TemplateKind2["Block"] = 2] = "Block";
})(TemplateKind || (TemplateKind = {}));
var ConsumesSlot = Symbol("ConsumesSlot");
var DependsOnSlotContext = Symbol("DependsOnSlotContext");
var ConsumesVarsTrait = Symbol("ConsumesVars");
var UsesVarOffset = Symbol("UsesVarOffset");
var TRAIT_CONSUMES_SLOT = {
  [ConsumesSlot]: true,
  numSlotsUsed: 1
};
var TRAIT_DEPENDS_ON_SLOT_CONTEXT = {
  [DependsOnSlotContext]: true
};
var TRAIT_CONSUMES_VARS = {
  [ConsumesVarsTrait]: true
};
function hasConsumesSlotTrait(op2) {
  return op2[ConsumesSlot] === true;
}
function hasDependsOnSlotContextTrait(value) {
  return value[DependsOnSlotContext] === true;
}
function hasConsumesVarsTrait(value) {
  return value[ConsumesVarsTrait] === true;
}
function hasUsesVarOffsetTrait(expr) {
  return expr[UsesVarOffset] === true;
}
function createStatementOp(statement) {
  return __spreadValues({
    kind: OpKind.Statement,
    statement
  }, NEW_OP);
}
function createVariableOp(xref, variable2, initializer, flags) {
  return __spreadValues({
    kind: OpKind.Variable,
    xref,
    variable: variable2,
    initializer,
    flags
  }, NEW_OP);
}
var NEW_OP = {
  debugListId: null,
  prev: null,
  next: null
};
function createInterpolateTextOp(xref, interpolation, sourceSpan) {
  return __spreadValues(__spreadValues(__spreadValues({
    kind: OpKind.InterpolateText,
    target: xref,
    interpolation,
    sourceSpan
  }, TRAIT_DEPENDS_ON_SLOT_CONTEXT), TRAIT_CONSUMES_VARS), NEW_OP);
}
var Interpolation2 = class {
  strings;
  expressions;
  i18nPlaceholders;
  constructor(strings, expressions, i18nPlaceholders) {
    this.strings = strings;
    this.expressions = expressions;
    this.i18nPlaceholders = i18nPlaceholders;
    if (i18nPlaceholders.length !== 0 && i18nPlaceholders.length !== expressions.length) {
      throw new Error(`Expected ${expressions.length} placeholders to match interpolation expression count, but got ${i18nPlaceholders.length}`);
    }
  }
};
function createBindingOp(target, kind, name, expression, unit, securityContext, isTextAttribute, isStructuralTemplateAttribute, templateKind, i18nMessage, sourceSpan) {
  return __spreadValues({
    kind: OpKind.Binding,
    bindingKind: kind,
    target,
    name,
    expression,
    unit,
    securityContext,
    isTextAttribute,
    isStructuralTemplateAttribute,
    templateKind,
    i18nContext: null,
    i18nMessage,
    sourceSpan
  }, NEW_OP);
}
function createPropertyOp(target, name, expression, isAnimationTrigger, securityContext, isStructuralTemplateAttribute, templateKind, i18nContext, i18nMessage, sourceSpan) {
  return __spreadValues(__spreadValues(__spreadValues({
    kind: OpKind.Property,
    target,
    name,
    expression,
    isAnimationTrigger,
    securityContext,
    sanitizer: null,
    isStructuralTemplateAttribute,
    templateKind,
    i18nContext,
    i18nMessage,
    sourceSpan
  }, TRAIT_DEPENDS_ON_SLOT_CONTEXT), TRAIT_CONSUMES_VARS), NEW_OP);
}
function createTwoWayPropertyOp(target, name, expression, securityContext, isStructuralTemplateAttribute, templateKind, i18nContext, i18nMessage, sourceSpan) {
  return __spreadValues(__spreadValues(__spreadValues({
    kind: OpKind.TwoWayProperty,
    target,
    name,
    expression,
    securityContext,
    sanitizer: null,
    isStructuralTemplateAttribute,
    templateKind,
    i18nContext,
    i18nMessage,
    sourceSpan
  }, TRAIT_DEPENDS_ON_SLOT_CONTEXT), TRAIT_CONSUMES_VARS), NEW_OP);
}
function createStylePropOp(xref, name, expression, unit, sourceSpan) {
  return __spreadValues(__spreadValues(__spreadValues({
    kind: OpKind.StyleProp,
    target: xref,
    name,
    expression,
    unit,
    sourceSpan
  }, TRAIT_DEPENDS_ON_SLOT_CONTEXT), TRAIT_CONSUMES_VARS), NEW_OP);
}
function createClassPropOp(xref, name, expression, sourceSpan) {
  return __spreadValues(__spreadValues(__spreadValues({
    kind: OpKind.ClassProp,
    target: xref,
    name,
    expression,
    sourceSpan
  }, TRAIT_DEPENDS_ON_SLOT_CONTEXT), TRAIT_CONSUMES_VARS), NEW_OP);
}
function createStyleMapOp(xref, expression, sourceSpan) {
  return __spreadValues(__spreadValues(__spreadValues({
    kind: OpKind.StyleMap,
    target: xref,
    expression,
    sourceSpan
  }, TRAIT_DEPENDS_ON_SLOT_CONTEXT), TRAIT_CONSUMES_VARS), NEW_OP);
}
function createClassMapOp(xref, expression, sourceSpan) {
  return __spreadValues(__spreadValues(__spreadValues({
    kind: OpKind.ClassMap,
    target: xref,
    expression,
    sourceSpan
  }, TRAIT_DEPENDS_ON_SLOT_CONTEXT), TRAIT_CONSUMES_VARS), NEW_OP);
}
function createAttributeOp(target, namespace, name, expression, securityContext, isTextAttribute, isStructuralTemplateAttribute, templateKind, i18nMessage, sourceSpan) {
  return __spreadValues(__spreadValues(__spreadValues({
    kind: OpKind.Attribute,
    target,
    namespace,
    name,
    expression,
    securityContext,
    sanitizer: null,
    isTextAttribute,
    isStructuralTemplateAttribute,
    templateKind,
    i18nContext: null,
    i18nMessage,
    sourceSpan
  }, TRAIT_DEPENDS_ON_SLOT_CONTEXT), TRAIT_CONSUMES_VARS), NEW_OP);
}
function createAdvanceOp(delta, sourceSpan) {
  return __spreadValues({
    kind: OpKind.Advance,
    delta,
    sourceSpan
  }, NEW_OP);
}
function createConditionalOp(target, test, conditions, sourceSpan) {
  return __spreadValues(__spreadValues(__spreadValues({
    kind: OpKind.Conditional,
    target,
    test,
    conditions,
    processed: null,
    sourceSpan,
    contextValue: null
  }, NEW_OP), TRAIT_DEPENDS_ON_SLOT_CONTEXT), TRAIT_CONSUMES_VARS);
}
function createRepeaterOp(repeaterCreate2, targetSlot, collection, sourceSpan) {
  return __spreadValues(__spreadValues({
    kind: OpKind.Repeater,
    target: repeaterCreate2,
    targetSlot,
    collection,
    sourceSpan
  }, NEW_OP), TRAIT_DEPENDS_ON_SLOT_CONTEXT);
}
function createDeferWhenOp(target, expr, modifier, sourceSpan) {
  return __spreadValues(__spreadValues(__spreadValues({
    kind: OpKind.DeferWhen,
    target,
    expr,
    modifier,
    sourceSpan
  }, NEW_OP), TRAIT_DEPENDS_ON_SLOT_CONTEXT), TRAIT_CONSUMES_VARS);
}
function createI18nExpressionOp(context, target, i18nOwner, handle, expression, icuPlaceholder, i18nPlaceholder, resolutionTime, usage, name, sourceSpan) {
  return __spreadValues(__spreadValues(__spreadValues({
    kind: OpKind.I18nExpression,
    context,
    target,
    i18nOwner,
    handle,
    expression,
    icuPlaceholder,
    i18nPlaceholder,
    resolutionTime,
    usage,
    name,
    sourceSpan
  }, NEW_OP), TRAIT_CONSUMES_VARS), TRAIT_DEPENDS_ON_SLOT_CONTEXT);
}
function createI18nApplyOp(owner, handle, sourceSpan) {
  return __spreadValues({
    kind: OpKind.I18nApply,
    owner,
    handle,
    sourceSpan
  }, NEW_OP);
}
function createStoreLetOp(target, declaredName, value, sourceSpan) {
  return __spreadValues(__spreadValues(__spreadValues({
    kind: OpKind.StoreLet,
    target,
    declaredName,
    value,
    sourceSpan
  }, TRAIT_DEPENDS_ON_SLOT_CONTEXT), TRAIT_CONSUMES_VARS), NEW_OP);
}
function isIrExpression(expr) {
  return expr instanceof ExpressionBase;
}
var ExpressionBase = class extends Expression {
  constructor(sourceSpan = null) {
    super(null, sourceSpan);
  }
};
var LexicalReadExpr = class _LexicalReadExpr extends ExpressionBase {
  name;
  kind = ExpressionKind.LexicalRead;
  constructor(name) {
    super();
    this.name = name;
  }
  visitExpression(visitor, context) {
  }
  isEquivalent(other) {
    return this.name === other.name;
  }
  isConstant() {
    return false;
  }
  transformInternalExpressions() {
  }
  clone() {
    return new _LexicalReadExpr(this.name);
  }
};
var ReferenceExpr = class _ReferenceExpr extends ExpressionBase {
  target;
  targetSlot;
  offset;
  kind = ExpressionKind.Reference;
  constructor(target, targetSlot, offset) {
    super();
    this.target = target;
    this.targetSlot = targetSlot;
    this.offset = offset;
  }
  visitExpression() {
  }
  isEquivalent(e) {
    return e instanceof _ReferenceExpr && e.target === this.target;
  }
  isConstant() {
    return false;
  }
  transformInternalExpressions() {
  }
  clone() {
    return new _ReferenceExpr(this.target, this.targetSlot, this.offset);
  }
};
var StoreLetExpr = class _StoreLetExpr extends ExpressionBase {
  target;
  value;
  sourceSpan;
  kind = ExpressionKind.StoreLet;
  [ConsumesVarsTrait] = true;
  [DependsOnSlotContext] = true;
  constructor(target, value, sourceSpan) {
    super();
    this.target = target;
    this.value = value;
    this.sourceSpan = sourceSpan;
  }
  visitExpression() {
  }
  isEquivalent(e) {
    return e instanceof _StoreLetExpr && e.target === this.target && e.value.isEquivalent(this.value);
  }
  isConstant() {
    return false;
  }
  transformInternalExpressions(transform2, flags) {
    this.value = transformExpressionsInExpression(this.value, transform2, flags);
  }
  clone() {
    return new _StoreLetExpr(this.target, this.value, this.sourceSpan);
  }
};
var ContextLetReferenceExpr = class _ContextLetReferenceExpr extends ExpressionBase {
  target;
  targetSlot;
  kind = ExpressionKind.ContextLetReference;
  constructor(target, targetSlot) {
    super();
    this.target = target;
    this.targetSlot = targetSlot;
  }
  visitExpression() {
  }
  isEquivalent(e) {
    return e instanceof _ContextLetReferenceExpr && e.target === this.target;
  }
  isConstant() {
    return false;
  }
  transformInternalExpressions() {
  }
  clone() {
    return new _ContextLetReferenceExpr(this.target, this.targetSlot);
  }
};
var ContextExpr = class _ContextExpr extends ExpressionBase {
  view;
  kind = ExpressionKind.Context;
  constructor(view) {
    super();
    this.view = view;
  }
  visitExpression() {
  }
  isEquivalent(e) {
    return e instanceof _ContextExpr && e.view === this.view;
  }
  isConstant() {
    return false;
  }
  transformInternalExpressions() {
  }
  clone() {
    return new _ContextExpr(this.view);
  }
};
var TrackContextExpr = class _TrackContextExpr extends ExpressionBase {
  view;
  kind = ExpressionKind.TrackContext;
  constructor(view) {
    super();
    this.view = view;
  }
  visitExpression() {
  }
  isEquivalent(e) {
    return e instanceof _TrackContextExpr && e.view === this.view;
  }
  isConstant() {
    return false;
  }
  transformInternalExpressions() {
  }
  clone() {
    return new _TrackContextExpr(this.view);
  }
};
var NextContextExpr = class _NextContextExpr extends ExpressionBase {
  kind = ExpressionKind.NextContext;
  steps = 1;
  constructor() {
    super();
  }
  visitExpression() {
  }
  isEquivalent(e) {
    return e instanceof _NextContextExpr && e.steps === this.steps;
  }
  isConstant() {
    return false;
  }
  transformInternalExpressions() {
  }
  clone() {
    const expr = new _NextContextExpr();
    expr.steps = this.steps;
    return expr;
  }
};
var GetCurrentViewExpr = class _GetCurrentViewExpr extends ExpressionBase {
  kind = ExpressionKind.GetCurrentView;
  constructor() {
    super();
  }
  visitExpression() {
  }
  isEquivalent(e) {
    return e instanceof _GetCurrentViewExpr;
  }
  isConstant() {
    return false;
  }
  transformInternalExpressions() {
  }
  clone() {
    return new _GetCurrentViewExpr();
  }
};
var RestoreViewExpr = class _RestoreViewExpr extends ExpressionBase {
  view;
  kind = ExpressionKind.RestoreView;
  constructor(view) {
    super();
    this.view = view;
  }
  visitExpression(visitor, context) {
    if (typeof this.view !== "number") {
      this.view.visitExpression(visitor, context);
    }
  }
  isEquivalent(e) {
    if (!(e instanceof _RestoreViewExpr) || typeof e.view !== typeof this.view) {
      return false;
    }
    if (typeof this.view === "number") {
      return this.view === e.view;
    } else {
      return this.view.isEquivalent(e.view);
    }
  }
  isConstant() {
    return false;
  }
  transformInternalExpressions(transform2, flags) {
    if (typeof this.view !== "number") {
      this.view = transformExpressionsInExpression(this.view, transform2, flags);
    }
  }
  clone() {
    return new _RestoreViewExpr(this.view instanceof Expression ? this.view.clone() : this.view);
  }
};
var ResetViewExpr = class _ResetViewExpr extends ExpressionBase {
  expr;
  kind = ExpressionKind.ResetView;
  constructor(expr) {
    super();
    this.expr = expr;
  }
  visitExpression(visitor, context) {
    this.expr.visitExpression(visitor, context);
  }
  isEquivalent(e) {
    return e instanceof _ResetViewExpr && this.expr.isEquivalent(e.expr);
  }
  isConstant() {
    return false;
  }
  transformInternalExpressions(transform2, flags) {
    this.expr = transformExpressionsInExpression(this.expr, transform2, flags);
  }
  clone() {
    return new _ResetViewExpr(this.expr.clone());
  }
};
var TwoWayBindingSetExpr = class _TwoWayBindingSetExpr extends ExpressionBase {
  target;
  value;
  kind = ExpressionKind.TwoWayBindingSet;
  constructor(target, value) {
    super();
    this.target = target;
    this.value = value;
  }
  visitExpression(visitor, context) {
    this.target.visitExpression(visitor, context);
    this.value.visitExpression(visitor, context);
  }
  isEquivalent(other) {
    return this.target.isEquivalent(other.target) && this.value.isEquivalent(other.value);
  }
  isConstant() {
    return false;
  }
  transformInternalExpressions(transform2, flags) {
    this.target = transformExpressionsInExpression(this.target, transform2, flags);
    this.value = transformExpressionsInExpression(this.value, transform2, flags);
  }
  clone() {
    return new _TwoWayBindingSetExpr(this.target, this.value);
  }
};
var ReadVariableExpr = class _ReadVariableExpr extends ExpressionBase {
  xref;
  kind = ExpressionKind.ReadVariable;
  name = null;
  constructor(xref) {
    super();
    this.xref = xref;
  }
  visitExpression() {
  }
  isEquivalent(other) {
    return other instanceof _ReadVariableExpr && other.xref === this.xref;
  }
  isConstant() {
    return false;
  }
  transformInternalExpressions() {
  }
  clone() {
    const expr = new _ReadVariableExpr(this.xref);
    expr.name = this.name;
    return expr;
  }
};
var PureFunctionExpr = class _PureFunctionExpr extends ExpressionBase {
  kind = ExpressionKind.PureFunctionExpr;
  [ConsumesVarsTrait] = true;
  [UsesVarOffset] = true;
  varOffset = null;
  /**
   * The expression which should be memoized as a pure computation.
   *
   * This expression contains internal `PureFunctionParameterExpr`s, which are placeholders for the
   * positional argument expressions in `args.
   */
  body;
  /**
   * Positional arguments to the pure function which will memoize the `body` expression, which act
   * as memoization keys.
   */
  args;
  /**
   * Once extracted to the `ConstantPool`, a reference to the function which defines the computation
   * of `body`.
   */
  fn = null;
  constructor(expression, args) {
    super();
    this.body = expression;
    this.args = args;
  }
  visitExpression(visitor, context) {
    this.body?.visitExpression(visitor, context);
    for (const arg of this.args) {
      arg.visitExpression(visitor, context);
    }
  }
  isEquivalent(other) {
    if (!(other instanceof _PureFunctionExpr) || other.args.length !== this.args.length) {
      return false;
    }
    return other.body !== null && this.body !== null && other.body.isEquivalent(this.body) && other.args.every((arg, idx) => arg.isEquivalent(this.args[idx]));
  }
  isConstant() {
    return false;
  }
  transformInternalExpressions(transform2, flags) {
    if (this.body !== null) {
      this.body = transformExpressionsInExpression(this.body, transform2, flags | VisitorContextFlag.InChildOperation);
    } else if (this.fn !== null) {
      this.fn = transformExpressionsInExpression(this.fn, transform2, flags);
    }
    for (let i = 0; i < this.args.length; i++) {
      this.args[i] = transformExpressionsInExpression(this.args[i], transform2, flags);
    }
  }
  clone() {
    const expr = new _PureFunctionExpr(this.body?.clone() ?? null, this.args.map((arg) => arg.clone()));
    expr.fn = this.fn?.clone() ?? null;
    expr.varOffset = this.varOffset;
    return expr;
  }
};
var PureFunctionParameterExpr = class _PureFunctionParameterExpr extends ExpressionBase {
  index;
  kind = ExpressionKind.PureFunctionParameterExpr;
  constructor(index) {
    super();
    this.index = index;
  }
  visitExpression() {
  }
  isEquivalent(other) {
    return other instanceof _PureFunctionParameterExpr && other.index === this.index;
  }
  isConstant() {
    return true;
  }
  transformInternalExpressions() {
  }
  clone() {
    return new _PureFunctionParameterExpr(this.index);
  }
};
var PipeBindingExpr = class _PipeBindingExpr extends ExpressionBase {
  target;
  targetSlot;
  name;
  args;
  kind = ExpressionKind.PipeBinding;
  [ConsumesVarsTrait] = true;
  [UsesVarOffset] = true;
  varOffset = null;
  constructor(target, targetSlot, name, args) {
    super();
    this.target = target;
    this.targetSlot = targetSlot;
    this.name = name;
    this.args = args;
  }
  visitExpression(visitor, context) {
    for (const arg of this.args) {
      arg.visitExpression(visitor, context);
    }
  }
  isEquivalent() {
    return false;
  }
  isConstant() {
    return false;
  }
  transformInternalExpressions(transform2, flags) {
    for (let idx = 0; idx < this.args.length; idx++) {
      this.args[idx] = transformExpressionsInExpression(this.args[idx], transform2, flags);
    }
  }
  clone() {
    const r = new _PipeBindingExpr(this.target, this.targetSlot, this.name, this.args.map((a) => a.clone()));
    r.varOffset = this.varOffset;
    return r;
  }
};
var PipeBindingVariadicExpr = class _PipeBindingVariadicExpr extends ExpressionBase {
  target;
  targetSlot;
  name;
  args;
  numArgs;
  kind = ExpressionKind.PipeBindingVariadic;
  [ConsumesVarsTrait] = true;
  [UsesVarOffset] = true;
  varOffset = null;
  constructor(target, targetSlot, name, args, numArgs) {
    super();
    this.target = target;
    this.targetSlot = targetSlot;
    this.name = name;
    this.args = args;
    this.numArgs = numArgs;
  }
  visitExpression(visitor, context) {
    this.args.visitExpression(visitor, context);
  }
  isEquivalent() {
    return false;
  }
  isConstant() {
    return false;
  }
  transformInternalExpressions(transform2, flags) {
    this.args = transformExpressionsInExpression(this.args, transform2, flags);
  }
  clone() {
    const r = new _PipeBindingVariadicExpr(this.target, this.targetSlot, this.name, this.args.clone(), this.numArgs);
    r.varOffset = this.varOffset;
    return r;
  }
};
var SafePropertyReadExpr = class _SafePropertyReadExpr extends ExpressionBase {
  receiver;
  name;
  kind = ExpressionKind.SafePropertyRead;
  constructor(receiver, name) {
    super();
    this.receiver = receiver;
    this.name = name;
  }
  // An alias for name, which allows other logic to handle property reads and keyed reads together.
  get index() {
    return this.name;
  }
  visitExpression(visitor, context) {
    this.receiver.visitExpression(visitor, context);
  }
  isEquivalent() {
    return false;
  }
  isConstant() {
    return false;
  }
  transformInternalExpressions(transform2, flags) {
    this.receiver = transformExpressionsInExpression(this.receiver, transform2, flags);
  }
  clone() {
    return new _SafePropertyReadExpr(this.receiver.clone(), this.name);
  }
};
var SafeKeyedReadExpr = class _SafeKeyedReadExpr extends ExpressionBase {
  receiver;
  index;
  kind = ExpressionKind.SafeKeyedRead;
  constructor(receiver, index, sourceSpan) {
    super(sourceSpan);
    this.receiver = receiver;
    this.index = index;
  }
  visitExpression(visitor, context) {
    this.receiver.visitExpression(visitor, context);
    this.index.visitExpression(visitor, context);
  }
  isEquivalent() {
    return false;
  }
  isConstant() {
    return false;
  }
  transformInternalExpressions(transform2, flags) {
    this.receiver = transformExpressionsInExpression(this.receiver, transform2, flags);
    this.index = transformExpressionsInExpression(this.index, transform2, flags);
  }
  clone() {
    return new _SafeKeyedReadExpr(this.receiver.clone(), this.index.clone(), this.sourceSpan);
  }
};
var SafeInvokeFunctionExpr = class _SafeInvokeFunctionExpr extends ExpressionBase {
  receiver;
  args;
  kind = ExpressionKind.SafeInvokeFunction;
  constructor(receiver, args) {
    super();
    this.receiver = receiver;
    this.args = args;
  }
  visitExpression(visitor, context) {
    this.receiver.visitExpression(visitor, context);
    for (const a of this.args) {
      a.visitExpression(visitor, context);
    }
  }
  isEquivalent() {
    return false;
  }
  isConstant() {
    return false;
  }
  transformInternalExpressions(transform2, flags) {
    this.receiver = transformExpressionsInExpression(this.receiver, transform2, flags);
    for (let i = 0; i < this.args.length; i++) {
      this.args[i] = transformExpressionsInExpression(this.args[i], transform2, flags);
    }
  }
  clone() {
    return new _SafeInvokeFunctionExpr(this.receiver.clone(), this.args.map((a) => a.clone()));
  }
};
var SafeTernaryExpr = class _SafeTernaryExpr extends ExpressionBase {
  guard;
  expr;
  kind = ExpressionKind.SafeTernaryExpr;
  constructor(guard, expr) {
    super();
    this.guard = guard;
    this.expr = expr;
  }
  visitExpression(visitor, context) {
    this.guard.visitExpression(visitor, context);
    this.expr.visitExpression(visitor, context);
  }
  isEquivalent() {
    return false;
  }
  isConstant() {
    return false;
  }
  transformInternalExpressions(transform2, flags) {
    this.guard = transformExpressionsInExpression(this.guard, transform2, flags);
    this.expr = transformExpressionsInExpression(this.expr, transform2, flags);
  }
  clone() {
    return new _SafeTernaryExpr(this.guard.clone(), this.expr.clone());
  }
};
var EmptyExpr2 = class _EmptyExpr extends ExpressionBase {
  kind = ExpressionKind.EmptyExpr;
  visitExpression(visitor, context) {
  }
  isEquivalent(e) {
    return e instanceof _EmptyExpr;
  }
  isConstant() {
    return true;
  }
  clone() {
    return new _EmptyExpr();
  }
  transformInternalExpressions() {
  }
};
var AssignTemporaryExpr = class _AssignTemporaryExpr extends ExpressionBase {
  expr;
  xref;
  kind = ExpressionKind.AssignTemporaryExpr;
  name = null;
  constructor(expr, xref) {
    super();
    this.expr = expr;
    this.xref = xref;
  }
  visitExpression(visitor, context) {
    this.expr.visitExpression(visitor, context);
  }
  isEquivalent() {
    return false;
  }
  isConstant() {
    return false;
  }
  transformInternalExpressions(transform2, flags) {
    this.expr = transformExpressionsInExpression(this.expr, transform2, flags);
  }
  clone() {
    const a = new _AssignTemporaryExpr(this.expr.clone(), this.xref);
    a.name = this.name;
    return a;
  }
};
var ReadTemporaryExpr = class _ReadTemporaryExpr extends ExpressionBase {
  xref;
  kind = ExpressionKind.ReadTemporaryExpr;
  name = null;
  constructor(xref) {
    super();
    this.xref = xref;
  }
  visitExpression(visitor, context) {
  }
  isEquivalent() {
    return this.xref === this.xref;
  }
  isConstant() {
    return false;
  }
  transformInternalExpressions(transform2, flags) {
  }
  clone() {
    const r = new _ReadTemporaryExpr(this.xref);
    r.name = this.name;
    return r;
  }
};
var SlotLiteralExpr = class _SlotLiteralExpr extends ExpressionBase {
  slot;
  kind = ExpressionKind.SlotLiteralExpr;
  constructor(slot) {
    super();
    this.slot = slot;
  }
  visitExpression(visitor, context) {
  }
  isEquivalent(e) {
    return e instanceof _SlotLiteralExpr && e.slot === this.slot;
  }
  isConstant() {
    return true;
  }
  clone() {
    return new _SlotLiteralExpr(this.slot);
  }
  transformInternalExpressions() {
  }
};
var ConditionalCaseExpr = class _ConditionalCaseExpr extends ExpressionBase {
  expr;
  target;
  targetSlot;
  alias;
  kind = ExpressionKind.ConditionalCase;
  /**
   * Create an expression for one branch of a conditional.
   * @param expr The expression to be tested for this case. Might be null, as in an `else` case.
   * @param target The Xref of the view to be displayed if this condition is true.
   */
  constructor(expr, target, targetSlot, alias = null) {
    super();
    this.expr = expr;
    this.target = target;
    this.targetSlot = targetSlot;
    this.alias = alias;
  }
  visitExpression(visitor, context) {
    if (this.expr !== null) {
      this.expr.visitExpression(visitor, context);
    }
  }
  isEquivalent(e) {
    return e instanceof _ConditionalCaseExpr && e.expr === this.expr;
  }
  isConstant() {
    return true;
  }
  clone() {
    return new _ConditionalCaseExpr(this.expr, this.target, this.targetSlot);
  }
  transformInternalExpressions(transform2, flags) {
    if (this.expr !== null) {
      this.expr = transformExpressionsInExpression(this.expr, transform2, flags);
    }
  }
};
var ConstCollectedExpr = class _ConstCollectedExpr extends ExpressionBase {
  expr;
  kind = ExpressionKind.ConstCollected;
  constructor(expr) {
    super();
    this.expr = expr;
  }
  transformInternalExpressions(transform2, flags) {
    this.expr = transform2(this.expr, flags);
  }
  visitExpression(visitor, context) {
    this.expr.visitExpression(visitor, context);
  }
  isEquivalent(e) {
    if (!(e instanceof _ConstCollectedExpr)) {
      return false;
    }
    return this.expr.isEquivalent(e.expr);
  }
  isConstant() {
    return this.expr.isConstant();
  }
  clone() {
    return new _ConstCollectedExpr(this.expr);
  }
};
function visitExpressionsInOp(op2, visitor) {
  transformExpressionsInOp(op2, (expr, flags) => {
    visitor(expr, flags);
    return expr;
  }, VisitorContextFlag.None);
}
var VisitorContextFlag;
(function(VisitorContextFlag2) {
  VisitorContextFlag2[VisitorContextFlag2["None"] = 0] = "None";
  VisitorContextFlag2[VisitorContextFlag2["InChildOperation"] = 1] = "InChildOperation";
})(VisitorContextFlag || (VisitorContextFlag = {}));
function transformExpressionsInInterpolation(interpolation, transform2, flags) {
  for (let i = 0; i < interpolation.expressions.length; i++) {
    interpolation.expressions[i] = transformExpressionsInExpression(interpolation.expressions[i], transform2, flags);
  }
}
function transformExpressionsInOp(op2, transform2, flags) {
  switch (op2.kind) {
    case OpKind.StyleProp:
    case OpKind.StyleMap:
    case OpKind.ClassProp:
    case OpKind.ClassMap:
    case OpKind.Binding:
      if (op2.expression instanceof Interpolation2) {
        transformExpressionsInInterpolation(op2.expression, transform2, flags);
      } else {
        op2.expression = transformExpressionsInExpression(op2.expression, transform2, flags);
      }
      break;
    case OpKind.Property:
    case OpKind.HostProperty:
    case OpKind.Attribute:
      if (op2.expression instanceof Interpolation2) {
        transformExpressionsInInterpolation(op2.expression, transform2, flags);
      } else {
        op2.expression = transformExpressionsInExpression(op2.expression, transform2, flags);
      }
      op2.sanitizer = op2.sanitizer && transformExpressionsInExpression(op2.sanitizer, transform2, flags);
      break;
    case OpKind.TwoWayProperty:
      op2.expression = transformExpressionsInExpression(op2.expression, transform2, flags);
      op2.sanitizer = op2.sanitizer && transformExpressionsInExpression(op2.sanitizer, transform2, flags);
      break;
    case OpKind.I18nExpression:
      op2.expression = transformExpressionsInExpression(op2.expression, transform2, flags);
      break;
    case OpKind.InterpolateText:
      transformExpressionsInInterpolation(op2.interpolation, transform2, flags);
      break;
    case OpKind.Statement:
      transformExpressionsInStatement(op2.statement, transform2, flags);
      break;
    case OpKind.Variable:
      op2.initializer = transformExpressionsInExpression(op2.initializer, transform2, flags);
      break;
    case OpKind.Conditional:
      for (const condition of op2.conditions) {
        if (condition.expr === null) {
          continue;
        }
        condition.expr = transformExpressionsInExpression(condition.expr, transform2, flags);
      }
      if (op2.processed !== null) {
        op2.processed = transformExpressionsInExpression(op2.processed, transform2, flags);
      }
      if (op2.contextValue !== null) {
        op2.contextValue = transformExpressionsInExpression(op2.contextValue, transform2, flags);
      }
      break;
    case OpKind.Listener:
    case OpKind.TwoWayListener:
      for (const innerOp of op2.handlerOps) {
        transformExpressionsInOp(innerOp, transform2, flags | VisitorContextFlag.InChildOperation);
      }
      break;
    case OpKind.ExtractedAttribute:
      op2.expression = op2.expression && transformExpressionsInExpression(op2.expression, transform2, flags);
      op2.trustedValueFn = op2.trustedValueFn && transformExpressionsInExpression(op2.trustedValueFn, transform2, flags);
      break;
    case OpKind.RepeaterCreate:
      if (op2.trackByOps === null) {
        op2.track = transformExpressionsInExpression(op2.track, transform2, flags);
      } else {
        for (const innerOp of op2.trackByOps) {
          transformExpressionsInOp(innerOp, transform2, flags | VisitorContextFlag.InChildOperation);
        }
      }
      if (op2.trackByFn !== null) {
        op2.trackByFn = transformExpressionsInExpression(op2.trackByFn, transform2, flags);
      }
      break;
    case OpKind.Repeater:
      op2.collection = transformExpressionsInExpression(op2.collection, transform2, flags);
      break;
    case OpKind.Defer:
      if (op2.loadingConfig !== null) {
        op2.loadingConfig = transformExpressionsInExpression(op2.loadingConfig, transform2, flags);
      }
      if (op2.placeholderConfig !== null) {
        op2.placeholderConfig = transformExpressionsInExpression(op2.placeholderConfig, transform2, flags);
      }
      if (op2.resolverFn !== null) {
        op2.resolverFn = transformExpressionsInExpression(op2.resolverFn, transform2, flags);
      }
      break;
    case OpKind.I18nMessage:
      for (const [placeholder, expr] of op2.params) {
        op2.params.set(placeholder, transformExpressionsInExpression(expr, transform2, flags));
      }
      for (const [placeholder, expr] of op2.postprocessingParams) {
        op2.postprocessingParams.set(placeholder, transformExpressionsInExpression(expr, transform2, flags));
      }
      break;
    case OpKind.DeferWhen:
      op2.expr = transformExpressionsInExpression(op2.expr, transform2, flags);
      break;
    case OpKind.StoreLet:
      op2.value = transformExpressionsInExpression(op2.value, transform2, flags);
      break;
    case OpKind.Advance:
    case OpKind.Container:
    case OpKind.ContainerEnd:
    case OpKind.ContainerStart:
    case OpKind.DeferOn:
    case OpKind.DisableBindings:
    case OpKind.Element:
    case OpKind.ElementEnd:
    case OpKind.ElementStart:
    case OpKind.EnableBindings:
    case OpKind.I18n:
    case OpKind.I18nApply:
    case OpKind.I18nContext:
    case OpKind.I18nEnd:
    case OpKind.I18nStart:
    case OpKind.IcuEnd:
    case OpKind.IcuStart:
    case OpKind.Namespace:
    case OpKind.Pipe:
    case OpKind.Projection:
    case OpKind.ProjectionDef:
    case OpKind.Template:
    case OpKind.Text:
    case OpKind.I18nAttributes:
    case OpKind.IcuPlaceholder:
    case OpKind.DeclareLet:
    case OpKind.SourceLocation:
      break;
    default:
      throw new Error(`AssertionError: transformExpressionsInOp doesn't handle ${OpKind[op2.kind]}`);
  }
}
function transformExpressionsInExpression(expr, transform2, flags) {
  if (expr instanceof ExpressionBase) {
    expr.transformInternalExpressions(transform2, flags);
  } else if (expr instanceof BinaryOperatorExpr) {
    expr.lhs = transformExpressionsInExpression(expr.lhs, transform2, flags);
    expr.rhs = transformExpressionsInExpression(expr.rhs, transform2, flags);
  } else if (expr instanceof UnaryOperatorExpr) {
    expr.expr = transformExpressionsInExpression(expr.expr, transform2, flags);
  } else if (expr instanceof ReadPropExpr) {
    expr.receiver = transformExpressionsInExpression(expr.receiver, transform2, flags);
  } else if (expr instanceof ReadKeyExpr) {
    expr.receiver = transformExpressionsInExpression(expr.receiver, transform2, flags);
    expr.index = transformExpressionsInExpression(expr.index, transform2, flags);
  } else if (expr instanceof WritePropExpr) {
    expr.receiver = transformExpressionsInExpression(expr.receiver, transform2, flags);
    expr.value = transformExpressionsInExpression(expr.value, transform2, flags);
  } else if (expr instanceof WriteKeyExpr) {
    expr.receiver = transformExpressionsInExpression(expr.receiver, transform2, flags);
    expr.index = transformExpressionsInExpression(expr.index, transform2, flags);
    expr.value = transformExpressionsInExpression(expr.value, transform2, flags);
  } else if (expr instanceof InvokeFunctionExpr) {
    expr.fn = transformExpressionsInExpression(expr.fn, transform2, flags);
    for (let i = 0; i < expr.args.length; i++) {
      expr.args[i] = transformExpressionsInExpression(expr.args[i], transform2, flags);
    }
  } else if (expr instanceof LiteralArrayExpr) {
    for (let i = 0; i < expr.entries.length; i++) {
      expr.entries[i] = transformExpressionsInExpression(expr.entries[i], transform2, flags);
    }
  } else if (expr instanceof LiteralMapExpr) {
    for (let i = 0; i < expr.entries.length; i++) {
      expr.entries[i].value = transformExpressionsInExpression(expr.entries[i].value, transform2, flags);
    }
  } else if (expr instanceof ConditionalExpr) {
    expr.condition = transformExpressionsInExpression(expr.condition, transform2, flags);
    expr.trueCase = transformExpressionsInExpression(expr.trueCase, transform2, flags);
    if (expr.falseCase !== null) {
      expr.falseCase = transformExpressionsInExpression(expr.falseCase, transform2, flags);
    }
  } else if (expr instanceof TypeofExpr) {
    expr.expr = transformExpressionsInExpression(expr.expr, transform2, flags);
  } else if (expr instanceof WriteVarExpr) {
    expr.value = transformExpressionsInExpression(expr.value, transform2, flags);
  } else if (expr instanceof LocalizedString) {
    for (let i = 0; i < expr.expressions.length; i++) {
      expr.expressions[i] = transformExpressionsInExpression(expr.expressions[i], transform2, flags);
    }
  } else if (expr instanceof NotExpr) {
    expr.condition = transformExpressionsInExpression(expr.condition, transform2, flags);
  } else if (expr instanceof TaggedTemplateLiteralExpr) {
    expr.tag = transformExpressionsInExpression(expr.tag, transform2, flags);
    expr.template.expressions = expr.template.expressions.map((e) => transformExpressionsInExpression(e, transform2, flags));
  } else if (expr instanceof ArrowFunctionExpr) {
    if (Array.isArray(expr.body)) {
      for (let i = 0; i < expr.body.length; i++) {
        transformExpressionsInStatement(expr.body[i], transform2, flags);
      }
    } else {
      expr.body = transformExpressionsInExpression(expr.body, transform2, flags);
    }
  } else if (expr instanceof WrappedNodeExpr) ;
  else if (expr instanceof TemplateLiteralExpr) {
    for (let i = 0; i < expr.expressions.length; i++) {
      expr.expressions[i] = transformExpressionsInExpression(expr.expressions[i], transform2, flags);
    }
  } else if (expr instanceof ReadVarExpr || expr instanceof ExternalExpr || expr instanceof LiteralExpr) ;
  else {
    throw new Error(`Unhandled expression kind: ${expr.constructor.name}`);
  }
  return transform2(expr, flags);
}
function transformExpressionsInStatement(stmt, transform2, flags) {
  if (stmt instanceof ExpressionStatement) {
    stmt.expr = transformExpressionsInExpression(stmt.expr, transform2, flags);
  } else if (stmt instanceof ReturnStatement) {
    stmt.value = transformExpressionsInExpression(stmt.value, transform2, flags);
  } else if (stmt instanceof DeclareVarStmt) {
    if (stmt.value !== void 0) {
      stmt.value = transformExpressionsInExpression(stmt.value, transform2, flags);
    }
  } else if (stmt instanceof IfStmt) {
    stmt.condition = transformExpressionsInExpression(stmt.condition, transform2, flags);
    for (const caseStatement of stmt.trueCase) {
      transformExpressionsInStatement(caseStatement, transform2, flags);
    }
    for (const caseStatement of stmt.falseCase) {
      transformExpressionsInStatement(caseStatement, transform2, flags);
    }
  } else {
    throw new Error(`Unhandled statement kind: ${stmt.constructor.name}`);
  }
}
function isStringLiteral(expr) {
  return expr instanceof LiteralExpr && typeof expr.value === "string";
}
var OpList = class _OpList {
  static nextListId = 0;
  /**
   * Debug ID of this `OpList` instance.
   */
  debugListId = _OpList.nextListId++;
  // OpList uses static head/tail nodes of a special `ListEnd` type.
  // This avoids the need for special casing of the first and last list
  // elements in all list operations.
  head = {
    kind: OpKind.ListEnd,
    next: null,
    prev: null,
    debugListId: this.debugListId
  };
  tail = {
    kind: OpKind.ListEnd,
    next: null,
    prev: null,
    debugListId: this.debugListId
  };
  constructor() {
    this.head.next = this.tail;
    this.tail.prev = this.head;
  }
  /**
   * Push a new operation to the tail of the list.
   */
  push(op2) {
    if (Array.isArray(op2)) {
      for (const o of op2) {
        this.push(o);
      }
      return;
    }
    _OpList.assertIsNotEnd(op2);
    _OpList.assertIsUnowned(op2);
    op2.debugListId = this.debugListId;
    const oldLast = this.tail.prev;
    op2.prev = oldLast;
    oldLast.next = op2;
    op2.next = this.tail;
    this.tail.prev = op2;
  }
  /**
   * Prepend one or more nodes to the start of the list.
   */
  prepend(ops) {
    if (ops.length === 0) {
      return;
    }
    for (const op2 of ops) {
      _OpList.assertIsNotEnd(op2);
      _OpList.assertIsUnowned(op2);
      op2.debugListId = this.debugListId;
    }
    const first2 = this.head.next;
    let prev = this.head;
    for (const op2 of ops) {
      prev.next = op2;
      op2.prev = prev;
      prev = op2;
    }
    prev.next = first2;
    first2.prev = prev;
  }
  /**
   * `OpList` is iterable via the iteration protocol.
   *
   * It's safe to mutate the part of the list that has already been returned by the iterator, up to
   * and including the last operation returned. Mutations beyond that point _may_ be safe, but may
   * also corrupt the iteration position and should be avoided.
   */
  *[Symbol.iterator]() {
    let current = this.head.next;
    while (current !== this.tail) {
      _OpList.assertIsOwned(current, this.debugListId);
      const next = current.next;
      yield current;
      current = next;
    }
  }
  *reversed() {
    let current = this.tail.prev;
    while (current !== this.head) {
      _OpList.assertIsOwned(current, this.debugListId);
      const prev = current.prev;
      yield current;
      current = prev;
    }
  }
  /**
   * Replace `oldOp` with `newOp` in the list.
   */
  static replace(oldOp, newOp) {
    _OpList.assertIsNotEnd(oldOp);
    _OpList.assertIsNotEnd(newOp);
    _OpList.assertIsOwned(oldOp);
    _OpList.assertIsUnowned(newOp);
    newOp.debugListId = oldOp.debugListId;
    if (oldOp.prev !== null) {
      oldOp.prev.next = newOp;
      newOp.prev = oldOp.prev;
    }
    if (oldOp.next !== null) {
      oldOp.next.prev = newOp;
      newOp.next = oldOp.next;
    }
    oldOp.debugListId = null;
    oldOp.prev = null;
    oldOp.next = null;
  }
  /**
   * Replace `oldOp` with some number of new operations in the list (which may include `oldOp`).
   */
  static replaceWithMany(oldOp, newOps) {
    if (newOps.length === 0) {
      _OpList.remove(oldOp);
      return;
    }
    _OpList.assertIsNotEnd(oldOp);
    _OpList.assertIsOwned(oldOp);
    const listId = oldOp.debugListId;
    oldOp.debugListId = null;
    for (const newOp of newOps) {
      _OpList.assertIsNotEnd(newOp);
      _OpList.assertIsUnowned(newOp);
    }
    const {
      prev: oldPrev,
      next: oldNext
    } = oldOp;
    oldOp.prev = null;
    oldOp.next = null;
    let prev = oldPrev;
    for (const newOp of newOps) {
      this.assertIsUnowned(newOp);
      newOp.debugListId = listId;
      prev.next = newOp;
      newOp.prev = prev;
      newOp.next = null;
      prev = newOp;
    }
    const first2 = newOps[0];
    const last3 = prev;
    if (oldPrev !== null) {
      oldPrev.next = first2;
      first2.prev = oldPrev;
    }
    if (oldNext !== null) {
      oldNext.prev = last3;
      last3.next = oldNext;
    }
  }
  /**
   * Remove the given node from the list which contains it.
   */
  static remove(op2) {
    _OpList.assertIsNotEnd(op2);
    _OpList.assertIsOwned(op2);
    op2.prev.next = op2.next;
    op2.next.prev = op2.prev;
    op2.debugListId = null;
    op2.prev = null;
    op2.next = null;
  }
  /**
   * Insert `op` before `target`.
   */
  static insertBefore(op2, target) {
    if (Array.isArray(op2)) {
      for (const o of op2) {
        this.insertBefore(o, target);
      }
      return;
    }
    _OpList.assertIsOwned(target);
    if (target.prev === null) {
      throw new Error(`AssertionError: illegal operation on list start`);
    }
    _OpList.assertIsNotEnd(op2);
    _OpList.assertIsUnowned(op2);
    op2.debugListId = target.debugListId;
    op2.prev = null;
    target.prev.next = op2;
    op2.prev = target.prev;
    op2.next = target;
    target.prev = op2;
  }
  /**
   * Insert `op` after `target`.
   */
  static insertAfter(op2, target) {
    _OpList.assertIsOwned(target);
    if (target.next === null) {
      throw new Error(`AssertionError: illegal operation on list end`);
    }
    _OpList.assertIsNotEnd(op2);
    _OpList.assertIsUnowned(op2);
    op2.debugListId = target.debugListId;
    target.next.prev = op2;
    op2.next = target.next;
    op2.prev = target;
    target.next = op2;
  }
  /**
   * Asserts that `op` does not currently belong to a list.
   */
  static assertIsUnowned(op2) {
    if (op2.debugListId !== null) {
      throw new Error(`AssertionError: illegal operation on owned node: ${OpKind[op2.kind]}`);
    }
  }
  /**
   * Asserts that `op` currently belongs to a list. If `byList` is passed, `op` is asserted to
   * specifically belong to that list.
   */
  static assertIsOwned(op2, byList) {
    if (op2.debugListId === null) {
      throw new Error(`AssertionError: illegal operation on unowned node: ${OpKind[op2.kind]}`);
    } else if (byList !== void 0 && op2.debugListId !== byList) {
      throw new Error(`AssertionError: node belongs to the wrong list (expected ${byList}, actual ${op2.debugListId})`);
    }
  }
  /**
   * Asserts that `op` is not a special `ListEnd` node.
   */
  static assertIsNotEnd(op2) {
    if (op2.kind === OpKind.ListEnd) {
      throw new Error(`AssertionError: illegal operation on list head or tail`);
    }
  }
};
var SlotHandle = class {
  slot = null;
};
var elementContainerOpKinds = /* @__PURE__ */ new Set([OpKind.Element, OpKind.ElementStart, OpKind.Container, OpKind.ContainerStart, OpKind.Template, OpKind.RepeaterCreate]);
function isElementOrContainerOp(op2) {
  return elementContainerOpKinds.has(op2.kind);
}
function createElementStartOp(tag, xref, namespace, i18nPlaceholder, startSourceSpan, wholeSourceSpan) {
  return __spreadValues(__spreadValues({
    kind: OpKind.ElementStart,
    xref,
    tag,
    handle: new SlotHandle(),
    attributes: null,
    localRefs: [],
    nonBindable: false,
    namespace,
    i18nPlaceholder,
    startSourceSpan,
    wholeSourceSpan
  }, TRAIT_CONSUMES_SLOT), NEW_OP);
}
function createTemplateOp(xref, templateKind, tag, functionNameSuffix, namespace, i18nPlaceholder, startSourceSpan, wholeSourceSpan) {
  return __spreadValues(__spreadValues({
    kind: OpKind.Template,
    xref,
    templateKind,
    attributes: null,
    tag,
    handle: new SlotHandle(),
    functionNameSuffix,
    decls: null,
    vars: null,
    localRefs: [],
    nonBindable: false,
    namespace,
    i18nPlaceholder,
    startSourceSpan,
    wholeSourceSpan
  }, TRAIT_CONSUMES_SLOT), NEW_OP);
}
function createRepeaterCreateOp(primaryView, emptyView, tag, track, varNames, emptyTag, i18nPlaceholder, emptyI18nPlaceholder, startSourceSpan, wholeSourceSpan) {
  return __spreadProps(__spreadValues(__spreadValues(__spreadValues({
    kind: OpKind.RepeaterCreate,
    attributes: null,
    xref: primaryView,
    handle: new SlotHandle(),
    emptyView,
    track,
    trackByFn: null,
    trackByOps: null,
    tag,
    emptyTag,
    emptyAttributes: null,
    functionNameSuffix: "For",
    namespace: Namespace.HTML,
    nonBindable: false,
    localRefs: [],
    decls: null,
    vars: null,
    varNames,
    usesComponentInstance: false,
    i18nPlaceholder,
    emptyI18nPlaceholder,
    startSourceSpan,
    wholeSourceSpan
  }, TRAIT_CONSUMES_SLOT), NEW_OP), TRAIT_CONSUMES_VARS), {
    numSlotsUsed: emptyView === null ? 2 : 3
  });
}
function createElementEndOp(xref, sourceSpan) {
  return __spreadValues({
    kind: OpKind.ElementEnd,
    xref,
    sourceSpan
  }, NEW_OP);
}
function createDisableBindingsOp(xref) {
  return __spreadValues({
    kind: OpKind.DisableBindings,
    xref
  }, NEW_OP);
}
function createEnableBindingsOp(xref) {
  return __spreadValues({
    kind: OpKind.EnableBindings,
    xref
  }, NEW_OP);
}
function createTextOp(xref, initialValue, icuPlaceholder, sourceSpan) {
  return __spreadValues(__spreadValues({
    kind: OpKind.Text,
    xref,
    handle: new SlotHandle(),
    initialValue,
    icuPlaceholder,
    sourceSpan
  }, TRAIT_CONSUMES_SLOT), NEW_OP);
}
function createListenerOp(target, targetSlot, name, tag, handlerOps, animationPhase, eventTarget, hostListener, sourceSpan) {
  const handlerList = new OpList();
  handlerList.push(handlerOps);
  return __spreadValues({
    kind: OpKind.Listener,
    target,
    targetSlot,
    tag,
    hostListener,
    name,
    handlerOps: handlerList,
    handlerFnName: null,
    consumesDollarEvent: false,
    isAnimationListener: animationPhase !== null,
    animationPhase,
    eventTarget,
    sourceSpan
  }, NEW_OP);
}
function createTwoWayListenerOp(target, targetSlot, name, tag, handlerOps, sourceSpan) {
  const handlerList = new OpList();
  handlerList.push(handlerOps);
  return __spreadValues({
    kind: OpKind.TwoWayListener,
    target,
    targetSlot,
    tag,
    name,
    handlerOps: handlerList,
    handlerFnName: null,
    sourceSpan
  }, NEW_OP);
}
function createPipeOp(xref, slot, name) {
  return __spreadValues(__spreadValues({
    kind: OpKind.Pipe,
    xref,
    handle: slot,
    name
  }, NEW_OP), TRAIT_CONSUMES_SLOT);
}
function createNamespaceOp(namespace) {
  return __spreadValues({
    kind: OpKind.Namespace,
    active: namespace
  }, NEW_OP);
}
function createProjectionDefOp(def) {
  return __spreadValues({
    kind: OpKind.ProjectionDef,
    def
  }, NEW_OP);
}
function createProjectionOp(xref, selector, i18nPlaceholder, fallbackView, sourceSpan) {
  return __spreadProps(__spreadValues(__spreadValues({
    kind: OpKind.Projection,
    xref,
    handle: new SlotHandle(),
    selector,
    i18nPlaceholder,
    fallbackView,
    projectionSlotIndex: 0,
    attributes: null,
    localRefs: [],
    sourceSpan
  }, NEW_OP), TRAIT_CONSUMES_SLOT), {
    numSlotsUsed: fallbackView === null ? 1 : 2
  });
}
function createExtractedAttributeOp(target, bindingKind, namespace, name, expression, i18nContext, i18nMessage, securityContext) {
  return __spreadValues({
    kind: OpKind.ExtractedAttribute,
    target,
    bindingKind,
    namespace,
    name,
    expression,
    i18nContext,
    i18nMessage,
    securityContext,
    trustedValueFn: null
  }, NEW_OP);
}
function createDeferOp(xref, main2, mainSlot, ownResolverFn, resolverFn, sourceSpan) {
  return __spreadProps(__spreadValues(__spreadValues({
    kind: OpKind.Defer,
    xref,
    handle: new SlotHandle(),
    mainView: main2,
    mainSlot,
    loadingView: null,
    loadingSlot: null,
    loadingConfig: null,
    loadingMinimumTime: null,
    loadingAfterTime: null,
    placeholderView: null,
    placeholderSlot: null,
    placeholderConfig: null,
    placeholderMinimumTime: null,
    errorView: null,
    errorSlot: null,
    ownResolverFn,
    resolverFn,
    flags: null,
    sourceSpan
  }, NEW_OP), TRAIT_CONSUMES_SLOT), {
    numSlotsUsed: 2
  });
}
function createDeferOnOp(defer3, trigger, modifier, sourceSpan) {
  return __spreadValues({
    kind: OpKind.DeferOn,
    defer: defer3,
    trigger,
    modifier,
    sourceSpan
  }, NEW_OP);
}
function createDeclareLetOp(xref, declaredName, sourceSpan) {
  return __spreadValues(__spreadValues({
    kind: OpKind.DeclareLet,
    xref,
    declaredName,
    sourceSpan,
    handle: new SlotHandle()
  }, TRAIT_CONSUMES_SLOT), NEW_OP);
}
function createI18nMessageOp(xref, i18nContext, i18nBlock, message, messagePlaceholder, params, postprocessingParams, needsPostprocessing) {
  return __spreadValues({
    kind: OpKind.I18nMessage,
    xref,
    i18nContext,
    i18nBlock,
    message,
    messagePlaceholder,
    params,
    postprocessingParams,
    needsPostprocessing,
    subMessages: []
  }, NEW_OP);
}
function createI18nStartOp(xref, message, root, sourceSpan) {
  return __spreadValues(__spreadValues({
    kind: OpKind.I18nStart,
    xref,
    handle: new SlotHandle(),
    root: root ?? xref,
    message,
    messageIndex: null,
    subTemplateIndex: null,
    context: null,
    sourceSpan
  }, NEW_OP), TRAIT_CONSUMES_SLOT);
}
function createI18nEndOp(xref, sourceSpan) {
  return __spreadValues({
    kind: OpKind.I18nEnd,
    xref,
    sourceSpan
  }, NEW_OP);
}
function createIcuStartOp(xref, message, messagePlaceholder, sourceSpan) {
  return __spreadValues({
    kind: OpKind.IcuStart,
    xref,
    message,
    messagePlaceholder,
    context: null,
    sourceSpan
  }, NEW_OP);
}
function createIcuEndOp(xref) {
  return __spreadValues({
    kind: OpKind.IcuEnd,
    xref
  }, NEW_OP);
}
function createIcuPlaceholderOp(xref, name, strings) {
  return __spreadValues({
    kind: OpKind.IcuPlaceholder,
    xref,
    name,
    strings,
    expressionPlaceholders: []
  }, NEW_OP);
}
function createI18nContextOp(contextKind, xref, i18nBlock, message, sourceSpan) {
  if (i18nBlock === null && contextKind !== I18nContextKind.Attr) {
    throw new Error("AssertionError: i18nBlock must be provided for non-attribute contexts.");
  }
  return __spreadValues({
    kind: OpKind.I18nContext,
    contextKind,
    xref,
    i18nBlock,
    message,
    sourceSpan,
    params: /* @__PURE__ */ new Map(),
    postprocessingParams: /* @__PURE__ */ new Map()
  }, NEW_OP);
}
function createI18nAttributesOp(xref, handle, target) {
  return __spreadValues(__spreadValues({
    kind: OpKind.I18nAttributes,
    xref,
    handle,
    target,
    i18nAttributesConfig: null
  }, NEW_OP), TRAIT_CONSUMES_SLOT);
}
function createSourceLocationOp(templatePath, locations) {
  return __spreadValues({
    kind: OpKind.SourceLocation,
    templatePath,
    locations
  }, NEW_OP);
}
function createHostPropertyOp(name, expression, isAnimationTrigger, i18nContext, securityContext, sourceSpan) {
  return __spreadValues(__spreadValues({
    kind: OpKind.HostProperty,
    name,
    expression,
    isAnimationTrigger,
    i18nContext,
    securityContext,
    sanitizer: null,
    sourceSpan
  }, TRAIT_CONSUMES_VARS), NEW_OP);
}
var CTX_REF = "CTX_REF_MARKER";
var CompilationJobKind;
(function(CompilationJobKind2) {
  CompilationJobKind2[CompilationJobKind2["Tmpl"] = 0] = "Tmpl";
  CompilationJobKind2[CompilationJobKind2["Host"] = 1] = "Host";
  CompilationJobKind2[CompilationJobKind2["Both"] = 2] = "Both";
})(CompilationJobKind || (CompilationJobKind = {}));
var CompilationJob = class {
  componentName;
  pool;
  compatibility;
  constructor(componentName, pool, compatibility) {
    this.componentName = componentName;
    this.pool = pool;
    this.compatibility = compatibility;
  }
  kind = CompilationJobKind.Both;
  /**
   * Generate a new unique `ir.XrefId` in this job.
   */
  allocateXrefId() {
    return this.nextXrefId++;
  }
  /**
   * Tracks the next `ir.XrefId` which can be assigned as template structures are ingested.
   */
  nextXrefId = 0;
};
var ComponentCompilationJob = class extends CompilationJob {
  relativeContextFilePath;
  i18nUseExternalIds;
  deferMeta;
  allDeferrableDepsFn;
  relativeTemplatePath;
  enableDebugLocations;
  constructor(componentName, pool, compatibility, relativeContextFilePath, i18nUseExternalIds, deferMeta, allDeferrableDepsFn, relativeTemplatePath, enableDebugLocations) {
    super(componentName, pool, compatibility);
    this.relativeContextFilePath = relativeContextFilePath;
    this.i18nUseExternalIds = i18nUseExternalIds;
    this.deferMeta = deferMeta;
    this.allDeferrableDepsFn = allDeferrableDepsFn;
    this.relativeTemplatePath = relativeTemplatePath;
    this.enableDebugLocations = enableDebugLocations;
    this.root = new ViewCompilationUnit(this, this.allocateXrefId(), null);
    this.views.set(this.root.xref, this.root);
  }
  kind = CompilationJobKind.Tmpl;
  fnSuffix = "Template";
  /**
   * The root view, representing the component's template.
   */
  root;
  views = /* @__PURE__ */ new Map();
  /**
   * Causes ngContentSelectors to be emitted, for content projection slots in the view. Possibly a
   * reference into the constant pool.
   */
  contentSelectors = null;
  /**
   * Add a `ViewCompilation` for a new embedded view to this compilation.
   */
  allocateView(parent) {
    const view = new ViewCompilationUnit(this, this.allocateXrefId(), parent);
    this.views.set(view.xref, view);
    return view;
  }
  get units() {
    return this.views.values();
  }
  /**
   * Add a constant `o.Expression` to the compilation and return its index in the `consts` array.
   */
  addConst(newConst, initializers) {
    for (let idx2 = 0; idx2 < this.consts.length; idx2++) {
      if (this.consts[idx2].isEquivalent(newConst)) {
        return idx2;
      }
    }
    const idx = this.consts.length;
    this.consts.push(newConst);
    if (initializers) {
      this.constsInitializers.push(...initializers);
    }
    return idx;
  }
  /**
   * Constant expressions used by operations within this component's compilation.
   *
   * This will eventually become the `consts` array in the component definition.
   */
  consts = [];
  /**
   * Initialization statements needed to set up the consts.
   */
  constsInitializers = [];
};
var CompilationUnit = class {
  xref;
  constructor(xref) {
    this.xref = xref;
  }
  /**
   * List of creation operations for this view.
   *
   * Creation operations may internally contain other operations, including update operations.
   */
  create = new OpList();
  /**
   * List of update operations for this view.
   */
  update = new OpList();
  /**
   * Name of the function which will be generated for this unit.
   *
   * May be `null` if not yet determined.
   */
  fnName = null;
  /**
   * Number of variable slots used within this view, or `null` if variables have not yet been
   * counted.
   */
  vars = null;
  /**
   * Iterate over all `ir.Op`s within this view.
   *
   * Some operations may have child operations, which this iterator will visit.
   */
  *ops() {
    for (const op2 of this.create) {
      yield op2;
      if (op2.kind === OpKind.Listener || op2.kind === OpKind.TwoWayListener) {
        for (const listenerOp of op2.handlerOps) {
          yield listenerOp;
        }
      } else if (op2.kind === OpKind.RepeaterCreate && op2.trackByOps !== null) {
        for (const trackOp of op2.trackByOps) {
          yield trackOp;
        }
      }
    }
    for (const op2 of this.update) {
      yield op2;
    }
  }
};
var ViewCompilationUnit = class extends CompilationUnit {
  job;
  parent;
  constructor(job, xref, parent) {
    super(xref);
    this.job = job;
    this.parent = parent;
  }
  /**
   * Map of declared variables available within this view to the property on the context object
   * which they alias.
   */
  contextVariables = /* @__PURE__ */ new Map();
  /**
   * Set of aliases available within this view. An alias is a variable whose provided expression is
   * inlined at every location it is used. It may also depend on context variables, by name.
   */
  aliases = /* @__PURE__ */ new Set();
  /**
   * Number of declaration slots used within this view, or `null` if slots have not yet been
   * allocated.
   */
  decls = null;
};
var HostBindingCompilationJob = class extends CompilationJob {
  constructor(componentName, pool, compatibility) {
    super(componentName, pool, compatibility);
    this.root = new HostBindingCompilationUnit(this);
  }
  kind = CompilationJobKind.Host;
  fnSuffix = "HostBindings";
  root;
  get units() {
    return [this.root];
  }
};
var HostBindingCompilationUnit = class extends CompilationUnit {
  job;
  constructor(job) {
    super(0);
    this.job = job;
  }
  /**
   * Much like an element can have attributes, so can a host binding function.
   */
  attributes = null;
};
function deleteAnyCasts(job) {
  for (const unit of job.units) {
    for (const op2 of unit.ops()) {
      transformExpressionsInOp(op2, removeAnys, VisitorContextFlag.None);
    }
  }
}
function removeAnys(e) {
  if (e instanceof InvokeFunctionExpr && e.fn instanceof LexicalReadExpr && e.fn.name === "$any") {
    if (e.args.length !== 1) {
      throw new Error("The $any builtin function expects exactly one argument.");
    }
    return e.args[0];
  }
  return e;
}
function applyI18nExpressions(job) {
  const i18nContexts = /* @__PURE__ */ new Map();
  for (const unit of job.units) {
    for (const op2 of unit.create) {
      if (op2.kind === OpKind.I18nContext) {
        i18nContexts.set(op2.xref, op2);
      }
    }
  }
  for (const unit of job.units) {
    for (const op2 of unit.update) {
      if (op2.kind === OpKind.I18nExpression && needsApplication(i18nContexts, op2)) {
        OpList.insertAfter(createI18nApplyOp(op2.i18nOwner, op2.handle, null), op2);
      }
    }
  }
}
function needsApplication(i18nContexts, op2) {
  if (op2.next?.kind !== OpKind.I18nExpression) {
    return true;
  }
  const context = i18nContexts.get(op2.context);
  const nextContext2 = i18nContexts.get(op2.next.context);
  if (context === void 0) {
    throw new Error("AssertionError: expected an I18nContextOp to exist for the I18nExpressionOp's context");
  }
  if (nextContext2 === void 0) {
    throw new Error("AssertionError: expected an I18nContextOp to exist for the next I18nExpressionOp's context");
  }
  if (context.i18nBlock !== null) {
    if (context.i18nBlock !== nextContext2.i18nBlock) {
      return true;
    }
    return false;
  }
  if (op2.i18nOwner !== op2.next.i18nOwner) {
    return true;
  }
  return false;
}
function assignI18nSlotDependencies(job) {
  for (const unit of job.units) {
    let updateOp = unit.update.head;
    let i18nExpressionsInProgress = [];
    let state = null;
    for (const createOp of unit.create) {
      if (createOp.kind === OpKind.I18nStart) {
        state = {
          blockXref: createOp.xref,
          lastSlotConsumer: createOp.xref
        };
      } else if (createOp.kind === OpKind.I18nEnd) {
        for (const op2 of i18nExpressionsInProgress) {
          op2.target = state.lastSlotConsumer;
          OpList.insertBefore(op2, updateOp);
        }
        i18nExpressionsInProgress.length = 0;
        state = null;
      }
      if (hasConsumesSlotTrait(createOp)) {
        if (state !== null) {
          state.lastSlotConsumer = createOp.xref;
        }
        while (true) {
          if (updateOp.next === null) {
            break;
          }
          if (state !== null && updateOp.kind === OpKind.I18nExpression && updateOp.usage === I18nExpressionFor.I18nText && updateOp.i18nOwner === state.blockXref) {
            const opToRemove = updateOp;
            updateOp = updateOp.next;
            OpList.remove(opToRemove);
            i18nExpressionsInProgress.push(opToRemove);
            continue;
          }
          if (hasDependsOnSlotContextTrait(updateOp) && updateOp.target !== createOp.xref) {
            break;
          }
          updateOp = updateOp.next;
        }
      }
    }
  }
}
function createOpXrefMap(unit) {
  const map2 = /* @__PURE__ */ new Map();
  for (const op2 of unit.create) {
    if (!hasConsumesSlotTrait(op2)) {
      continue;
    }
    map2.set(op2.xref, op2);
    if (op2.kind === OpKind.RepeaterCreate && op2.emptyView !== null) {
      map2.set(op2.emptyView, op2);
    }
  }
  return map2;
}
function extractAttributes(job) {
  for (const unit of job.units) {
    const elements = createOpXrefMap(unit);
    for (const op2 of unit.ops()) {
      switch (op2.kind) {
        case OpKind.Attribute:
          extractAttributeOp(unit, op2, elements);
          break;
        case OpKind.Property:
          if (!op2.isAnimationTrigger) {
            let bindingKind;
            if (op2.i18nMessage !== null && op2.templateKind === null) {
              bindingKind = BindingKind.I18n;
            } else if (op2.isStructuralTemplateAttribute) {
              bindingKind = BindingKind.Template;
            } else {
              bindingKind = BindingKind.Property;
            }
            OpList.insertBefore(
              // Deliberately null i18nMessage value
              createExtractedAttributeOp(
                op2.target,
                bindingKind,
                null,
                op2.name,
                /* expression */
                null,
                /* i18nContext */
                null,
                /* i18nMessage */
                null,
                op2.securityContext
              ),
              lookupElement$2(elements, op2.target)
            );
          }
          break;
        case OpKind.TwoWayProperty:
          OpList.insertBefore(createExtractedAttributeOp(
            op2.target,
            BindingKind.TwoWayProperty,
            null,
            op2.name,
            /* expression */
            null,
            /* i18nContext */
            null,
            /* i18nMessage */
            null,
            op2.securityContext
          ), lookupElement$2(elements, op2.target));
          break;
        case OpKind.StyleProp:
        case OpKind.ClassProp:
          if (unit.job.compatibility === CompatibilityMode.TemplateDefinitionBuilder && op2.expression instanceof EmptyExpr2) {
            OpList.insertBefore(createExtractedAttributeOp(
              op2.target,
              BindingKind.Property,
              null,
              op2.name,
              /* expression */
              null,
              /* i18nContext */
              null,
              /* i18nMessage */
              null,
              SecurityContext2.STYLE
            ), lookupElement$2(elements, op2.target));
          }
          break;
        case OpKind.Listener:
          if (!op2.isAnimationListener) {
            const extractedAttributeOp = createExtractedAttributeOp(
              op2.target,
              BindingKind.Property,
              null,
              op2.name,
              /* expression */
              null,
              /* i18nContext */
              null,
              /* i18nMessage */
              null,
              SecurityContext2.NONE
            );
            if (job.kind === CompilationJobKind.Host) {
              if (job.compatibility) {
                break;
              }
              unit.create.push(extractedAttributeOp);
            } else {
              OpList.insertBefore(extractedAttributeOp, lookupElement$2(elements, op2.target));
            }
          }
          break;
        case OpKind.TwoWayListener:
          if (job.kind !== CompilationJobKind.Host) {
            const extractedAttributeOp = createExtractedAttributeOp(
              op2.target,
              BindingKind.Property,
              null,
              op2.name,
              /* expression */
              null,
              /* i18nContext */
              null,
              /* i18nMessage */
              null,
              SecurityContext2.NONE
            );
            OpList.insertBefore(extractedAttributeOp, lookupElement$2(elements, op2.target));
          }
          break;
      }
    }
  }
}
function lookupElement$2(elements, xref) {
  const el = elements.get(xref);
  if (el === void 0) {
    throw new Error("All attributes should have an element-like target.");
  }
  return el;
}
function extractAttributeOp(unit, op2, elements) {
  if (op2.expression instanceof Interpolation2) {
    return;
  }
  let extractable = op2.isTextAttribute || op2.expression.isConstant();
  if (unit.job.compatibility === CompatibilityMode.TemplateDefinitionBuilder) {
    extractable &&= op2.isTextAttribute;
  }
  if (extractable) {
    const extractedAttributeOp = createExtractedAttributeOp(op2.target, op2.isStructuralTemplateAttribute ? BindingKind.Template : BindingKind.Attribute, op2.namespace, op2.name, op2.expression, op2.i18nContext, op2.i18nMessage, op2.securityContext);
    if (unit.job.kind === CompilationJobKind.Host) {
      unit.create.push(extractedAttributeOp);
    } else {
      const ownerOp = lookupElement$2(elements, op2.target);
      OpList.insertBefore(extractedAttributeOp, ownerOp);
    }
    OpList.remove(op2);
  }
}
function lookupElement$1(elements, xref) {
  const el = elements.get(xref);
  if (el === void 0) {
    throw new Error("All attributes should have an element-like target.");
  }
  return el;
}
function specializeBindings(job) {
  const elements = /* @__PURE__ */ new Map();
  for (const unit of job.units) {
    for (const op2 of unit.create) {
      if (!isElementOrContainerOp(op2)) {
        continue;
      }
      elements.set(op2.xref, op2);
    }
  }
  for (const unit of job.units) {
    for (const op2 of unit.ops()) {
      if (op2.kind !== OpKind.Binding) {
        continue;
      }
      switch (op2.bindingKind) {
        case BindingKind.Attribute:
          if (op2.name === "ngNonBindable") {
            OpList.remove(op2);
            const target = lookupElement$1(elements, op2.target);
            target.nonBindable = true;
          } else {
            const [namespace, name] = splitNsName(op2.name);
            OpList.replace(op2, createAttributeOp(op2.target, namespace, name, op2.expression, op2.securityContext, op2.isTextAttribute, op2.isStructuralTemplateAttribute, op2.templateKind, op2.i18nMessage, op2.sourceSpan));
          }
          break;
        case BindingKind.Property:
        case BindingKind.Animation:
          if (job.kind === CompilationJobKind.Host) {
            OpList.replace(op2, createHostPropertyOp(op2.name, op2.expression, op2.bindingKind === BindingKind.Animation, op2.i18nContext, op2.securityContext, op2.sourceSpan));
          } else {
            OpList.replace(op2, createPropertyOp(op2.target, op2.name, op2.expression, op2.bindingKind === BindingKind.Animation, op2.securityContext, op2.isStructuralTemplateAttribute, op2.templateKind, op2.i18nContext, op2.i18nMessage, op2.sourceSpan));
          }
          break;
        case BindingKind.TwoWayProperty:
          if (!(op2.expression instanceof Expression)) {
            throw new Error(`Expected value of two-way property binding "${op2.name}" to be an expression`);
          }
          OpList.replace(op2, createTwoWayPropertyOp(op2.target, op2.name, op2.expression, op2.securityContext, op2.isStructuralTemplateAttribute, op2.templateKind, op2.i18nContext, op2.i18nMessage, op2.sourceSpan));
          break;
        case BindingKind.I18n:
        case BindingKind.ClassName:
        case BindingKind.StyleProperty:
          throw new Error(`Unhandled binding of kind ${BindingKind[op2.bindingKind]}`);
      }
    }
  }
}
var CHAINABLE = /* @__PURE__ */ new Set([Identifiers.attribute, Identifiers.classProp, Identifiers.element, Identifiers.elementContainer, Identifiers.elementContainerEnd, Identifiers.elementContainerStart, Identifiers.elementEnd, Identifiers.elementStart, Identifiers.hostProperty, Identifiers.i18nExp, Identifiers.listener, Identifiers.listener, Identifiers.property, Identifiers.styleProp, Identifiers.stylePropInterpolate1, Identifiers.stylePropInterpolate2, Identifiers.stylePropInterpolate3, Identifiers.stylePropInterpolate4, Identifiers.stylePropInterpolate5, Identifiers.stylePropInterpolate6, Identifiers.stylePropInterpolate7, Identifiers.stylePropInterpolate8, Identifiers.stylePropInterpolateV, Identifiers.syntheticHostListener, Identifiers.syntheticHostProperty, Identifiers.templateCreate, Identifiers.twoWayProperty, Identifiers.twoWayListener, Identifiers.declareLet]);
var MAX_CHAIN_LENGTH = 256;
function chain(job) {
  for (const unit of job.units) {
    chainOperationsInList(unit.create);
    chainOperationsInList(unit.update);
  }
}
function chainOperationsInList(opList) {
  let chain2 = null;
  for (const op2 of opList) {
    if (op2.kind !== OpKind.Statement || !(op2.statement instanceof ExpressionStatement)) {
      chain2 = null;
      continue;
    }
    if (!(op2.statement.expr instanceof InvokeFunctionExpr) || !(op2.statement.expr.fn instanceof ExternalExpr)) {
      chain2 = null;
      continue;
    }
    const instruction = op2.statement.expr.fn.value;
    if (!CHAINABLE.has(instruction)) {
      chain2 = null;
      continue;
    }
    if (chain2 !== null && chain2.instruction === instruction && chain2.length < MAX_CHAIN_LENGTH) {
      const expression = chain2.expression.callFn(op2.statement.expr.args, op2.statement.expr.sourceSpan, op2.statement.expr.pure);
      chain2.expression = expression;
      chain2.op.statement = expression.toStmt();
      chain2.length++;
      OpList.remove(op2);
    } else {
      chain2 = {
        op: op2,
        instruction,
        expression: op2.statement.expr,
        length: 1
      };
    }
  }
}
function collapseSingletonInterpolations(job) {
  for (const unit of job.units) {
    for (const op2 of unit.update) {
      const eligibleOpKind = op2.kind === OpKind.Attribute;
      if (eligibleOpKind && op2.expression instanceof Interpolation2 && op2.expression.strings.length === 2 && op2.expression.strings.every((s) => s === "")) {
        op2.expression = op2.expression.expressions[0];
      }
    }
  }
}
function generateConditionalExpressions(job) {
  for (const unit of job.units) {
    for (const op2 of unit.ops()) {
      if (op2.kind !== OpKind.Conditional) {
        continue;
      }
      let test;
      const defaultCase = op2.conditions.findIndex((cond) => cond.expr === null);
      if (defaultCase >= 0) {
        const slot = op2.conditions.splice(defaultCase, 1)[0].targetSlot;
        test = new SlotLiteralExpr(slot);
      } else {
        test = literal(-1);
      }
      let tmp = op2.test == null ? null : new AssignTemporaryExpr(op2.test, job.allocateXrefId());
      for (let i = op2.conditions.length - 1; i >= 0; i--) {
        let conditionalCase = op2.conditions[i];
        if (conditionalCase.expr === null) {
          continue;
        }
        if (tmp !== null) {
          const useTmp = i === 0 ? tmp : new ReadTemporaryExpr(tmp.xref);
          conditionalCase.expr = new BinaryOperatorExpr(BinaryOperator.Identical, useTmp, conditionalCase.expr);
        } else if (conditionalCase.alias !== null) {
          const caseExpressionTemporaryXref = job.allocateXrefId();
          conditionalCase.expr = new AssignTemporaryExpr(conditionalCase.expr, caseExpressionTemporaryXref);
          op2.contextValue = new ReadTemporaryExpr(caseExpressionTemporaryXref);
        }
        test = new ConditionalExpr(conditionalCase.expr, new SlotLiteralExpr(conditionalCase.targetSlot), test);
      }
      op2.processed = test;
      op2.conditions = [];
    }
  }
}
var BINARY_OPERATORS = /* @__PURE__ */ new Map([["&&", BinaryOperator.And], [">", BinaryOperator.Bigger], [">=", BinaryOperator.BiggerEquals], ["|", BinaryOperator.BitwiseOr], ["&", BinaryOperator.BitwiseAnd], ["/", BinaryOperator.Divide], ["==", BinaryOperator.Equals], ["===", BinaryOperator.Identical], ["<", BinaryOperator.Lower], ["<=", BinaryOperator.LowerEquals], ["-", BinaryOperator.Minus], ["%", BinaryOperator.Modulo], ["*", BinaryOperator.Multiply], ["!=", BinaryOperator.NotEquals], ["!==", BinaryOperator.NotIdentical], ["??", BinaryOperator.NullishCoalesce], ["||", BinaryOperator.Or], ["+", BinaryOperator.Plus]]);
function namespaceForKey(namespacePrefixKey) {
  const NAMESPACES = /* @__PURE__ */ new Map([["svg", Namespace.SVG], ["math", Namespace.Math]]);
  if (namespacePrefixKey === null) {
    return Namespace.HTML;
  }
  return NAMESPACES.get(namespacePrefixKey) ?? Namespace.HTML;
}
function keyForNamespace(namespace) {
  const NAMESPACES = /* @__PURE__ */ new Map([["svg", Namespace.SVG], ["math", Namespace.Math]]);
  for (const [k, n] of NAMESPACES.entries()) {
    if (n === namespace) {
      return k;
    }
  }
  return null;
}
function prefixWithNamespace(strippedTag, namespace) {
  if (namespace === Namespace.HTML) {
    return strippedTag;
  }
  return `:${keyForNamespace(namespace)}:${strippedTag}`;
}
function literalOrArrayLiteral(value) {
  if (Array.isArray(value)) {
    return literalArr(value.map(literalOrArrayLiteral));
  }
  return literal(value);
}
function collectElementConsts(job) {
  const allElementAttributes = /* @__PURE__ */ new Map();
  for (const unit of job.units) {
    for (const op2 of unit.create) {
      if (op2.kind === OpKind.ExtractedAttribute) {
        const attributes = allElementAttributes.get(op2.target) || new ElementAttributes(job.compatibility);
        allElementAttributes.set(op2.target, attributes);
        attributes.add(op2.bindingKind, op2.name, op2.expression, op2.namespace, op2.trustedValueFn);
        OpList.remove(op2);
      }
    }
  }
  if (job instanceof ComponentCompilationJob) {
    for (const unit of job.units) {
      for (const op2 of unit.create) {
        if (op2.kind == OpKind.Projection) {
          const attributes = allElementAttributes.get(op2.xref);
          if (attributes !== void 0) {
            const attrArray = serializeAttributes(attributes);
            if (attrArray.entries.length > 0) {
              op2.attributes = attrArray;
            }
          }
        } else if (isElementOrContainerOp(op2)) {
          op2.attributes = getConstIndex(job, allElementAttributes, op2.xref);
          if (op2.kind === OpKind.RepeaterCreate && op2.emptyView !== null) {
            op2.emptyAttributes = getConstIndex(job, allElementAttributes, op2.emptyView);
          }
        }
      }
    }
  } else if (job instanceof HostBindingCompilationJob) {
    for (const [xref, attributes] of allElementAttributes.entries()) {
      if (xref !== job.root.xref) {
        throw new Error(`An attribute would be const collected into the host binding's template function, but is not associated with the root xref.`);
      }
      const attrArray = serializeAttributes(attributes);
      if (attrArray.entries.length > 0) {
        job.root.attributes = attrArray;
      }
    }
  }
}
function getConstIndex(job, allElementAttributes, xref) {
  const attributes = allElementAttributes.get(xref);
  if (attributes !== void 0) {
    const attrArray = serializeAttributes(attributes);
    if (attrArray.entries.length > 0) {
      return job.addConst(attrArray);
    }
  }
  return null;
}
var FLYWEIGHT_ARRAY = Object.freeze([]);
var ElementAttributes = class {
  compatibility;
  known = /* @__PURE__ */ new Map();
  byKind = /* @__PURE__ */ new Map();
  propertyBindings = null;
  projectAs = null;
  get attributes() {
    return this.byKind.get(BindingKind.Attribute) ?? FLYWEIGHT_ARRAY;
  }
  get classes() {
    return this.byKind.get(BindingKind.ClassName) ?? FLYWEIGHT_ARRAY;
  }
  get styles() {
    return this.byKind.get(BindingKind.StyleProperty) ?? FLYWEIGHT_ARRAY;
  }
  get bindings() {
    return this.propertyBindings ?? FLYWEIGHT_ARRAY;
  }
  get template() {
    return this.byKind.get(BindingKind.Template) ?? FLYWEIGHT_ARRAY;
  }
  get i18n() {
    return this.byKind.get(BindingKind.I18n) ?? FLYWEIGHT_ARRAY;
  }
  constructor(compatibility) {
    this.compatibility = compatibility;
  }
  isKnown(kind, name) {
    const nameToValue = this.known.get(kind) ?? /* @__PURE__ */ new Set();
    this.known.set(kind, nameToValue);
    if (nameToValue.has(name)) {
      return true;
    }
    nameToValue.add(name);
    return false;
  }
  add(kind, name, value, namespace, trustedValueFn) {
    const allowDuplicates = this.compatibility === CompatibilityMode.TemplateDefinitionBuilder && (kind === BindingKind.Attribute || kind === BindingKind.ClassName || kind === BindingKind.StyleProperty);
    if (!allowDuplicates && this.isKnown(kind, name)) {
      return;
    }
    if (name === "ngProjectAs") {
      if (value === null || !(value instanceof LiteralExpr) || value.value == null || typeof value.value?.toString() !== "string") {
        throw Error("ngProjectAs must have a string literal value");
      }
      this.projectAs = value.value.toString();
    }
    const array = this.arrayFor(kind);
    array.push(...getAttributeNameLiterals(namespace, name));
    if (kind === BindingKind.Attribute || kind === BindingKind.StyleProperty) {
      if (value === null) {
        throw Error("Attribute, i18n attribute, & style element attributes must have a value");
      }
      if (trustedValueFn !== null) {
        if (!isStringLiteral(value)) {
          throw Error("AssertionError: extracted attribute value should be string literal");
        }
        array.push(taggedTemplate(trustedValueFn, new TemplateLiteralExpr([new TemplateLiteralElementExpr(value.value)], []), void 0, value.sourceSpan));
      } else {
        array.push(value);
      }
    }
  }
  arrayFor(kind) {
    if (kind === BindingKind.Property || kind === BindingKind.TwoWayProperty) {
      this.propertyBindings ??= [];
      return this.propertyBindings;
    } else {
      if (!this.byKind.has(kind)) {
        this.byKind.set(kind, []);
      }
      return this.byKind.get(kind);
    }
  }
};
function getAttributeNameLiterals(namespace, name) {
  const nameLiteral = literal(name);
  if (namespace) {
    return [literal(
      0
      /* core.AttributeMarker.NamespaceURI */
    ), literal(namespace), nameLiteral];
  }
  return [nameLiteral];
}
function serializeAttributes({
  attributes,
  bindings,
  classes,
  i18n: i18n2,
  projectAs,
  styles: styles2,
  template: template2
}) {
  const attrArray = [...attributes];
  if (projectAs !== null) {
    const parsedR3Selector = parseSelectorToR3Selector(projectAs)[0];
    attrArray.push(literal(
      5
      /* core.AttributeMarker.ProjectAs */
    ), literalOrArrayLiteral(parsedR3Selector));
  }
  if (classes.length > 0) {
    attrArray.push(literal(
      1
      /* core.AttributeMarker.Classes */
    ), ...classes);
  }
  if (styles2.length > 0) {
    attrArray.push(literal(
      2
      /* core.AttributeMarker.Styles */
    ), ...styles2);
  }
  if (bindings.length > 0) {
    attrArray.push(literal(
      3
      /* core.AttributeMarker.Bindings */
    ), ...bindings);
  }
  if (template2.length > 0) {
    attrArray.push(literal(
      4
      /* core.AttributeMarker.Template */
    ), ...template2);
  }
  if (i18n2.length > 0) {
    attrArray.push(literal(
      6
      /* core.AttributeMarker.I18n */
    ), ...i18n2);
  }
  return literalArr(attrArray);
}
function convertI18nBindings(job) {
  const i18nAttributesByElem = /* @__PURE__ */ new Map();
  for (const unit of job.units) {
    for (const op2 of unit.create) {
      if (op2.kind === OpKind.I18nAttributes) {
        i18nAttributesByElem.set(op2.target, op2);
      }
    }
    for (const op2 of unit.update) {
      switch (op2.kind) {
        case OpKind.Property:
        case OpKind.Attribute:
          if (op2.i18nContext === null) {
            continue;
          }
          if (!(op2.expression instanceof Interpolation2)) {
            continue;
          }
          const i18nAttributesForElem = i18nAttributesByElem.get(op2.target);
          if (i18nAttributesForElem === void 0) {
            throw new Error("AssertionError: An i18n attribute binding instruction requires the owning element to have an I18nAttributes create instruction");
          }
          if (i18nAttributesForElem.target !== op2.target) {
            throw new Error("AssertionError: Expected i18nAttributes target element to match binding target element");
          }
          const ops = [];
          for (let i = 0; i < op2.expression.expressions.length; i++) {
            const expr = op2.expression.expressions[i];
            if (op2.expression.i18nPlaceholders.length !== op2.expression.expressions.length) {
              throw new Error(`AssertionError: An i18n attribute binding instruction requires the same number of expressions and placeholders, but found ${op2.expression.i18nPlaceholders.length} placeholders and ${op2.expression.expressions.length} expressions`);
            }
            ops.push(createI18nExpressionOp(op2.i18nContext, i18nAttributesForElem.target, i18nAttributesForElem.xref, i18nAttributesForElem.handle, expr, null, op2.expression.i18nPlaceholders[i], I18nParamResolutionTime.Creation, I18nExpressionFor.I18nAttribute, op2.name, op2.sourceSpan));
          }
          OpList.replaceWithMany(op2, ops);
          break;
      }
    }
  }
}
function resolveDeferDepsFns(job) {
  for (const unit of job.units) {
    for (const op2 of unit.create) {
      if (op2.kind === OpKind.Defer) {
        if (op2.resolverFn !== null) {
          continue;
        }
        if (op2.ownResolverFn !== null) {
          if (op2.handle.slot === null) {
            throw new Error("AssertionError: slot must be assigned before extracting defer deps functions");
          }
          const fullPathName = unit.fnName?.replace("_Template", "");
          op2.resolverFn = job.pool.getSharedFunctionReference(
            op2.ownResolverFn,
            `${fullPathName}_Defer_${op2.handle.slot}_DepsFn`,
            /* Don't use unique names for TDB compatibility */
            false
          );
        }
      }
    }
  }
}
function createI18nContexts(job) {
  const attrContextByMessage = /* @__PURE__ */ new Map();
  for (const unit of job.units) {
    for (const op2 of unit.ops()) {
      switch (op2.kind) {
        case OpKind.Binding:
        case OpKind.Property:
        case OpKind.Attribute:
        case OpKind.ExtractedAttribute:
          if (op2.i18nMessage === null) {
            continue;
          }
          if (!attrContextByMessage.has(op2.i18nMessage)) {
            const i18nContext = createI18nContextOp(I18nContextKind.Attr, job.allocateXrefId(), null, op2.i18nMessage, null);
            unit.create.push(i18nContext);
            attrContextByMessage.set(op2.i18nMessage, i18nContext.xref);
          }
          op2.i18nContext = attrContextByMessage.get(op2.i18nMessage);
          break;
      }
    }
  }
  const blockContextByI18nBlock = /* @__PURE__ */ new Map();
  for (const unit of job.units) {
    for (const op2 of unit.create) {
      switch (op2.kind) {
        case OpKind.I18nStart:
          if (op2.xref === op2.root) {
            const contextOp = createI18nContextOp(I18nContextKind.RootI18n, job.allocateXrefId(), op2.xref, op2.message, null);
            unit.create.push(contextOp);
            op2.context = contextOp.xref;
            blockContextByI18nBlock.set(op2.xref, contextOp);
          }
          break;
      }
    }
  }
  for (const unit of job.units) {
    for (const op2 of unit.create) {
      if (op2.kind === OpKind.I18nStart && op2.xref !== op2.root) {
        const rootContext = blockContextByI18nBlock.get(op2.root);
        if (rootContext === void 0) {
          throw Error("AssertionError: Root i18n block i18n context should have been created.");
        }
        op2.context = rootContext.xref;
        blockContextByI18nBlock.set(op2.xref, rootContext);
      }
    }
  }
  let currentI18nOp = null;
  for (const unit of job.units) {
    for (const op2 of unit.create) {
      switch (op2.kind) {
        case OpKind.I18nStart:
          currentI18nOp = op2;
          break;
        case OpKind.I18nEnd:
          currentI18nOp = null;
          break;
        case OpKind.IcuStart:
          if (currentI18nOp === null) {
            throw Error("AssertionError: Unexpected ICU outside of an i18n block.");
          }
          if (op2.message.id !== currentI18nOp.message.id) {
            const contextOp = createI18nContextOp(I18nContextKind.Icu, job.allocateXrefId(), currentI18nOp.root, op2.message, null);
            unit.create.push(contextOp);
            op2.context = contextOp.xref;
          } else {
            op2.context = currentI18nOp.context;
            blockContextByI18nBlock.get(currentI18nOp.xref).contextKind = I18nContextKind.Icu;
          }
          break;
      }
    }
  }
}
function deduplicateTextBindings(job) {
  const seen = /* @__PURE__ */ new Map();
  for (const unit of job.units) {
    for (const op2 of unit.update.reversed()) {
      if (op2.kind === OpKind.Binding && op2.isTextAttribute) {
        const seenForElement = seen.get(op2.target) || /* @__PURE__ */ new Set();
        if (seenForElement.has(op2.name)) {
          if (job.compatibility === CompatibilityMode.TemplateDefinitionBuilder) {
            if (op2.name === "style" || op2.name === "class") {
              OpList.remove(op2);
            }
          }
        }
        seenForElement.add(op2.name);
        seen.set(op2.target, seenForElement);
      }
    }
  }
}
function configureDeferInstructions(job) {
  for (const unit of job.units) {
    for (const op2 of unit.create) {
      if (op2.kind !== OpKind.Defer) {
        continue;
      }
      if (op2.placeholderMinimumTime !== null) {
        op2.placeholderConfig = new ConstCollectedExpr(literalOrArrayLiteral([op2.placeholderMinimumTime]));
      }
      if (op2.loadingMinimumTime !== null || op2.loadingAfterTime !== null) {
        op2.loadingConfig = new ConstCollectedExpr(literalOrArrayLiteral([op2.loadingMinimumTime, op2.loadingAfterTime]));
      }
    }
  }
}
function resolveDeferTargetNames(job) {
  const scopes = /* @__PURE__ */ new Map();
  function getScopeForView2(view) {
    if (scopes.has(view.xref)) {
      return scopes.get(view.xref);
    }
    const scope = new Scope$1();
    for (const op2 of view.create) {
      if (!isElementOrContainerOp(op2) || op2.localRefs === null) {
        continue;
      }
      if (!Array.isArray(op2.localRefs)) {
        throw new Error("LocalRefs were already processed, but were needed to resolve defer targets.");
      }
      for (const ref of op2.localRefs) {
        if (ref.target !== "") {
          continue;
        }
        scope.targets.set(ref.name, {
          xref: op2.xref,
          slot: op2.handle
        });
      }
    }
    scopes.set(view.xref, scope);
    return scope;
  }
  function resolveTrigger(deferOwnerView, op2, placeholderView) {
    switch (op2.trigger.kind) {
      case DeferTriggerKind.Idle:
      case DeferTriggerKind.Never:
      case DeferTriggerKind.Immediate:
      case DeferTriggerKind.Timer:
        return;
      case DeferTriggerKind.Hover:
      case DeferTriggerKind.Interaction:
      case DeferTriggerKind.Viewport:
        if (op2.trigger.targetName === null) {
          if (placeholderView === null) {
            throw new Error("defer on trigger with no target name must have a placeholder block");
          }
          const placeholder = job.views.get(placeholderView);
          if (placeholder == void 0) {
            throw new Error("AssertionError: could not find placeholder view for defer on trigger");
          }
          for (const placeholderOp of placeholder.create) {
            if (hasConsumesSlotTrait(placeholderOp) && (isElementOrContainerOp(placeholderOp) || placeholderOp.kind === OpKind.Projection)) {
              op2.trigger.targetXref = placeholderOp.xref;
              op2.trigger.targetView = placeholderView;
              op2.trigger.targetSlotViewSteps = -1;
              op2.trigger.targetSlot = placeholderOp.handle;
              return;
            }
          }
          return;
        }
        let view = placeholderView !== null ? job.views.get(placeholderView) : deferOwnerView;
        let step = placeholderView !== null ? -1 : 0;
        while (view !== null) {
          const scope = getScopeForView2(view);
          if (scope.targets.has(op2.trigger.targetName)) {
            const {
              xref,
              slot
            } = scope.targets.get(op2.trigger.targetName);
            op2.trigger.targetXref = xref;
            op2.trigger.targetView = view.xref;
            op2.trigger.targetSlotViewSteps = step;
            op2.trigger.targetSlot = slot;
            return;
          }
          view = view.parent !== null ? job.views.get(view.parent) : null;
          step++;
        }
        break;
      default:
        throw new Error(`Trigger kind ${op2.trigger.kind} not handled`);
    }
  }
  for (const unit of job.units) {
    const defers = /* @__PURE__ */ new Map();
    for (const op2 of unit.create) {
      switch (op2.kind) {
        case OpKind.Defer:
          defers.set(op2.xref, op2);
          break;
        case OpKind.DeferOn:
          const deferOp = defers.get(op2.defer);
          resolveTrigger(unit, op2, op2.modifier === "hydrate" ? deferOp.mainView : deferOp.placeholderView);
          break;
      }
    }
  }
}
var Scope$1 = class Scope {
  targets = /* @__PURE__ */ new Map();
};
var REPLACEMENTS = /* @__PURE__ */ new Map([[OpKind.ElementEnd, [OpKind.ElementStart, OpKind.Element]], [OpKind.ContainerEnd, [OpKind.ContainerStart, OpKind.Container]], [OpKind.I18nEnd, [OpKind.I18nStart, OpKind.I18n]]]);
var IGNORED_OP_KINDS = /* @__PURE__ */ new Set([OpKind.Pipe]);
function collapseEmptyInstructions(job) {
  for (const unit of job.units) {
    for (const op2 of unit.create) {
      const opReplacements = REPLACEMENTS.get(op2.kind);
      if (opReplacements === void 0) {
        continue;
      }
      const [startKind, mergedKind] = opReplacements;
      let prevOp = op2.prev;
      while (prevOp !== null && IGNORED_OP_KINDS.has(prevOp.kind)) {
        prevOp = prevOp.prev;
      }
      if (prevOp !== null && prevOp.kind === startKind) {
        prevOp.kind = mergedKind;
        OpList.remove(op2);
      }
    }
  }
}
function expandSafeReads(job) {
  for (const unit of job.units) {
    for (const op2 of unit.ops()) {
      transformExpressionsInOp(op2, (e) => safeTransform(e, {
        job
      }), VisitorContextFlag.None);
      transformExpressionsInOp(op2, ternaryTransform, VisitorContextFlag.None);
    }
  }
}
function needsTemporaryInSafeAccess(e) {
  if (e instanceof UnaryOperatorExpr) {
    return needsTemporaryInSafeAccess(e.expr);
  } else if (e instanceof BinaryOperatorExpr) {
    return needsTemporaryInSafeAccess(e.lhs) || needsTemporaryInSafeAccess(e.rhs);
  } else if (e instanceof ConditionalExpr) {
    if (e.falseCase && needsTemporaryInSafeAccess(e.falseCase)) return true;
    return needsTemporaryInSafeAccess(e.condition) || needsTemporaryInSafeAccess(e.trueCase);
  } else if (e instanceof NotExpr) {
    return needsTemporaryInSafeAccess(e.condition);
  } else if (e instanceof AssignTemporaryExpr) {
    return needsTemporaryInSafeAccess(e.expr);
  } else if (e instanceof ReadPropExpr) {
    return needsTemporaryInSafeAccess(e.receiver);
  } else if (e instanceof ReadKeyExpr) {
    return needsTemporaryInSafeAccess(e.receiver) || needsTemporaryInSafeAccess(e.index);
  }
  return e instanceof InvokeFunctionExpr || e instanceof LiteralArrayExpr || e instanceof LiteralMapExpr || e instanceof SafeInvokeFunctionExpr || e instanceof PipeBindingExpr;
}
function temporariesIn(e) {
  const temporaries = /* @__PURE__ */ new Set();
  transformExpressionsInExpression(e, (e2) => {
    if (e2 instanceof AssignTemporaryExpr) {
      temporaries.add(e2.xref);
    }
    return e2;
  }, VisitorContextFlag.None);
  return temporaries;
}
function eliminateTemporaryAssignments(e, tmps, ctx) {
  transformExpressionsInExpression(e, (e2) => {
    if (e2 instanceof AssignTemporaryExpr && tmps.has(e2.xref)) {
      const read = new ReadTemporaryExpr(e2.xref);
      return ctx.job.compatibility === CompatibilityMode.TemplateDefinitionBuilder ? new AssignTemporaryExpr(read, read.xref) : read;
    }
    return e2;
  }, VisitorContextFlag.None);
  return e;
}
function safeTernaryWithTemporary(guard, body, ctx) {
  let result;
  if (needsTemporaryInSafeAccess(guard)) {
    const xref = ctx.job.allocateXrefId();
    result = [new AssignTemporaryExpr(guard, xref), new ReadTemporaryExpr(xref)];
  } else {
    result = [guard, guard.clone()];
    eliminateTemporaryAssignments(result[1], temporariesIn(result[0]), ctx);
  }
  return new SafeTernaryExpr(result[0], body(result[1]));
}
function isSafeAccessExpression(e) {
  return e instanceof SafePropertyReadExpr || e instanceof SafeKeyedReadExpr || e instanceof SafeInvokeFunctionExpr;
}
function isUnsafeAccessExpression(e) {
  return e instanceof ReadPropExpr || e instanceof ReadKeyExpr || e instanceof InvokeFunctionExpr;
}
function isAccessExpression(e) {
  return isSafeAccessExpression(e) || isUnsafeAccessExpression(e);
}
function deepestSafeTernary(e) {
  if (isAccessExpression(e) && e.receiver instanceof SafeTernaryExpr) {
    let st = e.receiver;
    while (st.expr instanceof SafeTernaryExpr) {
      st = st.expr;
    }
    return st;
  }
  return null;
}
function safeTransform(e, ctx) {
  if (!isAccessExpression(e)) {
    return e;
  }
  const dst = deepestSafeTernary(e);
  if (dst) {
    if (e instanceof InvokeFunctionExpr) {
      dst.expr = dst.expr.callFn(e.args);
      return e.receiver;
    }
    if (e instanceof ReadPropExpr) {
      dst.expr = dst.expr.prop(e.name);
      return e.receiver;
    }
    if (e instanceof ReadKeyExpr) {
      dst.expr = dst.expr.key(e.index);
      return e.receiver;
    }
    if (e instanceof SafeInvokeFunctionExpr) {
      dst.expr = safeTernaryWithTemporary(dst.expr, (r) => r.callFn(e.args), ctx);
      return e.receiver;
    }
    if (e instanceof SafePropertyReadExpr) {
      dst.expr = safeTernaryWithTemporary(dst.expr, (r) => r.prop(e.name), ctx);
      return e.receiver;
    }
    if (e instanceof SafeKeyedReadExpr) {
      dst.expr = safeTernaryWithTemporary(dst.expr, (r) => r.key(e.index), ctx);
      return e.receiver;
    }
  } else {
    if (e instanceof SafeInvokeFunctionExpr) {
      return safeTernaryWithTemporary(e.receiver, (r) => r.callFn(e.args), ctx);
    }
    if (e instanceof SafePropertyReadExpr) {
      return safeTernaryWithTemporary(e.receiver, (r) => r.prop(e.name), ctx);
    }
    if (e instanceof SafeKeyedReadExpr) {
      return safeTernaryWithTemporary(e.receiver, (r) => r.key(e.index), ctx);
    }
  }
  return e;
}
function ternaryTransform(e) {
  if (!(e instanceof SafeTernaryExpr)) {
    return e;
  }
  return new ConditionalExpr(new BinaryOperatorExpr(BinaryOperator.Equals, e.guard, NULL_EXPR), NULL_EXPR, e.expr);
}
var ESCAPE$1 = "\uFFFD";
var ELEMENT_MARKER = "#";
var TEMPLATE_MARKER = "*";
var TAG_CLOSE_MARKER = "/";
var CONTEXT_MARKER = ":";
var LIST_START_MARKER = "[";
var LIST_END_MARKER = "]";
var LIST_DELIMITER = "|";
function extractI18nMessages(job) {
  const i18nMessagesByContext = /* @__PURE__ */ new Map();
  const i18nBlocks = /* @__PURE__ */ new Map();
  const i18nContexts = /* @__PURE__ */ new Map();
  for (const unit of job.units) {
    for (const op2 of unit.create) {
      switch (op2.kind) {
        case OpKind.I18nContext:
          const i18nMessageOp = createI18nMessage(job, op2);
          unit.create.push(i18nMessageOp);
          i18nMessagesByContext.set(op2.xref, i18nMessageOp);
          i18nContexts.set(op2.xref, op2);
          break;
        case OpKind.I18nStart:
          i18nBlocks.set(op2.xref, op2);
          break;
      }
    }
  }
  let currentIcu = null;
  for (const unit of job.units) {
    for (const op2 of unit.create) {
      switch (op2.kind) {
        case OpKind.IcuStart:
          currentIcu = op2;
          OpList.remove(op2);
          const icuContext = i18nContexts.get(op2.context);
          if (icuContext.contextKind !== I18nContextKind.Icu) {
            continue;
          }
          const i18nBlock = i18nBlocks.get(icuContext.i18nBlock);
          if (i18nBlock.context === icuContext.xref) {
            continue;
          }
          const rootI18nBlock = i18nBlocks.get(i18nBlock.root);
          const rootMessage = i18nMessagesByContext.get(rootI18nBlock.context);
          if (rootMessage === void 0) {
            throw Error("AssertionError: ICU sub-message should belong to a root message.");
          }
          const subMessage = i18nMessagesByContext.get(icuContext.xref);
          subMessage.messagePlaceholder = op2.messagePlaceholder;
          rootMessage.subMessages.push(subMessage.xref);
          break;
        case OpKind.IcuEnd:
          currentIcu = null;
          OpList.remove(op2);
          break;
        case OpKind.IcuPlaceholder:
          if (currentIcu === null || currentIcu.context == null) {
            throw Error("AssertionError: Unexpected ICU placeholder outside of i18n context");
          }
          const msg = i18nMessagesByContext.get(currentIcu.context);
          msg.postprocessingParams.set(op2.name, literal(formatIcuPlaceholder(op2)));
          OpList.remove(op2);
          break;
      }
    }
  }
}
function createI18nMessage(job, context, messagePlaceholder) {
  let formattedParams = formatParams(context.params);
  const formattedPostprocessingParams = formatParams(context.postprocessingParams);
  let needsPostprocessing = [...context.params.values()].some((v) => v.length > 1);
  return createI18nMessageOp(job.allocateXrefId(), context.xref, context.i18nBlock, context.message, null, formattedParams, formattedPostprocessingParams, needsPostprocessing);
}
function formatIcuPlaceholder(op2) {
  if (op2.strings.length !== op2.expressionPlaceholders.length + 1) {
    throw Error(`AssertionError: Invalid ICU placeholder with ${op2.strings.length} strings and ${op2.expressionPlaceholders.length} expressions`);
  }
  const values = op2.expressionPlaceholders.map(formatValue);
  return op2.strings.flatMap((str, i) => [str, values[i] || ""]).join("");
}
function formatParams(params) {
  const formattedParams = /* @__PURE__ */ new Map();
  for (const [placeholder, placeholderValues] of params) {
    const serializedValues = formatParamValues(placeholderValues);
    if (serializedValues !== null) {
      formattedParams.set(placeholder, literal(serializedValues));
    }
  }
  return formattedParams;
}
function formatParamValues(values) {
  if (values.length === 0) {
    return null;
  }
  const serializedValues = values.map((value) => formatValue(value));
  return serializedValues.length === 1 ? serializedValues[0] : `${LIST_START_MARKER}${serializedValues.join(LIST_DELIMITER)}${LIST_END_MARKER}`;
}
function formatValue(value) {
  if (value.flags & I18nParamValueFlags.ElementTag && value.flags & I18nParamValueFlags.TemplateTag) {
    if (typeof value.value !== "object") {
      throw Error("AssertionError: Expected i18n param value to have an element and template slot");
    }
    const elementValue = formatValue(__spreadProps(__spreadValues({}, value), {
      value: value.value.element,
      flags: value.flags & ~I18nParamValueFlags.TemplateTag
    }));
    const templateValue = formatValue(__spreadProps(__spreadValues({}, value), {
      value: value.value.template,
      flags: value.flags & ~I18nParamValueFlags.ElementTag
    }));
    if (value.flags & I18nParamValueFlags.OpenTag && value.flags & I18nParamValueFlags.CloseTag) {
      return `${templateValue}${elementValue}${templateValue}`;
    }
    return value.flags & I18nParamValueFlags.CloseTag ? `${elementValue}${templateValue}` : `${templateValue}${elementValue}`;
  }
  if (value.flags & I18nParamValueFlags.OpenTag && value.flags & I18nParamValueFlags.CloseTag) {
    return `${formatValue(__spreadProps(__spreadValues({}, value), {
      flags: value.flags & ~I18nParamValueFlags.CloseTag
    }))}${formatValue(__spreadProps(__spreadValues({}, value), {
      flags: value.flags & ~I18nParamValueFlags.OpenTag
    }))}`;
  }
  if (value.flags === I18nParamValueFlags.None) {
    return `${value.value}`;
  }
  let tagMarker = "";
  let closeMarker = "";
  if (value.flags & I18nParamValueFlags.ElementTag) {
    tagMarker = ELEMENT_MARKER;
  } else if (value.flags & I18nParamValueFlags.TemplateTag) {
    tagMarker = TEMPLATE_MARKER;
  }
  if (tagMarker !== "") {
    closeMarker = value.flags & I18nParamValueFlags.CloseTag ? TAG_CLOSE_MARKER : "";
  }
  const context = value.subTemplateIndex === null ? "" : `${CONTEXT_MARKER}${value.subTemplateIndex}`;
  return `${ESCAPE$1}${closeMarker}${tagMarker}${value.value}${context}${ESCAPE$1}`;
}
function generateAdvance(job) {
  for (const unit of job.units) {
    const slotMap = /* @__PURE__ */ new Map();
    for (const op2 of unit.create) {
      if (!hasConsumesSlotTrait(op2)) {
        continue;
      } else if (op2.handle.slot === null) {
        throw new Error(`AssertionError: expected slots to have been allocated before generating advance() calls`);
      }
      slotMap.set(op2.xref, op2.handle.slot);
    }
    let slotContext = 0;
    for (const op2 of unit.update) {
      let consumer = null;
      if (hasDependsOnSlotContextTrait(op2)) {
        consumer = op2;
      } else {
        visitExpressionsInOp(op2, (expr) => {
          if (consumer === null && hasDependsOnSlotContextTrait(expr)) {
            consumer = expr;
          }
        });
      }
      if (consumer === null) {
        continue;
      }
      if (!slotMap.has(consumer.target)) {
        throw new Error(`AssertionError: reference to unknown slot for target ${consumer.target}`);
      }
      const slot = slotMap.get(consumer.target);
      if (slotContext !== slot) {
        const delta = slot - slotContext;
        if (delta < 0) {
          throw new Error(`AssertionError: slot counter should never need to move backwards`);
        }
        OpList.insertBefore(createAdvanceOp(delta, consumer.sourceSpan), op2);
        slotContext = slot;
      }
    }
  }
}
function generateProjectionDefs(job) {
  const share = job.compatibility === CompatibilityMode.TemplateDefinitionBuilder;
  const selectors = [];
  let projectionSlotIndex = 0;
  for (const unit of job.units) {
    for (const op2 of unit.create) {
      if (op2.kind === OpKind.Projection) {
        selectors.push(op2.selector);
        op2.projectionSlotIndex = projectionSlotIndex++;
      }
    }
  }
  if (selectors.length > 0) {
    let defExpr = null;
    if (selectors.length > 1 || selectors[0] !== "*") {
      const def = selectors.map((s) => s === "*" ? s : parseSelectorToR3Selector(s));
      defExpr = job.pool.getConstLiteral(literalOrArrayLiteral(def), share);
    }
    job.contentSelectors = job.pool.getConstLiteral(literalOrArrayLiteral(selectors), share);
    job.root.create.prepend([createProjectionDefOp(defExpr)]);
  }
}
function generateVariables(job) {
  recursivelyProcessView(
    job.root,
    /* there is no parent scope for the root view */
    null
  );
}
function recursivelyProcessView(view, parentScope) {
  const scope = getScopeForView(view, parentScope);
  for (const op2 of view.create) {
    switch (op2.kind) {
      case OpKind.Template:
        recursivelyProcessView(view.job.views.get(op2.xref), scope);
        break;
      case OpKind.Projection:
        if (op2.fallbackView !== null) {
          recursivelyProcessView(view.job.views.get(op2.fallbackView), scope);
        }
        break;
      case OpKind.RepeaterCreate:
        recursivelyProcessView(view.job.views.get(op2.xref), scope);
        if (op2.emptyView) {
          recursivelyProcessView(view.job.views.get(op2.emptyView), scope);
        }
        if (op2.trackByOps !== null) {
          op2.trackByOps.prepend(generateVariablesInScopeForView(view, scope, false));
        }
        break;
      case OpKind.Listener:
      case OpKind.TwoWayListener:
        op2.handlerOps.prepend(generateVariablesInScopeForView(view, scope, true));
        break;
    }
  }
  view.update.prepend(generateVariablesInScopeForView(view, scope, false));
}
function getScopeForView(view, parent) {
  const scope = {
    view: view.xref,
    viewContextVariable: {
      kind: SemanticVariableKind.Context,
      name: null,
      view: view.xref
    },
    contextVariables: /* @__PURE__ */ new Map(),
    aliases: view.aliases,
    references: [],
    letDeclarations: [],
    parent
  };
  for (const identifier of view.contextVariables.keys()) {
    scope.contextVariables.set(identifier, {
      kind: SemanticVariableKind.Identifier,
      name: null,
      identifier,
      local: false
    });
  }
  for (const op2 of view.create) {
    switch (op2.kind) {
      case OpKind.ElementStart:
      case OpKind.Template:
        if (!Array.isArray(op2.localRefs)) {
          throw new Error(`AssertionError: expected localRefs to be an array`);
        }
        for (let offset = 0; offset < op2.localRefs.length; offset++) {
          scope.references.push({
            name: op2.localRefs[offset].name,
            targetId: op2.xref,
            targetSlot: op2.handle,
            offset,
            variable: {
              kind: SemanticVariableKind.Identifier,
              name: null,
              identifier: op2.localRefs[offset].name,
              local: false
            }
          });
        }
        break;
      case OpKind.DeclareLet:
        scope.letDeclarations.push({
          targetId: op2.xref,
          targetSlot: op2.handle,
          variable: {
            kind: SemanticVariableKind.Identifier,
            name: null,
            identifier: op2.declaredName,
            local: false
          }
        });
        break;
    }
  }
  return scope;
}
function generateVariablesInScopeForView(view, scope, isListener) {
  const newOps = [];
  if (scope.view !== view.xref) {
    newOps.push(createVariableOp(view.job.allocateXrefId(), scope.viewContextVariable, new NextContextExpr(), VariableFlags.None));
  }
  const scopeView = view.job.views.get(scope.view);
  for (const [name, value] of scopeView.contextVariables) {
    const context = new ContextExpr(scope.view);
    const variable2 = value === CTX_REF ? context : new ReadPropExpr(context, value);
    newOps.push(createVariableOp(view.job.allocateXrefId(), scope.contextVariables.get(name), variable2, VariableFlags.None));
  }
  for (const alias of scopeView.aliases) {
    newOps.push(createVariableOp(view.job.allocateXrefId(), alias, alias.expression.clone(), VariableFlags.AlwaysInline));
  }
  for (const ref of scope.references) {
    newOps.push(createVariableOp(view.job.allocateXrefId(), ref.variable, new ReferenceExpr(ref.targetId, ref.targetSlot, ref.offset), VariableFlags.None));
  }
  if (scope.view !== view.xref || isListener) {
    for (const decl of scope.letDeclarations) {
      newOps.push(createVariableOp(view.job.allocateXrefId(), decl.variable, new ContextLetReferenceExpr(decl.targetId, decl.targetSlot), VariableFlags.None));
    }
  }
  if (scope.parent !== null) {
    newOps.push(...generateVariablesInScopeForView(view, scope.parent, false));
  }
  return newOps;
}
function collectConstExpressions(job) {
  for (const unit of job.units) {
    for (const op2 of unit.ops()) {
      transformExpressionsInOp(op2, (expr) => {
        if (!(expr instanceof ConstCollectedExpr)) {
          return expr;
        }
        return literal(job.addConst(expr.expr));
      }, VisitorContextFlag.None);
    }
  }
}
var STYLE_DOT = "style.";
var CLASS_DOT = "class.";
var STYLE_BANG = "style!";
var CLASS_BANG = "class!";
var BANG_IMPORTANT = "!important";
function parseHostStyleProperties(job) {
  for (const op2 of job.root.update) {
    if (!(op2.kind === OpKind.Binding && op2.bindingKind === BindingKind.Property)) {
      continue;
    }
    if (op2.name.endsWith(BANG_IMPORTANT)) {
      op2.name = op2.name.substring(0, op2.name.length - BANG_IMPORTANT.length);
    }
    if (op2.name.startsWith(STYLE_DOT)) {
      op2.bindingKind = BindingKind.StyleProperty;
      op2.name = op2.name.substring(STYLE_DOT.length);
      if (!isCssCustomProperty(op2.name)) {
        op2.name = hyphenate$1(op2.name);
      }
      const {
        property: property2,
        suffix
      } = parseProperty(op2.name);
      op2.name = property2;
      op2.unit = suffix;
    } else if (op2.name.startsWith(STYLE_BANG)) {
      op2.bindingKind = BindingKind.StyleProperty;
      op2.name = "style";
    } else if (op2.name.startsWith(CLASS_DOT)) {
      op2.bindingKind = BindingKind.ClassName;
      op2.name = parseProperty(op2.name.substring(CLASS_DOT.length)).property;
    } else if (op2.name.startsWith(CLASS_BANG)) {
      op2.bindingKind = BindingKind.ClassName;
      op2.name = parseProperty(op2.name.substring(CLASS_BANG.length)).property;
    }
  }
}
function isCssCustomProperty(name) {
  return name.startsWith("--");
}
function hyphenate$1(value) {
  return value.replace(/[a-z][A-Z]/g, (v) => {
    return v.charAt(0) + "-" + v.charAt(1);
  }).toLowerCase();
}
function parseProperty(name) {
  const overrideIndex = name.indexOf("!important");
  if (overrideIndex !== -1) {
    name = overrideIndex > 0 ? name.substring(0, overrideIndex) : "";
  }
  let suffix = null;
  let property2 = name;
  const unitIndex = name.lastIndexOf(".");
  if (unitIndex > 0) {
    suffix = name.slice(unitIndex + 1);
    property2 = name.substring(0, unitIndex);
  }
  return {
    property: property2,
    suffix
  };
}
function mapLiteral(obj, quoted = false) {
  return literalMap(Object.keys(obj).map((key) => ({
    key,
    quoted,
    value: obj[key]
  })));
}
var IcuSerializerVisitor = class {
  visitText(text3) {
    return text3.value;
  }
  visitContainer(container) {
    return container.children.map((child) => child.visit(this)).join("");
  }
  visitIcu(icu) {
    const strCases = Object.keys(icu.cases).map((k) => `${k} {${icu.cases[k].visit(this)}}`);
    const result = `{${icu.expressionPlaceholder}, ${icu.type}, ${strCases.join(" ")}}`;
    return result;
  }
  visitTagPlaceholder(ph) {
    return ph.isVoid ? this.formatPh(ph.startName) : `${this.formatPh(ph.startName)}${ph.children.map((child) => child.visit(this)).join("")}${this.formatPh(ph.closeName)}`;
  }
  visitPlaceholder(ph) {
    return this.formatPh(ph.name);
  }
  visitBlockPlaceholder(ph) {
    return `${this.formatPh(ph.startName)}${ph.children.map((child) => child.visit(this)).join("")}${this.formatPh(ph.closeName)}`;
  }
  visitIcuPlaceholder(ph, context) {
    return this.formatPh(ph.name);
  }
  formatPh(value) {
    return `{${formatI18nPlaceholderName(
      value,
      /* useCamelCase */
      false
    )}}`;
  }
};
var serializer = new IcuSerializerVisitor();
function serializeIcuNode(icu) {
  return icu.visit(serializer);
}
var NodeWithI18n = class {
  sourceSpan;
  i18n;
  constructor(sourceSpan, i18n2) {
    this.sourceSpan = sourceSpan;
    this.i18n = i18n2;
  }
};
var Text3 = class extends NodeWithI18n {
  value;
  tokens;
  constructor(value, sourceSpan, tokens, i18n2) {
    super(sourceSpan, i18n2);
    this.value = value;
    this.tokens = tokens;
  }
  visit(visitor, context) {
    return visitor.visitText(this, context);
  }
};
var Expansion = class extends NodeWithI18n {
  switchValue;
  type;
  cases;
  switchValueSourceSpan;
  constructor(switchValue, type, cases, sourceSpan, switchValueSourceSpan, i18n2) {
    super(sourceSpan, i18n2);
    this.switchValue = switchValue;
    this.type = type;
    this.cases = cases;
    this.switchValueSourceSpan = switchValueSourceSpan;
  }
  visit(visitor, context) {
    return visitor.visitExpansion(this, context);
  }
};
var ExpansionCase = class {
  value;
  expression;
  sourceSpan;
  valueSourceSpan;
  expSourceSpan;
  constructor(value, expression, sourceSpan, valueSourceSpan, expSourceSpan) {
    this.value = value;
    this.expression = expression;
    this.sourceSpan = sourceSpan;
    this.valueSourceSpan = valueSourceSpan;
    this.expSourceSpan = expSourceSpan;
  }
  visit(visitor, context) {
    return visitor.visitExpansionCase(this, context);
  }
};
var Attribute2 = class extends NodeWithI18n {
  name;
  value;
  keySpan;
  valueSpan;
  valueTokens;
  constructor(name, value, sourceSpan, keySpan, valueSpan, valueTokens, i18n2) {
    super(sourceSpan, i18n2);
    this.name = name;
    this.value = value;
    this.keySpan = keySpan;
    this.valueSpan = valueSpan;
    this.valueTokens = valueTokens;
  }
  visit(visitor, context) {
    return visitor.visitAttribute(this, context);
  }
};
var Element2 = class extends NodeWithI18n {
  name;
  attrs;
  children;
  startSourceSpan;
  endSourceSpan;
  constructor(name, attrs, children, sourceSpan, startSourceSpan, endSourceSpan = null, i18n2) {
    super(sourceSpan, i18n2);
    this.name = name;
    this.attrs = attrs;
    this.children = children;
    this.startSourceSpan = startSourceSpan;
    this.endSourceSpan = endSourceSpan;
  }
  visit(visitor, context) {
    return visitor.visitElement(this, context);
  }
};
var Comment2 = class {
  value;
  sourceSpan;
  constructor(value, sourceSpan) {
    this.value = value;
    this.sourceSpan = sourceSpan;
  }
  visit(visitor, context) {
    return visitor.visitComment(this, context);
  }
};
var Block = class extends NodeWithI18n {
  name;
  parameters;
  children;
  nameSpan;
  startSourceSpan;
  endSourceSpan;
  constructor(name, parameters, children, sourceSpan, nameSpan, startSourceSpan, endSourceSpan = null, i18n2) {
    super(sourceSpan, i18n2);
    this.name = name;
    this.parameters = parameters;
    this.children = children;
    this.nameSpan = nameSpan;
    this.startSourceSpan = startSourceSpan;
    this.endSourceSpan = endSourceSpan;
  }
  visit(visitor, context) {
    return visitor.visitBlock(this, context);
  }
};
var BlockParameter = class {
  expression;
  sourceSpan;
  constructor(expression, sourceSpan) {
    this.expression = expression;
    this.sourceSpan = sourceSpan;
  }
  visit(visitor, context) {
    return visitor.visitBlockParameter(this, context);
  }
};
var LetDeclaration2 = class {
  name;
  value;
  sourceSpan;
  nameSpan;
  valueSpan;
  constructor(name, value, sourceSpan, nameSpan, valueSpan) {
    this.name = name;
    this.value = value;
    this.sourceSpan = sourceSpan;
    this.nameSpan = nameSpan;
    this.valueSpan = valueSpan;
  }
  visit(visitor, context) {
    return visitor.visitLetDeclaration(this, context);
  }
};
function visitAll(visitor, nodes, context = null) {
  const result = [];
  const visit = visitor.visit ? (ast) => visitor.visit(ast, context) || ast.visit(visitor, context) : (ast) => ast.visit(visitor, context);
  nodes.forEach((ast) => {
    const astResult = visit(ast);
    if (astResult) {
      result.push(astResult);
    }
  });
  return result;
}
var NAMED_ENTITIES = {
  "AElig": "\xC6",
  "AMP": "&",
  "amp": "&",
  "Aacute": "\xC1",
  "Abreve": "\u0102",
  "Acirc": "\xC2",
  "Acy": "\u0410",
  "Afr": "\u{1D504}",
  "Agrave": "\xC0",
  "Alpha": "\u0391",
  "Amacr": "\u0100",
  "And": "\u2A53",
  "Aogon": "\u0104",
  "Aopf": "\u{1D538}",
  "ApplyFunction": "\u2061",
  "af": "\u2061",
  "Aring": "\xC5",
  "angst": "\xC5",
  "Ascr": "\u{1D49C}",
  "Assign": "\u2254",
  "colone": "\u2254",
  "coloneq": "\u2254",
  "Atilde": "\xC3",
  "Auml": "\xC4",
  "Backslash": "\u2216",
  "setminus": "\u2216",
  "setmn": "\u2216",
  "smallsetminus": "\u2216",
  "ssetmn": "\u2216",
  "Barv": "\u2AE7",
  "Barwed": "\u2306",
  "doublebarwedge": "\u2306",
  "Bcy": "\u0411",
  "Because": "\u2235",
  "becaus": "\u2235",
  "because": "\u2235",
  "Bernoullis": "\u212C",
  "Bscr": "\u212C",
  "bernou": "\u212C",
  "Beta": "\u0392",
  "Bfr": "\u{1D505}",
  "Bopf": "\u{1D539}",
  "Breve": "\u02D8",
  "breve": "\u02D8",
  "Bumpeq": "\u224E",
  "HumpDownHump": "\u224E",
  "bump": "\u224E",
  "CHcy": "\u0427",
  "COPY": "\xA9",
  "copy": "\xA9",
  "Cacute": "\u0106",
  "Cap": "\u22D2",
  "CapitalDifferentialD": "\u2145",
  "DD": "\u2145",
  "Cayleys": "\u212D",
  "Cfr": "\u212D",
  "Ccaron": "\u010C",
  "Ccedil": "\xC7",
  "Ccirc": "\u0108",
  "Cconint": "\u2230",
  "Cdot": "\u010A",
  "Cedilla": "\xB8",
  "cedil": "\xB8",
  "CenterDot": "\xB7",
  "centerdot": "\xB7",
  "middot": "\xB7",
  "Chi": "\u03A7",
  "CircleDot": "\u2299",
  "odot": "\u2299",
  "CircleMinus": "\u2296",
  "ominus": "\u2296",
  "CirclePlus": "\u2295",
  "oplus": "\u2295",
  "CircleTimes": "\u2297",
  "otimes": "\u2297",
  "ClockwiseContourIntegral": "\u2232",
  "cwconint": "\u2232",
  "CloseCurlyDoubleQuote": "\u201D",
  "rdquo": "\u201D",
  "rdquor": "\u201D",
  "CloseCurlyQuote": "\u2019",
  "rsquo": "\u2019",
  "rsquor": "\u2019",
  "Colon": "\u2237",
  "Proportion": "\u2237",
  "Colone": "\u2A74",
  "Congruent": "\u2261",
  "equiv": "\u2261",
  "Conint": "\u222F",
  "DoubleContourIntegral": "\u222F",
  "ContourIntegral": "\u222E",
  "conint": "\u222E",
  "oint": "\u222E",
  "Copf": "\u2102",
  "complexes": "\u2102",
  "Coproduct": "\u2210",
  "coprod": "\u2210",
  "CounterClockwiseContourIntegral": "\u2233",
  "awconint": "\u2233",
  "Cross": "\u2A2F",
  "Cscr": "\u{1D49E}",
  "Cup": "\u22D3",
  "CupCap": "\u224D",
  "asympeq": "\u224D",
  "DDotrahd": "\u2911",
  "DJcy": "\u0402",
  "DScy": "\u0405",
  "DZcy": "\u040F",
  "Dagger": "\u2021",
  "ddagger": "\u2021",
  "Darr": "\u21A1",
  "Dashv": "\u2AE4",
  "DoubleLeftTee": "\u2AE4",
  "Dcaron": "\u010E",
  "Dcy": "\u0414",
  "Del": "\u2207",
  "nabla": "\u2207",
  "Delta": "\u0394",
  "Dfr": "\u{1D507}",
  "DiacriticalAcute": "\xB4",
  "acute": "\xB4",
  "DiacriticalDot": "\u02D9",
  "dot": "\u02D9",
  "DiacriticalDoubleAcute": "\u02DD",
  "dblac": "\u02DD",
  "DiacriticalGrave": "`",
  "grave": "`",
  "DiacriticalTilde": "\u02DC",
  "tilde": "\u02DC",
  "Diamond": "\u22C4",
  "diam": "\u22C4",
  "diamond": "\u22C4",
  "DifferentialD": "\u2146",
  "dd": "\u2146",
  "Dopf": "\u{1D53B}",
  "Dot": "\xA8",
  "DoubleDot": "\xA8",
  "die": "\xA8",
  "uml": "\xA8",
  "DotDot": "\u20DC",
  "DotEqual": "\u2250",
  "doteq": "\u2250",
  "esdot": "\u2250",
  "DoubleDownArrow": "\u21D3",
  "Downarrow": "\u21D3",
  "dArr": "\u21D3",
  "DoubleLeftArrow": "\u21D0",
  "Leftarrow": "\u21D0",
  "lArr": "\u21D0",
  "DoubleLeftRightArrow": "\u21D4",
  "Leftrightarrow": "\u21D4",
  "hArr": "\u21D4",
  "iff": "\u21D4",
  "DoubleLongLeftArrow": "\u27F8",
  "Longleftarrow": "\u27F8",
  "xlArr": "\u27F8",
  "DoubleLongLeftRightArrow": "\u27FA",
  "Longleftrightarrow": "\u27FA",
  "xhArr": "\u27FA",
  "DoubleLongRightArrow": "\u27F9",
  "Longrightarrow": "\u27F9",
  "xrArr": "\u27F9",
  "DoubleRightArrow": "\u21D2",
  "Implies": "\u21D2",
  "Rightarrow": "\u21D2",
  "rArr": "\u21D2",
  "DoubleRightTee": "\u22A8",
  "vDash": "\u22A8",
  "DoubleUpArrow": "\u21D1",
  "Uparrow": "\u21D1",
  "uArr": "\u21D1",
  "DoubleUpDownArrow": "\u21D5",
  "Updownarrow": "\u21D5",
  "vArr": "\u21D5",
  "DoubleVerticalBar": "\u2225",
  "par": "\u2225",
  "parallel": "\u2225",
  "shortparallel": "\u2225",
  "spar": "\u2225",
  "DownArrow": "\u2193",
  "ShortDownArrow": "\u2193",
  "darr": "\u2193",
  "downarrow": "\u2193",
  "DownArrowBar": "\u2913",
  "DownArrowUpArrow": "\u21F5",
  "duarr": "\u21F5",
  "DownBreve": "\u0311",
  "DownLeftRightVector": "\u2950",
  "DownLeftTeeVector": "\u295E",
  "DownLeftVector": "\u21BD",
  "leftharpoondown": "\u21BD",
  "lhard": "\u21BD",
  "DownLeftVectorBar": "\u2956",
  "DownRightTeeVector": "\u295F",
  "DownRightVector": "\u21C1",
  "rhard": "\u21C1",
  "rightharpoondown": "\u21C1",
  "DownRightVectorBar": "\u2957",
  "DownTee": "\u22A4",
  "top": "\u22A4",
  "DownTeeArrow": "\u21A7",
  "mapstodown": "\u21A7",
  "Dscr": "\u{1D49F}",
  "Dstrok": "\u0110",
  "ENG": "\u014A",
  "ETH": "\xD0",
  "Eacute": "\xC9",
  "Ecaron": "\u011A",
  "Ecirc": "\xCA",
  "Ecy": "\u042D",
  "Edot": "\u0116",
  "Efr": "\u{1D508}",
  "Egrave": "\xC8",
  "Element": "\u2208",
  "in": "\u2208",
  "isin": "\u2208",
  "isinv": "\u2208",
  "Emacr": "\u0112",
  "EmptySmallSquare": "\u25FB",
  "EmptyVerySmallSquare": "\u25AB",
  "Eogon": "\u0118",
  "Eopf": "\u{1D53C}",
  "Epsilon": "\u0395",
  "Equal": "\u2A75",
  "EqualTilde": "\u2242",
  "eqsim": "\u2242",
  "esim": "\u2242",
  "Equilibrium": "\u21CC",
  "rightleftharpoons": "\u21CC",
  "rlhar": "\u21CC",
  "Escr": "\u2130",
  "expectation": "\u2130",
  "Esim": "\u2A73",
  "Eta": "\u0397",
  "Euml": "\xCB",
  "Exists": "\u2203",
  "exist": "\u2203",
  "ExponentialE": "\u2147",
  "ee": "\u2147",
  "exponentiale": "\u2147",
  "Fcy": "\u0424",
  "Ffr": "\u{1D509}",
  "FilledSmallSquare": "\u25FC",
  "FilledVerySmallSquare": "\u25AA",
  "blacksquare": "\u25AA",
  "squarf": "\u25AA",
  "squf": "\u25AA",
  "Fopf": "\u{1D53D}",
  "ForAll": "\u2200",
  "forall": "\u2200",
  "Fouriertrf": "\u2131",
  "Fscr": "\u2131",
  "GJcy": "\u0403",
  "GT": ">",
  "gt": ">",
  "Gamma": "\u0393",
  "Gammad": "\u03DC",
  "Gbreve": "\u011E",
  "Gcedil": "\u0122",
  "Gcirc": "\u011C",
  "Gcy": "\u0413",
  "Gdot": "\u0120",
  "Gfr": "\u{1D50A}",
  "Gg": "\u22D9",
  "ggg": "\u22D9",
  "Gopf": "\u{1D53E}",
  "GreaterEqual": "\u2265",
  "ge": "\u2265",
  "geq": "\u2265",
  "GreaterEqualLess": "\u22DB",
  "gel": "\u22DB",
  "gtreqless": "\u22DB",
  "GreaterFullEqual": "\u2267",
  "gE": "\u2267",
  "geqq": "\u2267",
  "GreaterGreater": "\u2AA2",
  "GreaterLess": "\u2277",
  "gl": "\u2277",
  "gtrless": "\u2277",
  "GreaterSlantEqual": "\u2A7E",
  "geqslant": "\u2A7E",
  "ges": "\u2A7E",
  "GreaterTilde": "\u2273",
  "gsim": "\u2273",
  "gtrsim": "\u2273",
  "Gscr": "\u{1D4A2}",
  "Gt": "\u226B",
  "NestedGreaterGreater": "\u226B",
  "gg": "\u226B",
  "HARDcy": "\u042A",
  "Hacek": "\u02C7",
  "caron": "\u02C7",
  "Hat": "^",
  "Hcirc": "\u0124",
  "Hfr": "\u210C",
  "Poincareplane": "\u210C",
  "HilbertSpace": "\u210B",
  "Hscr": "\u210B",
  "hamilt": "\u210B",
  "Hopf": "\u210D",
  "quaternions": "\u210D",
  "HorizontalLine": "\u2500",
  "boxh": "\u2500",
  "Hstrok": "\u0126",
  "HumpEqual": "\u224F",
  "bumpe": "\u224F",
  "bumpeq": "\u224F",
  "IEcy": "\u0415",
  "IJlig": "\u0132",
  "IOcy": "\u0401",
  "Iacute": "\xCD",
  "Icirc": "\xCE",
  "Icy": "\u0418",
  "Idot": "\u0130",
  "Ifr": "\u2111",
  "Im": "\u2111",
  "image": "\u2111",
  "imagpart": "\u2111",
  "Igrave": "\xCC",
  "Imacr": "\u012A",
  "ImaginaryI": "\u2148",
  "ii": "\u2148",
  "Int": "\u222C",
  "Integral": "\u222B",
  "int": "\u222B",
  "Intersection": "\u22C2",
  "bigcap": "\u22C2",
  "xcap": "\u22C2",
  "InvisibleComma": "\u2063",
  "ic": "\u2063",
  "InvisibleTimes": "\u2062",
  "it": "\u2062",
  "Iogon": "\u012E",
  "Iopf": "\u{1D540}",
  "Iota": "\u0399",
  "Iscr": "\u2110",
  "imagline": "\u2110",
  "Itilde": "\u0128",
  "Iukcy": "\u0406",
  "Iuml": "\xCF",
  "Jcirc": "\u0134",
  "Jcy": "\u0419",
  "Jfr": "\u{1D50D}",
  "Jopf": "\u{1D541}",
  "Jscr": "\u{1D4A5}",
  "Jsercy": "\u0408",
  "Jukcy": "\u0404",
  "KHcy": "\u0425",
  "KJcy": "\u040C",
  "Kappa": "\u039A",
  "Kcedil": "\u0136",
  "Kcy": "\u041A",
  "Kfr": "\u{1D50E}",
  "Kopf": "\u{1D542}",
  "Kscr": "\u{1D4A6}",
  "LJcy": "\u0409",
  "LT": "<",
  "lt": "<",
  "Lacute": "\u0139",
  "Lambda": "\u039B",
  "Lang": "\u27EA",
  "Laplacetrf": "\u2112",
  "Lscr": "\u2112",
  "lagran": "\u2112",
  "Larr": "\u219E",
  "twoheadleftarrow": "\u219E",
  "Lcaron": "\u013D",
  "Lcedil": "\u013B",
  "Lcy": "\u041B",
  "LeftAngleBracket": "\u27E8",
  "lang": "\u27E8",
  "langle": "\u27E8",
  "LeftArrow": "\u2190",
  "ShortLeftArrow": "\u2190",
  "larr": "\u2190",
  "leftarrow": "\u2190",
  "slarr": "\u2190",
  "LeftArrowBar": "\u21E4",
  "larrb": "\u21E4",
  "LeftArrowRightArrow": "\u21C6",
  "leftrightarrows": "\u21C6",
  "lrarr": "\u21C6",
  "LeftCeiling": "\u2308",
  "lceil": "\u2308",
  "LeftDoubleBracket": "\u27E6",
  "lobrk": "\u27E6",
  "LeftDownTeeVector": "\u2961",
  "LeftDownVector": "\u21C3",
  "dharl": "\u21C3",
  "downharpoonleft": "\u21C3",
  "LeftDownVectorBar": "\u2959",
  "LeftFloor": "\u230A",
  "lfloor": "\u230A",
  "LeftRightArrow": "\u2194",
  "harr": "\u2194",
  "leftrightarrow": "\u2194",
  "LeftRightVector": "\u294E",
  "LeftTee": "\u22A3",
  "dashv": "\u22A3",
  "LeftTeeArrow": "\u21A4",
  "mapstoleft": "\u21A4",
  "LeftTeeVector": "\u295A",
  "LeftTriangle": "\u22B2",
  "vartriangleleft": "\u22B2",
  "vltri": "\u22B2",
  "LeftTriangleBar": "\u29CF",
  "LeftTriangleEqual": "\u22B4",
  "ltrie": "\u22B4",
  "trianglelefteq": "\u22B4",
  "LeftUpDownVector": "\u2951",
  "LeftUpTeeVector": "\u2960",
  "LeftUpVector": "\u21BF",
  "uharl": "\u21BF",
  "upharpoonleft": "\u21BF",
  "LeftUpVectorBar": "\u2958",
  "LeftVector": "\u21BC",
  "leftharpoonup": "\u21BC",
  "lharu": "\u21BC",
  "LeftVectorBar": "\u2952",
  "LessEqualGreater": "\u22DA",
  "leg": "\u22DA",
  "lesseqgtr": "\u22DA",
  "LessFullEqual": "\u2266",
  "lE": "\u2266",
  "leqq": "\u2266",
  "LessGreater": "\u2276",
  "lessgtr": "\u2276",
  "lg": "\u2276",
  "LessLess": "\u2AA1",
  "LessSlantEqual": "\u2A7D",
  "leqslant": "\u2A7D",
  "les": "\u2A7D",
  "LessTilde": "\u2272",
  "lesssim": "\u2272",
  "lsim": "\u2272",
  "Lfr": "\u{1D50F}",
  "Ll": "\u22D8",
  "Lleftarrow": "\u21DA",
  "lAarr": "\u21DA",
  "Lmidot": "\u013F",
  "LongLeftArrow": "\u27F5",
  "longleftarrow": "\u27F5",
  "xlarr": "\u27F5",
  "LongLeftRightArrow": "\u27F7",
  "longleftrightarrow": "\u27F7",
  "xharr": "\u27F7",
  "LongRightArrow": "\u27F6",
  "longrightarrow": "\u27F6",
  "xrarr": "\u27F6",
  "Lopf": "\u{1D543}",
  "LowerLeftArrow": "\u2199",
  "swarr": "\u2199",
  "swarrow": "\u2199",
  "LowerRightArrow": "\u2198",
  "searr": "\u2198",
  "searrow": "\u2198",
  "Lsh": "\u21B0",
  "lsh": "\u21B0",
  "Lstrok": "\u0141",
  "Lt": "\u226A",
  "NestedLessLess": "\u226A",
  "ll": "\u226A",
  "Map": "\u2905",
  "Mcy": "\u041C",
  "MediumSpace": "\u205F",
  "Mellintrf": "\u2133",
  "Mscr": "\u2133",
  "phmmat": "\u2133",
  "Mfr": "\u{1D510}",
  "MinusPlus": "\u2213",
  "mnplus": "\u2213",
  "mp": "\u2213",
  "Mopf": "\u{1D544}",
  "Mu": "\u039C",
  "NJcy": "\u040A",
  "Nacute": "\u0143",
  "Ncaron": "\u0147",
  "Ncedil": "\u0145",
  "Ncy": "\u041D",
  "NegativeMediumSpace": "\u200B",
  "NegativeThickSpace": "\u200B",
  "NegativeThinSpace": "\u200B",
  "NegativeVeryThinSpace": "\u200B",
  "ZeroWidthSpace": "\u200B",
  "NewLine": "\n",
  "Nfr": "\u{1D511}",
  "NoBreak": "\u2060",
  "NonBreakingSpace": "\xA0",
  "nbsp": "\xA0",
  "Nopf": "\u2115",
  "naturals": "\u2115",
  "Not": "\u2AEC",
  "NotCongruent": "\u2262",
  "nequiv": "\u2262",
  "NotCupCap": "\u226D",
  "NotDoubleVerticalBar": "\u2226",
  "npar": "\u2226",
  "nparallel": "\u2226",
  "nshortparallel": "\u2226",
  "nspar": "\u2226",
  "NotElement": "\u2209",
  "notin": "\u2209",
  "notinva": "\u2209",
  "NotEqual": "\u2260",
  "ne": "\u2260",
  "NotEqualTilde": "\u2242\u0338",
  "nesim": "\u2242\u0338",
  "NotExists": "\u2204",
  "nexist": "\u2204",
  "nexists": "\u2204",
  "NotGreater": "\u226F",
  "ngt": "\u226F",
  "ngtr": "\u226F",
  "NotGreaterEqual": "\u2271",
  "nge": "\u2271",
  "ngeq": "\u2271",
  "NotGreaterFullEqual": "\u2267\u0338",
  "ngE": "\u2267\u0338",
  "ngeqq": "\u2267\u0338",
  "NotGreaterGreater": "\u226B\u0338",
  "nGtv": "\u226B\u0338",
  "NotGreaterLess": "\u2279",
  "ntgl": "\u2279",
  "NotGreaterSlantEqual": "\u2A7E\u0338",
  "ngeqslant": "\u2A7E\u0338",
  "nges": "\u2A7E\u0338",
  "NotGreaterTilde": "\u2275",
  "ngsim": "\u2275",
  "NotHumpDownHump": "\u224E\u0338",
  "nbump": "\u224E\u0338",
  "NotHumpEqual": "\u224F\u0338",
  "nbumpe": "\u224F\u0338",
  "NotLeftTriangle": "\u22EA",
  "nltri": "\u22EA",
  "ntriangleleft": "\u22EA",
  "NotLeftTriangleBar": "\u29CF\u0338",
  "NotLeftTriangleEqual": "\u22EC",
  "nltrie": "\u22EC",
  "ntrianglelefteq": "\u22EC",
  "NotLess": "\u226E",
  "nless": "\u226E",
  "nlt": "\u226E",
  "NotLessEqual": "\u2270",
  "nle": "\u2270",
  "nleq": "\u2270",
  "NotLessGreater": "\u2278",
  "ntlg": "\u2278",
  "NotLessLess": "\u226A\u0338",
  "nLtv": "\u226A\u0338",
  "NotLessSlantEqual": "\u2A7D\u0338",
  "nleqslant": "\u2A7D\u0338",
  "nles": "\u2A7D\u0338",
  "NotLessTilde": "\u2274",
  "nlsim": "\u2274",
  "NotNestedGreaterGreater": "\u2AA2\u0338",
  "NotNestedLessLess": "\u2AA1\u0338",
  "NotPrecedes": "\u2280",
  "npr": "\u2280",
  "nprec": "\u2280",
  "NotPrecedesEqual": "\u2AAF\u0338",
  "npre": "\u2AAF\u0338",
  "npreceq": "\u2AAF\u0338",
  "NotPrecedesSlantEqual": "\u22E0",
  "nprcue": "\u22E0",
  "NotReverseElement": "\u220C",
  "notni": "\u220C",
  "notniva": "\u220C",
  "NotRightTriangle": "\u22EB",
  "nrtri": "\u22EB",
  "ntriangleright": "\u22EB",
  "NotRightTriangleBar": "\u29D0\u0338",
  "NotRightTriangleEqual": "\u22ED",
  "nrtrie": "\u22ED",
  "ntrianglerighteq": "\u22ED",
  "NotSquareSubset": "\u228F\u0338",
  "NotSquareSubsetEqual": "\u22E2",
  "nsqsube": "\u22E2",
  "NotSquareSuperset": "\u2290\u0338",
  "NotSquareSupersetEqual": "\u22E3",
  "nsqsupe": "\u22E3",
  "NotSubset": "\u2282\u20D2",
  "nsubset": "\u2282\u20D2",
  "vnsub": "\u2282\u20D2",
  "NotSubsetEqual": "\u2288",
  "nsube": "\u2288",
  "nsubseteq": "\u2288",
  "NotSucceeds": "\u2281",
  "nsc": "\u2281",
  "nsucc": "\u2281",
  "NotSucceedsEqual": "\u2AB0\u0338",
  "nsce": "\u2AB0\u0338",
  "nsucceq": "\u2AB0\u0338",
  "NotSucceedsSlantEqual": "\u22E1",
  "nsccue": "\u22E1",
  "NotSucceedsTilde": "\u227F\u0338",
  "NotSuperset": "\u2283\u20D2",
  "nsupset": "\u2283\u20D2",
  "vnsup": "\u2283\u20D2",
  "NotSupersetEqual": "\u2289",
  "nsupe": "\u2289",
  "nsupseteq": "\u2289",
  "NotTilde": "\u2241",
  "nsim": "\u2241",
  "NotTildeEqual": "\u2244",
  "nsime": "\u2244",
  "nsimeq": "\u2244",
  "NotTildeFullEqual": "\u2247",
  "ncong": "\u2247",
  "NotTildeTilde": "\u2249",
  "nap": "\u2249",
  "napprox": "\u2249",
  "NotVerticalBar": "\u2224",
  "nmid": "\u2224",
  "nshortmid": "\u2224",
  "nsmid": "\u2224",
  "Nscr": "\u{1D4A9}",
  "Ntilde": "\xD1",
  "Nu": "\u039D",
  "OElig": "\u0152",
  "Oacute": "\xD3",
  "Ocirc": "\xD4",
  "Ocy": "\u041E",
  "Odblac": "\u0150",
  "Ofr": "\u{1D512}",
  "Ograve": "\xD2",
  "Omacr": "\u014C",
  "Omega": "\u03A9",
  "ohm": "\u03A9",
  "Omicron": "\u039F",
  "Oopf": "\u{1D546}",
  "OpenCurlyDoubleQuote": "\u201C",
  "ldquo": "\u201C",
  "OpenCurlyQuote": "\u2018",
  "lsquo": "\u2018",
  "Or": "\u2A54",
  "Oscr": "\u{1D4AA}",
  "Oslash": "\xD8",
  "Otilde": "\xD5",
  "Otimes": "\u2A37",
  "Ouml": "\xD6",
  "OverBar": "\u203E",
  "oline": "\u203E",
  "OverBrace": "\u23DE",
  "OverBracket": "\u23B4",
  "tbrk": "\u23B4",
  "OverParenthesis": "\u23DC",
  "PartialD": "\u2202",
  "part": "\u2202",
  "Pcy": "\u041F",
  "Pfr": "\u{1D513}",
  "Phi": "\u03A6",
  "Pi": "\u03A0",
  "PlusMinus": "\xB1",
  "plusmn": "\xB1",
  "pm": "\xB1",
  "Popf": "\u2119",
  "primes": "\u2119",
  "Pr": "\u2ABB",
  "Precedes": "\u227A",
  "pr": "\u227A",
  "prec": "\u227A",
  "PrecedesEqual": "\u2AAF",
  "pre": "\u2AAF",
  "preceq": "\u2AAF",
  "PrecedesSlantEqual": "\u227C",
  "prcue": "\u227C",
  "preccurlyeq": "\u227C",
  "PrecedesTilde": "\u227E",
  "precsim": "\u227E",
  "prsim": "\u227E",
  "Prime": "\u2033",
  "Product": "\u220F",
  "prod": "\u220F",
  "Proportional": "\u221D",
  "prop": "\u221D",
  "propto": "\u221D",
  "varpropto": "\u221D",
  "vprop": "\u221D",
  "Pscr": "\u{1D4AB}",
  "Psi": "\u03A8",
  "QUOT": '"',
  "quot": '"',
  "Qfr": "\u{1D514}",
  "Qopf": "\u211A",
  "rationals": "\u211A",
  "Qscr": "\u{1D4AC}",
  "RBarr": "\u2910",
  "drbkarow": "\u2910",
  "REG": "\xAE",
  "circledR": "\xAE",
  "reg": "\xAE",
  "Racute": "\u0154",
  "Rang": "\u27EB",
  "Rarr": "\u21A0",
  "twoheadrightarrow": "\u21A0",
  "Rarrtl": "\u2916",
  "Rcaron": "\u0158",
  "Rcedil": "\u0156",
  "Rcy": "\u0420",
  "Re": "\u211C",
  "Rfr": "\u211C",
  "real": "\u211C",
  "realpart": "\u211C",
  "ReverseElement": "\u220B",
  "SuchThat": "\u220B",
  "ni": "\u220B",
  "niv": "\u220B",
  "ReverseEquilibrium": "\u21CB",
  "leftrightharpoons": "\u21CB",
  "lrhar": "\u21CB",
  "ReverseUpEquilibrium": "\u296F",
  "duhar": "\u296F",
  "Rho": "\u03A1",
  "RightAngleBracket": "\u27E9",
  "rang": "\u27E9",
  "rangle": "\u27E9",
  "RightArrow": "\u2192",
  "ShortRightArrow": "\u2192",
  "rarr": "\u2192",
  "rightarrow": "\u2192",
  "srarr": "\u2192",
  "RightArrowBar": "\u21E5",
  "rarrb": "\u21E5",
  "RightArrowLeftArrow": "\u21C4",
  "rightleftarrows": "\u21C4",
  "rlarr": "\u21C4",
  "RightCeiling": "\u2309",
  "rceil": "\u2309",
  "RightDoubleBracket": "\u27E7",
  "robrk": "\u27E7",
  "RightDownTeeVector": "\u295D",
  "RightDownVector": "\u21C2",
  "dharr": "\u21C2",
  "downharpoonright": "\u21C2",
  "RightDownVectorBar": "\u2955",
  "RightFloor": "\u230B",
  "rfloor": "\u230B",
  "RightTee": "\u22A2",
  "vdash": "\u22A2",
  "RightTeeArrow": "\u21A6",
  "map": "\u21A6",
  "mapsto": "\u21A6",
  "RightTeeVector": "\u295B",
  "RightTriangle": "\u22B3",
  "vartriangleright": "\u22B3",
  "vrtri": "\u22B3",
  "RightTriangleBar": "\u29D0",
  "RightTriangleEqual": "\u22B5",
  "rtrie": "\u22B5",
  "trianglerighteq": "\u22B5",
  "RightUpDownVector": "\u294F",
  "RightUpTeeVector": "\u295C",
  "RightUpVector": "\u21BE",
  "uharr": "\u21BE",
  "upharpoonright": "\u21BE",
  "RightUpVectorBar": "\u2954",
  "RightVector": "\u21C0",
  "rharu": "\u21C0",
  "rightharpoonup": "\u21C0",
  "RightVectorBar": "\u2953",
  "Ropf": "\u211D",
  "reals": "\u211D",
  "RoundImplies": "\u2970",
  "Rrightarrow": "\u21DB",
  "rAarr": "\u21DB",
  "Rscr": "\u211B",
  "realine": "\u211B",
  "Rsh": "\u21B1",
  "rsh": "\u21B1",
  "RuleDelayed": "\u29F4",
  "SHCHcy": "\u0429",
  "SHcy": "\u0428",
  "SOFTcy": "\u042C",
  "Sacute": "\u015A",
  "Sc": "\u2ABC",
  "Scaron": "\u0160",
  "Scedil": "\u015E",
  "Scirc": "\u015C",
  "Scy": "\u0421",
  "Sfr": "\u{1D516}",
  "ShortUpArrow": "\u2191",
  "UpArrow": "\u2191",
  "uarr": "\u2191",
  "uparrow": "\u2191",
  "Sigma": "\u03A3",
  "SmallCircle": "\u2218",
  "compfn": "\u2218",
  "Sopf": "\u{1D54A}",
  "Sqrt": "\u221A",
  "radic": "\u221A",
  "Square": "\u25A1",
  "squ": "\u25A1",
  "square": "\u25A1",
  "SquareIntersection": "\u2293",
  "sqcap": "\u2293",
  "SquareSubset": "\u228F",
  "sqsub": "\u228F",
  "sqsubset": "\u228F",
  "SquareSubsetEqual": "\u2291",
  "sqsube": "\u2291",
  "sqsubseteq": "\u2291",
  "SquareSuperset": "\u2290",
  "sqsup": "\u2290",
  "sqsupset": "\u2290",
  "SquareSupersetEqual": "\u2292",
  "sqsupe": "\u2292",
  "sqsupseteq": "\u2292",
  "SquareUnion": "\u2294",
  "sqcup": "\u2294",
  "Sscr": "\u{1D4AE}",
  "Star": "\u22C6",
  "sstarf": "\u22C6",
  "Sub": "\u22D0",
  "Subset": "\u22D0",
  "SubsetEqual": "\u2286",
  "sube": "\u2286",
  "subseteq": "\u2286",
  "Succeeds": "\u227B",
  "sc": "\u227B",
  "succ": "\u227B",
  "SucceedsEqual": "\u2AB0",
  "sce": "\u2AB0",
  "succeq": "\u2AB0",
  "SucceedsSlantEqual": "\u227D",
  "sccue": "\u227D",
  "succcurlyeq": "\u227D",
  "SucceedsTilde": "\u227F",
  "scsim": "\u227F",
  "succsim": "\u227F",
  "Sum": "\u2211",
  "sum": "\u2211",
  "Sup": "\u22D1",
  "Supset": "\u22D1",
  "Superset": "\u2283",
  "sup": "\u2283",
  "supset": "\u2283",
  "SupersetEqual": "\u2287",
  "supe": "\u2287",
  "supseteq": "\u2287",
  "THORN": "\xDE",
  "TRADE": "\u2122",
  "trade": "\u2122",
  "TSHcy": "\u040B",
  "TScy": "\u0426",
  "Tab": "	",
  "Tau": "\u03A4",
  "Tcaron": "\u0164",
  "Tcedil": "\u0162",
  "Tcy": "\u0422",
  "Tfr": "\u{1D517}",
  "Therefore": "\u2234",
  "there4": "\u2234",
  "therefore": "\u2234",
  "Theta": "\u0398",
  "ThickSpace": "\u205F\u200A",
  "ThinSpace": "\u2009",
  "thinsp": "\u2009",
  "Tilde": "\u223C",
  "sim": "\u223C",
  "thicksim": "\u223C",
  "thksim": "\u223C",
  "TildeEqual": "\u2243",
  "sime": "\u2243",
  "simeq": "\u2243",
  "TildeFullEqual": "\u2245",
  "cong": "\u2245",
  "TildeTilde": "\u2248",
  "ap": "\u2248",
  "approx": "\u2248",
  "asymp": "\u2248",
  "thickapprox": "\u2248",
  "thkap": "\u2248",
  "Topf": "\u{1D54B}",
  "TripleDot": "\u20DB",
  "tdot": "\u20DB",
  "Tscr": "\u{1D4AF}",
  "Tstrok": "\u0166",
  "Uacute": "\xDA",
  "Uarr": "\u219F",
  "Uarrocir": "\u2949",
  "Ubrcy": "\u040E",
  "Ubreve": "\u016C",
  "Ucirc": "\xDB",
  "Ucy": "\u0423",
  "Udblac": "\u0170",
  "Ufr": "\u{1D518}",
  "Ugrave": "\xD9",
  "Umacr": "\u016A",
  "UnderBar": "_",
  "lowbar": "_",
  "UnderBrace": "\u23DF",
  "UnderBracket": "\u23B5",
  "bbrk": "\u23B5",
  "UnderParenthesis": "\u23DD",
  "Union": "\u22C3",
  "bigcup": "\u22C3",
  "xcup": "\u22C3",
  "UnionPlus": "\u228E",
  "uplus": "\u228E",
  "Uogon": "\u0172",
  "Uopf": "\u{1D54C}",
  "UpArrowBar": "\u2912",
  "UpArrowDownArrow": "\u21C5",
  "udarr": "\u21C5",
  "UpDownArrow": "\u2195",
  "updownarrow": "\u2195",
  "varr": "\u2195",
  "UpEquilibrium": "\u296E",
  "udhar": "\u296E",
  "UpTee": "\u22A5",
  "bot": "\u22A5",
  "bottom": "\u22A5",
  "perp": "\u22A5",
  "UpTeeArrow": "\u21A5",
  "mapstoup": "\u21A5",
  "UpperLeftArrow": "\u2196",
  "nwarr": "\u2196",
  "nwarrow": "\u2196",
  "UpperRightArrow": "\u2197",
  "nearr": "\u2197",
  "nearrow": "\u2197",
  "Upsi": "\u03D2",
  "upsih": "\u03D2",
  "Upsilon": "\u03A5",
  "Uring": "\u016E",
  "Uscr": "\u{1D4B0}",
  "Utilde": "\u0168",
  "Uuml": "\xDC",
  "VDash": "\u22AB",
  "Vbar": "\u2AEB",
  "Vcy": "\u0412",
  "Vdash": "\u22A9",
  "Vdashl": "\u2AE6",
  "Vee": "\u22C1",
  "bigvee": "\u22C1",
  "xvee": "\u22C1",
  "Verbar": "\u2016",
  "Vert": "\u2016",
  "VerticalBar": "\u2223",
  "mid": "\u2223",
  "shortmid": "\u2223",
  "smid": "\u2223",
  "VerticalLine": "|",
  "verbar": "|",
  "vert": "|",
  "VerticalSeparator": "\u2758",
  "VerticalTilde": "\u2240",
  "wr": "\u2240",
  "wreath": "\u2240",
  "VeryThinSpace": "\u200A",
  "hairsp": "\u200A",
  "Vfr": "\u{1D519}",
  "Vopf": "\u{1D54D}",
  "Vscr": "\u{1D4B1}",
  "Vvdash": "\u22AA",
  "Wcirc": "\u0174",
  "Wedge": "\u22C0",
  "bigwedge": "\u22C0",
  "xwedge": "\u22C0",
  "Wfr": "\u{1D51A}",
  "Wopf": "\u{1D54E}",
  "Wscr": "\u{1D4B2}",
  "Xfr": "\u{1D51B}",
  "Xi": "\u039E",
  "Xopf": "\u{1D54F}",
  "Xscr": "\u{1D4B3}",
  "YAcy": "\u042F",
  "YIcy": "\u0407",
  "YUcy": "\u042E",
  "Yacute": "\xDD",
  "Ycirc": "\u0176",
  "Ycy": "\u042B",
  "Yfr": "\u{1D51C}",
  "Yopf": "\u{1D550}",
  "Yscr": "\u{1D4B4}",
  "Yuml": "\u0178",
  "ZHcy": "\u0416",
  "Zacute": "\u0179",
  "Zcaron": "\u017D",
  "Zcy": "\u0417",
  "Zdot": "\u017B",
  "Zeta": "\u0396",
  "Zfr": "\u2128",
  "zeetrf": "\u2128",
  "Zopf": "\u2124",
  "integers": "\u2124",
  "Zscr": "\u{1D4B5}",
  "aacute": "\xE1",
  "abreve": "\u0103",
  "ac": "\u223E",
  "mstpos": "\u223E",
  "acE": "\u223E\u0333",
  "acd": "\u223F",
  "acirc": "\xE2",
  "acy": "\u0430",
  "aelig": "\xE6",
  "afr": "\u{1D51E}",
  "agrave": "\xE0",
  "alefsym": "\u2135",
  "aleph": "\u2135",
  "alpha": "\u03B1",
  "amacr": "\u0101",
  "amalg": "\u2A3F",
  "and": "\u2227",
  "wedge": "\u2227",
  "andand": "\u2A55",
  "andd": "\u2A5C",
  "andslope": "\u2A58",
  "andv": "\u2A5A",
  "ang": "\u2220",
  "angle": "\u2220",
  "ange": "\u29A4",
  "angmsd": "\u2221",
  "measuredangle": "\u2221",
  "angmsdaa": "\u29A8",
  "angmsdab": "\u29A9",
  "angmsdac": "\u29AA",
  "angmsdad": "\u29AB",
  "angmsdae": "\u29AC",
  "angmsdaf": "\u29AD",
  "angmsdag": "\u29AE",
  "angmsdah": "\u29AF",
  "angrt": "\u221F",
  "angrtvb": "\u22BE",
  "angrtvbd": "\u299D",
  "angsph": "\u2222",
  "angzarr": "\u237C",
  "aogon": "\u0105",
  "aopf": "\u{1D552}",
  "apE": "\u2A70",
  "apacir": "\u2A6F",
  "ape": "\u224A",
  "approxeq": "\u224A",
  "apid": "\u224B",
  "apos": "'",
  "aring": "\xE5",
  "ascr": "\u{1D4B6}",
  "ast": "*",
  "midast": "*",
  "atilde": "\xE3",
  "auml": "\xE4",
  "awint": "\u2A11",
  "bNot": "\u2AED",
  "backcong": "\u224C",
  "bcong": "\u224C",
  "backepsilon": "\u03F6",
  "bepsi": "\u03F6",
  "backprime": "\u2035",
  "bprime": "\u2035",
  "backsim": "\u223D",
  "bsim": "\u223D",
  "backsimeq": "\u22CD",
  "bsime": "\u22CD",
  "barvee": "\u22BD",
  "barwed": "\u2305",
  "barwedge": "\u2305",
  "bbrktbrk": "\u23B6",
  "bcy": "\u0431",
  "bdquo": "\u201E",
  "ldquor": "\u201E",
  "bemptyv": "\u29B0",
  "beta": "\u03B2",
  "beth": "\u2136",
  "between": "\u226C",
  "twixt": "\u226C",
  "bfr": "\u{1D51F}",
  "bigcirc": "\u25EF",
  "xcirc": "\u25EF",
  "bigodot": "\u2A00",
  "xodot": "\u2A00",
  "bigoplus": "\u2A01",
  "xoplus": "\u2A01",
  "bigotimes": "\u2A02",
  "xotime": "\u2A02",
  "bigsqcup": "\u2A06",
  "xsqcup": "\u2A06",
  "bigstar": "\u2605",
  "starf": "\u2605",
  "bigtriangledown": "\u25BD",
  "xdtri": "\u25BD",
  "bigtriangleup": "\u25B3",
  "xutri": "\u25B3",
  "biguplus": "\u2A04",
  "xuplus": "\u2A04",
  "bkarow": "\u290D",
  "rbarr": "\u290D",
  "blacklozenge": "\u29EB",
  "lozf": "\u29EB",
  "blacktriangle": "\u25B4",
  "utrif": "\u25B4",
  "blacktriangledown": "\u25BE",
  "dtrif": "\u25BE",
  "blacktriangleleft": "\u25C2",
  "ltrif": "\u25C2",
  "blacktriangleright": "\u25B8",
  "rtrif": "\u25B8",
  "blank": "\u2423",
  "blk12": "\u2592",
  "blk14": "\u2591",
  "blk34": "\u2593",
  "block": "\u2588",
  "bne": "=\u20E5",
  "bnequiv": "\u2261\u20E5",
  "bnot": "\u2310",
  "bopf": "\u{1D553}",
  "bowtie": "\u22C8",
  "boxDL": "\u2557",
  "boxDR": "\u2554",
  "boxDl": "\u2556",
  "boxDr": "\u2553",
  "boxH": "\u2550",
  "boxHD": "\u2566",
  "boxHU": "\u2569",
  "boxHd": "\u2564",
  "boxHu": "\u2567",
  "boxUL": "\u255D",
  "boxUR": "\u255A",
  "boxUl": "\u255C",
  "boxUr": "\u2559",
  "boxV": "\u2551",
  "boxVH": "\u256C",
  "boxVL": "\u2563",
  "boxVR": "\u2560",
  "boxVh": "\u256B",
  "boxVl": "\u2562",
  "boxVr": "\u255F",
  "boxbox": "\u29C9",
  "boxdL": "\u2555",
  "boxdR": "\u2552",
  "boxdl": "\u2510",
  "boxdr": "\u250C",
  "boxhD": "\u2565",
  "boxhU": "\u2568",
  "boxhd": "\u252C",
  "boxhu": "\u2534",
  "boxminus": "\u229F",
  "minusb": "\u229F",
  "boxplus": "\u229E",
  "plusb": "\u229E",
  "boxtimes": "\u22A0",
  "timesb": "\u22A0",
  "boxuL": "\u255B",
  "boxuR": "\u2558",
  "boxul": "\u2518",
  "boxur": "\u2514",
  "boxv": "\u2502",
  "boxvH": "\u256A",
  "boxvL": "\u2561",
  "boxvR": "\u255E",
  "boxvh": "\u253C",
  "boxvl": "\u2524",
  "boxvr": "\u251C",
  "brvbar": "\xA6",
  "bscr": "\u{1D4B7}",
  "bsemi": "\u204F",
  "bsol": "\\",
  "bsolb": "\u29C5",
  "bsolhsub": "\u27C8",
  "bull": "\u2022",
  "bullet": "\u2022",
  "bumpE": "\u2AAE",
  "cacute": "\u0107",
  "cap": "\u2229",
  "capand": "\u2A44",
  "capbrcup": "\u2A49",
  "capcap": "\u2A4B",
  "capcup": "\u2A47",
  "capdot": "\u2A40",
  "caps": "\u2229\uFE00",
  "caret": "\u2041",
  "ccaps": "\u2A4D",
  "ccaron": "\u010D",
  "ccedil": "\xE7",
  "ccirc": "\u0109",
  "ccups": "\u2A4C",
  "ccupssm": "\u2A50",
  "cdot": "\u010B",
  "cemptyv": "\u29B2",
  "cent": "\xA2",
  "cfr": "\u{1D520}",
  "chcy": "\u0447",
  "check": "\u2713",
  "checkmark": "\u2713",
  "chi": "\u03C7",
  "cir": "\u25CB",
  "cirE": "\u29C3",
  "circ": "\u02C6",
  "circeq": "\u2257",
  "cire": "\u2257",
  "circlearrowleft": "\u21BA",
  "olarr": "\u21BA",
  "circlearrowright": "\u21BB",
  "orarr": "\u21BB",
  "circledS": "\u24C8",
  "oS": "\u24C8",
  "circledast": "\u229B",
  "oast": "\u229B",
  "circledcirc": "\u229A",
  "ocir": "\u229A",
  "circleddash": "\u229D",
  "odash": "\u229D",
  "cirfnint": "\u2A10",
  "cirmid": "\u2AEF",
  "cirscir": "\u29C2",
  "clubs": "\u2663",
  "clubsuit": "\u2663",
  "colon": ":",
  "comma": ",",
  "commat": "@",
  "comp": "\u2201",
  "complement": "\u2201",
  "congdot": "\u2A6D",
  "copf": "\u{1D554}",
  "copysr": "\u2117",
  "crarr": "\u21B5",
  "cross": "\u2717",
  "cscr": "\u{1D4B8}",
  "csub": "\u2ACF",
  "csube": "\u2AD1",
  "csup": "\u2AD0",
  "csupe": "\u2AD2",
  "ctdot": "\u22EF",
  "cudarrl": "\u2938",
  "cudarrr": "\u2935",
  "cuepr": "\u22DE",
  "curlyeqprec": "\u22DE",
  "cuesc": "\u22DF",
  "curlyeqsucc": "\u22DF",
  "cularr": "\u21B6",
  "curvearrowleft": "\u21B6",
  "cularrp": "\u293D",
  "cup": "\u222A",
  "cupbrcap": "\u2A48",
  "cupcap": "\u2A46",
  "cupcup": "\u2A4A",
  "cupdot": "\u228D",
  "cupor": "\u2A45",
  "cups": "\u222A\uFE00",
  "curarr": "\u21B7",
  "curvearrowright": "\u21B7",
  "curarrm": "\u293C",
  "curlyvee": "\u22CE",
  "cuvee": "\u22CE",
  "curlywedge": "\u22CF",
  "cuwed": "\u22CF",
  "curren": "\xA4",
  "cwint": "\u2231",
  "cylcty": "\u232D",
  "dHar": "\u2965",
  "dagger": "\u2020",
  "daleth": "\u2138",
  "dash": "\u2010",
  "hyphen": "\u2010",
  "dbkarow": "\u290F",
  "rBarr": "\u290F",
  "dcaron": "\u010F",
  "dcy": "\u0434",
  "ddarr": "\u21CA",
  "downdownarrows": "\u21CA",
  "ddotseq": "\u2A77",
  "eDDot": "\u2A77",
  "deg": "\xB0",
  "delta": "\u03B4",
  "demptyv": "\u29B1",
  "dfisht": "\u297F",
  "dfr": "\u{1D521}",
  "diamondsuit": "\u2666",
  "diams": "\u2666",
  "digamma": "\u03DD",
  "gammad": "\u03DD",
  "disin": "\u22F2",
  "div": "\xF7",
  "divide": "\xF7",
  "divideontimes": "\u22C7",
  "divonx": "\u22C7",
  "djcy": "\u0452",
  "dlcorn": "\u231E",
  "llcorner": "\u231E",
  "dlcrop": "\u230D",
  "dollar": "$",
  "dopf": "\u{1D555}",
  "doteqdot": "\u2251",
  "eDot": "\u2251",
  "dotminus": "\u2238",
  "minusd": "\u2238",
  "dotplus": "\u2214",
  "plusdo": "\u2214",
  "dotsquare": "\u22A1",
  "sdotb": "\u22A1",
  "drcorn": "\u231F",
  "lrcorner": "\u231F",
  "drcrop": "\u230C",
  "dscr": "\u{1D4B9}",
  "dscy": "\u0455",
  "dsol": "\u29F6",
  "dstrok": "\u0111",
  "dtdot": "\u22F1",
  "dtri": "\u25BF",
  "triangledown": "\u25BF",
  "dwangle": "\u29A6",
  "dzcy": "\u045F",
  "dzigrarr": "\u27FF",
  "eacute": "\xE9",
  "easter": "\u2A6E",
  "ecaron": "\u011B",
  "ecir": "\u2256",
  "eqcirc": "\u2256",
  "ecirc": "\xEA",
  "ecolon": "\u2255",
  "eqcolon": "\u2255",
  "ecy": "\u044D",
  "edot": "\u0117",
  "efDot": "\u2252",
  "fallingdotseq": "\u2252",
  "efr": "\u{1D522}",
  "eg": "\u2A9A",
  "egrave": "\xE8",
  "egs": "\u2A96",
  "eqslantgtr": "\u2A96",
  "egsdot": "\u2A98",
  "el": "\u2A99",
  "elinters": "\u23E7",
  "ell": "\u2113",
  "els": "\u2A95",
  "eqslantless": "\u2A95",
  "elsdot": "\u2A97",
  "emacr": "\u0113",
  "empty": "\u2205",
  "emptyset": "\u2205",
  "emptyv": "\u2205",
  "varnothing": "\u2205",
  "emsp13": "\u2004",
  "emsp14": "\u2005",
  "emsp": "\u2003",
  "eng": "\u014B",
  "ensp": "\u2002",
  "eogon": "\u0119",
  "eopf": "\u{1D556}",
  "epar": "\u22D5",
  "eparsl": "\u29E3",
  "eplus": "\u2A71",
  "epsi": "\u03B5",
  "epsilon": "\u03B5",
  "epsiv": "\u03F5",
  "straightepsilon": "\u03F5",
  "varepsilon": "\u03F5",
  "equals": "=",
  "equest": "\u225F",
  "questeq": "\u225F",
  "equivDD": "\u2A78",
  "eqvparsl": "\u29E5",
  "erDot": "\u2253",
  "risingdotseq": "\u2253",
  "erarr": "\u2971",
  "escr": "\u212F",
  "eta": "\u03B7",
  "eth": "\xF0",
  "euml": "\xEB",
  "euro": "\u20AC",
  "excl": "!",
  "fcy": "\u0444",
  "female": "\u2640",
  "ffilig": "\uFB03",
  "fflig": "\uFB00",
  "ffllig": "\uFB04",
  "ffr": "\u{1D523}",
  "filig": "\uFB01",
  "fjlig": "fj",
  "flat": "\u266D",
  "fllig": "\uFB02",
  "fltns": "\u25B1",
  "fnof": "\u0192",
  "fopf": "\u{1D557}",
  "fork": "\u22D4",
  "pitchfork": "\u22D4",
  "forkv": "\u2AD9",
  "fpartint": "\u2A0D",
  "frac12": "\xBD",
  "half": "\xBD",
  "frac13": "\u2153",
  "frac14": "\xBC",
  "frac15": "\u2155",
  "frac16": "\u2159",
  "frac18": "\u215B",
  "frac23": "\u2154",
  "frac25": "\u2156",
  "frac34": "\xBE",
  "frac35": "\u2157",
  "frac38": "\u215C",
  "frac45": "\u2158",
  "frac56": "\u215A",
  "frac58": "\u215D",
  "frac78": "\u215E",
  "frasl": "\u2044",
  "frown": "\u2322",
  "sfrown": "\u2322",
  "fscr": "\u{1D4BB}",
  "gEl": "\u2A8C",
  "gtreqqless": "\u2A8C",
  "gacute": "\u01F5",
  "gamma": "\u03B3",
  "gap": "\u2A86",
  "gtrapprox": "\u2A86",
  "gbreve": "\u011F",
  "gcirc": "\u011D",
  "gcy": "\u0433",
  "gdot": "\u0121",
  "gescc": "\u2AA9",
  "gesdot": "\u2A80",
  "gesdoto": "\u2A82",
  "gesdotol": "\u2A84",
  "gesl": "\u22DB\uFE00",
  "gesles": "\u2A94",
  "gfr": "\u{1D524}",
  "gimel": "\u2137",
  "gjcy": "\u0453",
  "glE": "\u2A92",
  "gla": "\u2AA5",
  "glj": "\u2AA4",
  "gnE": "\u2269",
  "gneqq": "\u2269",
  "gnap": "\u2A8A",
  "gnapprox": "\u2A8A",
  "gne": "\u2A88",
  "gneq": "\u2A88",
  "gnsim": "\u22E7",
  "gopf": "\u{1D558}",
  "gscr": "\u210A",
  "gsime": "\u2A8E",
  "gsiml": "\u2A90",
  "gtcc": "\u2AA7",
  "gtcir": "\u2A7A",
  "gtdot": "\u22D7",
  "gtrdot": "\u22D7",
  "gtlPar": "\u2995",
  "gtquest": "\u2A7C",
  "gtrarr": "\u2978",
  "gvertneqq": "\u2269\uFE00",
  "gvnE": "\u2269\uFE00",
  "hardcy": "\u044A",
  "harrcir": "\u2948",
  "harrw": "\u21AD",
  "leftrightsquigarrow": "\u21AD",
  "hbar": "\u210F",
  "hslash": "\u210F",
  "planck": "\u210F",
  "plankv": "\u210F",
  "hcirc": "\u0125",
  "hearts": "\u2665",
  "heartsuit": "\u2665",
  "hellip": "\u2026",
  "mldr": "\u2026",
  "hercon": "\u22B9",
  "hfr": "\u{1D525}",
  "hksearow": "\u2925",
  "searhk": "\u2925",
  "hkswarow": "\u2926",
  "swarhk": "\u2926",
  "hoarr": "\u21FF",
  "homtht": "\u223B",
  "hookleftarrow": "\u21A9",
  "larrhk": "\u21A9",
  "hookrightarrow": "\u21AA",
  "rarrhk": "\u21AA",
  "hopf": "\u{1D559}",
  "horbar": "\u2015",
  "hscr": "\u{1D4BD}",
  "hstrok": "\u0127",
  "hybull": "\u2043",
  "iacute": "\xED",
  "icirc": "\xEE",
  "icy": "\u0438",
  "iecy": "\u0435",
  "iexcl": "\xA1",
  "ifr": "\u{1D526}",
  "igrave": "\xEC",
  "iiiint": "\u2A0C",
  "qint": "\u2A0C",
  "iiint": "\u222D",
  "tint": "\u222D",
  "iinfin": "\u29DC",
  "iiota": "\u2129",
  "ijlig": "\u0133",
  "imacr": "\u012B",
  "imath": "\u0131",
  "inodot": "\u0131",
  "imof": "\u22B7",
  "imped": "\u01B5",
  "incare": "\u2105",
  "infin": "\u221E",
  "infintie": "\u29DD",
  "intcal": "\u22BA",
  "intercal": "\u22BA",
  "intlarhk": "\u2A17",
  "intprod": "\u2A3C",
  "iprod": "\u2A3C",
  "iocy": "\u0451",
  "iogon": "\u012F",
  "iopf": "\u{1D55A}",
  "iota": "\u03B9",
  "iquest": "\xBF",
  "iscr": "\u{1D4BE}",
  "isinE": "\u22F9",
  "isindot": "\u22F5",
  "isins": "\u22F4",
  "isinsv": "\u22F3",
  "itilde": "\u0129",
  "iukcy": "\u0456",
  "iuml": "\xEF",
  "jcirc": "\u0135",
  "jcy": "\u0439",
  "jfr": "\u{1D527}",
  "jmath": "\u0237",
  "jopf": "\u{1D55B}",
  "jscr": "\u{1D4BF}",
  "jsercy": "\u0458",
  "jukcy": "\u0454",
  "kappa": "\u03BA",
  "kappav": "\u03F0",
  "varkappa": "\u03F0",
  "kcedil": "\u0137",
  "kcy": "\u043A",
  "kfr": "\u{1D528}",
  "kgreen": "\u0138",
  "khcy": "\u0445",
  "kjcy": "\u045C",
  "kopf": "\u{1D55C}",
  "kscr": "\u{1D4C0}",
  "lAtail": "\u291B",
  "lBarr": "\u290E",
  "lEg": "\u2A8B",
  "lesseqqgtr": "\u2A8B",
  "lHar": "\u2962",
  "lacute": "\u013A",
  "laemptyv": "\u29B4",
  "lambda": "\u03BB",
  "langd": "\u2991",
  "lap": "\u2A85",
  "lessapprox": "\u2A85",
  "laquo": "\xAB",
  "larrbfs": "\u291F",
  "larrfs": "\u291D",
  "larrlp": "\u21AB",
  "looparrowleft": "\u21AB",
  "larrpl": "\u2939",
  "larrsim": "\u2973",
  "larrtl": "\u21A2",
  "leftarrowtail": "\u21A2",
  "lat": "\u2AAB",
  "latail": "\u2919",
  "late": "\u2AAD",
  "lates": "\u2AAD\uFE00",
  "lbarr": "\u290C",
  "lbbrk": "\u2772",
  "lbrace": "{",
  "lcub": "{",
  "lbrack": "[",
  "lsqb": "[",
  "lbrke": "\u298B",
  "lbrksld": "\u298F",
  "lbrkslu": "\u298D",
  "lcaron": "\u013E",
  "lcedil": "\u013C",
  "lcy": "\u043B",
  "ldca": "\u2936",
  "ldrdhar": "\u2967",
  "ldrushar": "\u294B",
  "ldsh": "\u21B2",
  "le": "\u2264",
  "leq": "\u2264",
  "leftleftarrows": "\u21C7",
  "llarr": "\u21C7",
  "leftthreetimes": "\u22CB",
  "lthree": "\u22CB",
  "lescc": "\u2AA8",
  "lesdot": "\u2A7F",
  "lesdoto": "\u2A81",
  "lesdotor": "\u2A83",
  "lesg": "\u22DA\uFE00",
  "lesges": "\u2A93",
  "lessdot": "\u22D6",
  "ltdot": "\u22D6",
  "lfisht": "\u297C",
  "lfr": "\u{1D529}",
  "lgE": "\u2A91",
  "lharul": "\u296A",
  "lhblk": "\u2584",
  "ljcy": "\u0459",
  "llhard": "\u296B",
  "lltri": "\u25FA",
  "lmidot": "\u0140",
  "lmoust": "\u23B0",
  "lmoustache": "\u23B0",
  "lnE": "\u2268",
  "lneqq": "\u2268",
  "lnap": "\u2A89",
  "lnapprox": "\u2A89",
  "lne": "\u2A87",
  "lneq": "\u2A87",
  "lnsim": "\u22E6",
  "loang": "\u27EC",
  "loarr": "\u21FD",
  "longmapsto": "\u27FC",
  "xmap": "\u27FC",
  "looparrowright": "\u21AC",
  "rarrlp": "\u21AC",
  "lopar": "\u2985",
  "lopf": "\u{1D55D}",
  "loplus": "\u2A2D",
  "lotimes": "\u2A34",
  "lowast": "\u2217",
  "loz": "\u25CA",
  "lozenge": "\u25CA",
  "lpar": "(",
  "lparlt": "\u2993",
  "lrhard": "\u296D",
  "lrm": "\u200E",
  "lrtri": "\u22BF",
  "lsaquo": "\u2039",
  "lscr": "\u{1D4C1}",
  "lsime": "\u2A8D",
  "lsimg": "\u2A8F",
  "lsquor": "\u201A",
  "sbquo": "\u201A",
  "lstrok": "\u0142",
  "ltcc": "\u2AA6",
  "ltcir": "\u2A79",
  "ltimes": "\u22C9",
  "ltlarr": "\u2976",
  "ltquest": "\u2A7B",
  "ltrPar": "\u2996",
  "ltri": "\u25C3",
  "triangleleft": "\u25C3",
  "lurdshar": "\u294A",
  "luruhar": "\u2966",
  "lvertneqq": "\u2268\uFE00",
  "lvnE": "\u2268\uFE00",
  "mDDot": "\u223A",
  "macr": "\xAF",
  "strns": "\xAF",
  "male": "\u2642",
  "malt": "\u2720",
  "maltese": "\u2720",
  "marker": "\u25AE",
  "mcomma": "\u2A29",
  "mcy": "\u043C",
  "mdash": "\u2014",
  "mfr": "\u{1D52A}",
  "mho": "\u2127",
  "micro": "\xB5",
  "midcir": "\u2AF0",
  "minus": "\u2212",
  "minusdu": "\u2A2A",
  "mlcp": "\u2ADB",
  "models": "\u22A7",
  "mopf": "\u{1D55E}",
  "mscr": "\u{1D4C2}",
  "mu": "\u03BC",
  "multimap": "\u22B8",
  "mumap": "\u22B8",
  "nGg": "\u22D9\u0338",
  "nGt": "\u226B\u20D2",
  "nLeftarrow": "\u21CD",
  "nlArr": "\u21CD",
  "nLeftrightarrow": "\u21CE",
  "nhArr": "\u21CE",
  "nLl": "\u22D8\u0338",
  "nLt": "\u226A\u20D2",
  "nRightarrow": "\u21CF",
  "nrArr": "\u21CF",
  "nVDash": "\u22AF",
  "nVdash": "\u22AE",
  "nacute": "\u0144",
  "nang": "\u2220\u20D2",
  "napE": "\u2A70\u0338",
  "napid": "\u224B\u0338",
  "napos": "\u0149",
  "natur": "\u266E",
  "natural": "\u266E",
  "ncap": "\u2A43",
  "ncaron": "\u0148",
  "ncedil": "\u0146",
  "ncongdot": "\u2A6D\u0338",
  "ncup": "\u2A42",
  "ncy": "\u043D",
  "ndash": "\u2013",
  "neArr": "\u21D7",
  "nearhk": "\u2924",
  "nedot": "\u2250\u0338",
  "nesear": "\u2928",
  "toea": "\u2928",
  "nfr": "\u{1D52B}",
  "nharr": "\u21AE",
  "nleftrightarrow": "\u21AE",
  "nhpar": "\u2AF2",
  "nis": "\u22FC",
  "nisd": "\u22FA",
  "njcy": "\u045A",
  "nlE": "\u2266\u0338",
  "nleqq": "\u2266\u0338",
  "nlarr": "\u219A",
  "nleftarrow": "\u219A",
  "nldr": "\u2025",
  "nopf": "\u{1D55F}",
  "not": "\xAC",
  "notinE": "\u22F9\u0338",
  "notindot": "\u22F5\u0338",
  "notinvb": "\u22F7",
  "notinvc": "\u22F6",
  "notnivb": "\u22FE",
  "notnivc": "\u22FD",
  "nparsl": "\u2AFD\u20E5",
  "npart": "\u2202\u0338",
  "npolint": "\u2A14",
  "nrarr": "\u219B",
  "nrightarrow": "\u219B",
  "nrarrc": "\u2933\u0338",
  "nrarrw": "\u219D\u0338",
  "nscr": "\u{1D4C3}",
  "nsub": "\u2284",
  "nsubE": "\u2AC5\u0338",
  "nsubseteqq": "\u2AC5\u0338",
  "nsup": "\u2285",
  "nsupE": "\u2AC6\u0338",
  "nsupseteqq": "\u2AC6\u0338",
  "ntilde": "\xF1",
  "nu": "\u03BD",
  "num": "#",
  "numero": "\u2116",
  "numsp": "\u2007",
  "nvDash": "\u22AD",
  "nvHarr": "\u2904",
  "nvap": "\u224D\u20D2",
  "nvdash": "\u22AC",
  "nvge": "\u2265\u20D2",
  "nvgt": ">\u20D2",
  "nvinfin": "\u29DE",
  "nvlArr": "\u2902",
  "nvle": "\u2264\u20D2",
  "nvlt": "<\u20D2",
  "nvltrie": "\u22B4\u20D2",
  "nvrArr": "\u2903",
  "nvrtrie": "\u22B5\u20D2",
  "nvsim": "\u223C\u20D2",
  "nwArr": "\u21D6",
  "nwarhk": "\u2923",
  "nwnear": "\u2927",
  "oacute": "\xF3",
  "ocirc": "\xF4",
  "ocy": "\u043E",
  "odblac": "\u0151",
  "odiv": "\u2A38",
  "odsold": "\u29BC",
  "oelig": "\u0153",
  "ofcir": "\u29BF",
  "ofr": "\u{1D52C}",
  "ogon": "\u02DB",
  "ograve": "\xF2",
  "ogt": "\u29C1",
  "ohbar": "\u29B5",
  "olcir": "\u29BE",
  "olcross": "\u29BB",
  "olt": "\u29C0",
  "omacr": "\u014D",
  "omega": "\u03C9",
  "omicron": "\u03BF",
  "omid": "\u29B6",
  "oopf": "\u{1D560}",
  "opar": "\u29B7",
  "operp": "\u29B9",
  "or": "\u2228",
  "vee": "\u2228",
  "ord": "\u2A5D",
  "order": "\u2134",
  "orderof": "\u2134",
  "oscr": "\u2134",
  "ordf": "\xAA",
  "ordm": "\xBA",
  "origof": "\u22B6",
  "oror": "\u2A56",
  "orslope": "\u2A57",
  "orv": "\u2A5B",
  "oslash": "\xF8",
  "osol": "\u2298",
  "otilde": "\xF5",
  "otimesas": "\u2A36",
  "ouml": "\xF6",
  "ovbar": "\u233D",
  "para": "\xB6",
  "parsim": "\u2AF3",
  "parsl": "\u2AFD",
  "pcy": "\u043F",
  "percnt": "%",
  "period": ".",
  "permil": "\u2030",
  "pertenk": "\u2031",
  "pfr": "\u{1D52D}",
  "phi": "\u03C6",
  "phiv": "\u03D5",
  "straightphi": "\u03D5",
  "varphi": "\u03D5",
  "phone": "\u260E",
  "pi": "\u03C0",
  "piv": "\u03D6",
  "varpi": "\u03D6",
  "planckh": "\u210E",
  "plus": "+",
  "plusacir": "\u2A23",
  "pluscir": "\u2A22",
  "plusdu": "\u2A25",
  "pluse": "\u2A72",
  "plussim": "\u2A26",
  "plustwo": "\u2A27",
  "pointint": "\u2A15",
  "popf": "\u{1D561}",
  "pound": "\xA3",
  "prE": "\u2AB3",
  "prap": "\u2AB7",
  "precapprox": "\u2AB7",
  "precnapprox": "\u2AB9",
  "prnap": "\u2AB9",
  "precneqq": "\u2AB5",
  "prnE": "\u2AB5",
  "precnsim": "\u22E8",
  "prnsim": "\u22E8",
  "prime": "\u2032",
  "profalar": "\u232E",
  "profline": "\u2312",
  "profsurf": "\u2313",
  "prurel": "\u22B0",
  "pscr": "\u{1D4C5}",
  "psi": "\u03C8",
  "puncsp": "\u2008",
  "qfr": "\u{1D52E}",
  "qopf": "\u{1D562}",
  "qprime": "\u2057",
  "qscr": "\u{1D4C6}",
  "quatint": "\u2A16",
  "quest": "?",
  "rAtail": "\u291C",
  "rHar": "\u2964",
  "race": "\u223D\u0331",
  "racute": "\u0155",
  "raemptyv": "\u29B3",
  "rangd": "\u2992",
  "range": "\u29A5",
  "raquo": "\xBB",
  "rarrap": "\u2975",
  "rarrbfs": "\u2920",
  "rarrc": "\u2933",
  "rarrfs": "\u291E",
  "rarrpl": "\u2945",
  "rarrsim": "\u2974",
  "rarrtl": "\u21A3",
  "rightarrowtail": "\u21A3",
  "rarrw": "\u219D",
  "rightsquigarrow": "\u219D",
  "ratail": "\u291A",
  "ratio": "\u2236",
  "rbbrk": "\u2773",
  "rbrace": "}",
  "rcub": "}",
  "rbrack": "]",
  "rsqb": "]",
  "rbrke": "\u298C",
  "rbrksld": "\u298E",
  "rbrkslu": "\u2990",
  "rcaron": "\u0159",
  "rcedil": "\u0157",
  "rcy": "\u0440",
  "rdca": "\u2937",
  "rdldhar": "\u2969",
  "rdsh": "\u21B3",
  "rect": "\u25AD",
  "rfisht": "\u297D",
  "rfr": "\u{1D52F}",
  "rharul": "\u296C",
  "rho": "\u03C1",
  "rhov": "\u03F1",
  "varrho": "\u03F1",
  "rightrightarrows": "\u21C9",
  "rrarr": "\u21C9",
  "rightthreetimes": "\u22CC",
  "rthree": "\u22CC",
  "ring": "\u02DA",
  "rlm": "\u200F",
  "rmoust": "\u23B1",
  "rmoustache": "\u23B1",
  "rnmid": "\u2AEE",
  "roang": "\u27ED",
  "roarr": "\u21FE",
  "ropar": "\u2986",
  "ropf": "\u{1D563}",
  "roplus": "\u2A2E",
  "rotimes": "\u2A35",
  "rpar": ")",
  "rpargt": "\u2994",
  "rppolint": "\u2A12",
  "rsaquo": "\u203A",
  "rscr": "\u{1D4C7}",
  "rtimes": "\u22CA",
  "rtri": "\u25B9",
  "triangleright": "\u25B9",
  "rtriltri": "\u29CE",
  "ruluhar": "\u2968",
  "rx": "\u211E",
  "sacute": "\u015B",
  "scE": "\u2AB4",
  "scap": "\u2AB8",
  "succapprox": "\u2AB8",
  "scaron": "\u0161",
  "scedil": "\u015F",
  "scirc": "\u015D",
  "scnE": "\u2AB6",
  "succneqq": "\u2AB6",
  "scnap": "\u2ABA",
  "succnapprox": "\u2ABA",
  "scnsim": "\u22E9",
  "succnsim": "\u22E9",
  "scpolint": "\u2A13",
  "scy": "\u0441",
  "sdot": "\u22C5",
  "sdote": "\u2A66",
  "seArr": "\u21D8",
  "sect": "\xA7",
  "semi": ";",
  "seswar": "\u2929",
  "tosa": "\u2929",
  "sext": "\u2736",
  "sfr": "\u{1D530}",
  "sharp": "\u266F",
  "shchcy": "\u0449",
  "shcy": "\u0448",
  "shy": "\xAD",
  "sigma": "\u03C3",
  "sigmaf": "\u03C2",
  "sigmav": "\u03C2",
  "varsigma": "\u03C2",
  "simdot": "\u2A6A",
  "simg": "\u2A9E",
  "simgE": "\u2AA0",
  "siml": "\u2A9D",
  "simlE": "\u2A9F",
  "simne": "\u2246",
  "simplus": "\u2A24",
  "simrarr": "\u2972",
  "smashp": "\u2A33",
  "smeparsl": "\u29E4",
  "smile": "\u2323",
  "ssmile": "\u2323",
  "smt": "\u2AAA",
  "smte": "\u2AAC",
  "smtes": "\u2AAC\uFE00",
  "softcy": "\u044C",
  "sol": "/",
  "solb": "\u29C4",
  "solbar": "\u233F",
  "sopf": "\u{1D564}",
  "spades": "\u2660",
  "spadesuit": "\u2660",
  "sqcaps": "\u2293\uFE00",
  "sqcups": "\u2294\uFE00",
  "sscr": "\u{1D4C8}",
  "star": "\u2606",
  "sub": "\u2282",
  "subset": "\u2282",
  "subE": "\u2AC5",
  "subseteqq": "\u2AC5",
  "subdot": "\u2ABD",
  "subedot": "\u2AC3",
  "submult": "\u2AC1",
  "subnE": "\u2ACB",
  "subsetneqq": "\u2ACB",
  "subne": "\u228A",
  "subsetneq": "\u228A",
  "subplus": "\u2ABF",
  "subrarr": "\u2979",
  "subsim": "\u2AC7",
  "subsub": "\u2AD5",
  "subsup": "\u2AD3",
  "sung": "\u266A",
  "sup1": "\xB9",
  "sup2": "\xB2",
  "sup3": "\xB3",
  "supE": "\u2AC6",
  "supseteqq": "\u2AC6",
  "supdot": "\u2ABE",
  "supdsub": "\u2AD8",
  "supedot": "\u2AC4",
  "suphsol": "\u27C9",
  "suphsub": "\u2AD7",
  "suplarr": "\u297B",
  "supmult": "\u2AC2",
  "supnE": "\u2ACC",
  "supsetneqq": "\u2ACC",
  "supne": "\u228B",
  "supsetneq": "\u228B",
  "supplus": "\u2AC0",
  "supsim": "\u2AC8",
  "supsub": "\u2AD4",
  "supsup": "\u2AD6",
  "swArr": "\u21D9",
  "swnwar": "\u292A",
  "szlig": "\xDF",
  "target": "\u2316",
  "tau": "\u03C4",
  "tcaron": "\u0165",
  "tcedil": "\u0163",
  "tcy": "\u0442",
  "telrec": "\u2315",
  "tfr": "\u{1D531}",
  "theta": "\u03B8",
  "thetasym": "\u03D1",
  "thetav": "\u03D1",
  "vartheta": "\u03D1",
  "thorn": "\xFE",
  "times": "\xD7",
  "timesbar": "\u2A31",
  "timesd": "\u2A30",
  "topbot": "\u2336",
  "topcir": "\u2AF1",
  "topf": "\u{1D565}",
  "topfork": "\u2ADA",
  "tprime": "\u2034",
  "triangle": "\u25B5",
  "utri": "\u25B5",
  "triangleq": "\u225C",
  "trie": "\u225C",
  "tridot": "\u25EC",
  "triminus": "\u2A3A",
  "triplus": "\u2A39",
  "trisb": "\u29CD",
  "tritime": "\u2A3B",
  "trpezium": "\u23E2",
  "tscr": "\u{1D4C9}",
  "tscy": "\u0446",
  "tshcy": "\u045B",
  "tstrok": "\u0167",
  "uHar": "\u2963",
  "uacute": "\xFA",
  "ubrcy": "\u045E",
  "ubreve": "\u016D",
  "ucirc": "\xFB",
  "ucy": "\u0443",
  "udblac": "\u0171",
  "ufisht": "\u297E",
  "ufr": "\u{1D532}",
  "ugrave": "\xF9",
  "uhblk": "\u2580",
  "ulcorn": "\u231C",
  "ulcorner": "\u231C",
  "ulcrop": "\u230F",
  "ultri": "\u25F8",
  "umacr": "\u016B",
  "uogon": "\u0173",
  "uopf": "\u{1D566}",
  "upsi": "\u03C5",
  "upsilon": "\u03C5",
  "upuparrows": "\u21C8",
  "uuarr": "\u21C8",
  "urcorn": "\u231D",
  "urcorner": "\u231D",
  "urcrop": "\u230E",
  "uring": "\u016F",
  "urtri": "\u25F9",
  "uscr": "\u{1D4CA}",
  "utdot": "\u22F0",
  "utilde": "\u0169",
  "uuml": "\xFC",
  "uwangle": "\u29A7",
  "vBar": "\u2AE8",
  "vBarv": "\u2AE9",
  "vangrt": "\u299C",
  "varsubsetneq": "\u228A\uFE00",
  "vsubne": "\u228A\uFE00",
  "varsubsetneqq": "\u2ACB\uFE00",
  "vsubnE": "\u2ACB\uFE00",
  "varsupsetneq": "\u228B\uFE00",
  "vsupne": "\u228B\uFE00",
  "varsupsetneqq": "\u2ACC\uFE00",
  "vsupnE": "\u2ACC\uFE00",
  "vcy": "\u0432",
  "veebar": "\u22BB",
  "veeeq": "\u225A",
  "vellip": "\u22EE",
  "vfr": "\u{1D533}",
  "vopf": "\u{1D567}",
  "vscr": "\u{1D4CB}",
  "vzigzag": "\u299A",
  "wcirc": "\u0175",
  "wedbar": "\u2A5F",
  "wedgeq": "\u2259",
  "weierp": "\u2118",
  "wp": "\u2118",
  "wfr": "\u{1D534}",
  "wopf": "\u{1D568}",
  "wscr": "\u{1D4CC}",
  "xfr": "\u{1D535}",
  "xi": "\u03BE",
  "xnis": "\u22FB",
  "xopf": "\u{1D569}",
  "xscr": "\u{1D4CD}",
  "yacute": "\xFD",
  "yacy": "\u044F",
  "ycirc": "\u0177",
  "ycy": "\u044B",
  "yen": "\xA5",
  "yfr": "\u{1D536}",
  "yicy": "\u0457",
  "yopf": "\u{1D56A}",
  "yscr": "\u{1D4CE}",
  "yucy": "\u044E",
  "yuml": "\xFF",
  "zacute": "\u017A",
  "zcaron": "\u017E",
  "zcy": "\u0437",
  "zdot": "\u017C",
  "zeta": "\u03B6",
  "zfr": "\u{1D537}",
  "zhcy": "\u0436",
  "zigrarr": "\u21DD",
  "zopf": "\u{1D56B}",
  "zscr": "\u{1D4CF}",
  "zwj": "\u200D",
  "zwnj": "\u200C"
};
var NGSP_UNICODE = "\uE500";
NAMED_ENTITIES["ngsp"] = NGSP_UNICODE;
var TokenError = class extends ParseError {
  tokenType;
  constructor(errorMsg, tokenType, span) {
    super(span, errorMsg);
    this.tokenType = tokenType;
  }
};
var TokenizeResult = class {
  tokens;
  errors;
  nonNormalizedIcuExpressions;
  constructor(tokens, errors, nonNormalizedIcuExpressions) {
    this.tokens = tokens;
    this.errors = errors;
    this.nonNormalizedIcuExpressions = nonNormalizedIcuExpressions;
  }
};
function tokenize(source, url, getTagDefinition, options = {}) {
  const tokenizer = new _Tokenizer(new ParseSourceFile(source, url), getTagDefinition, options);
  tokenizer.tokenize();
  return new TokenizeResult(mergeTextTokens(tokenizer.tokens), tokenizer.errors, tokenizer.nonNormalizedIcuExpressions);
}
var _CR_OR_CRLF_REGEXP = /\r\n?/g;
function _unexpectedCharacterErrorMsg(charCode) {
  const char = charCode === $EOF ? "EOF" : String.fromCharCode(charCode);
  return `Unexpected character "${char}"`;
}
function _unknownEntityErrorMsg(entitySrc) {
  return `Unknown entity "${entitySrc}" - use the "&#<decimal>;" or  "&#x<hex>;" syntax`;
}
function _unparsableEntityErrorMsg(type, entityStr) {
  return `Unable to parse entity "${entityStr}" - ${type} character reference entities must end with ";"`;
}
var CharacterReferenceType;
(function(CharacterReferenceType2) {
  CharacterReferenceType2["HEX"] = "hexadecimal";
  CharacterReferenceType2["DEC"] = "decimal";
})(CharacterReferenceType || (CharacterReferenceType = {}));
var _ControlFlowError = class {
  error;
  constructor(error) {
    this.error = error;
  }
};
var _Tokenizer = class {
  _getTagDefinition;
  _cursor;
  _tokenizeIcu;
  _interpolationConfig;
  _leadingTriviaCodePoints;
  _currentTokenStart = null;
  _currentTokenType = null;
  _expansionCaseStack = [];
  _inInterpolation = false;
  _preserveLineEndings;
  _i18nNormalizeLineEndingsInICUs;
  _tokenizeBlocks;
  _tokenizeLet;
  tokens = [];
  errors = [];
  nonNormalizedIcuExpressions = [];
  /**
   * @param _file The html source file being tokenized.
   * @param _getTagDefinition A function that will retrieve a tag definition for a given tag name.
   * @param options Configuration of the tokenization.
   */
  constructor(_file, _getTagDefinition, options) {
    this._getTagDefinition = _getTagDefinition;
    this._tokenizeIcu = options.tokenizeExpansionForms || false;
    this._interpolationConfig = options.interpolationConfig || DEFAULT_INTERPOLATION_CONFIG;
    this._leadingTriviaCodePoints = options.leadingTriviaChars && options.leadingTriviaChars.map((c) => c.codePointAt(0) || 0);
    const range = options.range || {
      endPos: _file.content.length,
      startPos: 0,
      startLine: 0,
      startCol: 0
    };
    this._cursor = options.escapedString ? new EscapedCharacterCursor(_file, range) : new PlainCharacterCursor(_file, range);
    this._preserveLineEndings = options.preserveLineEndings || false;
    this._i18nNormalizeLineEndingsInICUs = options.i18nNormalizeLineEndingsInICUs || false;
    this._tokenizeBlocks = options.tokenizeBlocks ?? true;
    this._tokenizeLet = options.tokenizeLet ?? true;
    try {
      this._cursor.init();
    } catch (e) {
      this.handleError(e);
    }
  }
  _processCarriageReturns(content) {
    if (this._preserveLineEndings) {
      return content;
    }
    return content.replace(_CR_OR_CRLF_REGEXP, "\n");
  }
  tokenize() {
    while (this._cursor.peek() !== $EOF) {
      const start = this._cursor.clone();
      try {
        if (this._attemptCharCode($LT)) {
          if (this._attemptCharCode($BANG)) {
            if (this._attemptCharCode($LBRACKET)) {
              this._consumeCdata(start);
            } else if (this._attemptCharCode($MINUS)) {
              this._consumeComment(start);
            } else {
              this._consumeDocType(start);
            }
          } else if (this._attemptCharCode($SLASH)) {
            this._consumeTagClose(start);
          } else {
            this._consumeTagOpen(start);
          }
        } else if (this._tokenizeLet && // Use `peek` instead of `attempCharCode` since we
        // don't want to advance in case it's not `@let`.
        this._cursor.peek() === $AT && !this._inInterpolation && this._attemptStr("@let")) {
          this._consumeLetDeclaration(start);
        } else if (this._tokenizeBlocks && this._attemptCharCode($AT)) {
          this._consumeBlockStart(start);
        } else if (this._tokenizeBlocks && !this._inInterpolation && !this._isInExpansionCase() && !this._isInExpansionForm() && this._attemptCharCode($RBRACE)) {
          this._consumeBlockEnd(start);
        } else if (!(this._tokenizeIcu && this._tokenizeExpansionForm())) {
          this._consumeWithInterpolation(5, 8, () => this._isTextEnd(), () => this._isTagStart());
        }
      } catch (e) {
        this.handleError(e);
      }
    }
    this._beginToken(
      33
      /* TokenType.EOF */
    );
    this._endToken([]);
  }
  _getBlockName() {
    let spacesInNameAllowed = false;
    const nameCursor = this._cursor.clone();
    this._attemptCharCodeUntilFn((code) => {
      if (isWhitespace(code)) {
        return !spacesInNameAllowed;
      }
      if (isBlockNameChar(code)) {
        spacesInNameAllowed = true;
        return false;
      }
      return true;
    });
    return this._cursor.getChars(nameCursor).trim();
  }
  _consumeBlockStart(start) {
    this._beginToken(24, start);
    const startToken = this._endToken([this._getBlockName()]);
    if (this._cursor.peek() === $LPAREN) {
      this._cursor.advance();
      this._consumeBlockParameters();
      this._attemptCharCodeUntilFn(isNotWhitespace);
      if (this._attemptCharCode($RPAREN)) {
        this._attemptCharCodeUntilFn(isNotWhitespace);
      } else {
        startToken.type = 28;
        return;
      }
    }
    if (this._attemptCharCode($LBRACE)) {
      this._beginToken(
        25
        /* TokenType.BLOCK_OPEN_END */
      );
      this._endToken([]);
    } else {
      startToken.type = 28;
    }
  }
  _consumeBlockEnd(start) {
    this._beginToken(26, start);
    this._endToken([]);
  }
  _consumeBlockParameters() {
    this._attemptCharCodeUntilFn(isBlockParameterChar);
    while (this._cursor.peek() !== $RPAREN && this._cursor.peek() !== $EOF) {
      this._beginToken(
        27
        /* TokenType.BLOCK_PARAMETER */
      );
      const start = this._cursor.clone();
      let inQuote = null;
      let openParens = 0;
      while (this._cursor.peek() !== $SEMICOLON && this._cursor.peek() !== $EOF || inQuote !== null) {
        const char = this._cursor.peek();
        if (char === $BACKSLASH) {
          this._cursor.advance();
        } else if (char === inQuote) {
          inQuote = null;
        } else if (inQuote === null && isQuote(char)) {
          inQuote = char;
        } else if (char === $LPAREN && inQuote === null) {
          openParens++;
        } else if (char === $RPAREN && inQuote === null) {
          if (openParens === 0) {
            break;
          } else if (openParens > 0) {
            openParens--;
          }
        }
        this._cursor.advance();
      }
      this._endToken([this._cursor.getChars(start)]);
      this._attemptCharCodeUntilFn(isBlockParameterChar);
    }
  }
  _consumeLetDeclaration(start) {
    this._beginToken(29, start);
    if (isWhitespace(this._cursor.peek())) {
      this._attemptCharCodeUntilFn(isNotWhitespace);
    } else {
      const token = this._endToken([this._cursor.getChars(start)]);
      token.type = 32;
      return;
    }
    const startToken = this._endToken([this._getLetDeclarationName()]);
    this._attemptCharCodeUntilFn(isNotWhitespace);
    if (!this._attemptCharCode($EQ)) {
      startToken.type = 32;
      return;
    }
    this._attemptCharCodeUntilFn((code) => isNotWhitespace(code) && !isNewLine(code));
    this._consumeLetDeclarationValue();
    const endChar = this._cursor.peek();
    if (endChar === $SEMICOLON) {
      this._beginToken(
        31
        /* TokenType.LET_END */
      );
      this._endToken([]);
      this._cursor.advance();
    } else {
      startToken.type = 32;
      startToken.sourceSpan = this._cursor.getSpan(start);
    }
  }
  _getLetDeclarationName() {
    const nameCursor = this._cursor.clone();
    let allowDigit = false;
    this._attemptCharCodeUntilFn((code) => {
      if (isAsciiLetter(code) || code === $$ || code === $_ || // `@let` names can't start with a digit, but digits are valid anywhere else in the name.
      allowDigit && isDigit(code)) {
        allowDigit = true;
        return false;
      }
      return true;
    });
    return this._cursor.getChars(nameCursor).trim();
  }
  _consumeLetDeclarationValue() {
    const start = this._cursor.clone();
    this._beginToken(30, start);
    while (this._cursor.peek() !== $EOF) {
      const char = this._cursor.peek();
      if (char === $SEMICOLON) {
        break;
      }
      if (isQuote(char)) {
        this._cursor.advance();
        this._attemptCharCodeUntilFn((inner2) => {
          if (inner2 === $BACKSLASH) {
            this._cursor.advance();
            return false;
          }
          return inner2 === char;
        });
      }
      this._cursor.advance();
    }
    this._endToken([this._cursor.getChars(start)]);
  }
  /**
   * @returns whether an ICU token has been created
   * @internal
   */
  _tokenizeExpansionForm() {
    if (this.isExpansionFormStart()) {
      this._consumeExpansionFormStart();
      return true;
    }
    if (isExpansionCaseStart(this._cursor.peek()) && this._isInExpansionForm()) {
      this._consumeExpansionCaseStart();
      return true;
    }
    if (this._cursor.peek() === $RBRACE) {
      if (this._isInExpansionCase()) {
        this._consumeExpansionCaseEnd();
        return true;
      }
      if (this._isInExpansionForm()) {
        this._consumeExpansionFormEnd();
        return true;
      }
    }
    return false;
  }
  _beginToken(type, start = this._cursor.clone()) {
    this._currentTokenStart = start;
    this._currentTokenType = type;
  }
  _endToken(parts, end) {
    if (this._currentTokenStart === null) {
      throw new TokenError("Programming error - attempted to end a token when there was no start to the token", this._currentTokenType, this._cursor.getSpan(end));
    }
    if (this._currentTokenType === null) {
      throw new TokenError("Programming error - attempted to end a token which has no token type", null, this._cursor.getSpan(this._currentTokenStart));
    }
    const token = {
      type: this._currentTokenType,
      parts,
      sourceSpan: (end ?? this._cursor).getSpan(this._currentTokenStart, this._leadingTriviaCodePoints)
    };
    this.tokens.push(token);
    this._currentTokenStart = null;
    this._currentTokenType = null;
    return token;
  }
  _createError(msg, span) {
    if (this._isInExpansionForm()) {
      msg += ` (Do you have an unescaped "{" in your template? Use "{{ '{' }}") to escape it.)`;
    }
    const error = new TokenError(msg, this._currentTokenType, span);
    this._currentTokenStart = null;
    this._currentTokenType = null;
    return new _ControlFlowError(error);
  }
  handleError(e) {
    if (e instanceof CursorError) {
      e = this._createError(e.msg, this._cursor.getSpan(e.cursor));
    }
    if (e instanceof _ControlFlowError) {
      this.errors.push(e.error);
    } else {
      throw e;
    }
  }
  _attemptCharCode(charCode) {
    if (this._cursor.peek() === charCode) {
      this._cursor.advance();
      return true;
    }
    return false;
  }
  _attemptCharCodeCaseInsensitive(charCode) {
    if (compareCharCodeCaseInsensitive(this._cursor.peek(), charCode)) {
      this._cursor.advance();
      return true;
    }
    return false;
  }
  _requireCharCode(charCode) {
    const location2 = this._cursor.clone();
    if (!this._attemptCharCode(charCode)) {
      throw this._createError(_unexpectedCharacterErrorMsg(this._cursor.peek()), this._cursor.getSpan(location2));
    }
  }
  _attemptStr(chars) {
    const len = chars.length;
    if (this._cursor.charsLeft() < len) {
      return false;
    }
    const initialPosition = this._cursor.clone();
    for (let i = 0; i < len; i++) {
      if (!this._attemptCharCode(chars.charCodeAt(i))) {
        this._cursor = initialPosition;
        return false;
      }
    }
    return true;
  }
  _attemptStrCaseInsensitive(chars) {
    for (let i = 0; i < chars.length; i++) {
      if (!this._attemptCharCodeCaseInsensitive(chars.charCodeAt(i))) {
        return false;
      }
    }
    return true;
  }
  _requireStr(chars) {
    const location2 = this._cursor.clone();
    if (!this._attemptStr(chars)) {
      throw this._createError(_unexpectedCharacterErrorMsg(this._cursor.peek()), this._cursor.getSpan(location2));
    }
  }
  _attemptCharCodeUntilFn(predicate) {
    while (!predicate(this._cursor.peek())) {
      this._cursor.advance();
    }
  }
  _requireCharCodeUntilFn(predicate, len) {
    const start = this._cursor.clone();
    this._attemptCharCodeUntilFn(predicate);
    if (this._cursor.diff(start) < len) {
      throw this._createError(_unexpectedCharacterErrorMsg(this._cursor.peek()), this._cursor.getSpan(start));
    }
  }
  _attemptUntilChar(char) {
    while (this._cursor.peek() !== char) {
      this._cursor.advance();
    }
  }
  _readChar() {
    const char = String.fromCodePoint(this._cursor.peek());
    this._cursor.advance();
    return char;
  }
  _consumeEntity(textTokenType) {
    this._beginToken(
      9
      /* TokenType.ENCODED_ENTITY */
    );
    const start = this._cursor.clone();
    this._cursor.advance();
    if (this._attemptCharCode($HASH)) {
      const isHex = this._attemptCharCode($x) || this._attemptCharCode($X);
      const codeStart = this._cursor.clone();
      this._attemptCharCodeUntilFn(isDigitEntityEnd);
      if (this._cursor.peek() != $SEMICOLON) {
        this._cursor.advance();
        const entityType = isHex ? CharacterReferenceType.HEX : CharacterReferenceType.DEC;
        throw this._createError(_unparsableEntityErrorMsg(entityType, this._cursor.getChars(start)), this._cursor.getSpan());
      }
      const strNum = this._cursor.getChars(codeStart);
      this._cursor.advance();
      try {
        const charCode = parseInt(strNum, isHex ? 16 : 10);
        this._endToken([String.fromCharCode(charCode), this._cursor.getChars(start)]);
      } catch {
        throw this._createError(_unknownEntityErrorMsg(this._cursor.getChars(start)), this._cursor.getSpan());
      }
    } else {
      const nameStart = this._cursor.clone();
      this._attemptCharCodeUntilFn(isNamedEntityEnd);
      if (this._cursor.peek() != $SEMICOLON) {
        this._beginToken(textTokenType, start);
        this._cursor = nameStart;
        this._endToken(["&"]);
      } else {
        const name = this._cursor.getChars(nameStart);
        this._cursor.advance();
        const char = NAMED_ENTITIES.hasOwnProperty(name) && NAMED_ENTITIES[name];
        if (!char) {
          throw this._createError(_unknownEntityErrorMsg(name), this._cursor.getSpan(start));
        }
        this._endToken([char, `&${name};`]);
      }
    }
  }
  _consumeRawText(consumeEntities, endMarkerPredicate) {
    this._beginToken(
      consumeEntities ? 6 : 7
      /* TokenType.RAW_TEXT */
    );
    const parts = [];
    while (true) {
      const tagCloseStart = this._cursor.clone();
      const foundEndMarker = endMarkerPredicate();
      this._cursor = tagCloseStart;
      if (foundEndMarker) {
        break;
      }
      if (consumeEntities && this._cursor.peek() === $AMPERSAND) {
        this._endToken([this._processCarriageReturns(parts.join(""))]);
        parts.length = 0;
        this._consumeEntity(
          6
          /* TokenType.ESCAPABLE_RAW_TEXT */
        );
        this._beginToken(
          6
          /* TokenType.ESCAPABLE_RAW_TEXT */
        );
      } else {
        parts.push(this._readChar());
      }
    }
    this._endToken([this._processCarriageReturns(parts.join(""))]);
  }
  _consumeComment(start) {
    this._beginToken(10, start);
    this._requireCharCode($MINUS);
    this._endToken([]);
    this._consumeRawText(false, () => this._attemptStr("-->"));
    this._beginToken(
      11
      /* TokenType.COMMENT_END */
    );
    this._requireStr("-->");
    this._endToken([]);
  }
  _consumeCdata(start) {
    this._beginToken(12, start);
    this._requireStr("CDATA[");
    this._endToken([]);
    this._consumeRawText(false, () => this._attemptStr("]]>"));
    this._beginToken(
      13
      /* TokenType.CDATA_END */
    );
    this._requireStr("]]>");
    this._endToken([]);
  }
  _consumeDocType(start) {
    this._beginToken(18, start);
    const contentStart = this._cursor.clone();
    this._attemptUntilChar($GT);
    const content = this._cursor.getChars(contentStart);
    this._cursor.advance();
    this._endToken([content]);
  }
  _consumePrefixAndName() {
    const nameOrPrefixStart = this._cursor.clone();
    let prefix = "";
    while (this._cursor.peek() !== $COLON && !isPrefixEnd(this._cursor.peek())) {
      this._cursor.advance();
    }
    let nameStart;
    if (this._cursor.peek() === $COLON) {
      prefix = this._cursor.getChars(nameOrPrefixStart);
      this._cursor.advance();
      nameStart = this._cursor.clone();
    } else {
      nameStart = nameOrPrefixStart;
    }
    this._requireCharCodeUntilFn(isNameEnd, prefix === "" ? 0 : 1);
    const name = this._cursor.getChars(nameStart);
    return [prefix, name];
  }
  _consumeTagOpen(start) {
    let tagName;
    let prefix;
    let openTagToken;
    try {
      if (!isAsciiLetter(this._cursor.peek())) {
        throw this._createError(_unexpectedCharacterErrorMsg(this._cursor.peek()), this._cursor.getSpan(start));
      }
      openTagToken = this._consumeTagOpenStart(start);
      prefix = openTagToken.parts[0];
      tagName = openTagToken.parts[1];
      this._attemptCharCodeUntilFn(isNotWhitespace);
      while (this._cursor.peek() !== $SLASH && this._cursor.peek() !== $GT && this._cursor.peek() !== $LT && this._cursor.peek() !== $EOF) {
        this._consumeAttributeName();
        this._attemptCharCodeUntilFn(isNotWhitespace);
        if (this._attemptCharCode($EQ)) {
          this._attemptCharCodeUntilFn(isNotWhitespace);
          this._consumeAttributeValue();
        }
        this._attemptCharCodeUntilFn(isNotWhitespace);
      }
      this._consumeTagOpenEnd();
    } catch (e) {
      if (e instanceof _ControlFlowError) {
        if (openTagToken) {
          openTagToken.type = 4;
        } else {
          this._beginToken(5, start);
          this._endToken(["<"]);
        }
        return;
      }
      throw e;
    }
    const contentTokenType = this._getTagDefinition(tagName).getContentType(prefix);
    if (contentTokenType === TagContentType.RAW_TEXT) {
      this._consumeRawTextWithTagClose(prefix, tagName, false);
    } else if (contentTokenType === TagContentType.ESCAPABLE_RAW_TEXT) {
      this._consumeRawTextWithTagClose(prefix, tagName, true);
    }
  }
  _consumeRawTextWithTagClose(prefix, tagName, consumeEntities) {
    this._consumeRawText(consumeEntities, () => {
      if (!this._attemptCharCode($LT)) return false;
      if (!this._attemptCharCode($SLASH)) return false;
      this._attemptCharCodeUntilFn(isNotWhitespace);
      if (!this._attemptStrCaseInsensitive(tagName)) return false;
      this._attemptCharCodeUntilFn(isNotWhitespace);
      return this._attemptCharCode($GT);
    });
    this._beginToken(
      3
      /* TokenType.TAG_CLOSE */
    );
    this._requireCharCodeUntilFn((code) => code === $GT, 3);
    this._cursor.advance();
    this._endToken([prefix, tagName]);
  }
  _consumeTagOpenStart(start) {
    this._beginToken(0, start);
    const parts = this._consumePrefixAndName();
    return this._endToken(parts);
  }
  _consumeAttributeName() {
    const attrNameStart = this._cursor.peek();
    if (attrNameStart === $SQ || attrNameStart === $DQ) {
      throw this._createError(_unexpectedCharacterErrorMsg(attrNameStart), this._cursor.getSpan());
    }
    this._beginToken(
      14
      /* TokenType.ATTR_NAME */
    );
    const prefixAndName = this._consumePrefixAndName();
    this._endToken(prefixAndName);
  }
  _consumeAttributeValue() {
    if (this._cursor.peek() === $SQ || this._cursor.peek() === $DQ) {
      const quoteChar = this._cursor.peek();
      this._consumeQuote(quoteChar);
      const endPredicate = () => this._cursor.peek() === quoteChar;
      this._consumeWithInterpolation(16, 17, endPredicate, endPredicate);
      this._consumeQuote(quoteChar);
    } else {
      const endPredicate = () => isNameEnd(this._cursor.peek());
      this._consumeWithInterpolation(16, 17, endPredicate, endPredicate);
    }
  }
  _consumeQuote(quoteChar) {
    this._beginToken(
      15
      /* TokenType.ATTR_QUOTE */
    );
    this._requireCharCode(quoteChar);
    this._endToken([String.fromCodePoint(quoteChar)]);
  }
  _consumeTagOpenEnd() {
    const tokenType = this._attemptCharCode($SLASH) ? 2 : 1;
    this._beginToken(tokenType);
    this._requireCharCode($GT);
    this._endToken([]);
  }
  _consumeTagClose(start) {
    this._beginToken(3, start);
    this._attemptCharCodeUntilFn(isNotWhitespace);
    const prefixAndName = this._consumePrefixAndName();
    this._attemptCharCodeUntilFn(isNotWhitespace);
    this._requireCharCode($GT);
    this._endToken(prefixAndName);
  }
  _consumeExpansionFormStart() {
    this._beginToken(
      19
      /* TokenType.EXPANSION_FORM_START */
    );
    this._requireCharCode($LBRACE);
    this._endToken([]);
    this._expansionCaseStack.push(
      19
      /* TokenType.EXPANSION_FORM_START */
    );
    this._beginToken(
      7
      /* TokenType.RAW_TEXT */
    );
    const condition = this._readUntil($COMMA);
    const normalizedCondition = this._processCarriageReturns(condition);
    if (this._i18nNormalizeLineEndingsInICUs) {
      this._endToken([normalizedCondition]);
    } else {
      const conditionToken = this._endToken([condition]);
      if (normalizedCondition !== condition) {
        this.nonNormalizedIcuExpressions.push(conditionToken);
      }
    }
    this._requireCharCode($COMMA);
    this._attemptCharCodeUntilFn(isNotWhitespace);
    this._beginToken(
      7
      /* TokenType.RAW_TEXT */
    );
    const type = this._readUntil($COMMA);
    this._endToken([type]);
    this._requireCharCode($COMMA);
    this._attemptCharCodeUntilFn(isNotWhitespace);
  }
  _consumeExpansionCaseStart() {
    this._beginToken(
      20
      /* TokenType.EXPANSION_CASE_VALUE */
    );
    const value = this._readUntil($LBRACE).trim();
    this._endToken([value]);
    this._attemptCharCodeUntilFn(isNotWhitespace);
    this._beginToken(
      21
      /* TokenType.EXPANSION_CASE_EXP_START */
    );
    this._requireCharCode($LBRACE);
    this._endToken([]);
    this._attemptCharCodeUntilFn(isNotWhitespace);
    this._expansionCaseStack.push(
      21
      /* TokenType.EXPANSION_CASE_EXP_START */
    );
  }
  _consumeExpansionCaseEnd() {
    this._beginToken(
      22
      /* TokenType.EXPANSION_CASE_EXP_END */
    );
    this._requireCharCode($RBRACE);
    this._endToken([]);
    this._attemptCharCodeUntilFn(isNotWhitespace);
    this._expansionCaseStack.pop();
  }
  _consumeExpansionFormEnd() {
    this._beginToken(
      23
      /* TokenType.EXPANSION_FORM_END */
    );
    this._requireCharCode($RBRACE);
    this._endToken([]);
    this._expansionCaseStack.pop();
  }
  /**
   * Consume a string that may contain interpolation expressions.
   *
   * The first token consumed will be of `tokenType` and then there will be alternating
   * `interpolationTokenType` and `tokenType` tokens until the `endPredicate()` returns true.
   *
   * If an interpolation token ends prematurely it will have no end marker in its `parts` array.
   *
   * @param textTokenType the kind of tokens to interleave around interpolation tokens.
   * @param interpolationTokenType the kind of tokens that contain interpolation.
   * @param endPredicate a function that should return true when we should stop consuming.
   * @param endInterpolation a function that should return true if there is a premature end to an
   *     interpolation expression - i.e. before we get to the normal interpolation closing marker.
   */
  _consumeWithInterpolation(textTokenType, interpolationTokenType, endPredicate, endInterpolation) {
    this._beginToken(textTokenType);
    const parts = [];
    while (!endPredicate()) {
      const current = this._cursor.clone();
      if (this._interpolationConfig && this._attemptStr(this._interpolationConfig.start)) {
        this._endToken([this._processCarriageReturns(parts.join(""))], current);
        parts.length = 0;
        this._consumeInterpolation(interpolationTokenType, current, endInterpolation);
        this._beginToken(textTokenType);
      } else if (this._cursor.peek() === $AMPERSAND) {
        this._endToken([this._processCarriageReturns(parts.join(""))]);
        parts.length = 0;
        this._consumeEntity(textTokenType);
        this._beginToken(textTokenType);
      } else {
        parts.push(this._readChar());
      }
    }
    this._inInterpolation = false;
    this._endToken([this._processCarriageReturns(parts.join(""))]);
  }
  /**
   * Consume a block of text that has been interpreted as an Angular interpolation.
   *
   * @param interpolationTokenType the type of the interpolation token to generate.
   * @param interpolationStart a cursor that points to the start of this interpolation.
   * @param prematureEndPredicate a function that should return true if the next characters indicate
   *     an end to the interpolation before its normal closing marker.
   */
  _consumeInterpolation(interpolationTokenType, interpolationStart, prematureEndPredicate) {
    const parts = [];
    this._beginToken(interpolationTokenType, interpolationStart);
    parts.push(this._interpolationConfig.start);
    const expressionStart = this._cursor.clone();
    let inQuote = null;
    let inComment = false;
    while (this._cursor.peek() !== $EOF && (prematureEndPredicate === null || !prematureEndPredicate())) {
      const current = this._cursor.clone();
      if (this._isTagStart()) {
        this._cursor = current;
        parts.push(this._getProcessedChars(expressionStart, current));
        this._endToken(parts);
        return;
      }
      if (inQuote === null) {
        if (this._attemptStr(this._interpolationConfig.end)) {
          parts.push(this._getProcessedChars(expressionStart, current));
          parts.push(this._interpolationConfig.end);
          this._endToken(parts);
          return;
        } else if (this._attemptStr("//")) {
          inComment = true;
        }
      }
      const char = this._cursor.peek();
      this._cursor.advance();
      if (char === $BACKSLASH) {
        this._cursor.advance();
      } else if (char === inQuote) {
        inQuote = null;
      } else if (!inComment && inQuote === null && isQuote(char)) {
        inQuote = char;
      }
    }
    parts.push(this._getProcessedChars(expressionStart, this._cursor));
    this._endToken(parts);
  }
  _getProcessedChars(start, end) {
    return this._processCarriageReturns(end.getChars(start));
  }
  _isTextEnd() {
    if (this._isTagStart() || this._cursor.peek() === $EOF) {
      return true;
    }
    if (this._tokenizeIcu && !this._inInterpolation) {
      if (this.isExpansionFormStart()) {
        return true;
      }
      if (this._cursor.peek() === $RBRACE && this._isInExpansionCase()) {
        return true;
      }
    }
    if (this._tokenizeBlocks && !this._inInterpolation && !this._isInExpansion() && (this._cursor.peek() === $AT || this._cursor.peek() === $RBRACE)) {
      return true;
    }
    return false;
  }
  /**
   * Returns true if the current cursor is pointing to the start of a tag
   * (opening/closing/comments/cdata/etc).
   */
  _isTagStart() {
    if (this._cursor.peek() === $LT) {
      const tmp = this._cursor.clone();
      tmp.advance();
      const code = tmp.peek();
      if ($a <= code && code <= $z || $A <= code && code <= $Z || code === $SLASH || code === $BANG) {
        return true;
      }
    }
    return false;
  }
  _readUntil(char) {
    const start = this._cursor.clone();
    this._attemptUntilChar(char);
    return this._cursor.getChars(start);
  }
  _isInExpansion() {
    return this._isInExpansionCase() || this._isInExpansionForm();
  }
  _isInExpansionCase() {
    return this._expansionCaseStack.length > 0 && this._expansionCaseStack[this._expansionCaseStack.length - 1] === 21;
  }
  _isInExpansionForm() {
    return this._expansionCaseStack.length > 0 && this._expansionCaseStack[this._expansionCaseStack.length - 1] === 19;
  }
  isExpansionFormStart() {
    if (this._cursor.peek() !== $LBRACE) {
      return false;
    }
    if (this._interpolationConfig) {
      const start = this._cursor.clone();
      const isInterpolation = this._attemptStr(this._interpolationConfig.start);
      this._cursor = start;
      return !isInterpolation;
    }
    return true;
  }
};
function isNotWhitespace(code) {
  return !isWhitespace(code) || code === $EOF;
}
function isNameEnd(code) {
  return isWhitespace(code) || code === $GT || code === $LT || code === $SLASH || code === $SQ || code === $DQ || code === $EQ || code === $EOF;
}
function isPrefixEnd(code) {
  return (code < $a || $z < code) && (code < $A || $Z < code) && (code < $0 || code > $9);
}
function isDigitEntityEnd(code) {
  return code === $SEMICOLON || code === $EOF || !isAsciiHexDigit(code);
}
function isNamedEntityEnd(code) {
  return code === $SEMICOLON || code === $EOF || !isAsciiLetter(code);
}
function isExpansionCaseStart(peek) {
  return peek !== $RBRACE;
}
function compareCharCodeCaseInsensitive(code1, code2) {
  return toUpperCaseCharCode(code1) === toUpperCaseCharCode(code2);
}
function toUpperCaseCharCode(code) {
  return code >= $a && code <= $z ? code - $a + $A : code;
}
function isBlockNameChar(code) {
  return isAsciiLetter(code) || isDigit(code) || code === $_;
}
function isBlockParameterChar(code) {
  return code !== $SEMICOLON && isNotWhitespace(code);
}
function mergeTextTokens(srcTokens) {
  const dstTokens = [];
  let lastDstToken = void 0;
  for (let i = 0; i < srcTokens.length; i++) {
    const token = srcTokens[i];
    if (lastDstToken && lastDstToken.type === 5 && token.type === 5 || lastDstToken && lastDstToken.type === 16 && token.type === 16) {
      lastDstToken.parts[0] += token.parts[0];
      lastDstToken.sourceSpan.end = token.sourceSpan.end;
    } else {
      lastDstToken = token;
      dstTokens.push(lastDstToken);
    }
  }
  return dstTokens;
}
var PlainCharacterCursor = class _PlainCharacterCursor {
  state;
  file;
  input;
  end;
  constructor(fileOrCursor, range) {
    if (fileOrCursor instanceof _PlainCharacterCursor) {
      this.file = fileOrCursor.file;
      this.input = fileOrCursor.input;
      this.end = fileOrCursor.end;
      const state = fileOrCursor.state;
      this.state = {
        peek: state.peek,
        offset: state.offset,
        line: state.line,
        column: state.column
      };
    } else {
      if (!range) {
        throw new Error("Programming error: the range argument must be provided with a file argument.");
      }
      this.file = fileOrCursor;
      this.input = fileOrCursor.content;
      this.end = range.endPos;
      this.state = {
        peek: -1,
        offset: range.startPos,
        line: range.startLine,
        column: range.startCol
      };
    }
  }
  clone() {
    return new _PlainCharacterCursor(this);
  }
  peek() {
    return this.state.peek;
  }
  charsLeft() {
    return this.end - this.state.offset;
  }
  diff(other) {
    return this.state.offset - other.state.offset;
  }
  advance() {
    this.advanceState(this.state);
  }
  init() {
    this.updatePeek(this.state);
  }
  getSpan(start, leadingTriviaCodePoints) {
    start = start || this;
    let fullStart = start;
    if (leadingTriviaCodePoints) {
      while (this.diff(start) > 0 && leadingTriviaCodePoints.indexOf(start.peek()) !== -1) {
        if (fullStart === start) {
          start = start.clone();
        }
        start.advance();
      }
    }
    const startLocation = this.locationFromCursor(start);
    const endLocation = this.locationFromCursor(this);
    const fullStartLocation = fullStart !== start ? this.locationFromCursor(fullStart) : startLocation;
    return new ParseSourceSpan(startLocation, endLocation, fullStartLocation);
  }
  getChars(start) {
    return this.input.substring(start.state.offset, this.state.offset);
  }
  charAt(pos) {
    return this.input.charCodeAt(pos);
  }
  advanceState(state) {
    if (state.offset >= this.end) {
      this.state = state;
      throw new CursorError('Unexpected character "EOF"', this);
    }
    const currentChar = this.charAt(state.offset);
    if (currentChar === $LF) {
      state.line++;
      state.column = 0;
    } else if (!isNewLine(currentChar)) {
      state.column++;
    }
    state.offset++;
    this.updatePeek(state);
  }
  updatePeek(state) {
    state.peek = state.offset >= this.end ? $EOF : this.charAt(state.offset);
  }
  locationFromCursor(cursor) {
    return new ParseLocation(cursor.file, cursor.state.offset, cursor.state.line, cursor.state.column);
  }
};
var EscapedCharacterCursor = class _EscapedCharacterCursor extends PlainCharacterCursor {
  internalState;
  constructor(fileOrCursor, range) {
    if (fileOrCursor instanceof _EscapedCharacterCursor) {
      super(fileOrCursor);
      this.internalState = __spreadValues({}, fileOrCursor.internalState);
    } else {
      super(fileOrCursor, range);
      this.internalState = this.state;
    }
  }
  advance() {
    this.state = this.internalState;
    super.advance();
    this.processEscapeSequence();
  }
  init() {
    super.init();
    this.processEscapeSequence();
  }
  clone() {
    return new _EscapedCharacterCursor(this);
  }
  getChars(start) {
    const cursor = start.clone();
    let chars = "";
    while (cursor.internalState.offset < this.internalState.offset) {
      chars += String.fromCodePoint(cursor.peek());
      cursor.advance();
    }
    return chars;
  }
  /**
   * Process the escape sequence that starts at the current position in the text.
   *
   * This method is called to ensure that `peek` has the unescaped value of escape sequences.
   */
  processEscapeSequence() {
    const peek = () => this.internalState.peek;
    if (peek() === $BACKSLASH) {
      this.internalState = __spreadValues({}, this.state);
      this.advanceState(this.internalState);
      if (peek() === $n) {
        this.state.peek = $LF;
      } else if (peek() === $r) {
        this.state.peek = $CR;
      } else if (peek() === $v) {
        this.state.peek = $VTAB;
      } else if (peek() === $t) {
        this.state.peek = $TAB;
      } else if (peek() === $b) {
        this.state.peek = $BSPACE;
      } else if (peek() === $f) {
        this.state.peek = $FF;
      } else if (peek() === $u) {
        this.advanceState(this.internalState);
        if (peek() === $LBRACE) {
          this.advanceState(this.internalState);
          const digitStart = this.clone();
          let length = 0;
          while (peek() !== $RBRACE) {
            this.advanceState(this.internalState);
            length++;
          }
          this.state.peek = this.decodeHexDigits(digitStart, length);
        } else {
          const digitStart = this.clone();
          this.advanceState(this.internalState);
          this.advanceState(this.internalState);
          this.advanceState(this.internalState);
          this.state.peek = this.decodeHexDigits(digitStart, 4);
        }
      } else if (peek() === $x) {
        this.advanceState(this.internalState);
        const digitStart = this.clone();
        this.advanceState(this.internalState);
        this.state.peek = this.decodeHexDigits(digitStart, 2);
      } else if (isOctalDigit(peek())) {
        let octal = "";
        let length = 0;
        let previous = this.clone();
        while (isOctalDigit(peek()) && length < 3) {
          previous = this.clone();
          octal += String.fromCodePoint(peek());
          this.advanceState(this.internalState);
          length++;
        }
        this.state.peek = parseInt(octal, 8);
        this.internalState = previous.internalState;
      } else if (isNewLine(this.internalState.peek)) {
        this.advanceState(this.internalState);
        this.state = this.internalState;
      } else {
        this.state.peek = this.internalState.peek;
      }
    }
  }
  decodeHexDigits(start, length) {
    const hex = this.input.slice(start.internalState.offset, start.internalState.offset + length);
    const charCode = parseInt(hex, 16);
    if (!isNaN(charCode)) {
      return charCode;
    } else {
      start.state = start.internalState;
      throw new CursorError("Invalid hexadecimal escape sequence", start);
    }
  }
};
var CursorError = class {
  msg;
  cursor;
  constructor(msg, cursor) {
    this.msg = msg;
    this.cursor = cursor;
  }
};
var TreeError = class _TreeError extends ParseError {
  elementName;
  static create(elementName, span, msg) {
    return new _TreeError(elementName, span, msg);
  }
  constructor(elementName, span, msg) {
    super(span, msg);
    this.elementName = elementName;
  }
};
var ParseTreeResult = class {
  rootNodes;
  errors;
  constructor(rootNodes, errors) {
    this.rootNodes = rootNodes;
    this.errors = errors;
  }
};
var Parser$1 = class Parser {
  getTagDefinition;
  constructor(getTagDefinition) {
    this.getTagDefinition = getTagDefinition;
  }
  parse(source, url, options) {
    const tokenizeResult = tokenize(source, url, this.getTagDefinition, options);
    const parser = new _TreeBuilder(tokenizeResult.tokens, this.getTagDefinition);
    parser.build();
    return new ParseTreeResult(parser.rootNodes, tokenizeResult.errors.concat(parser.errors));
  }
};
var _TreeBuilder = class __TreeBuilder {
  tokens;
  getTagDefinition;
  _index = -1;
  // `_peek` will be initialized by the call to `_advance()` in the constructor.
  _peek;
  _containerStack = [];
  rootNodes = [];
  errors = [];
  constructor(tokens, getTagDefinition) {
    this.tokens = tokens;
    this.getTagDefinition = getTagDefinition;
    this._advance();
  }
  build() {
    while (this._peek.type !== 33) {
      if (this._peek.type === 0 || this._peek.type === 4) {
        this._consumeStartTag(this._advance());
      } else if (this._peek.type === 3) {
        this._consumeEndTag(this._advance());
      } else if (this._peek.type === 12) {
        this._closeVoidElement();
        this._consumeCdata(this._advance());
      } else if (this._peek.type === 10) {
        this._closeVoidElement();
        this._consumeComment(this._advance());
      } else if (this._peek.type === 5 || this._peek.type === 7 || this._peek.type === 6) {
        this._closeVoidElement();
        this._consumeText(this._advance());
      } else if (this._peek.type === 19) {
        this._consumeExpansion(this._advance());
      } else if (this._peek.type === 24) {
        this._closeVoidElement();
        this._consumeBlockOpen(this._advance());
      } else if (this._peek.type === 26) {
        this._closeVoidElement();
        this._consumeBlockClose(this._advance());
      } else if (this._peek.type === 28) {
        this._closeVoidElement();
        this._consumeIncompleteBlock(this._advance());
      } else if (this._peek.type === 29) {
        this._closeVoidElement();
        this._consumeLet(this._advance());
      } else if (this._peek.type === 32) {
        this._closeVoidElement();
        this._consumeIncompleteLet(this._advance());
      } else {
        this._advance();
      }
    }
    for (const leftoverContainer of this._containerStack) {
      if (leftoverContainer instanceof Block) {
        this.errors.push(TreeError.create(leftoverContainer.name, leftoverContainer.sourceSpan, `Unclosed block "${leftoverContainer.name}"`));
      }
    }
  }
  _advance() {
    const prev = this._peek;
    if (this._index < this.tokens.length - 1) {
      this._index++;
    }
    this._peek = this.tokens[this._index];
    return prev;
  }
  _advanceIf(type) {
    if (this._peek.type === type) {
      return this._advance();
    }
    return null;
  }
  _consumeCdata(_startToken) {
    this._consumeText(this._advance());
    this._advanceIf(
      13
      /* TokenType.CDATA_END */
    );
  }
  _consumeComment(token) {
    const text3 = this._advanceIf(
      7
      /* TokenType.RAW_TEXT */
    );
    const endToken = this._advanceIf(
      11
      /* TokenType.COMMENT_END */
    );
    const value = text3 != null ? text3.parts[0].trim() : null;
    const sourceSpan = endToken == null ? token.sourceSpan : new ParseSourceSpan(token.sourceSpan.start, endToken.sourceSpan.end, token.sourceSpan.fullStart);
    this._addToParent(new Comment2(value, sourceSpan));
  }
  _consumeExpansion(token) {
    const switchValue = this._advance();
    const type = this._advance();
    const cases = [];
    while (this._peek.type === 20) {
      const expCase = this._parseExpansionCase();
      if (!expCase) return;
      cases.push(expCase);
    }
    if (this._peek.type !== 23) {
      this.errors.push(TreeError.create(null, this._peek.sourceSpan, `Invalid ICU message. Missing '}'.`));
      return;
    }
    const sourceSpan = new ParseSourceSpan(token.sourceSpan.start, this._peek.sourceSpan.end, token.sourceSpan.fullStart);
    this._addToParent(new Expansion(switchValue.parts[0], type.parts[0], cases, sourceSpan, switchValue.sourceSpan));
    this._advance();
  }
  _parseExpansionCase() {
    const value = this._advance();
    if (this._peek.type !== 21) {
      this.errors.push(TreeError.create(null, this._peek.sourceSpan, `Invalid ICU message. Missing '{'.`));
      return null;
    }
    const start = this._advance();
    const exp = this._collectExpansionExpTokens(start);
    if (!exp) return null;
    const end = this._advance();
    exp.push({
      type: 33,
      parts: [],
      sourceSpan: end.sourceSpan
    });
    const expansionCaseParser = new __TreeBuilder(exp, this.getTagDefinition);
    expansionCaseParser.build();
    if (expansionCaseParser.errors.length > 0) {
      this.errors = this.errors.concat(expansionCaseParser.errors);
      return null;
    }
    const sourceSpan = new ParseSourceSpan(value.sourceSpan.start, end.sourceSpan.end, value.sourceSpan.fullStart);
    const expSourceSpan = new ParseSourceSpan(start.sourceSpan.start, end.sourceSpan.end, start.sourceSpan.fullStart);
    return new ExpansionCase(value.parts[0], expansionCaseParser.rootNodes, sourceSpan, value.sourceSpan, expSourceSpan);
  }
  _collectExpansionExpTokens(start) {
    const exp = [];
    const expansionFormStack = [
      21
      /* TokenType.EXPANSION_CASE_EXP_START */
    ];
    while (true) {
      if (this._peek.type === 19 || this._peek.type === 21) {
        expansionFormStack.push(this._peek.type);
      }
      if (this._peek.type === 22) {
        if (lastOnStack(
          expansionFormStack,
          21
          /* TokenType.EXPANSION_CASE_EXP_START */
        )) {
          expansionFormStack.pop();
          if (expansionFormStack.length === 0) return exp;
        } else {
          this.errors.push(TreeError.create(null, start.sourceSpan, `Invalid ICU message. Missing '}'.`));
          return null;
        }
      }
      if (this._peek.type === 23) {
        if (lastOnStack(
          expansionFormStack,
          19
          /* TokenType.EXPANSION_FORM_START */
        )) {
          expansionFormStack.pop();
        } else {
          this.errors.push(TreeError.create(null, start.sourceSpan, `Invalid ICU message. Missing '}'.`));
          return null;
        }
      }
      if (this._peek.type === 33) {
        this.errors.push(TreeError.create(null, start.sourceSpan, `Invalid ICU message. Missing '}'.`));
        return null;
      }
      exp.push(this._advance());
    }
  }
  _consumeText(token) {
    const tokens = [token];
    const startSpan = token.sourceSpan;
    let text3 = token.parts[0];
    if (text3.length > 0 && text3[0] === "\n") {
      const parent = this._getContainer();
      if (parent != null && parent.children.length === 0 && this.getTagDefinition(parent.name).ignoreFirstLf) {
        text3 = text3.substring(1);
        tokens[0] = {
          type: token.type,
          sourceSpan: token.sourceSpan,
          parts: [text3]
        };
      }
    }
    while (this._peek.type === 8 || this._peek.type === 5 || this._peek.type === 9) {
      token = this._advance();
      tokens.push(token);
      if (token.type === 8) {
        text3 += token.parts.join("").replace(/&([^;]+);/g, decodeEntity);
      } else if (token.type === 9) {
        text3 += token.parts[0];
      } else {
        text3 += token.parts.join("");
      }
    }
    if (text3.length > 0) {
      const endSpan = token.sourceSpan;
      this._addToParent(new Text3(text3, new ParseSourceSpan(startSpan.start, endSpan.end, startSpan.fullStart, startSpan.details), tokens));
    }
  }
  _closeVoidElement() {
    const el = this._getContainer();
    if (el instanceof Element2 && this.getTagDefinition(el.name).isVoid) {
      this._containerStack.pop();
    }
  }
  _consumeStartTag(startTagToken) {
    const [prefix, name] = startTagToken.parts;
    const attrs = [];
    while (this._peek.type === 14) {
      attrs.push(this._consumeAttr(this._advance()));
    }
    const fullName = this._getElementFullName(prefix, name, this._getClosestParentElement());
    let selfClosing = false;
    if (this._peek.type === 2) {
      this._advance();
      selfClosing = true;
      const tagDef = this.getTagDefinition(fullName);
      if (!(tagDef.canSelfClose || getNsPrefix(fullName) !== null || tagDef.isVoid)) {
        this.errors.push(TreeError.create(fullName, startTagToken.sourceSpan, `Only void, custom and foreign elements can be self closed "${startTagToken.parts[1]}"`));
      }
    } else if (this._peek.type === 1) {
      this._advance();
      selfClosing = false;
    }
    const end = this._peek.sourceSpan.fullStart;
    const span = new ParseSourceSpan(startTagToken.sourceSpan.start, end, startTagToken.sourceSpan.fullStart);
    const startSpan = new ParseSourceSpan(startTagToken.sourceSpan.start, end, startTagToken.sourceSpan.fullStart);
    const el = new Element2(fullName, attrs, [], span, startSpan, void 0);
    const parentEl = this._getContainer();
    this._pushContainer(el, parentEl instanceof Element2 && this.getTagDefinition(parentEl.name).isClosedByChild(el.name));
    if (selfClosing) {
      this._popContainer(fullName, Element2, span);
    } else if (startTagToken.type === 4) {
      this._popContainer(fullName, Element2, null);
      this.errors.push(TreeError.create(fullName, span, `Opening tag "${fullName}" not terminated.`));
    }
  }
  _pushContainer(node, isClosedByChild) {
    if (isClosedByChild) {
      this._containerStack.pop();
    }
    this._addToParent(node);
    this._containerStack.push(node);
  }
  _consumeEndTag(endTagToken) {
    const fullName = this._getElementFullName(endTagToken.parts[0], endTagToken.parts[1], this._getClosestParentElement());
    if (this.getTagDefinition(fullName).isVoid) {
      this.errors.push(TreeError.create(fullName, endTagToken.sourceSpan, `Void elements do not have end tags "${endTagToken.parts[1]}"`));
    } else if (!this._popContainer(fullName, Element2, endTagToken.sourceSpan)) {
      const errMsg = `Unexpected closing tag "${fullName}". It may happen when the tag has already been closed by another tag. For more info see https://www.w3.org/TR/html5/syntax.html#closing-elements-that-have-implied-end-tags`;
      this.errors.push(TreeError.create(fullName, endTagToken.sourceSpan, errMsg));
    }
  }
  /**
   * Closes the nearest element with the tag name `fullName` in the parse tree.
   * `endSourceSpan` is the span of the closing tag, or null if the element does
   * not have a closing tag (for example, this happens when an incomplete
   * opening tag is recovered).
   */
  _popContainer(expectedName, expectedType, endSourceSpan) {
    let unexpectedCloseTagDetected = false;
    for (let stackIndex = this._containerStack.length - 1; stackIndex >= 0; stackIndex--) {
      const node = this._containerStack[stackIndex];
      if ((node.name === expectedName || expectedName === null) && node instanceof expectedType) {
        node.endSourceSpan = endSourceSpan;
        node.sourceSpan.end = endSourceSpan !== null ? endSourceSpan.end : node.sourceSpan.end;
        this._containerStack.splice(stackIndex, this._containerStack.length - stackIndex);
        return !unexpectedCloseTagDetected;
      }
      if (node instanceof Block || node instanceof Element2 && !this.getTagDefinition(node.name).closedByParent) {
        unexpectedCloseTagDetected = true;
      }
    }
    return false;
  }
  _consumeAttr(attrName) {
    const fullName = mergeNsAndName(attrName.parts[0], attrName.parts[1]);
    let attrEnd = attrName.sourceSpan.end;
    if (this._peek.type === 15) {
      this._advance();
    }
    let value = "";
    const valueTokens = [];
    let valueStartSpan = void 0;
    let valueEnd = void 0;
    const nextTokenType = this._peek.type;
    if (nextTokenType === 16) {
      valueStartSpan = this._peek.sourceSpan;
      valueEnd = this._peek.sourceSpan.end;
      while (this._peek.type === 16 || this._peek.type === 17 || this._peek.type === 9) {
        const valueToken = this._advance();
        valueTokens.push(valueToken);
        if (valueToken.type === 17) {
          value += valueToken.parts.join("").replace(/&([^;]+);/g, decodeEntity);
        } else if (valueToken.type === 9) {
          value += valueToken.parts[0];
        } else {
          value += valueToken.parts.join("");
        }
        valueEnd = attrEnd = valueToken.sourceSpan.end;
      }
    }
    if (this._peek.type === 15) {
      const quoteToken = this._advance();
      attrEnd = quoteToken.sourceSpan.end;
    }
    const valueSpan = valueStartSpan && valueEnd && new ParseSourceSpan(valueStartSpan.start, valueEnd, valueStartSpan.fullStart);
    return new Attribute2(fullName, value, new ParseSourceSpan(attrName.sourceSpan.start, attrEnd, attrName.sourceSpan.fullStart), attrName.sourceSpan, valueSpan, valueTokens.length > 0 ? valueTokens : void 0, void 0);
  }
  _consumeBlockOpen(token) {
    const parameters = [];
    while (this._peek.type === 27) {
      const paramToken = this._advance();
      parameters.push(new BlockParameter(paramToken.parts[0], paramToken.sourceSpan));
    }
    if (this._peek.type === 25) {
      this._advance();
    }
    const end = this._peek.sourceSpan.fullStart;
    const span = new ParseSourceSpan(token.sourceSpan.start, end, token.sourceSpan.fullStart);
    const startSpan = new ParseSourceSpan(token.sourceSpan.start, end, token.sourceSpan.fullStart);
    const block = new Block(token.parts[0], parameters, [], span, token.sourceSpan, startSpan);
    this._pushContainer(block, false);
  }
  _consumeBlockClose(token) {
    if (!this._popContainer(null, Block, token.sourceSpan)) {
      this.errors.push(TreeError.create(null, token.sourceSpan, `Unexpected closing block. The block may have been closed earlier. If you meant to write the } character, you should use the "&#125;" HTML entity instead.`));
    }
  }
  _consumeIncompleteBlock(token) {
    const parameters = [];
    while (this._peek.type === 27) {
      const paramToken = this._advance();
      parameters.push(new BlockParameter(paramToken.parts[0], paramToken.sourceSpan));
    }
    const end = this._peek.sourceSpan.fullStart;
    const span = new ParseSourceSpan(token.sourceSpan.start, end, token.sourceSpan.fullStart);
    const startSpan = new ParseSourceSpan(token.sourceSpan.start, end, token.sourceSpan.fullStart);
    const block = new Block(token.parts[0], parameters, [], span, token.sourceSpan, startSpan);
    this._pushContainer(block, false);
    this._popContainer(null, Block, null);
    this.errors.push(TreeError.create(token.parts[0], span, `Incomplete block "${token.parts[0]}". If you meant to write the @ character, you should use the "&#64;" HTML entity instead.`));
  }
  _consumeLet(startToken) {
    const name = startToken.parts[0];
    let valueToken;
    let endToken;
    if (this._peek.type !== 30) {
      this.errors.push(TreeError.create(startToken.parts[0], startToken.sourceSpan, `Invalid @let declaration "${name}". Declaration must have a value.`));
      return;
    } else {
      valueToken = this._advance();
    }
    if (this._peek.type !== 31) {
      this.errors.push(TreeError.create(startToken.parts[0], startToken.sourceSpan, `Unterminated @let declaration "${name}". Declaration must be terminated with a semicolon.`));
      return;
    } else {
      endToken = this._advance();
    }
    const end = endToken.sourceSpan.fullStart;
    const span = new ParseSourceSpan(startToken.sourceSpan.start, end, startToken.sourceSpan.fullStart);
    const startOffset = startToken.sourceSpan.toString().lastIndexOf(name);
    const nameStart = startToken.sourceSpan.start.moveBy(startOffset);
    const nameSpan = new ParseSourceSpan(nameStart, startToken.sourceSpan.end);
    const node = new LetDeclaration2(name, valueToken.parts[0], span, nameSpan, valueToken.sourceSpan);
    this._addToParent(node);
  }
  _consumeIncompleteLet(token) {
    const name = token.parts[0] ?? "";
    const nameString = name ? ` "${name}"` : "";
    if (name.length > 0) {
      const startOffset = token.sourceSpan.toString().lastIndexOf(name);
      const nameStart = token.sourceSpan.start.moveBy(startOffset);
      const nameSpan = new ParseSourceSpan(nameStart, token.sourceSpan.end);
      const valueSpan = new ParseSourceSpan(token.sourceSpan.start, token.sourceSpan.start.moveBy(0));
      const node = new LetDeclaration2(name, "", token.sourceSpan, nameSpan, valueSpan);
      this._addToParent(node);
    }
    this.errors.push(TreeError.create(token.parts[0], token.sourceSpan, `Incomplete @let declaration${nameString}. @let declarations must be written as \`@let <name> = <value>;\``));
  }
  _getContainer() {
    return this._containerStack.length > 0 ? this._containerStack[this._containerStack.length - 1] : null;
  }
  _getClosestParentElement() {
    for (let i = this._containerStack.length - 1; i > -1; i--) {
      if (this._containerStack[i] instanceof Element2) {
        return this._containerStack[i];
      }
    }
    return null;
  }
  _addToParent(node) {
    const parent = this._getContainer();
    if (parent === null) {
      this.rootNodes.push(node);
    } else {
      parent.children.push(node);
    }
  }
  _getElementFullName(prefix, localName, parentElement) {
    if (prefix === "") {
      prefix = this.getTagDefinition(localName).implicitNamespacePrefix || "";
      if (prefix === "" && parentElement != null) {
        const parentTagName = splitNsName(parentElement.name)[1];
        const parentTagDefinition = this.getTagDefinition(parentTagName);
        if (!parentTagDefinition.preventNamespaceInheritance) {
          prefix = getNsPrefix(parentElement.name);
        }
      }
    }
    return mergeNsAndName(prefix, localName);
  }
};
function lastOnStack(stack, element2) {
  return stack.length > 0 && stack[stack.length - 1] === element2;
}
function decodeEntity(match2, entity) {
  if (NAMED_ENTITIES[entity] !== void 0) {
    return NAMED_ENTITIES[entity] || match2;
  }
  if (/^#x[a-f0-9]+$/i.test(entity)) {
    return String.fromCodePoint(parseInt(entity.slice(2), 16));
  }
  if (/^#\d+$/.test(entity)) {
    return String.fromCodePoint(parseInt(entity.slice(1), 10));
  }
  return match2;
}
var PRESERVE_WS_ATTR_NAME = "ngPreserveWhitespaces";
var SKIP_WS_TRIM_TAGS = /* @__PURE__ */ new Set(["pre", "template", "textarea", "script", "style"]);
var WS_CHARS = " \f\n\r	\v\u1680\u180E\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF";
var NO_WS_REGEXP = new RegExp(`[^${WS_CHARS}]`);
var WS_REPLACE_REGEXP = new RegExp(`[${WS_CHARS}]{2,}`, "g");
function hasPreserveWhitespacesAttr(attrs) {
  return attrs.some((attr) => attr.name === PRESERVE_WS_ATTR_NAME);
}
function replaceNgsp(value) {
  return value.replace(new RegExp(NGSP_UNICODE, "g"), " ");
}
var WhitespaceVisitor = class {
  preserveSignificantWhitespace;
  originalNodeMap;
  requireContext;
  // How many ICU expansions which are currently being visited. ICUs can be nested, so this
  // tracks the current depth of nesting. If this depth is greater than 0, then this visitor is
  // currently processing content inside an ICU expansion.
  icuExpansionDepth = 0;
  constructor(preserveSignificantWhitespace, originalNodeMap, requireContext = true) {
    this.preserveSignificantWhitespace = preserveSignificantWhitespace;
    this.originalNodeMap = originalNodeMap;
    this.requireContext = requireContext;
  }
  visitElement(element2, context) {
    if (SKIP_WS_TRIM_TAGS.has(element2.name) || hasPreserveWhitespacesAttr(element2.attrs)) {
      const newElement2 = new Element2(element2.name, visitAllWithSiblings(this, element2.attrs), element2.children, element2.sourceSpan, element2.startSourceSpan, element2.endSourceSpan, element2.i18n);
      this.originalNodeMap?.set(newElement2, element2);
      return newElement2;
    }
    const newElement = new Element2(element2.name, element2.attrs, visitAllWithSiblings(this, element2.children), element2.sourceSpan, element2.startSourceSpan, element2.endSourceSpan, element2.i18n);
    this.originalNodeMap?.set(newElement, element2);
    return newElement;
  }
  visitAttribute(attribute2, context) {
    return attribute2.name !== PRESERVE_WS_ATTR_NAME ? attribute2 : null;
  }
  visitText(text3, context) {
    const isNotBlank = text3.value.match(NO_WS_REGEXP);
    const hasExpansionSibling = context && (context.prev instanceof Expansion || context.next instanceof Expansion);
    const inIcuExpansion = this.icuExpansionDepth > 0;
    if (inIcuExpansion && this.preserveSignificantWhitespace) return text3;
    if (isNotBlank || hasExpansionSibling) {
      const tokens = text3.tokens.map((token) => token.type === 5 ? createWhitespaceProcessedTextToken(token) : token);
      if (!this.preserveSignificantWhitespace && tokens.length > 0) {
        const firstToken = tokens[0];
        tokens.splice(0, 1, trimLeadingWhitespace(firstToken, context));
        const lastToken = tokens[tokens.length - 1];
        tokens.splice(tokens.length - 1, 1, trimTrailingWhitespace(lastToken, context));
      }
      const processed = processWhitespace(text3.value);
      const value = this.preserveSignificantWhitespace ? processed : trimLeadingAndTrailingWhitespace(processed, context);
      const result = new Text3(value, text3.sourceSpan, tokens, text3.i18n);
      this.originalNodeMap?.set(result, text3);
      return result;
    }
    return null;
  }
  visitComment(comment, context) {
    return comment;
  }
  visitExpansion(expansion, context) {
    this.icuExpansionDepth++;
    let newExpansion;
    try {
      newExpansion = new Expansion(expansion.switchValue, expansion.type, visitAllWithSiblings(this, expansion.cases), expansion.sourceSpan, expansion.switchValueSourceSpan, expansion.i18n);
    } finally {
      this.icuExpansionDepth--;
    }
    this.originalNodeMap?.set(newExpansion, expansion);
    return newExpansion;
  }
  visitExpansionCase(expansionCase, context) {
    const newExpansionCase = new ExpansionCase(expansionCase.value, visitAllWithSiblings(this, expansionCase.expression), expansionCase.sourceSpan, expansionCase.valueSourceSpan, expansionCase.expSourceSpan);
    this.originalNodeMap?.set(newExpansionCase, expansionCase);
    return newExpansionCase;
  }
  visitBlock(block, context) {
    const newBlock = new Block(block.name, block.parameters, visitAllWithSiblings(this, block.children), block.sourceSpan, block.nameSpan, block.startSourceSpan, block.endSourceSpan);
    this.originalNodeMap?.set(newBlock, block);
    return newBlock;
  }
  visitBlockParameter(parameter, context) {
    return parameter;
  }
  visitLetDeclaration(decl, context) {
    return decl;
  }
  visit(_node, context) {
    if (this.requireContext && !context) {
      throw new Error(`WhitespaceVisitor requires context. Visit via \`visitAllWithSiblings\` to get this context.`);
    }
    return false;
  }
};
function trimLeadingWhitespace(token, context) {
  if (token.type !== 5) return token;
  const isFirstTokenInTag = !context?.prev;
  if (!isFirstTokenInTag) return token;
  return transformTextToken(token, (text3) => text3.trimStart());
}
function trimTrailingWhitespace(token, context) {
  if (token.type !== 5) return token;
  const isLastTokenInTag = !context?.next;
  if (!isLastTokenInTag) return token;
  return transformTextToken(token, (text3) => text3.trimEnd());
}
function trimLeadingAndTrailingWhitespace(text3, context) {
  const isFirstTokenInTag = !context?.prev;
  const isLastTokenInTag = !context?.next;
  const maybeTrimmedStart = isFirstTokenInTag ? text3.trimStart() : text3;
  const maybeTrimmed = isLastTokenInTag ? maybeTrimmedStart.trimEnd() : maybeTrimmedStart;
  return maybeTrimmed;
}
function createWhitespaceProcessedTextToken({
  type,
  parts,
  sourceSpan
}) {
  return {
    type,
    parts: [processWhitespace(parts[0])],
    sourceSpan
  };
}
function transformTextToken({
  type,
  parts,
  sourceSpan
}, transform2) {
  return {
    type,
    parts: [transform2(parts[0])],
    sourceSpan
  };
}
function processWhitespace(text3) {
  return replaceNgsp(text3).replace(WS_REPLACE_REGEXP, " ");
}
function visitAllWithSiblings(visitor, nodes) {
  const result = [];
  nodes.forEach((ast, i) => {
    const context = {
      prev: nodes[i - 1],
      next: nodes[i + 1]
    };
    const astResult = ast.visit(visitor, context);
    if (astResult) {
      result.push(astResult);
    }
  });
  return result;
}
var TokenType;
(function(TokenType2) {
  TokenType2[TokenType2["Character"] = 0] = "Character";
  TokenType2[TokenType2["Identifier"] = 1] = "Identifier";
  TokenType2[TokenType2["PrivateIdentifier"] = 2] = "PrivateIdentifier";
  TokenType2[TokenType2["Keyword"] = 3] = "Keyword";
  TokenType2[TokenType2["String"] = 4] = "String";
  TokenType2[TokenType2["Operator"] = 5] = "Operator";
  TokenType2[TokenType2["Number"] = 6] = "Number";
  TokenType2[TokenType2["Error"] = 7] = "Error";
})(TokenType || (TokenType = {}));
var StringTokenKind;
(function(StringTokenKind2) {
  StringTokenKind2[StringTokenKind2["Plain"] = 0] = "Plain";
  StringTokenKind2[StringTokenKind2["TemplateLiteralPart"] = 1] = "TemplateLiteralPart";
  StringTokenKind2[StringTokenKind2["TemplateLiteralEnd"] = 2] = "TemplateLiteralEnd";
})(StringTokenKind || (StringTokenKind = {}));
var KEYWORDS = ["var", "let", "as", "null", "undefined", "true", "false", "if", "else", "this", "typeof"];
var Lexer = class {
  tokenize(text3) {
    return new _Scanner(text3).scan();
  }
};
var Token = class {
  index;
  end;
  type;
  numValue;
  strValue;
  constructor(index, end, type, numValue, strValue) {
    this.index = index;
    this.end = end;
    this.type = type;
    this.numValue = numValue;
    this.strValue = strValue;
  }
  isCharacter(code) {
    return this.type === TokenType.Character && this.numValue === code;
  }
  isNumber() {
    return this.type === TokenType.Number;
  }
  isString() {
    return this.type === TokenType.String;
  }
  isOperator(operator) {
    return this.type === TokenType.Operator && this.strValue === operator;
  }
  isIdentifier() {
    return this.type === TokenType.Identifier;
  }
  isPrivateIdentifier() {
    return this.type === TokenType.PrivateIdentifier;
  }
  isKeyword() {
    return this.type === TokenType.Keyword;
  }
  isKeywordLet() {
    return this.type === TokenType.Keyword && this.strValue === "let";
  }
  isKeywordAs() {
    return this.type === TokenType.Keyword && this.strValue === "as";
  }
  isKeywordNull() {
    return this.type === TokenType.Keyword && this.strValue === "null";
  }
  isKeywordUndefined() {
    return this.type === TokenType.Keyword && this.strValue === "undefined";
  }
  isKeywordTrue() {
    return this.type === TokenType.Keyword && this.strValue === "true";
  }
  isKeywordFalse() {
    return this.type === TokenType.Keyword && this.strValue === "false";
  }
  isKeywordThis() {
    return this.type === TokenType.Keyword && this.strValue === "this";
  }
  isKeywordTypeof() {
    return this.type === TokenType.Keyword && this.strValue === "typeof";
  }
  isError() {
    return this.type === TokenType.Error;
  }
  toNumber() {
    return this.type === TokenType.Number ? this.numValue : -1;
  }
  isTemplateLiteralPart() {
    return this.isString() && this.kind === StringTokenKind.TemplateLiteralPart;
  }
  isTemplateLiteralEnd() {
    return this.isString() && this.kind === StringTokenKind.TemplateLiteralEnd;
  }
  isTemplateLiteralInterpolationStart() {
    return this.isOperator("${");
  }
  isTemplateLiteralInterpolationEnd() {
    return this.isOperator("}");
  }
  toString() {
    switch (this.type) {
      case TokenType.Character:
      case TokenType.Identifier:
      case TokenType.Keyword:
      case TokenType.Operator:
      case TokenType.PrivateIdentifier:
      case TokenType.String:
      case TokenType.Error:
        return this.strValue;
      case TokenType.Number:
        return this.numValue.toString();
      default:
        return null;
    }
  }
};
var StringToken = class extends Token {
  kind;
  constructor(index, end, strValue, kind) {
    super(index, end, TokenType.String, 0, strValue);
    this.kind = kind;
  }
};
function newCharacterToken(index, end, code) {
  return new Token(index, end, TokenType.Character, code, String.fromCharCode(code));
}
function newIdentifierToken(index, end, text3) {
  return new Token(index, end, TokenType.Identifier, 0, text3);
}
function newPrivateIdentifierToken(index, end, text3) {
  return new Token(index, end, TokenType.PrivateIdentifier, 0, text3);
}
function newKeywordToken(index, end, text3) {
  return new Token(index, end, TokenType.Keyword, 0, text3);
}
function newOperatorToken(index, end, text3) {
  return new Token(index, end, TokenType.Operator, 0, text3);
}
function newNumberToken(index, end, n) {
  return new Token(index, end, TokenType.Number, n, "");
}
function newErrorToken(index, end, message) {
  return new Token(index, end, TokenType.Error, 0, message);
}
var EOF = new Token(-1, -1, TokenType.Character, 0, "");
var _Scanner = class {
  input;
  tokens = [];
  length;
  peek = 0;
  index = -1;
  braceStack = [];
  constructor(input2) {
    this.input = input2;
    this.length = input2.length;
    this.advance();
  }
  scan() {
    let token = this.scanToken();
    while (token !== null) {
      this.tokens.push(token);
      token = this.scanToken();
    }
    return this.tokens;
  }
  advance() {
    this.peek = ++this.index >= this.length ? $EOF : this.input.charCodeAt(this.index);
  }
  scanToken() {
    const input2 = this.input;
    const length = this.length;
    let peek = this.peek;
    let index = this.index;
    while (peek <= $SPACE) {
      if (++index >= length) {
        peek = $EOF;
        break;
      } else {
        peek = input2.charCodeAt(index);
      }
    }
    this.peek = peek;
    this.index = index;
    if (index >= length) {
      return null;
    }
    if (isIdentifierStart(peek)) {
      return this.scanIdentifier();
    }
    if (isDigit(peek)) {
      return this.scanNumber(index);
    }
    const start = index;
    switch (peek) {
      case $PERIOD:
        this.advance();
        return isDigit(this.peek) ? this.scanNumber(start) : newCharacterToken(start, this.index, $PERIOD);
      case $LPAREN:
      case $RPAREN:
      case $LBRACKET:
      case $RBRACKET:
      case $COMMA:
      case $COLON:
      case $SEMICOLON:
        return this.scanCharacter(start, peek);
      case $LBRACE:
        return this.scanOpenBrace(start, peek);
      case $RBRACE:
        return this.scanCloseBrace(start, peek);
      case $SQ:
      case $DQ:
        return this.scanString();
      case $BT:
        this.advance();
        return this.scanTemplateLiteralPart(start);
      case $HASH:
        return this.scanPrivateIdentifier();
      case $PLUS:
      case $MINUS:
      case $STAR:
      case $SLASH:
      case $PERCENT:
      case $CARET:
        return this.scanOperator(start, String.fromCharCode(peek));
      case $QUESTION:
        return this.scanQuestion(start);
      case $LT:
      case $GT:
        return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, "=");
      case $BANG:
      case $EQ:
        return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, "=", $EQ, "=");
      case $AMPERSAND:
        return this.scanComplexOperator(start, "&", $AMPERSAND, "&");
      case $BAR:
        return this.scanComplexOperator(start, "|", $BAR, "|");
      case $NBSP:
        while (isWhitespace(this.peek)) this.advance();
        return this.scanToken();
    }
    this.advance();
    return this.error(`Unexpected character [${String.fromCharCode(peek)}]`, 0);
  }
  scanCharacter(start, code) {
    this.advance();
    return newCharacterToken(start, this.index, code);
  }
  scanOperator(start, str) {
    this.advance();
    return newOperatorToken(start, this.index, str);
  }
  scanOpenBrace(start, code) {
    this.braceStack.push("expression");
    this.advance();
    return newCharacterToken(start, this.index, code);
  }
  scanCloseBrace(start, code) {
    this.advance();
    const currentBrace = this.braceStack.pop();
    if (currentBrace === "interpolation") {
      this.tokens.push(newOperatorToken(start, this.index, "}"));
      return this.scanTemplateLiteralPart(this.index);
    }
    return newCharacterToken(start, this.index, code);
  }
  /**
   * Tokenize a 2/3 char long operator
   *
   * @param start start index in the expression
   * @param one first symbol (always part of the operator)
   * @param twoCode code point for the second symbol
   * @param two second symbol (part of the operator when the second code point matches)
   * @param threeCode code point for the third symbol
   * @param three third symbol (part of the operator when provided and matches source expression)
   */
  scanComplexOperator(start, one, twoCode, two, threeCode, three) {
    this.advance();
    let str = one;
    if (this.peek == twoCode) {
      this.advance();
      str += two;
    }
    if (threeCode != null && this.peek == threeCode) {
      this.advance();
      str += three;
    }
    return newOperatorToken(start, this.index, str);
  }
  scanIdentifier() {
    const start = this.index;
    this.advance();
    while (isIdentifierPart(this.peek)) this.advance();
    const str = this.input.substring(start, this.index);
    return KEYWORDS.indexOf(str) > -1 ? newKeywordToken(start, this.index, str) : newIdentifierToken(start, this.index, str);
  }
  /** Scans an ECMAScript private identifier. */
  scanPrivateIdentifier() {
    const start = this.index;
    this.advance();
    if (!isIdentifierStart(this.peek)) {
      return this.error("Invalid character [#]", -1);
    }
    while (isIdentifierPart(this.peek)) this.advance();
    const identifierName2 = this.input.substring(start, this.index);
    return newPrivateIdentifierToken(start, this.index, identifierName2);
  }
  scanNumber(start) {
    let simple = this.index === start;
    let hasSeparators = false;
    this.advance();
    while (true) {
      if (isDigit(this.peek)) ;
      else if (this.peek === $_) {
        if (!isDigit(this.input.charCodeAt(this.index - 1)) || !isDigit(this.input.charCodeAt(this.index + 1))) {
          return this.error("Invalid numeric separator", 0);
        }
        hasSeparators = true;
      } else if (this.peek === $PERIOD) {
        simple = false;
      } else if (isExponentStart(this.peek)) {
        this.advance();
        if (isExponentSign(this.peek)) this.advance();
        if (!isDigit(this.peek)) return this.error("Invalid exponent", -1);
        simple = false;
      } else {
        break;
      }
      this.advance();
    }
    let str = this.input.substring(start, this.index);
    if (hasSeparators) {
      str = str.replace(/_/g, "");
    }
    const value = simple ? parseIntAutoRadix(str) : parseFloat(str);
    return newNumberToken(start, this.index, value);
  }
  scanString() {
    const start = this.index;
    const quote = this.peek;
    this.advance();
    let buffer = "";
    let marker = this.index;
    const input2 = this.input;
    while (this.peek != quote) {
      if (this.peek == $BACKSLASH) {
        const result = this.scanStringBackslash(buffer, marker);
        if (typeof result !== "string") {
          return result;
        }
        buffer = result;
        marker = this.index;
      } else if (this.peek == $EOF) {
        return this.error("Unterminated quote", 0);
      } else {
        this.advance();
      }
    }
    const last3 = input2.substring(marker, this.index);
    this.advance();
    return new StringToken(start, this.index, buffer + last3, StringTokenKind.Plain);
  }
  scanQuestion(start) {
    this.advance();
    let str = "?";
    if (this.peek === $QUESTION || this.peek === $PERIOD) {
      str += this.peek === $PERIOD ? "." : "?";
      this.advance();
    }
    return newOperatorToken(start, this.index, str);
  }
  scanTemplateLiteralPart(start) {
    let buffer = "";
    let marker = this.index;
    while (this.peek !== $BT) {
      if (this.peek === $BACKSLASH) {
        const result = this.scanStringBackslash(buffer, marker);
        if (typeof result !== "string") {
          return result;
        }
        buffer = result;
        marker = this.index;
      } else if (this.peek === $$) {
        const dollar = this.index;
        this.advance();
        if (this.peek === $LBRACE) {
          this.braceStack.push("interpolation");
          this.tokens.push(new StringToken(start, dollar, buffer + this.input.substring(marker, dollar), StringTokenKind.TemplateLiteralPart));
          this.advance();
          return newOperatorToken(dollar, this.index, this.input.substring(dollar, this.index));
        }
      } else if (this.peek === $EOF) {
        return this.error("Unterminated template literal", 0);
      } else {
        this.advance();
      }
    }
    const last3 = this.input.substring(marker, this.index);
    this.advance();
    return new StringToken(start, this.index, buffer + last3, StringTokenKind.TemplateLiteralEnd);
  }
  error(message, offset) {
    const position = this.index + offset;
    return newErrorToken(position, this.index, `Lexer Error: ${message} at column ${position} in expression [${this.input}]`);
  }
  scanStringBackslash(buffer, marker) {
    buffer += this.input.substring(marker, this.index);
    let unescapedCode;
    this.advance();
    if (this.peek === $u) {
      const hex = this.input.substring(this.index + 1, this.index + 5);
      if (/^[0-9a-f]+$/i.test(hex)) {
        unescapedCode = parseInt(hex, 16);
      } else {
        return this.error(`Invalid unicode escape [\\u${hex}]`, 0);
      }
      for (let i = 0; i < 5; i++) {
        this.advance();
      }
    } else {
      unescapedCode = unescape(this.peek);
      this.advance();
    }
    buffer += String.fromCharCode(unescapedCode);
    return buffer;
  }
};
function isIdentifierStart(code) {
  return $a <= code && code <= $z || $A <= code && code <= $Z || code == $_ || code == $$;
}
function isIdentifierPart(code) {
  return isAsciiLetter(code) || isDigit(code) || code == $_ || code == $$;
}
function isExponentStart(code) {
  return code == $e || code == $E;
}
function isExponentSign(code) {
  return code == $MINUS || code == $PLUS;
}
function unescape(code) {
  switch (code) {
    case $n:
      return $LF;
    case $f:
      return $FF;
    case $r:
      return $CR;
    case $t:
      return $TAB;
    case $v:
      return $VTAB;
    default:
      return code;
  }
}
function parseIntAutoRadix(text3) {
  const result = parseInt(text3);
  if (isNaN(result)) {
    throw new Error("Invalid integer literal when parsing " + text3);
  }
  return result;
}
var SplitInterpolation = class {
  strings;
  expressions;
  offsets;
  constructor(strings, expressions, offsets) {
    this.strings = strings;
    this.expressions = expressions;
    this.offsets = offsets;
  }
};
var TemplateBindingParseResult = class {
  templateBindings;
  warnings;
  errors;
  constructor(templateBindings, warnings, errors) {
    this.templateBindings = templateBindings;
    this.warnings = warnings;
    this.errors = errors;
  }
};
var Parser2 = class {
  _lexer;
  errors = [];
  constructor(_lexer) {
    this._lexer = _lexer;
  }
  parseAction(input2, location2, absoluteOffset, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {
    this._checkNoInterpolation(input2, location2, interpolationConfig);
    const sourceToLex = this._stripComments(input2);
    const tokens = this._lexer.tokenize(sourceToLex);
    const ast = new _ParseAST(input2, location2, absoluteOffset, tokens, 1, this.errors, 0).parseChain();
    return new ASTWithSource(ast, input2, location2, absoluteOffset, this.errors);
  }
  parseBinding(input2, location2, absoluteOffset, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {
    const ast = this._parseBindingAst(input2, location2, absoluteOffset, interpolationConfig);
    return new ASTWithSource(ast, input2, location2, absoluteOffset, this.errors);
  }
  checkSimpleExpression(ast) {
    const checker = new SimpleExpressionChecker();
    ast.visit(checker);
    return checker.errors;
  }
  // Host bindings parsed here
  parseSimpleBinding(input2, location2, absoluteOffset, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {
    const ast = this._parseBindingAst(input2, location2, absoluteOffset, interpolationConfig);
    const errors = this.checkSimpleExpression(ast);
    if (errors.length > 0) {
      this._reportError(`Host binding expression cannot contain ${errors.join(" ")}`, input2, location2);
    }
    return new ASTWithSource(ast, input2, location2, absoluteOffset, this.errors);
  }
  _reportError(message, input2, errLocation, ctxLocation) {
    this.errors.push(new ParserError(message, input2, errLocation, ctxLocation));
  }
  _parseBindingAst(input2, location2, absoluteOffset, interpolationConfig) {
    this._checkNoInterpolation(input2, location2, interpolationConfig);
    const sourceToLex = this._stripComments(input2);
    const tokens = this._lexer.tokenize(sourceToLex);
    return new _ParseAST(input2, location2, absoluteOffset, tokens, 0, this.errors, 0).parseChain();
  }
  /**
   * Parse microsyntax template expression and return a list of bindings or
   * parsing errors in case the given expression is invalid.
   *
   * For example,
   * ```html
   *   <div *ngFor="let item of items">
   *         ^      ^ absoluteValueOffset for `templateValue`
   *         absoluteKeyOffset for `templateKey`
   * ```
   * contains three bindings:
   * 1. ngFor -> null
   * 2. item -> NgForOfContext.$implicit
   * 3. ngForOf -> items
   *
   * This is apparent from the de-sugared template:
   * ```html
   *   <ng-template ngFor let-item [ngForOf]="items">
   * ```
   *
   * @param templateKey name of directive, without the * prefix. For example: ngIf, ngFor
   * @param templateValue RHS of the microsyntax attribute
   * @param templateUrl template filename if it's external, component filename if it's inline
   * @param absoluteKeyOffset start of the `templateKey`
   * @param absoluteValueOffset start of the `templateValue`
   */
  parseTemplateBindings(templateKey, templateValue, templateUrl, absoluteKeyOffset, absoluteValueOffset) {
    const tokens = this._lexer.tokenize(templateValue);
    const parser = new _ParseAST(
      templateValue,
      templateUrl,
      absoluteValueOffset,
      tokens,
      0,
      this.errors,
      0
      /* relative offset */
    );
    return parser.parseTemplateBindings({
      source: templateKey,
      span: new AbsoluteSourceSpan(absoluteKeyOffset, absoluteKeyOffset + templateKey.length)
    });
  }
  parseInterpolation(input2, location2, absoluteOffset, interpolatedTokens, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {
    const {
      strings,
      expressions,
      offsets
    } = this.splitInterpolation(input2, location2, interpolatedTokens, interpolationConfig);
    if (expressions.length === 0) return null;
    const expressionNodes = [];
    for (let i = 0; i < expressions.length; ++i) {
      const expressionText = expressions[i].text;
      const sourceToLex = this._stripComments(expressionText);
      const tokens = this._lexer.tokenize(sourceToLex);
      const ast = new _ParseAST(input2, location2, absoluteOffset, tokens, 0, this.errors, offsets[i]).parseChain();
      expressionNodes.push(ast);
    }
    return this.createInterpolationAst(strings.map((s) => s.text), expressionNodes, input2, location2, absoluteOffset);
  }
  /**
   * Similar to `parseInterpolation`, but treats the provided string as a single expression
   * element that would normally appear within the interpolation prefix and suffix (`{{` and `}}`).
   * This is used for parsing the switch expression in ICUs.
   */
  parseInterpolationExpression(expression, location2, absoluteOffset) {
    const sourceToLex = this._stripComments(expression);
    const tokens = this._lexer.tokenize(sourceToLex);
    const ast = new _ParseAST(expression, location2, absoluteOffset, tokens, 0, this.errors, 0).parseChain();
    const strings = ["", ""];
    return this.createInterpolationAst(strings, [ast], expression, location2, absoluteOffset);
  }
  createInterpolationAst(strings, expressions, input2, location2, absoluteOffset) {
    const span = new ParseSpan(0, input2.length);
    const interpolation = new Interpolation$1(span, span.toAbsolute(absoluteOffset), strings, expressions);
    return new ASTWithSource(interpolation, input2, location2, absoluteOffset, this.errors);
  }
  /**
   * Splits a string of text into "raw" text segments and expressions present in interpolations in
   * the string.
   * Returns `null` if there are no interpolations, otherwise a
   * `SplitInterpolation` with splits that look like
   *   <raw text> <expression> <raw text> ... <raw text> <expression> <raw text>
   */
  splitInterpolation(input2, location2, interpolatedTokens, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {
    const strings = [];
    const expressions = [];
    const offsets = [];
    const inputToTemplateIndexMap = interpolatedTokens ? getIndexMapForOriginalTemplate(interpolatedTokens) : null;
    let i = 0;
    let atInterpolation = false;
    let extendLastString = false;
    let {
      start: interpStart,
      end: interpEnd
    } = interpolationConfig;
    while (i < input2.length) {
      if (!atInterpolation) {
        const start = i;
        i = input2.indexOf(interpStart, i);
        if (i === -1) {
          i = input2.length;
        }
        const text3 = input2.substring(start, i);
        strings.push({
          text: text3,
          start,
          end: i
        });
        atInterpolation = true;
      } else {
        const fullStart = i;
        const exprStart = fullStart + interpStart.length;
        const exprEnd = this._getInterpolationEndIndex(input2, interpEnd, exprStart);
        if (exprEnd === -1) {
          atInterpolation = false;
          extendLastString = true;
          break;
        }
        const fullEnd = exprEnd + interpEnd.length;
        const text3 = input2.substring(exprStart, exprEnd);
        if (text3.trim().length === 0) {
          this._reportError("Blank expressions are not allowed in interpolated strings", input2, `at column ${i} in`, location2);
        }
        expressions.push({
          text: text3,
          start: fullStart,
          end: fullEnd
        });
        const startInOriginalTemplate = inputToTemplateIndexMap?.get(fullStart) ?? fullStart;
        const offset = startInOriginalTemplate + interpStart.length;
        offsets.push(offset);
        i = fullEnd;
        atInterpolation = false;
      }
    }
    if (!atInterpolation) {
      if (extendLastString) {
        const piece = strings[strings.length - 1];
        piece.text += input2.substring(i);
        piece.end = input2.length;
      } else {
        strings.push({
          text: input2.substring(i),
          start: i,
          end: input2.length
        });
      }
    }
    return new SplitInterpolation(strings, expressions, offsets);
  }
  wrapLiteralPrimitive(input2, location2, absoluteOffset) {
    const span = new ParseSpan(0, input2 == null ? 0 : input2.length);
    return new ASTWithSource(new LiteralPrimitive(span, span.toAbsolute(absoluteOffset), input2), input2, location2, absoluteOffset, this.errors);
  }
  _stripComments(input2) {
    const i = this._commentStart(input2);
    return i != null ? input2.substring(0, i) : input2;
  }
  _commentStart(input2) {
    let outerQuote = null;
    for (let i = 0; i < input2.length - 1; i++) {
      const char = input2.charCodeAt(i);
      const nextChar = input2.charCodeAt(i + 1);
      if (char === $SLASH && nextChar == $SLASH && outerQuote == null) return i;
      if (outerQuote === char) {
        outerQuote = null;
      } else if (outerQuote == null && isQuote(char)) {
        outerQuote = char;
      }
    }
    return null;
  }
  _checkNoInterpolation(input2, location2, {
    start,
    end
  }) {
    let startIndex = -1;
    let endIndex = -1;
    for (const charIndex of this._forEachUnquotedChar(input2, 0)) {
      if (startIndex === -1) {
        if (input2.startsWith(start)) {
          startIndex = charIndex;
        }
      } else {
        endIndex = this._getInterpolationEndIndex(input2, end, charIndex);
        if (endIndex > -1) {
          break;
        }
      }
    }
    if (startIndex > -1 && endIndex > -1) {
      this._reportError(`Got interpolation (${start}${end}) where expression was expected`, input2, `at column ${startIndex} in`, location2);
    }
  }
  /**
   * Finds the index of the end of an interpolation expression
   * while ignoring comments and quoted content.
   */
  _getInterpolationEndIndex(input2, expressionEnd, start) {
    for (const charIndex of this._forEachUnquotedChar(input2, start)) {
      if (input2.startsWith(expressionEnd, charIndex)) {
        return charIndex;
      }
      if (input2.startsWith("//", charIndex)) {
        return input2.indexOf(expressionEnd, charIndex);
      }
    }
    return -1;
  }
  /**
   * Generator used to iterate over the character indexes of a string that are outside of quotes.
   * @param input String to loop through.
   * @param start Index within the string at which to start.
   */
  *_forEachUnquotedChar(input2, start) {
    let currentQuote = null;
    let escapeCount = 0;
    for (let i = start; i < input2.length; i++) {
      const char = input2[i];
      if (isQuote(input2.charCodeAt(i)) && (currentQuote === null || currentQuote === char) && escapeCount % 2 === 0) {
        currentQuote = currentQuote === null ? char : null;
      } else if (currentQuote === null) {
        yield i;
      }
      escapeCount = char === "\\" ? escapeCount + 1 : 0;
    }
  }
};
var ParseContextFlags;
(function(ParseContextFlags2) {
  ParseContextFlags2[ParseContextFlags2["None"] = 0] = "None";
  ParseContextFlags2[ParseContextFlags2["Writable"] = 1] = "Writable";
})(ParseContextFlags || (ParseContextFlags = {}));
var _ParseAST = class {
  input;
  location;
  absoluteOffset;
  tokens;
  parseFlags;
  errors;
  offset;
  rparensExpected = 0;
  rbracketsExpected = 0;
  rbracesExpected = 0;
  context = ParseContextFlags.None;
  // Cache of expression start and input indeces to the absolute source span they map to, used to
  // prevent creating superfluous source spans in `sourceSpan`.
  // A serial of the expression start and input index is used for mapping because both are stateful
  // and may change for subsequent expressions visited by the parser.
  sourceSpanCache = /* @__PURE__ */ new Map();
  index = 0;
  constructor(input2, location2, absoluteOffset, tokens, parseFlags, errors, offset) {
    this.input = input2;
    this.location = location2;
    this.absoluteOffset = absoluteOffset;
    this.tokens = tokens;
    this.parseFlags = parseFlags;
    this.errors = errors;
    this.offset = offset;
  }
  peek(offset) {
    const i = this.index + offset;
    return i < this.tokens.length ? this.tokens[i] : EOF;
  }
  get next() {
    return this.peek(0);
  }
  /** Whether all the parser input has been processed. */
  get atEOF() {
    return this.index >= this.tokens.length;
  }
  /**
   * Index of the next token to be processed, or the end of the last token if all have been
   * processed.
   */
  get inputIndex() {
    return this.atEOF ? this.currentEndIndex : this.next.index + this.offset;
  }
  /**
   * End index of the last processed token, or the start of the first token if none have been
   * processed.
   */
  get currentEndIndex() {
    if (this.index > 0) {
      const curToken = this.peek(-1);
      return curToken.end + this.offset;
    }
    if (this.tokens.length === 0) {
      return this.input.length + this.offset;
    }
    return this.next.index + this.offset;
  }
  /**
   * Returns the absolute offset of the start of the current token.
   */
  get currentAbsoluteOffset() {
    return this.absoluteOffset + this.inputIndex;
  }
  /**
   * Retrieve a `ParseSpan` from `start` to the current position (or to `artificialEndIndex` if
   * provided).
   *
   * @param start Position from which the `ParseSpan` will start.
   * @param artificialEndIndex Optional ending index to be used if provided (and if greater than the
   *     natural ending index)
   */
  span(start, artificialEndIndex) {
    let endIndex = this.currentEndIndex;
    if (artificialEndIndex !== void 0 && artificialEndIndex > this.currentEndIndex) {
      endIndex = artificialEndIndex;
    }
    if (start > endIndex) {
      const tmp = endIndex;
      endIndex = start;
      start = tmp;
    }
    return new ParseSpan(start, endIndex);
  }
  sourceSpan(start, artificialEndIndex) {
    const serial = `${start}@${this.inputIndex}:${artificialEndIndex}`;
    if (!this.sourceSpanCache.has(serial)) {
      this.sourceSpanCache.set(serial, this.span(start, artificialEndIndex).toAbsolute(this.absoluteOffset));
    }
    return this.sourceSpanCache.get(serial);
  }
  advance() {
    this.index++;
  }
  /**
   * Executes a callback in the provided context.
   */
  withContext(context, cb) {
    this.context |= context;
    const ret = cb();
    this.context ^= context;
    return ret;
  }
  consumeOptionalCharacter(code) {
    if (this.next.isCharacter(code)) {
      this.advance();
      return true;
    } else {
      return false;
    }
  }
  peekKeywordLet() {
    return this.next.isKeywordLet();
  }
  peekKeywordAs() {
    return this.next.isKeywordAs();
  }
  /**
   * Consumes an expected character, otherwise emits an error about the missing expected character
   * and skips over the token stream until reaching a recoverable point.
   *
   * See `this.error` and `this.skip` for more details.
   */
  expectCharacter(code) {
    if (this.consumeOptionalCharacter(code)) return;
    this.error(`Missing expected ${String.fromCharCode(code)}`);
  }
  consumeOptionalOperator(op2) {
    if (this.next.isOperator(op2)) {
      this.advance();
      return true;
    } else {
      return false;
    }
  }
  expectOperator(operator) {
    if (this.consumeOptionalOperator(operator)) return;
    this.error(`Missing expected operator ${operator}`);
  }
  prettyPrintToken(tok) {
    return tok === EOF ? "end of input" : `token ${tok}`;
  }
  expectIdentifierOrKeyword() {
    const n = this.next;
    if (!n.isIdentifier() && !n.isKeyword()) {
      if (n.isPrivateIdentifier()) {
        this._reportErrorForPrivateIdentifier(n, "expected identifier or keyword");
      } else {
        this.error(`Unexpected ${this.prettyPrintToken(n)}, expected identifier or keyword`);
      }
      return null;
    }
    this.advance();
    return n.toString();
  }
  expectIdentifierOrKeywordOrString() {
    const n = this.next;
    if (!n.isIdentifier() && !n.isKeyword() && !n.isString()) {
      if (n.isPrivateIdentifier()) {
        this._reportErrorForPrivateIdentifier(n, "expected identifier, keyword or string");
      } else {
        this.error(`Unexpected ${this.prettyPrintToken(n)}, expected identifier, keyword, or string`);
      }
      return "";
    }
    this.advance();
    return n.toString();
  }
  parseChain() {
    const exprs = [];
    const start = this.inputIndex;
    while (this.index < this.tokens.length) {
      const expr = this.parsePipe();
      exprs.push(expr);
      if (this.consumeOptionalCharacter($SEMICOLON)) {
        if (!(this.parseFlags & 1)) {
          this.error("Binding expression cannot contain chained expression");
        }
        while (this.consumeOptionalCharacter($SEMICOLON)) {
        }
      } else if (this.index < this.tokens.length) {
        const errorIndex = this.index;
        this.error(`Unexpected token '${this.next}'`);
        if (this.index === errorIndex) {
          break;
        }
      }
    }
    if (exprs.length === 0) {
      const artificialStart = this.offset;
      const artificialEnd = this.offset + this.input.length;
      return new EmptyExpr$1(this.span(artificialStart, artificialEnd), this.sourceSpan(artificialStart, artificialEnd));
    }
    if (exprs.length == 1) return exprs[0];
    return new Chain(this.span(start), this.sourceSpan(start), exprs);
  }
  parsePipe() {
    const start = this.inputIndex;
    let result = this.parseExpression();
    if (this.consumeOptionalOperator("|")) {
      if (this.parseFlags & 1) {
        this.error(`Cannot have a pipe in an action expression`);
      }
      do {
        const nameStart = this.inputIndex;
        let nameId = this.expectIdentifierOrKeyword();
        let nameSpan;
        let fullSpanEnd = void 0;
        if (nameId !== null) {
          nameSpan = this.sourceSpan(nameStart);
        } else {
          nameId = "";
          fullSpanEnd = this.next.index !== -1 ? this.next.index : this.input.length + this.offset;
          nameSpan = new ParseSpan(fullSpanEnd, fullSpanEnd).toAbsolute(this.absoluteOffset);
        }
        const args = [];
        while (this.consumeOptionalCharacter($COLON)) {
          args.push(this.parseExpression());
        }
        result = new BindingPipe(this.span(start), this.sourceSpan(start, fullSpanEnd), result, nameId, args, nameSpan);
      } while (this.consumeOptionalOperator("|"));
    }
    return result;
  }
  parseExpression() {
    return this.parseConditional();
  }
  parseConditional() {
    const start = this.inputIndex;
    const result = this.parseLogicalOr();
    if (this.consumeOptionalOperator("?")) {
      const yes = this.parsePipe();
      let no;
      if (!this.consumeOptionalCharacter($COLON)) {
        const end = this.inputIndex;
        const expression = this.input.substring(start, end);
        this.error(`Conditional expression ${expression} requires all 3 expressions`);
        no = new EmptyExpr$1(this.span(start), this.sourceSpan(start));
      } else {
        no = this.parsePipe();
      }
      return new Conditional(this.span(start), this.sourceSpan(start), result, yes, no);
    } else {
      return result;
    }
  }
  parseLogicalOr() {
    const start = this.inputIndex;
    let result = this.parseLogicalAnd();
    while (this.consumeOptionalOperator("||")) {
      const right = this.parseLogicalAnd();
      result = new Binary(this.span(start), this.sourceSpan(start), "||", result, right);
    }
    return result;
  }
  parseLogicalAnd() {
    const start = this.inputIndex;
    let result = this.parseNullishCoalescing();
    while (this.consumeOptionalOperator("&&")) {
      const right = this.parseNullishCoalescing();
      result = new Binary(this.span(start), this.sourceSpan(start), "&&", result, right);
    }
    return result;
  }
  parseNullishCoalescing() {
    const start = this.inputIndex;
    let result = this.parseEquality();
    while (this.consumeOptionalOperator("??")) {
      const right = this.parseEquality();
      result = new Binary(this.span(start), this.sourceSpan(start), "??", result, right);
    }
    return result;
  }
  parseEquality() {
    const start = this.inputIndex;
    let result = this.parseRelational();
    while (this.next.type == TokenType.Operator) {
      const operator = this.next.strValue;
      switch (operator) {
        case "==":
        case "===":
        case "!=":
        case "!==":
          this.advance();
          const right = this.parseRelational();
          result = new Binary(this.span(start), this.sourceSpan(start), operator, result, right);
          continue;
      }
      break;
    }
    return result;
  }
  parseRelational() {
    const start = this.inputIndex;
    let result = this.parseAdditive();
    while (this.next.type == TokenType.Operator) {
      const operator = this.next.strValue;
      switch (operator) {
        case "<":
        case ">":
        case "<=":
        case ">=":
          this.advance();
          const right = this.parseAdditive();
          result = new Binary(this.span(start), this.sourceSpan(start), operator, result, right);
          continue;
      }
      break;
    }
    return result;
  }
  parseAdditive() {
    const start = this.inputIndex;
    let result = this.parseMultiplicative();
    while (this.next.type == TokenType.Operator) {
      const operator = this.next.strValue;
      switch (operator) {
        case "+":
        case "-":
          this.advance();
          let right = this.parseMultiplicative();
          result = new Binary(this.span(start), this.sourceSpan(start), operator, result, right);
          continue;
      }
      break;
    }
    return result;
  }
  parseMultiplicative() {
    const start = this.inputIndex;
    let result = this.parsePrefix();
    while (this.next.type == TokenType.Operator) {
      const operator = this.next.strValue;
      switch (operator) {
        case "*":
        case "%":
        case "/":
          this.advance();
          let right = this.parsePrefix();
          result = new Binary(this.span(start), this.sourceSpan(start), operator, result, right);
          continue;
      }
      break;
    }
    return result;
  }
  parsePrefix() {
    if (this.next.type == TokenType.Operator) {
      const start = this.inputIndex;
      const operator = this.next.strValue;
      let result;
      switch (operator) {
        case "+":
          this.advance();
          result = this.parsePrefix();
          return Unary.createPlus(this.span(start), this.sourceSpan(start), result);
        case "-":
          this.advance();
          result = this.parsePrefix();
          return Unary.createMinus(this.span(start), this.sourceSpan(start), result);
        case "!":
          this.advance();
          result = this.parsePrefix();
          return new PrefixNot(this.span(start), this.sourceSpan(start), result);
      }
    } else if (this.next.isKeywordTypeof()) {
      this.advance();
      const start = this.inputIndex;
      let result = this.parsePrefix();
      return new TypeofExpression(this.span(start), this.sourceSpan(start), result);
    }
    return this.parseCallChain();
  }
  parseCallChain() {
    const start = this.inputIndex;
    let result = this.parsePrimary();
    while (true) {
      if (this.consumeOptionalCharacter($PERIOD)) {
        result = this.parseAccessMember(result, start, false);
      } else if (this.consumeOptionalOperator("?.")) {
        if (this.consumeOptionalCharacter($LPAREN)) {
          result = this.parseCall(result, start, true);
        } else {
          result = this.consumeOptionalCharacter($LBRACKET) ? this.parseKeyedReadOrWrite(result, start, true) : this.parseAccessMember(result, start, true);
        }
      } else if (this.consumeOptionalCharacter($LBRACKET)) {
        result = this.parseKeyedReadOrWrite(result, start, false);
      } else if (this.consumeOptionalCharacter($LPAREN)) {
        result = this.parseCall(result, start, false);
      } else if (this.consumeOptionalOperator("!")) {
        result = new NonNullAssert(this.span(start), this.sourceSpan(start), result);
      } else {
        return result;
      }
    }
  }
  parsePrimary() {
    const start = this.inputIndex;
    if (this.consumeOptionalCharacter($LPAREN)) {
      this.rparensExpected++;
      const result = this.parsePipe();
      this.rparensExpected--;
      this.expectCharacter($RPAREN);
      return result;
    } else if (this.next.isKeywordNull()) {
      this.advance();
      return new LiteralPrimitive(this.span(start), this.sourceSpan(start), null);
    } else if (this.next.isKeywordUndefined()) {
      this.advance();
      return new LiteralPrimitive(this.span(start), this.sourceSpan(start), void 0);
    } else if (this.next.isKeywordTrue()) {
      this.advance();
      return new LiteralPrimitive(this.span(start), this.sourceSpan(start), true);
    } else if (this.next.isKeywordFalse()) {
      this.advance();
      return new LiteralPrimitive(this.span(start), this.sourceSpan(start), false);
    } else if (this.next.isKeywordThis()) {
      this.advance();
      return new ThisReceiver(this.span(start), this.sourceSpan(start));
    } else if (this.consumeOptionalCharacter($LBRACKET)) {
      this.rbracketsExpected++;
      const elements = this.parseExpressionList($RBRACKET);
      this.rbracketsExpected--;
      this.expectCharacter($RBRACKET);
      return new LiteralArray(this.span(start), this.sourceSpan(start), elements);
    } else if (this.next.isCharacter($LBRACE)) {
      return this.parseLiteralMap();
    } else if (this.next.isIdentifier()) {
      return this.parseAccessMember(new ImplicitReceiver(this.span(start), this.sourceSpan(start)), start, false);
    } else if (this.next.isNumber()) {
      const value = this.next.toNumber();
      this.advance();
      return new LiteralPrimitive(this.span(start), this.sourceSpan(start), value);
    } else if (this.next.isTemplateLiteralEnd()) {
      return this.parseNoInterpolationTemplateLiteral();
    } else if (this.next.isTemplateLiteralPart()) {
      return this.parseTemplateLiteral();
    } else if (this.next.isString() && this.next.kind === StringTokenKind.Plain) {
      const literalValue = this.next.toString();
      this.advance();
      return new LiteralPrimitive(this.span(start), this.sourceSpan(start), literalValue);
    } else if (this.next.isPrivateIdentifier()) {
      this._reportErrorForPrivateIdentifier(this.next, null);
      return new EmptyExpr$1(this.span(start), this.sourceSpan(start));
    } else if (this.index >= this.tokens.length) {
      this.error(`Unexpected end of expression: ${this.input}`);
      return new EmptyExpr$1(this.span(start), this.sourceSpan(start));
    } else {
      this.error(`Unexpected token ${this.next}`);
      return new EmptyExpr$1(this.span(start), this.sourceSpan(start));
    }
  }
  parseExpressionList(terminator) {
    const result = [];
    do {
      if (!this.next.isCharacter(terminator)) {
        result.push(this.parsePipe());
      } else {
        break;
      }
    } while (this.consumeOptionalCharacter($COMMA));
    return result;
  }
  parseLiteralMap() {
    const keys = [];
    const values = [];
    const start = this.inputIndex;
    this.expectCharacter($LBRACE);
    if (!this.consumeOptionalCharacter($RBRACE)) {
      this.rbracesExpected++;
      do {
        const keyStart = this.inputIndex;
        const quoted = this.next.isString();
        const key = this.expectIdentifierOrKeywordOrString();
        const literalMapKey = {
          key,
          quoted
        };
        keys.push(literalMapKey);
        if (quoted) {
          this.expectCharacter($COLON);
          values.push(this.parsePipe());
        } else if (this.consumeOptionalCharacter($COLON)) {
          values.push(this.parsePipe());
        } else {
          literalMapKey.isShorthandInitialized = true;
          const span = this.span(keyStart);
          const sourceSpan = this.sourceSpan(keyStart);
          values.push(new PropertyRead(span, sourceSpan, sourceSpan, new ImplicitReceiver(span, sourceSpan), key));
        }
      } while (this.consumeOptionalCharacter($COMMA) && !this.next.isCharacter($RBRACE));
      this.rbracesExpected--;
      this.expectCharacter($RBRACE);
    }
    return new LiteralMap(this.span(start), this.sourceSpan(start), keys, values);
  }
  parseAccessMember(readReceiver, start, isSafe) {
    const nameStart = this.inputIndex;
    const id = this.withContext(ParseContextFlags.Writable, () => {
      const id2 = this.expectIdentifierOrKeyword() ?? "";
      if (id2.length === 0) {
        this.error(`Expected identifier for property access`, readReceiver.span.end);
      }
      return id2;
    });
    const nameSpan = this.sourceSpan(nameStart);
    let receiver;
    if (isSafe) {
      if (this.consumeOptionalOperator("=")) {
        this.error("The '?.' operator cannot be used in the assignment");
        receiver = new EmptyExpr$1(this.span(start), this.sourceSpan(start));
      } else {
        receiver = new SafePropertyRead(this.span(start), this.sourceSpan(start), nameSpan, readReceiver, id);
      }
    } else {
      if (this.consumeOptionalOperator("=")) {
        if (!(this.parseFlags & 1)) {
          this.error("Bindings cannot contain assignments");
          return new EmptyExpr$1(this.span(start), this.sourceSpan(start));
        }
        const value = this.parseConditional();
        receiver = new PropertyWrite(this.span(start), this.sourceSpan(start), nameSpan, readReceiver, id, value);
      } else {
        receiver = new PropertyRead(this.span(start), this.sourceSpan(start), nameSpan, readReceiver, id);
      }
    }
    return receiver;
  }
  parseCall(receiver, start, isSafe) {
    const argumentStart = this.inputIndex;
    this.rparensExpected++;
    const args = this.parseCallArguments();
    const argumentSpan = this.span(argumentStart, this.inputIndex).toAbsolute(this.absoluteOffset);
    this.expectCharacter($RPAREN);
    this.rparensExpected--;
    const span = this.span(start);
    const sourceSpan = this.sourceSpan(start);
    return isSafe ? new SafeCall(span, sourceSpan, receiver, args, argumentSpan) : new Call(span, sourceSpan, receiver, args, argumentSpan);
  }
  parseCallArguments() {
    if (this.next.isCharacter($RPAREN)) return [];
    const positionals = [];
    do {
      positionals.push(this.parsePipe());
    } while (this.consumeOptionalCharacter($COMMA));
    return positionals;
  }
  /**
   * Parses an identifier, a keyword, a string with an optional `-` in between,
   * and returns the string along with its absolute source span.
   */
  expectTemplateBindingKey() {
    let result = "";
    let operatorFound = false;
    const start = this.currentAbsoluteOffset;
    do {
      result += this.expectIdentifierOrKeywordOrString();
      operatorFound = this.consumeOptionalOperator("-");
      if (operatorFound) {
        result += "-";
      }
    } while (operatorFound);
    return {
      source: result,
      span: new AbsoluteSourceSpan(start, start + result.length)
    };
  }
  /**
   * Parse microsyntax template expression and return a list of bindings or
   * parsing errors in case the given expression is invalid.
   *
   * For example,
   * ```html
   *   <div *ngFor="let item of items; index as i; trackBy: func">
   * ```
   * contains five bindings:
   * 1. ngFor -> null
   * 2. item -> NgForOfContext.$implicit
   * 3. ngForOf -> items
   * 4. i -> NgForOfContext.index
   * 5. ngForTrackBy -> func
   *
   * For a full description of the microsyntax grammar, see
   * https://gist.github.com/mhevery/d3530294cff2e4a1b3fe15ff75d08855
   *
   * @param templateKey name of the microsyntax directive, like ngIf, ngFor,
   * without the *, along with its absolute span.
   */
  parseTemplateBindings(templateKey) {
    const bindings = [];
    bindings.push(...this.parseDirectiveKeywordBindings(templateKey));
    while (this.index < this.tokens.length) {
      const letBinding = this.parseLetBinding();
      if (letBinding) {
        bindings.push(letBinding);
      } else {
        const key = this.expectTemplateBindingKey();
        const binding = this.parseAsBinding(key);
        if (binding) {
          bindings.push(binding);
        } else {
          key.source = templateKey.source + key.source.charAt(0).toUpperCase() + key.source.substring(1);
          bindings.push(...this.parseDirectiveKeywordBindings(key));
        }
      }
      this.consumeStatementTerminator();
    }
    return new TemplateBindingParseResult(bindings, [], this.errors);
  }
  parseKeyedReadOrWrite(receiver, start, isSafe) {
    return this.withContext(ParseContextFlags.Writable, () => {
      this.rbracketsExpected++;
      const key = this.parsePipe();
      if (key instanceof EmptyExpr$1) {
        this.error(`Key access cannot be empty`);
      }
      this.rbracketsExpected--;
      this.expectCharacter($RBRACKET);
      if (this.consumeOptionalOperator("=")) {
        if (isSafe) {
          this.error("The '?.' operator cannot be used in the assignment");
        } else {
          const value = this.parseConditional();
          return new KeyedWrite(this.span(start), this.sourceSpan(start), receiver, key, value);
        }
      } else {
        return isSafe ? new SafeKeyedRead(this.span(start), this.sourceSpan(start), receiver, key) : new KeyedRead(this.span(start), this.sourceSpan(start), receiver, key);
      }
      return new EmptyExpr$1(this.span(start), this.sourceSpan(start));
    });
  }
  /**
   * Parse a directive keyword, followed by a mandatory expression.
   * For example, "of items", "trackBy: func".
   * The bindings are: ngForOf -> items, ngForTrackBy -> func
   * There could be an optional "as" binding that follows the expression.
   * For example,
   * ```
   *   *ngFor="let item of items | slice:0:1 as collection".
   *                    ^^ ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^
   *               keyword    bound target   optional 'as' binding
   * ```
   *
   * @param key binding key, for example, ngFor, ngIf, ngForOf, along with its
   * absolute span.
   */
  parseDirectiveKeywordBindings(key) {
    const bindings = [];
    this.consumeOptionalCharacter($COLON);
    const value = this.getDirectiveBoundTarget();
    let spanEnd = this.currentAbsoluteOffset;
    const asBinding = this.parseAsBinding(key);
    if (!asBinding) {
      this.consumeStatementTerminator();
      spanEnd = this.currentAbsoluteOffset;
    }
    const sourceSpan = new AbsoluteSourceSpan(key.span.start, spanEnd);
    bindings.push(new ExpressionBinding(sourceSpan, key, value));
    if (asBinding) {
      bindings.push(asBinding);
    }
    return bindings;
  }
  /**
   * Return the expression AST for the bound target of a directive keyword
   * binding. For example,
   * ```
   *   *ngIf="condition | pipe"
   *          ^^^^^^^^^^^^^^^^ bound target for "ngIf"
   *   *ngFor="let item of items"
   *                       ^^^^^ bound target for "ngForOf"
   * ```
   */
  getDirectiveBoundTarget() {
    if (this.next === EOF || this.peekKeywordAs() || this.peekKeywordLet()) {
      return null;
    }
    const ast = this.parsePipe();
    const {
      start,
      end
    } = ast.span;
    const value = this.input.substring(start, end);
    return new ASTWithSource(ast, value, this.location, this.absoluteOffset + start, this.errors);
  }
  /**
   * Return the binding for a variable declared using `as`. Note that the order
   * of the key-value pair in this declaration is reversed. For example,
   * ```
   *   *ngFor="let item of items; index as i"
   *                              ^^^^^    ^
   *                              value    key
   * ```
   *
   * @param value name of the value in the declaration, "ngIf" in the example
   * above, along with its absolute span.
   */
  parseAsBinding(value) {
    if (!this.peekKeywordAs()) {
      return null;
    }
    this.advance();
    const key = this.expectTemplateBindingKey();
    this.consumeStatementTerminator();
    const sourceSpan = new AbsoluteSourceSpan(value.span.start, this.currentAbsoluteOffset);
    return new VariableBinding(sourceSpan, key, value);
  }
  /**
   * Return the binding for a variable declared using `let`. For example,
   * ```
   *   *ngFor="let item of items; let i=index;"
   *           ^^^^^^^^           ^^^^^^^^^^^
   * ```
   * In the first binding, `item` is bound to `NgForOfContext.$implicit`.
   * In the second binding, `i` is bound to `NgForOfContext.index`.
   */
  parseLetBinding() {
    if (!this.peekKeywordLet()) {
      return null;
    }
    const spanStart = this.currentAbsoluteOffset;
    this.advance();
    const key = this.expectTemplateBindingKey();
    let value = null;
    if (this.consumeOptionalOperator("=")) {
      value = this.expectTemplateBindingKey();
    }
    this.consumeStatementTerminator();
    const sourceSpan = new AbsoluteSourceSpan(spanStart, this.currentAbsoluteOffset);
    return new VariableBinding(sourceSpan, key, value);
  }
  parseNoInterpolationTemplateLiteral() {
    const text3 = this.next.strValue;
    const start = this.inputIndex;
    this.advance();
    const span = this.span(start);
    const sourceSpan = this.sourceSpan(start);
    return new TemplateLiteral(span, sourceSpan, [new TemplateLiteralElement(span, sourceSpan, text3)], []);
  }
  parseTemplateLiteral() {
    const start = this.inputIndex;
    const elements = [];
    const expressions = [];
    while (this.next !== EOF) {
      const token = this.next;
      if (token.isTemplateLiteralPart() || token.isTemplateLiteralEnd()) {
        const partStart = this.inputIndex;
        this.advance();
        elements.push(new TemplateLiteralElement(this.span(partStart), this.sourceSpan(partStart), token.strValue));
        if (token.isTemplateLiteralEnd()) {
          break;
        }
      } else if (token.isTemplateLiteralInterpolationStart()) {
        this.advance();
        const expression = this.parsePipe();
        if (expression instanceof EmptyExpr$1) {
          this.error("Template literal interpolation cannot be empty");
        } else {
          expressions.push(expression);
        }
      } else {
        this.advance();
      }
    }
    return new TemplateLiteral(this.span(start), this.sourceSpan(start), elements, expressions);
  }
  /**
   * Consume the optional statement terminator: semicolon or comma.
   */
  consumeStatementTerminator() {
    this.consumeOptionalCharacter($SEMICOLON) || this.consumeOptionalCharacter($COMMA);
  }
  /**
   * Records an error and skips over the token stream until reaching a recoverable point. See
   * `this.skip` for more details on token skipping.
   */
  error(message, index = null) {
    this.errors.push(new ParserError(message, this.input, this.locationText(index), this.location));
    this.skip();
  }
  locationText(index = null) {
    if (index == null) index = this.index;
    return index < this.tokens.length ? `at column ${this.tokens[index].index + 1} in` : `at the end of the expression`;
  }
  /**
   * Records an error for an unexpected private identifier being discovered.
   * @param token Token representing a private identifier.
   * @param extraMessage Optional additional message being appended to the error.
   */
  _reportErrorForPrivateIdentifier(token, extraMessage) {
    let errorMessage = `Private identifiers are not supported. Unexpected private identifier: ${token}`;
    if (extraMessage !== null) {
      errorMessage += `, ${extraMessage}`;
    }
    this.error(errorMessage);
  }
  /**
   * Error recovery should skip tokens until it encounters a recovery point.
   *
   * The following are treated as unconditional recovery points:
   *   - end of input
   *   - ';' (parseChain() is always the root production, and it expects a ';')
   *   - '|' (since pipes may be chained and each pipe expression may be treated independently)
   *
   * The following are conditional recovery points:
   *   - ')', '}', ']' if one of calling productions is expecting one of these symbols
   *     - This allows skip() to recover from errors such as '(a.) + 1' allowing more of the AST to
   *       be retained (it doesn't skip any tokens as the ')' is retained because of the '(' begins
   *       an '(' <expr> ')' production).
   *       The recovery points of grouping symbols must be conditional as they must be skipped if
   *       none of the calling productions are not expecting the closing token else we will never
   *       make progress in the case of an extraneous group closing symbol (such as a stray ')').
   *       That is, we skip a closing symbol if we are not in a grouping production.
   *   - '=' in a `Writable` context
   *     - In this context, we are able to recover after seeing the `=` operator, which
   *       signals the presence of an independent rvalue expression following the `=` operator.
   *
   * If a production expects one of these token it increments the corresponding nesting count,
   * and then decrements it just prior to checking if the token is in the input.
   */
  skip() {
    let n = this.next;
    while (this.index < this.tokens.length && !n.isCharacter($SEMICOLON) && !n.isOperator("|") && (this.rparensExpected <= 0 || !n.isCharacter($RPAREN)) && (this.rbracesExpected <= 0 || !n.isCharacter($RBRACE)) && (this.rbracketsExpected <= 0 || !n.isCharacter($RBRACKET)) && (!(this.context & ParseContextFlags.Writable) || !n.isOperator("="))) {
      if (this.next.isError()) {
        this.errors.push(new ParserError(this.next.toString(), this.input, this.locationText(), this.location));
      }
      this.advance();
      n = this.next;
    }
  }
};
var SimpleExpressionChecker = class extends RecursiveAstVisitor {
  errors = [];
  visitPipe() {
    this.errors.push("pipes");
  }
};
function getIndexMapForOriginalTemplate(interpolatedTokens) {
  let offsetMap = /* @__PURE__ */ new Map();
  let consumedInOriginalTemplate = 0;
  let consumedInInput = 0;
  let tokenIndex = 0;
  while (tokenIndex < interpolatedTokens.length) {
    const currentToken = interpolatedTokens[tokenIndex];
    if (currentToken.type === 9) {
      const [decoded, encoded] = currentToken.parts;
      consumedInOriginalTemplate += encoded.length;
      consumedInInput += decoded.length;
    } else {
      const lengthOfParts = currentToken.parts.reduce((sum, current) => sum + current.length, 0);
      consumedInInput += lengthOfParts;
      consumedInOriginalTemplate += lengthOfParts;
    }
    offsetMap.set(consumedInInput, consumedInOriginalTemplate);
    tokenIndex++;
  }
  return offsetMap;
}
function serialize(expression) {
  return expression.visit(new SerializeExpressionVisitor());
}
var SerializeExpressionVisitor = class {
  visitUnary(ast, context) {
    return `${ast.operator}${ast.expr.visit(this, context)}`;
  }
  visitBinary(ast, context) {
    return `${ast.left.visit(this, context)} ${ast.operation} ${ast.right.visit(this, context)}`;
  }
  visitChain(ast, context) {
    return ast.expressions.map((e) => e.visit(this, context)).join("; ");
  }
  visitConditional(ast, context) {
    return `${ast.condition.visit(this, context)} ? ${ast.trueExp.visit(this, context)} : ${ast.falseExp.visit(this, context)}`;
  }
  visitThisReceiver() {
    return "this";
  }
  visitImplicitReceiver() {
    return "";
  }
  visitInterpolation(ast, context) {
    return interleave(ast.strings, ast.expressions.map((e) => e.visit(this, context))).join("");
  }
  visitKeyedRead(ast, context) {
    return `${ast.receiver.visit(this, context)}[${ast.key.visit(this, context)}]`;
  }
  visitKeyedWrite(ast, context) {
    return `${ast.receiver.visit(this, context)}[${ast.key.visit(this, context)}] = ${ast.value.visit(this, context)}`;
  }
  visitLiteralArray(ast, context) {
    return `[${ast.expressions.map((e) => e.visit(this, context)).join(", ")}]`;
  }
  visitLiteralMap(ast, context) {
    return `{${zip(ast.keys.map((literal2) => literal2.quoted ? `'${literal2.key}'` : literal2.key), ast.values.map((value) => value.visit(this, context))).map(([key, value]) => `${key}: ${value}`).join(", ")}}`;
  }
  visitLiteralPrimitive(ast) {
    if (ast.value === null) return "null";
    switch (typeof ast.value) {
      case "number":
      case "boolean":
        return ast.value.toString();
      case "undefined":
        return "undefined";
      case "string":
        return `'${ast.value.replace(/'/g, `\\'`)}'`;
      default:
        throw new Error(`Unsupported primitive type: ${ast.value}`);
    }
  }
  visitPipe(ast, context) {
    return `${ast.exp.visit(this, context)} | ${ast.name}`;
  }
  visitPrefixNot(ast, context) {
    return `!${ast.expression.visit(this, context)}`;
  }
  visitNonNullAssert(ast, context) {
    return `${ast.expression.visit(this, context)}!`;
  }
  visitPropertyRead(ast, context) {
    if (ast.receiver instanceof ImplicitReceiver) {
      return ast.name;
    } else {
      return `${ast.receiver.visit(this, context)}.${ast.name}`;
    }
  }
  visitPropertyWrite(ast, context) {
    if (ast.receiver instanceof ImplicitReceiver) {
      return `${ast.name} = ${ast.value.visit(this, context)}`;
    } else {
      return `${ast.receiver.visit(this, context)}.${ast.name} = ${ast.value.visit(this, context)}`;
    }
  }
  visitSafePropertyRead(ast, context) {
    return `${ast.receiver.visit(this, context)}?.${ast.name}`;
  }
  visitSafeKeyedRead(ast, context) {
    return `${ast.receiver.visit(this, context)}?.[${ast.key.visit(this, context)}]`;
  }
  visitCall(ast, context) {
    return `${ast.receiver.visit(this, context)}(${ast.args.map((e) => e.visit(this, context)).join(", ")})`;
  }
  visitSafeCall(ast, context) {
    return `${ast.receiver.visit(this, context)}?.(${ast.args.map((e) => e.visit(this, context)).join(", ")})`;
  }
  visitTypeofExpression(ast, context) {
    return `typeof ${ast.expression.visit(this, context)}`;
  }
  visitASTWithSource(ast, context) {
    return ast.ast.visit(this, context);
  }
  visitTemplateLiteral(ast, context) {
    let result = "";
    for (let i = 0; i < ast.elements.length; i++) {
      result += ast.elements[i].visit(this, context);
      const expression = i < ast.expressions.length ? ast.expressions[i] : null;
      if (expression !== null) {
        result += "${" + expression.visit(this, context) + "}";
      }
    }
    return "`" + result + "`";
  }
  visitTemplateLiteralElement(ast, context) {
    return ast.text;
  }
};
function zip(left, right) {
  if (left.length !== right.length) throw new Error("Array lengths must match");
  return left.map((l, i) => [l, right[i]]);
}
function interleave(left, right) {
  const result = [];
  for (let index = 0; index < Math.max(left.length, right.length); index++) {
    if (index < left.length) result.push(left[index]);
    if (index < right.length) result.push(right[index]);
  }
  return result;
}
var _SECURITY_SCHEMA;
function SECURITY_SCHEMA() {
  if (!_SECURITY_SCHEMA) {
    _SECURITY_SCHEMA = {};
    registerContext(SecurityContext2.HTML, ["iframe|srcdoc", "*|innerHTML", "*|outerHTML"]);
    registerContext(SecurityContext2.STYLE, ["*|style"]);
    registerContext(SecurityContext2.URL, ["*|formAction", "area|href", "area|ping", "audio|src", "a|href", "a|ping", "blockquote|cite", "body|background", "del|cite", "form|action", "img|src", "input|src", "ins|cite", "q|cite", "source|src", "track|src", "video|poster", "video|src"]);
    registerContext(SecurityContext2.RESOURCE_URL, ["applet|code", "applet|codebase", "base|href", "embed|src", "frame|src", "head|profile", "html|manifest", "iframe|src", "link|href", "media|src", "object|codebase", "object|data", "script|src"]);
  }
  return _SECURITY_SCHEMA;
}
function registerContext(ctx, specs) {
  for (const spec of specs) _SECURITY_SCHEMA[spec.toLowerCase()] = ctx;
}
var IFRAME_SECURITY_SENSITIVE_ATTRS = /* @__PURE__ */ new Set(["sandbox", "allow", "allowfullscreen", "referrerpolicy", "csp", "fetchpriority"]);
function isIframeSecuritySensitiveAttr(attrName) {
  return IFRAME_SECURITY_SENSITIVE_ATTRS.has(attrName.toLowerCase());
}
var ElementSchemaRegistry = class {
};
var BOOLEAN = "boolean";
var NUMBER = "number";
var STRING = "string";
var OBJECT = "object";
var SCHEMA = ["[Element]|textContent,%ariaAtomic,%ariaAutoComplete,%ariaBusy,%ariaChecked,%ariaColCount,%ariaColIndex,%ariaColSpan,%ariaCurrent,%ariaDescription,%ariaDisabled,%ariaExpanded,%ariaHasPopup,%ariaHidden,%ariaKeyShortcuts,%ariaLabel,%ariaLevel,%ariaLive,%ariaModal,%ariaMultiLine,%ariaMultiSelectable,%ariaOrientation,%ariaPlaceholder,%ariaPosInSet,%ariaPressed,%ariaReadOnly,%ariaRelevant,%ariaRequired,%ariaRoleDescription,%ariaRowCount,%ariaRowIndex,%ariaRowSpan,%ariaSelected,%ariaSetSize,%ariaSort,%ariaValueMax,%ariaValueMin,%ariaValueNow,%ariaValueText,%classList,className,elementTiming,id,innerHTML,*beforecopy,*beforecut,*beforepaste,*fullscreenchange,*fullscreenerror,*search,*webkitfullscreenchange,*webkitfullscreenerror,outerHTML,%part,#scrollLeft,#scrollTop,slot,*message,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored", "[HTMLElement]^[Element]|accessKey,autocapitalize,!autofocus,contentEditable,dir,!draggable,enterKeyHint,!hidden,!inert,innerText,inputMode,lang,nonce,*abort,*animationend,*animationiteration,*animationstart,*auxclick,*beforexrselect,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*formdata,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*paste,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerrawupdate,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*securitypolicyviolation,*seeked,*seeking,*select,*selectionchange,*selectstart,*slotchange,*stalled,*submit,*suspend,*timeupdate,*toggle,*transitioncancel,*transitionend,*transitionrun,*transitionstart,*volumechange,*waiting,*webkitanimationend,*webkitanimationiteration,*webkitanimationstart,*webkittransitionend,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate,virtualKeyboardPolicy", "abbr,address,article,aside,b,bdi,bdo,cite,content,code,dd,dfn,dt,em,figcaption,figure,footer,header,hgroup,i,kbd,main,mark,nav,noscript,rb,rp,rt,rtc,ruby,s,samp,search,section,small,strong,sub,sup,u,var,wbr^[HTMLElement]|accessKey,autocapitalize,!autofocus,contentEditable,dir,!draggable,enterKeyHint,!hidden,innerText,inputMode,lang,nonce,*abort,*animationend,*animationiteration,*animationstart,*auxclick,*beforexrselect,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*formdata,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*paste,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerrawupdate,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*securitypolicyviolation,*seeked,*seeking,*select,*selectionchange,*selectstart,*slotchange,*stalled,*submit,*suspend,*timeupdate,*toggle,*transitioncancel,*transitionend,*transitionrun,*transitionstart,*volumechange,*waiting,*webkitanimationend,*webkitanimationiteration,*webkitanimationstart,*webkittransitionend,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate,virtualKeyboardPolicy", "media^[HTMLElement]|!autoplay,!controls,%controlsList,%crossOrigin,#currentTime,!defaultMuted,#defaultPlaybackRate,!disableRemotePlayback,!loop,!muted,*encrypted,*waitingforkey,#playbackRate,preload,!preservesPitch,src,%srcObject,#volume", ":svg:^[HTMLElement]|!autofocus,nonce,*abort,*animationend,*animationiteration,*animationstart,*auxclick,*beforexrselect,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*formdata,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*paste,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerrawupdate,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*securitypolicyviolation,*seeked,*seeking,*select,*selectionchange,*selectstart,*slotchange,*stalled,*submit,*suspend,*timeupdate,*toggle,*transitioncancel,*transitionend,*transitionrun,*transitionstart,*volumechange,*waiting,*webkitanimationend,*webkitanimationiteration,*webkitanimationstart,*webkittransitionend,*wheel,%style,#tabIndex", ":svg:graphics^:svg:|", ":svg:animation^:svg:|*begin,*end,*repeat", ":svg:geometry^:svg:|", ":svg:componentTransferFunction^:svg:|", ":svg:gradient^:svg:|", ":svg:textContent^:svg:graphics|", ":svg:textPositioning^:svg:textContent|", "a^[HTMLElement]|charset,coords,download,hash,host,hostname,href,hreflang,name,password,pathname,ping,port,protocol,referrerPolicy,rel,%relList,rev,search,shape,target,text,type,username", "area^[HTMLElement]|alt,coords,download,hash,host,hostname,href,!noHref,password,pathname,ping,port,protocol,referrerPolicy,rel,%relList,search,shape,target,username", "audio^media|", "br^[HTMLElement]|clear", "base^[HTMLElement]|href,target", "body^[HTMLElement]|aLink,background,bgColor,link,*afterprint,*beforeprint,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*messageerror,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,text,vLink", "button^[HTMLElement]|!disabled,formAction,formEnctype,formMethod,!formNoValidate,formTarget,name,type,value", "canvas^[HTMLElement]|#height,#width", "content^[HTMLElement]|select", "dl^[HTMLElement]|!compact", "data^[HTMLElement]|value", "datalist^[HTMLElement]|", "details^[HTMLElement]|!open", "dialog^[HTMLElement]|!open,returnValue", "dir^[HTMLElement]|!compact", "div^[HTMLElement]|align", "embed^[HTMLElement]|align,height,name,src,type,width", "fieldset^[HTMLElement]|!disabled,name", "font^[HTMLElement]|color,face,size", "form^[HTMLElement]|acceptCharset,action,autocomplete,encoding,enctype,method,name,!noValidate,target", "frame^[HTMLElement]|frameBorder,longDesc,marginHeight,marginWidth,name,!noResize,scrolling,src", "frameset^[HTMLElement]|cols,*afterprint,*beforeprint,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*messageerror,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,rows", "hr^[HTMLElement]|align,color,!noShade,size,width", "head^[HTMLElement]|", "h1,h2,h3,h4,h5,h6^[HTMLElement]|align", "html^[HTMLElement]|version", "iframe^[HTMLElement]|align,allow,!allowFullscreen,!allowPaymentRequest,csp,frameBorder,height,loading,longDesc,marginHeight,marginWidth,name,referrerPolicy,%sandbox,scrolling,src,srcdoc,width", "img^[HTMLElement]|align,alt,border,%crossOrigin,decoding,#height,#hspace,!isMap,loading,longDesc,lowsrc,name,referrerPolicy,sizes,src,srcset,useMap,#vspace,#width", "input^[HTMLElement]|accept,align,alt,autocomplete,!checked,!defaultChecked,defaultValue,dirName,!disabled,%files,formAction,formEnctype,formMethod,!formNoValidate,formTarget,#height,!incremental,!indeterminate,max,#maxLength,min,#minLength,!multiple,name,pattern,placeholder,!readOnly,!required,selectionDirection,#selectionEnd,#selectionStart,#size,src,step,type,useMap,value,%valueAsDate,#valueAsNumber,#width", "li^[HTMLElement]|type,#value", "label^[HTMLElement]|htmlFor", "legend^[HTMLElement]|align", "link^[HTMLElement]|as,charset,%crossOrigin,!disabled,href,hreflang,imageSizes,imageSrcset,integrity,media,referrerPolicy,rel,%relList,rev,%sizes,target,type", "map^[HTMLElement]|name", "marquee^[HTMLElement]|behavior,bgColor,direction,height,#hspace,#loop,#scrollAmount,#scrollDelay,!trueSpeed,#vspace,width", "menu^[HTMLElement]|!compact", "meta^[HTMLElement]|content,httpEquiv,media,name,scheme", "meter^[HTMLElement]|#high,#low,#max,#min,#optimum,#value", "ins,del^[HTMLElement]|cite,dateTime", "ol^[HTMLElement]|!compact,!reversed,#start,type", "object^[HTMLElement]|align,archive,border,code,codeBase,codeType,data,!declare,height,#hspace,name,standby,type,useMap,#vspace,width", "optgroup^[HTMLElement]|!disabled,label", "option^[HTMLElement]|!defaultSelected,!disabled,label,!selected,text,value", "output^[HTMLElement]|defaultValue,%htmlFor,name,value", "p^[HTMLElement]|align", "param^[HTMLElement]|name,type,value,valueType", "picture^[HTMLElement]|", "pre^[HTMLElement]|#width", "progress^[HTMLElement]|#max,#value", "q,blockquote,cite^[HTMLElement]|", "script^[HTMLElement]|!async,charset,%crossOrigin,!defer,event,htmlFor,integrity,!noModule,%referrerPolicy,src,text,type", "select^[HTMLElement]|autocomplete,!disabled,#length,!multiple,name,!required,#selectedIndex,#size,value", "slot^[HTMLElement]|name", "source^[HTMLElement]|#height,media,sizes,src,srcset,type,#width", "span^[HTMLElement]|", "style^[HTMLElement]|!disabled,media,type", "search^[HTMLELement]|", "caption^[HTMLElement]|align", "th,td^[HTMLElement]|abbr,align,axis,bgColor,ch,chOff,#colSpan,headers,height,!noWrap,#rowSpan,scope,vAlign,width", "col,colgroup^[HTMLElement]|align,ch,chOff,#span,vAlign,width", "table^[HTMLElement]|align,bgColor,border,%caption,cellPadding,cellSpacing,frame,rules,summary,%tFoot,%tHead,width", "tr^[HTMLElement]|align,bgColor,ch,chOff,vAlign", "tfoot,thead,tbody^[HTMLElement]|align,ch,chOff,vAlign", "template^[HTMLElement]|", "textarea^[HTMLElement]|autocomplete,#cols,defaultValue,dirName,!disabled,#maxLength,#minLength,name,placeholder,!readOnly,!required,#rows,selectionDirection,#selectionEnd,#selectionStart,value,wrap", "time^[HTMLElement]|dateTime", "title^[HTMLElement]|text", "track^[HTMLElement]|!default,kind,label,src,srclang", "ul^[HTMLElement]|!compact,type", "unknown^[HTMLElement]|", "video^media|!disablePictureInPicture,#height,*enterpictureinpicture,*leavepictureinpicture,!playsInline,poster,#width", ":svg:a^:svg:graphics|", ":svg:animate^:svg:animation|", ":svg:animateMotion^:svg:animation|", ":svg:animateTransform^:svg:animation|", ":svg:circle^:svg:geometry|", ":svg:clipPath^:svg:graphics|", ":svg:defs^:svg:graphics|", ":svg:desc^:svg:|", ":svg:discard^:svg:|", ":svg:ellipse^:svg:geometry|", ":svg:feBlend^:svg:|", ":svg:feColorMatrix^:svg:|", ":svg:feComponentTransfer^:svg:|", ":svg:feComposite^:svg:|", ":svg:feConvolveMatrix^:svg:|", ":svg:feDiffuseLighting^:svg:|", ":svg:feDisplacementMap^:svg:|", ":svg:feDistantLight^:svg:|", ":svg:feDropShadow^:svg:|", ":svg:feFlood^:svg:|", ":svg:feFuncA^:svg:componentTransferFunction|", ":svg:feFuncB^:svg:componentTransferFunction|", ":svg:feFuncG^:svg:componentTransferFunction|", ":svg:feFuncR^:svg:componentTransferFunction|", ":svg:feGaussianBlur^:svg:|", ":svg:feImage^:svg:|", ":svg:feMerge^:svg:|", ":svg:feMergeNode^:svg:|", ":svg:feMorphology^:svg:|", ":svg:feOffset^:svg:|", ":svg:fePointLight^:svg:|", ":svg:feSpecularLighting^:svg:|", ":svg:feSpotLight^:svg:|", ":svg:feTile^:svg:|", ":svg:feTurbulence^:svg:|", ":svg:filter^:svg:|", ":svg:foreignObject^:svg:graphics|", ":svg:g^:svg:graphics|", ":svg:image^:svg:graphics|decoding", ":svg:line^:svg:geometry|", ":svg:linearGradient^:svg:gradient|", ":svg:mpath^:svg:|", ":svg:marker^:svg:|", ":svg:mask^:svg:|", ":svg:metadata^:svg:|", ":svg:path^:svg:geometry|", ":svg:pattern^:svg:|", ":svg:polygon^:svg:geometry|", ":svg:polyline^:svg:geometry|", ":svg:radialGradient^:svg:gradient|", ":svg:rect^:svg:geometry|", ":svg:svg^:svg:graphics|#currentScale,#zoomAndPan", ":svg:script^:svg:|type", ":svg:set^:svg:animation|", ":svg:stop^:svg:|", ":svg:style^:svg:|!disabled,media,title,type", ":svg:switch^:svg:graphics|", ":svg:symbol^:svg:|", ":svg:tspan^:svg:textPositioning|", ":svg:text^:svg:textPositioning|", ":svg:textPath^:svg:textContent|", ":svg:title^:svg:|", ":svg:use^:svg:graphics|", ":svg:view^:svg:|#zoomAndPan", "data^[HTMLElement]|value", "keygen^[HTMLElement]|!autofocus,challenge,!disabled,form,keytype,name", "menuitem^[HTMLElement]|type,label,icon,!disabled,!checked,radiogroup,!default", "summary^[HTMLElement]|", "time^[HTMLElement]|dateTime", ":svg:cursor^:svg:|", ":math:^[HTMLElement]|!autofocus,nonce,*abort,*animationend,*animationiteration,*animationstart,*auxclick,*beforeinput,*beforematch,*beforetoggle,*beforexrselect,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contentvisibilityautostatechange,*contextlost,*contextmenu,*contextrestored,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*formdata,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*paste,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerrawupdate,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*scrollend,*securitypolicyviolation,*seeked,*seeking,*select,*selectionchange,*selectstart,*slotchange,*stalled,*submit,*suspend,*timeupdate,*toggle,*transitioncancel,*transitionend,*transitionrun,*transitionstart,*volumechange,*waiting,*webkitanimationend,*webkitanimationiteration,*webkitanimationstart,*webkittransitionend,*wheel,%style,#tabIndex", ":math:math^:math:|", ":math:maction^:math:|", ":math:menclose^:math:|", ":math:merror^:math:|", ":math:mfenced^:math:|", ":math:mfrac^:math:|", ":math:mi^:math:|", ":math:mmultiscripts^:math:|", ":math:mn^:math:|", ":math:mo^:math:|", ":math:mover^:math:|", ":math:mpadded^:math:|", ":math:mphantom^:math:|", ":math:mroot^:math:|", ":math:mrow^:math:|", ":math:ms^:math:|", ":math:mspace^:math:|", ":math:msqrt^:math:|", ":math:mstyle^:math:|", ":math:msub^:math:|", ":math:msubsup^:math:|", ":math:msup^:math:|", ":math:mtable^:math:|", ":math:mtd^:math:|", ":math:mtext^:math:|", ":math:mtr^:math:|", ":math:munder^:math:|", ":math:munderover^:math:|", ":math:semantics^:math:|"];
var _ATTR_TO_PROP = new Map(Object.entries({
  "class": "className",
  "for": "htmlFor",
  "formaction": "formAction",
  "innerHtml": "innerHTML",
  "readonly": "readOnly",
  "tabindex": "tabIndex"
}));
var _PROP_TO_ATTR = Array.from(_ATTR_TO_PROP).reduce((inverted, [propertyName, attributeName]) => {
  inverted.set(propertyName, attributeName);
  return inverted;
}, /* @__PURE__ */ new Map());
var DomElementSchemaRegistry = class extends ElementSchemaRegistry {
  _schema = /* @__PURE__ */ new Map();
  // We don't allow binding to events for security reasons. Allowing event bindings would almost
  // certainly introduce bad XSS vulnerabilities. Instead, we store events in a separate schema.
  _eventSchema = /* @__PURE__ */ new Map();
  constructor() {
    super();
    SCHEMA.forEach((encodedType) => {
      const type = /* @__PURE__ */ new Map();
      const events = /* @__PURE__ */ new Set();
      const [strType, strProperties] = encodedType.split("|");
      const properties = strProperties.split(",");
      const [typeNames, superName] = strType.split("^");
      typeNames.split(",").forEach((tag) => {
        this._schema.set(tag.toLowerCase(), type);
        this._eventSchema.set(tag.toLowerCase(), events);
      });
      const superType = superName && this._schema.get(superName.toLowerCase());
      if (superType) {
        for (const [prop, value] of superType) {
          type.set(prop, value);
        }
        for (const superEvent of this._eventSchema.get(superName.toLowerCase())) {
          events.add(superEvent);
        }
      }
      properties.forEach((property2) => {
        if (property2.length > 0) {
          switch (property2[0]) {
            case "*":
              events.add(property2.substring(1));
              break;
            case "!":
              type.set(property2.substring(1), BOOLEAN);
              break;
            case "#":
              type.set(property2.substring(1), NUMBER);
              break;
            case "%":
              type.set(property2.substring(1), OBJECT);
              break;
            default:
              type.set(property2, STRING);
          }
        }
      });
    });
  }
  hasProperty(tagName, propName, schemaMetas) {
    if (schemaMetas.some((schema) => schema.name === NO_ERRORS_SCHEMA.name)) {
      return true;
    }
    if (tagName.indexOf("-") > -1) {
      if (isNgContainer(tagName) || isNgContent(tagName)) {
        return false;
      }
      if (schemaMetas.some((schema) => schema.name === CUSTOM_ELEMENTS_SCHEMA.name)) {
        return true;
      }
    }
    const elementProperties = this._schema.get(tagName.toLowerCase()) || this._schema.get("unknown");
    return elementProperties.has(propName);
  }
  hasElement(tagName, schemaMetas) {
    if (schemaMetas.some((schema) => schema.name === NO_ERRORS_SCHEMA.name)) {
      return true;
    }
    if (tagName.indexOf("-") > -1) {
      if (isNgContainer(tagName) || isNgContent(tagName)) {
        return true;
      }
      if (schemaMetas.some((schema) => schema.name === CUSTOM_ELEMENTS_SCHEMA.name)) {
        return true;
      }
    }
    return this._schema.has(tagName.toLowerCase());
  }
  /**
   * securityContext returns the security context for the given property on the given DOM tag.
   *
   * Tag and property name are statically known and cannot change at runtime, i.e. it is not
   * possible to bind a value into a changing attribute or tag name.
   *
   * The filtering is based on a list of allowed tags|attributes. All attributes in the schema
   * above are assumed to have the 'NONE' security context, i.e. that they are safe inert
   * string values. Only specific well known attack vectors are assigned their appropriate context.
   */
  securityContext(tagName, propName, isAttribute) {
    if (isAttribute) {
      propName = this.getMappedPropName(propName);
    }
    tagName = tagName.toLowerCase();
    propName = propName.toLowerCase();
    let ctx = SECURITY_SCHEMA()[tagName + "|" + propName];
    if (ctx) {
      return ctx;
    }
    ctx = SECURITY_SCHEMA()["*|" + propName];
    return ctx ? ctx : SecurityContext2.NONE;
  }
  getMappedPropName(propName) {
    return _ATTR_TO_PROP.get(propName) ?? propName;
  }
  getDefaultComponentElementName() {
    return "ng-component";
  }
  validateProperty(name) {
    if (name.toLowerCase().startsWith("on")) {
      const msg = `Binding to event property '${name}' is disallowed for security reasons, please use (${name.slice(2)})=...
If '${name}' is a directive input, make sure the directive is imported by the current module.`;
      return {
        error: true,
        msg
      };
    } else {
      return {
        error: false
      };
    }
  }
  validateAttribute(name) {
    if (name.toLowerCase().startsWith("on")) {
      const msg = `Binding to event attribute '${name}' is disallowed for security reasons, please use (${name.slice(2)})=...`;
      return {
        error: true,
        msg
      };
    } else {
      return {
        error: false
      };
    }
  }
  allKnownElementNames() {
    return Array.from(this._schema.keys());
  }
  allKnownAttributesOfElement(tagName) {
    const elementProperties = this._schema.get(tagName.toLowerCase()) || this._schema.get("unknown");
    return Array.from(elementProperties.keys()).map((prop) => _PROP_TO_ATTR.get(prop) ?? prop);
  }
  allKnownEventsOfElement(tagName) {
    return Array.from(this._eventSchema.get(tagName.toLowerCase()) ?? []);
  }
  normalizeAnimationStyleProperty(propName) {
    return dashCaseToCamelCase(propName);
  }
  normalizeAnimationStyleValue(camelCaseProp, userProvidedProp, val) {
    let unit = "";
    const strVal = val.toString().trim();
    let errorMsg = null;
    if (_isPixelDimensionStyle(camelCaseProp) && val !== 0 && val !== "0") {
      if (typeof val === "number") {
        unit = "px";
      } else {
        const valAndSuffixMatch = val.match(/^[+-]?[\d\.]+([a-z]*)$/);
        if (valAndSuffixMatch && valAndSuffixMatch[1].length == 0) {
          errorMsg = `Please provide a CSS unit value for ${userProvidedProp}:${val}`;
        }
      }
    }
    return {
      error: errorMsg,
      value: strVal + unit
    };
  }
};
function _isPixelDimensionStyle(prop) {
  switch (prop) {
    case "width":
    case "height":
    case "minWidth":
    case "minHeight":
    case "maxWidth":
    case "maxHeight":
    case "left":
    case "top":
    case "bottom":
    case "right":
    case "fontSize":
    case "outlineWidth":
    case "outlineOffset":
    case "paddingTop":
    case "paddingLeft":
    case "paddingBottom":
    case "paddingRight":
    case "marginTop":
    case "marginLeft":
    case "marginBottom":
    case "marginRight":
    case "borderRadius":
    case "borderWidth":
    case "borderTopWidth":
    case "borderLeftWidth":
    case "borderRightWidth":
    case "borderBottomWidth":
    case "textIndent":
      return true;
    default:
      return false;
  }
}
var HtmlTagDefinition = class {
  closedByChildren = {};
  contentType;
  closedByParent = false;
  implicitNamespacePrefix;
  isVoid;
  ignoreFirstLf;
  canSelfClose;
  preventNamespaceInheritance;
  constructor({
    closedByChildren,
    implicitNamespacePrefix,
    contentType = TagContentType.PARSABLE_DATA,
    closedByParent = false,
    isVoid = false,
    ignoreFirstLf = false,
    preventNamespaceInheritance = false,
    canSelfClose = false
  } = {}) {
    if (closedByChildren && closedByChildren.length > 0) {
      closedByChildren.forEach((tagName) => this.closedByChildren[tagName] = true);
    }
    this.isVoid = isVoid;
    this.closedByParent = closedByParent || isVoid;
    this.implicitNamespacePrefix = implicitNamespacePrefix || null;
    this.contentType = contentType;
    this.ignoreFirstLf = ignoreFirstLf;
    this.preventNamespaceInheritance = preventNamespaceInheritance;
    this.canSelfClose = canSelfClose ?? isVoid;
  }
  isClosedByChild(name) {
    return this.isVoid || name.toLowerCase() in this.closedByChildren;
  }
  getContentType(prefix) {
    if (typeof this.contentType === "object") {
      const overrideType = prefix === void 0 ? void 0 : this.contentType[prefix];
      return overrideType ?? this.contentType.default;
    }
    return this.contentType;
  }
};
var DEFAULT_TAG_DEFINITION;
var TAG_DEFINITIONS;
function getHtmlTagDefinition(tagName) {
  if (!TAG_DEFINITIONS) {
    DEFAULT_TAG_DEFINITION = new HtmlTagDefinition({
      canSelfClose: true
    });
    TAG_DEFINITIONS = Object.assign(/* @__PURE__ */ Object.create(null), {
      "base": new HtmlTagDefinition({
        isVoid: true
      }),
      "meta": new HtmlTagDefinition({
        isVoid: true
      }),
      "area": new HtmlTagDefinition({
        isVoid: true
      }),
      "embed": new HtmlTagDefinition({
        isVoid: true
      }),
      "link": new HtmlTagDefinition({
        isVoid: true
      }),
      "img": new HtmlTagDefinition({
        isVoid: true
      }),
      "input": new HtmlTagDefinition({
        isVoid: true
      }),
      "param": new HtmlTagDefinition({
        isVoid: true
      }),
      "hr": new HtmlTagDefinition({
        isVoid: true
      }),
      "br": new HtmlTagDefinition({
        isVoid: true
      }),
      "source": new HtmlTagDefinition({
        isVoid: true
      }),
      "track": new HtmlTagDefinition({
        isVoid: true
      }),
      "wbr": new HtmlTagDefinition({
        isVoid: true
      }),
      "p": new HtmlTagDefinition({
        closedByChildren: ["address", "article", "aside", "blockquote", "div", "dl", "fieldset", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "header", "hgroup", "hr", "main", "nav", "ol", "p", "pre", "section", "table", "ul"],
        closedByParent: true
      }),
      "thead": new HtmlTagDefinition({
        closedByChildren: ["tbody", "tfoot"]
      }),
      "tbody": new HtmlTagDefinition({
        closedByChildren: ["tbody", "tfoot"],
        closedByParent: true
      }),
      "tfoot": new HtmlTagDefinition({
        closedByChildren: ["tbody"],
        closedByParent: true
      }),
      "tr": new HtmlTagDefinition({
        closedByChildren: ["tr"],
        closedByParent: true
      }),
      "td": new HtmlTagDefinition({
        closedByChildren: ["td", "th"],
        closedByParent: true
      }),
      "th": new HtmlTagDefinition({
        closedByChildren: ["td", "th"],
        closedByParent: true
      }),
      "col": new HtmlTagDefinition({
        isVoid: true
      }),
      "svg": new HtmlTagDefinition({
        implicitNamespacePrefix: "svg"
      }),
      "foreignObject": new HtmlTagDefinition({
        // Usually the implicit namespace here would be redundant since it will be inherited from
        // the parent `svg`, but we have to do it for `foreignObject`, because the way the parser
        // works is that the parent node of an end tag is its own start tag which means that
        // the `preventNamespaceInheritance` on `foreignObject` would have it default to the
        // implicit namespace which is `html`, unless specified otherwise.
        implicitNamespacePrefix: "svg",
        // We want to prevent children of foreignObject from inheriting its namespace, because
        // the point of the element is to allow nodes from other namespaces to be inserted.
        preventNamespaceInheritance: true
      }),
      "math": new HtmlTagDefinition({
        implicitNamespacePrefix: "math"
      }),
      "li": new HtmlTagDefinition({
        closedByChildren: ["li"],
        closedByParent: true
      }),
      "dt": new HtmlTagDefinition({
        closedByChildren: ["dt", "dd"]
      }),
      "dd": new HtmlTagDefinition({
        closedByChildren: ["dt", "dd"],
        closedByParent: true
      }),
      "rb": new HtmlTagDefinition({
        closedByChildren: ["rb", "rt", "rtc", "rp"],
        closedByParent: true
      }),
      "rt": new HtmlTagDefinition({
        closedByChildren: ["rb", "rt", "rtc", "rp"],
        closedByParent: true
      }),
      "rtc": new HtmlTagDefinition({
        closedByChildren: ["rb", "rtc", "rp"],
        closedByParent: true
      }),
      "rp": new HtmlTagDefinition({
        closedByChildren: ["rb", "rt", "rtc", "rp"],
        closedByParent: true
      }),
      "optgroup": new HtmlTagDefinition({
        closedByChildren: ["optgroup"],
        closedByParent: true
      }),
      "option": new HtmlTagDefinition({
        closedByChildren: ["option", "optgroup"],
        closedByParent: true
      }),
      "pre": new HtmlTagDefinition({
        ignoreFirstLf: true
      }),
      "listing": new HtmlTagDefinition({
        ignoreFirstLf: true
      }),
      "style": new HtmlTagDefinition({
        contentType: TagContentType.RAW_TEXT
      }),
      "script": new HtmlTagDefinition({
        contentType: TagContentType.RAW_TEXT
      }),
      "title": new HtmlTagDefinition({
        // The browser supports two separate `title` tags which have to use
        // a different content type: `HTMLTitleElement` and `SVGTitleElement`
        contentType: {
          default: TagContentType.ESCAPABLE_RAW_TEXT,
          svg: TagContentType.PARSABLE_DATA
        }
      }),
      "textarea": new HtmlTagDefinition({
        contentType: TagContentType.ESCAPABLE_RAW_TEXT,
        ignoreFirstLf: true
      })
    });
    new DomElementSchemaRegistry().allKnownElementNames().forEach((knownTagName) => {
      if (!TAG_DEFINITIONS[knownTagName] && getNsPrefix(knownTagName) === null) {
        TAG_DEFINITIONS[knownTagName] = new HtmlTagDefinition({
          canSelfClose: false
        });
      }
    });
  }
  return TAG_DEFINITIONS[tagName] ?? TAG_DEFINITIONS[tagName.toLowerCase()] ?? DEFAULT_TAG_DEFINITION;
}
var TAG_TO_PLACEHOLDER_NAMES = {
  "A": "LINK",
  "B": "BOLD_TEXT",
  "BR": "LINE_BREAK",
  "EM": "EMPHASISED_TEXT",
  "H1": "HEADING_LEVEL1",
  "H2": "HEADING_LEVEL2",
  "H3": "HEADING_LEVEL3",
  "H4": "HEADING_LEVEL4",
  "H5": "HEADING_LEVEL5",
  "H6": "HEADING_LEVEL6",
  "HR": "HORIZONTAL_RULE",
  "I": "ITALIC_TEXT",
  "LI": "LIST_ITEM",
  "LINK": "MEDIA_LINK",
  "OL": "ORDERED_LIST",
  "P": "PARAGRAPH",
  "Q": "QUOTATION",
  "S": "STRIKETHROUGH_TEXT",
  "SMALL": "SMALL_TEXT",
  "SUB": "SUBSTRIPT",
  "SUP": "SUPERSCRIPT",
  "TBODY": "TABLE_BODY",
  "TD": "TABLE_CELL",
  "TFOOT": "TABLE_FOOTER",
  "TH": "TABLE_HEADER_CELL",
  "THEAD": "TABLE_HEADER",
  "TR": "TABLE_ROW",
  "TT": "MONOSPACED_TEXT",
  "U": "UNDERLINED_TEXT",
  "UL": "UNORDERED_LIST"
};
var PlaceholderRegistry = class {
  // Count the occurrence of the base name top generate a unique name
  _placeHolderNameCounts = {};
  // Maps signature to placeholder names
  _signatureToName = {};
  getStartTagPlaceholderName(tag, attrs, isVoid) {
    const signature = this._hashTag(tag, attrs, isVoid);
    if (this._signatureToName[signature]) {
      return this._signatureToName[signature];
    }
    const upperTag = tag.toUpperCase();
    const baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || `TAG_${upperTag}`;
    const name = this._generateUniqueName(isVoid ? baseName : `START_${baseName}`);
    this._signatureToName[signature] = name;
    return name;
  }
  getCloseTagPlaceholderName(tag) {
    const signature = this._hashClosingTag(tag);
    if (this._signatureToName[signature]) {
      return this._signatureToName[signature];
    }
    const upperTag = tag.toUpperCase();
    const baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || `TAG_${upperTag}`;
    const name = this._generateUniqueName(`CLOSE_${baseName}`);
    this._signatureToName[signature] = name;
    return name;
  }
  getPlaceholderName(name, content) {
    const upperName = name.toUpperCase();
    const signature = `PH: ${upperName}=${content}`;
    if (this._signatureToName[signature]) {
      return this._signatureToName[signature];
    }
    const uniqueName = this._generateUniqueName(upperName);
    this._signatureToName[signature] = uniqueName;
    return uniqueName;
  }
  getUniquePlaceholder(name) {
    return this._generateUniqueName(name.toUpperCase());
  }
  getStartBlockPlaceholderName(name, parameters) {
    const signature = this._hashBlock(name, parameters);
    if (this._signatureToName[signature]) {
      return this._signatureToName[signature];
    }
    const placeholder = this._generateUniqueName(`START_BLOCK_${this._toSnakeCase(name)}`);
    this._signatureToName[signature] = placeholder;
    return placeholder;
  }
  getCloseBlockPlaceholderName(name) {
    const signature = this._hashClosingBlock(name);
    if (this._signatureToName[signature]) {
      return this._signatureToName[signature];
    }
    const placeholder = this._generateUniqueName(`CLOSE_BLOCK_${this._toSnakeCase(name)}`);
    this._signatureToName[signature] = placeholder;
    return placeholder;
  }
  // Generate a hash for a tag - does not take attribute order into account
  _hashTag(tag, attrs, isVoid) {
    const start = `<${tag}`;
    const strAttrs = Object.keys(attrs).sort().map((name) => ` ${name}=${attrs[name]}`).join("");
    const end = isVoid ? "/>" : `></${tag}>`;
    return start + strAttrs + end;
  }
  _hashClosingTag(tag) {
    return this._hashTag(`/${tag}`, {}, false);
  }
  _hashBlock(name, parameters) {
    const params = parameters.length === 0 ? "" : ` (${parameters.sort().join("; ")})`;
    return `@${name}${params} {}`;
  }
  _hashClosingBlock(name) {
    return this._hashBlock(`close_${name}`, []);
  }
  _toSnakeCase(name) {
    return name.toUpperCase().replace(/[^A-Z0-9]/g, "_");
  }
  _generateUniqueName(base) {
    const seen = this._placeHolderNameCounts.hasOwnProperty(base);
    if (!seen) {
      this._placeHolderNameCounts[base] = 1;
      return base;
    }
    const id = this._placeHolderNameCounts[base];
    this._placeHolderNameCounts[base] = id + 1;
    return `${base}_${id}`;
  }
};
var _expParser = new Parser2(new Lexer());
function createI18nMessageFactory(interpolationConfig, containerBlocks, retainEmptyTokens, preserveExpressionWhitespace) {
  const visitor = new _I18nVisitor(_expParser, interpolationConfig, containerBlocks, retainEmptyTokens, preserveExpressionWhitespace);
  return (nodes, meaning, description, customId, visitNodeFn) => visitor.toI18nMessage(nodes, meaning, description, customId, visitNodeFn);
}
function noopVisitNodeFn(_html, i18n2) {
  return i18n2;
}
var _I18nVisitor = class {
  _expressionParser;
  _interpolationConfig;
  _containerBlocks;
  _retainEmptyTokens;
  _preserveExpressionWhitespace;
  constructor(_expressionParser, _interpolationConfig, _containerBlocks, _retainEmptyTokens, _preserveExpressionWhitespace) {
    this._expressionParser = _expressionParser;
    this._interpolationConfig = _interpolationConfig;
    this._containerBlocks = _containerBlocks;
    this._retainEmptyTokens = _retainEmptyTokens;
    this._preserveExpressionWhitespace = _preserveExpressionWhitespace;
  }
  toI18nMessage(nodes, meaning = "", description = "", customId = "", visitNodeFn) {
    const context = {
      isIcu: nodes.length == 1 && nodes[0] instanceof Expansion,
      icuDepth: 0,
      placeholderRegistry: new PlaceholderRegistry(),
      placeholderToContent: {},
      placeholderToMessage: {},
      visitNodeFn: visitNodeFn || noopVisitNodeFn
    };
    const i18nodes = visitAll(this, nodes, context);
    return new Message(i18nodes, context.placeholderToContent, context.placeholderToMessage, meaning, description, customId);
  }
  visitElement(el, context) {
    const children = visitAll(this, el.children, context);
    const attrs = {};
    el.attrs.forEach((attr) => {
      attrs[attr.name] = attr.value;
    });
    const isVoid = getHtmlTagDefinition(el.name).isVoid;
    const startPhName = context.placeholderRegistry.getStartTagPlaceholderName(el.name, attrs, isVoid);
    context.placeholderToContent[startPhName] = {
      text: el.startSourceSpan.toString(),
      sourceSpan: el.startSourceSpan
    };
    let closePhName = "";
    if (!isVoid) {
      closePhName = context.placeholderRegistry.getCloseTagPlaceholderName(el.name);
      context.placeholderToContent[closePhName] = {
        text: `</${el.name}>`,
        sourceSpan: el.endSourceSpan ?? el.sourceSpan
      };
    }
    const node = new TagPlaceholder(el.name, attrs, startPhName, closePhName, children, isVoid, el.sourceSpan, el.startSourceSpan, el.endSourceSpan);
    return context.visitNodeFn(el, node);
  }
  visitAttribute(attribute2, context) {
    const node = attribute2.valueTokens === void 0 || attribute2.valueTokens.length === 1 ? new Text$2(attribute2.value, attribute2.valueSpan || attribute2.sourceSpan) : this._visitTextWithInterpolation(attribute2.valueTokens, attribute2.valueSpan || attribute2.sourceSpan, context, attribute2.i18n);
    return context.visitNodeFn(attribute2, node);
  }
  visitText(text3, context) {
    const node = text3.tokens.length === 1 ? new Text$2(text3.value, text3.sourceSpan) : this._visitTextWithInterpolation(text3.tokens, text3.sourceSpan, context, text3.i18n);
    return context.visitNodeFn(text3, node);
  }
  visitComment(comment, context) {
    return null;
  }
  visitExpansion(icu, context) {
    context.icuDepth++;
    const i18nIcuCases = {};
    const i18nIcu = new Icu2(icu.switchValue, icu.type, i18nIcuCases, icu.sourceSpan);
    icu.cases.forEach((caze) => {
      i18nIcuCases[caze.value] = new Container(caze.expression.map((node2) => node2.visit(this, context)), caze.expSourceSpan);
    });
    context.icuDepth--;
    if (context.isIcu || context.icuDepth > 0) {
      const expPh = context.placeholderRegistry.getUniquePlaceholder(`VAR_${icu.type}`);
      i18nIcu.expressionPlaceholder = expPh;
      context.placeholderToContent[expPh] = {
        text: icu.switchValue,
        sourceSpan: icu.switchValueSourceSpan
      };
      return context.visitNodeFn(icu, i18nIcu);
    }
    const phName = context.placeholderRegistry.getPlaceholderName("ICU", icu.sourceSpan.toString());
    context.placeholderToMessage[phName] = this.toI18nMessage([icu], "", "", "", void 0);
    const node = new IcuPlaceholder(i18nIcu, phName, icu.sourceSpan);
    return context.visitNodeFn(icu, node);
  }
  visitExpansionCase(_icuCase, _context) {
    throw new Error("Unreachable code");
  }
  visitBlock(block, context) {
    const children = visitAll(this, block.children, context);
    if (this._containerBlocks.has(block.name)) {
      return new Container(children, block.sourceSpan);
    }
    const parameters = block.parameters.map((param) => param.expression);
    const startPhName = context.placeholderRegistry.getStartBlockPlaceholderName(block.name, parameters);
    const closePhName = context.placeholderRegistry.getCloseBlockPlaceholderName(block.name);
    context.placeholderToContent[startPhName] = {
      text: block.startSourceSpan.toString(),
      sourceSpan: block.startSourceSpan
    };
    context.placeholderToContent[closePhName] = {
      text: block.endSourceSpan ? block.endSourceSpan.toString() : "}",
      sourceSpan: block.endSourceSpan ?? block.sourceSpan
    };
    const node = new BlockPlaceholder(block.name, parameters, startPhName, closePhName, children, block.sourceSpan, block.startSourceSpan, block.endSourceSpan);
    return context.visitNodeFn(block, node);
  }
  visitBlockParameter(_parameter, _context) {
    throw new Error("Unreachable code");
  }
  visitLetDeclaration(decl, context) {
    return null;
  }
  /**
   * Convert, text and interpolated tokens up into text and placeholder pieces.
   *
   * @param tokens The text and interpolated tokens.
   * @param sourceSpan The span of the whole of the `text` string.
   * @param context The current context of the visitor, used to compute and store placeholders.
   * @param previousI18n Any i18n metadata associated with this `text` from a previous pass.
   */
  _visitTextWithInterpolation(tokens, sourceSpan, context, previousI18n) {
    const nodes = [];
    let hasInterpolation = false;
    for (const token of tokens) {
      switch (token.type) {
        case 8:
        case 17:
          hasInterpolation = true;
          const [startMarker, expression, endMarker] = token.parts;
          const baseName = extractPlaceholderName(expression) || "INTERPOLATION";
          const phName = context.placeholderRegistry.getPlaceholderName(baseName, expression);
          if (this._preserveExpressionWhitespace) {
            context.placeholderToContent[phName] = {
              text: token.parts.join(""),
              sourceSpan: token.sourceSpan
            };
            nodes.push(new Placeholder(expression, phName, token.sourceSpan));
          } else {
            const normalized = this.normalizeExpression(token);
            context.placeholderToContent[phName] = {
              text: `${startMarker}${normalized}${endMarker}`,
              sourceSpan: token.sourceSpan
            };
            nodes.push(new Placeholder(normalized, phName, token.sourceSpan));
          }
          break;
        default:
          if (token.parts[0].length > 0 || this._retainEmptyTokens) {
            const previous = nodes[nodes.length - 1];
            if (previous instanceof Text$2) {
              previous.value += token.parts[0];
              previous.sourceSpan = new ParseSourceSpan(previous.sourceSpan.start, token.sourceSpan.end, previous.sourceSpan.fullStart, previous.sourceSpan.details);
            } else {
              nodes.push(new Text$2(token.parts[0], token.sourceSpan));
            }
          } else {
            if (this._retainEmptyTokens) {
              nodes.push(new Text$2(token.parts[0], token.sourceSpan));
            }
          }
          break;
      }
    }
    if (hasInterpolation) {
      reusePreviousSourceSpans(nodes, previousI18n);
      return new Container(nodes, sourceSpan);
    } else {
      return nodes[0];
    }
  }
  // Normalize expression whitespace by parsing and re-serializing it. This makes
  // message IDs more durable to insignificant whitespace changes.
  normalizeExpression(token) {
    const expression = token.parts[1];
    const expr = this._expressionParser.parseBinding(
      expression,
      /* location */
      token.sourceSpan.start.toString(),
      /* absoluteOffset */
      token.sourceSpan.start.offset,
      this._interpolationConfig
    );
    return serialize(expr);
  }
};
function reusePreviousSourceSpans(nodes, previousI18n) {
  if (previousI18n instanceof Message) {
    assertSingleContainerMessage(previousI18n);
    previousI18n = previousI18n.nodes[0];
  }
  if (previousI18n instanceof Container) {
    assertEquivalentNodes(previousI18n.children, nodes);
    for (let i = 0; i < nodes.length; i++) {
      nodes[i].sourceSpan = previousI18n.children[i].sourceSpan;
    }
  }
}
function assertSingleContainerMessage(message) {
  const nodes = message.nodes;
  if (nodes.length !== 1 || !(nodes[0] instanceof Container)) {
    throw new Error("Unexpected previous i18n message - expected it to consist of only a single `Container` node.");
  }
}
function assertEquivalentNodes(previousNodes, nodes) {
  if (previousNodes.length !== nodes.length) {
    throw new Error(`
The number of i18n message children changed between first and second pass.

First pass (${previousNodes.length} tokens):
${previousNodes.map((node) => `"${node.sourceSpan.toString()}"`).join("\n")}

Second pass (${nodes.length} tokens):
${nodes.map((node) => `"${node.sourceSpan.toString()}"`).join("\n")}
    `.trim());
  }
  if (previousNodes.some((node, i) => nodes[i].constructor !== node.constructor)) {
    throw new Error("The types of the i18n message children changed between first and second pass.");
  }
}
var _CUSTOM_PH_EXP = /\/\/[\s\S]*i18n[\s\S]*\([\s\S]*ph[\s\S]*=[\s\S]*("|')([\s\S]*?)\1[\s\S]*\)/g;
function extractPlaceholderName(input2) {
  return input2.split(_CUSTOM_PH_EXP)[2];
}
var I18nError = class extends ParseError {
  constructor(span, msg) {
    super(span, msg);
  }
};
var TRUSTED_TYPES_SINKS = /* @__PURE__ */ new Set([
  // NOTE: All strings in this set *must* be lowercase!
  // TrustedHTML
  "iframe|srcdoc",
  "*|innerhtml",
  "*|outerhtml",
  // NB: no TrustedScript here, as the corresponding tags are stripped by the compiler.
  // TrustedScriptURL
  "embed|src",
  "object|codebase",
  "object|data"
]);
function isTrustedTypesSink(tagName, propName) {
  tagName = tagName.toLowerCase();
  propName = propName.toLowerCase();
  return TRUSTED_TYPES_SINKS.has(tagName + "|" + propName) || TRUSTED_TYPES_SINKS.has("*|" + propName);
}
var setI18nRefs = (originalNodeMap) => {
  return (trimmedNode, i18nNode) => {
    const originalNode = originalNodeMap.get(trimmedNode) ?? trimmedNode;
    if (originalNode instanceof NodeWithI18n) {
      if (i18nNode instanceof IcuPlaceholder && originalNode.i18n instanceof Message) {
        i18nNode.previousMessage = originalNode.i18n;
      }
      originalNode.i18n = i18nNode;
    }
    return i18nNode;
  };
};
var I18nMetaVisitor = class {
  interpolationConfig;
  keepI18nAttrs;
  enableI18nLegacyMessageIdFormat;
  containerBlocks;
  preserveSignificantWhitespace;
  retainEmptyTokens;
  // whether visited nodes contain i18n information
  hasI18nMeta = false;
  _errors = [];
  constructor(interpolationConfig = DEFAULT_INTERPOLATION_CONFIG, keepI18nAttrs = false, enableI18nLegacyMessageIdFormat = false, containerBlocks = DEFAULT_CONTAINER_BLOCKS, preserveSignificantWhitespace = true, retainEmptyTokens = !preserveSignificantWhitespace) {
    this.interpolationConfig = interpolationConfig;
    this.keepI18nAttrs = keepI18nAttrs;
    this.enableI18nLegacyMessageIdFormat = enableI18nLegacyMessageIdFormat;
    this.containerBlocks = containerBlocks;
    this.preserveSignificantWhitespace = preserveSignificantWhitespace;
    this.retainEmptyTokens = retainEmptyTokens;
  }
  _generateI18nMessage(nodes, meta = "", visitNodeFn) {
    const {
      meaning,
      description,
      customId
    } = this._parseMetadata(meta);
    const createI18nMessage2 = createI18nMessageFactory(
      this.interpolationConfig,
      this.containerBlocks,
      this.retainEmptyTokens,
      /* preserveExpressionWhitespace */
      this.preserveSignificantWhitespace
    );
    const message = createI18nMessage2(nodes, meaning, description, customId, visitNodeFn);
    this._setMessageId(message, meta);
    this._setLegacyIds(message, meta);
    return message;
  }
  visitAllWithErrors(nodes) {
    const result = nodes.map((node) => node.visit(this, null));
    return new ParseTreeResult(result, this._errors);
  }
  visitElement(element2) {
    let message = void 0;
    if (hasI18nAttrs(element2)) {
      this.hasI18nMeta = true;
      const attrs = [];
      const attrsMeta = {};
      for (const attr of element2.attrs) {
        if (attr.name === I18N_ATTR) {
          const i18n2 = element2.i18n || attr.value;
          const originalNodeMap = /* @__PURE__ */ new Map();
          const trimmedNodes = this.preserveSignificantWhitespace ? element2.children : visitAllWithSiblings(new WhitespaceVisitor(false, originalNodeMap), element2.children);
          message = this._generateI18nMessage(trimmedNodes, i18n2, setI18nRefs(originalNodeMap));
          if (message.nodes.length === 0) {
            message = void 0;
          }
          element2.i18n = message;
        } else if (attr.name.startsWith(I18N_ATTR_PREFIX)) {
          const name = attr.name.slice(I18N_ATTR_PREFIX.length);
          if (isTrustedTypesSink(element2.name, name)) {
            this._reportError(attr, `Translating attribute '${name}' is disallowed for security reasons.`);
          } else {
            attrsMeta[name] = attr.value;
          }
        } else {
          attrs.push(attr);
        }
      }
      if (Object.keys(attrsMeta).length) {
        for (const attr of attrs) {
          const meta = attrsMeta[attr.name];
          if (meta !== void 0 && attr.value) {
            attr.i18n = this._generateI18nMessage([attr], attr.i18n || meta);
          }
        }
      }
      if (!this.keepI18nAttrs) {
        element2.attrs = attrs;
      }
    }
    visitAll(this, element2.children, message);
    return element2;
  }
  visitExpansion(expansion, currentMessage) {
    let message;
    const meta = expansion.i18n;
    this.hasI18nMeta = true;
    if (meta instanceof IcuPlaceholder) {
      const name = meta.name;
      message = this._generateI18nMessage([expansion], meta);
      const icu = icuFromI18nMessage(message);
      icu.name = name;
      if (currentMessage !== null) {
        currentMessage.placeholderToMessage[name] = message;
      }
    } else {
      message = this._generateI18nMessage([expansion], currentMessage || meta);
    }
    expansion.i18n = message;
    return expansion;
  }
  visitText(text3) {
    return text3;
  }
  visitAttribute(attribute2) {
    return attribute2;
  }
  visitComment(comment) {
    return comment;
  }
  visitExpansionCase(expansionCase) {
    return expansionCase;
  }
  visitBlock(block, context) {
    visitAll(this, block.children, context);
    return block;
  }
  visitBlockParameter(parameter, context) {
    return parameter;
  }
  visitLetDeclaration(decl, context) {
    return decl;
  }
  /**
   * Parse the general form `meta` passed into extract the explicit metadata needed to create a
   * `Message`.
   *
   * There are three possibilities for the `meta` variable
   * 1) a string from an `i18n` template attribute: parse it to extract the metadata values.
   * 2) a `Message` from a previous processing pass: reuse the metadata values in the message.
   * 4) other: ignore this and just process the message metadata as normal
   *
   * @param meta the bucket that holds information about the message
   * @returns the parsed metadata.
   */
  _parseMetadata(meta) {
    return typeof meta === "string" ? parseI18nMeta(meta) : meta instanceof Message ? meta : {};
  }
  /**
   * Generate (or restore) message id if not specified already.
   */
  _setMessageId(message, meta) {
    if (!message.id) {
      message.id = meta instanceof Message && meta.id || decimalDigest(message);
    }
  }
  /**
   * Update the `message` with a `legacyId` if necessary.
   *
   * @param message the message whose legacy id should be set
   * @param meta information about the message being processed
   */
  _setLegacyIds(message, meta) {
    if (this.enableI18nLegacyMessageIdFormat) {
      message.legacyIds = [computeDigest(message), computeDecimalDigest(message)];
    } else if (typeof meta !== "string") {
      const previousMessage = meta instanceof Message ? meta : meta instanceof IcuPlaceholder ? meta.previousMessage : void 0;
      message.legacyIds = previousMessage ? previousMessage.legacyIds : [];
    }
  }
  _reportError(node, msg) {
    this._errors.push(new I18nError(node.sourceSpan, msg));
  }
};
var I18N_MEANING_SEPARATOR = "|";
var I18N_ID_SEPARATOR = "@@";
function parseI18nMeta(meta = "") {
  let customId;
  let meaning;
  let description;
  meta = meta.trim();
  if (meta) {
    const idIndex = meta.indexOf(I18N_ID_SEPARATOR);
    const descIndex = meta.indexOf(I18N_MEANING_SEPARATOR);
    let meaningAndDesc;
    [meaningAndDesc, customId] = idIndex > -1 ? [meta.slice(0, idIndex), meta.slice(idIndex + 2)] : [meta, ""];
    [meaning, description] = descIndex > -1 ? [meaningAndDesc.slice(0, descIndex), meaningAndDesc.slice(descIndex + 1)] : ["", meaningAndDesc];
  }
  return {
    customId,
    meaning,
    description
  };
}
function i18nMetaToJSDoc(meta) {
  const tags = [];
  if (meta.description) {
    tags.push({
      tagName: "desc",
      text: meta.description
    });
  } else {
    tags.push({
      tagName: "suppress",
      text: "{msgDescriptions}"
    });
  }
  if (meta.meaning) {
    tags.push({
      tagName: "meaning",
      text: meta.meaning
    });
  }
  return jsDocComment(tags);
}
var GOOG_GET_MSG = "goog.getMsg";
function createGoogleGetMsgStatements(variable$1, message, closureVar, placeholderValues) {
  const messageString = serializeI18nMessageForGetMsg(message);
  const args = [literal(messageString)];
  if (Object.keys(placeholderValues).length) {
    args.push(mapLiteral(
      formatI18nPlaceholderNamesInMap(
        placeholderValues,
        true
        /* useCamelCase */
      ),
      true
      /* quoted */
    ));
    args.push(mapLiteral({
      original_code: literalMap(Object.keys(placeholderValues).map((param) => ({
        key: formatI18nPlaceholderName(param),
        quoted: true,
        value: message.placeholders[param] ? (
          // Get source span for typical placeholder if it exists.
          literal(message.placeholders[param].sourceSpan.toString())
        ) : (
          // Otherwise must be an ICU expression, get it's source span.
          literal(message.placeholderToMessage[param].nodes.map((node) => node.sourceSpan.toString()).join(""))
        )
      })))
    }));
  }
  const googGetMsgStmt = closureVar.set(variable(GOOG_GET_MSG).callFn(args)).toConstDecl();
  googGetMsgStmt.addLeadingComment(i18nMetaToJSDoc(message));
  const i18nAssignmentStmt = new ExpressionStatement(variable$1.set(closureVar));
  return [googGetMsgStmt, i18nAssignmentStmt];
}
var GetMsgSerializerVisitor = class {
  formatPh(value) {
    return `{$${formatI18nPlaceholderName(value)}}`;
  }
  visitText(text3) {
    return text3.value;
  }
  visitContainer(container) {
    return container.children.map((child) => child.visit(this)).join("");
  }
  visitIcu(icu) {
    return serializeIcuNode(icu);
  }
  visitTagPlaceholder(ph) {
    return ph.isVoid ? this.formatPh(ph.startName) : `${this.formatPh(ph.startName)}${ph.children.map((child) => child.visit(this)).join("")}${this.formatPh(ph.closeName)}`;
  }
  visitPlaceholder(ph) {
    return this.formatPh(ph.name);
  }
  visitBlockPlaceholder(ph) {
    return `${this.formatPh(ph.startName)}${ph.children.map((child) => child.visit(this)).join("")}${this.formatPh(ph.closeName)}`;
  }
  visitIcuPlaceholder(ph, context) {
    return this.formatPh(ph.name);
  }
};
var serializerVisitor = new GetMsgSerializerVisitor();
function serializeI18nMessageForGetMsg(message) {
  return message.nodes.map((node) => node.visit(serializerVisitor, null)).join("");
}
function createLocalizeStatements(variable2, message, params) {
  const {
    messageParts,
    placeHolders
  } = serializeI18nMessageForLocalize(message);
  const sourceSpan = getSourceSpan(message);
  const expressions = placeHolders.map((ph) => params[ph.text]);
  const localizedString$1 = localizedString(message, messageParts, placeHolders, expressions, sourceSpan);
  const variableInitialization = variable2.set(localizedString$1);
  return [new ExpressionStatement(variableInitialization)];
}
var LocalizeSerializerVisitor = class {
  placeholderToMessage;
  pieces;
  constructor(placeholderToMessage, pieces) {
    this.placeholderToMessage = placeholderToMessage;
    this.pieces = pieces;
  }
  visitText(text3) {
    if (this.pieces[this.pieces.length - 1] instanceof LiteralPiece) {
      this.pieces[this.pieces.length - 1].text += text3.value;
    } else {
      const sourceSpan = new ParseSourceSpan(text3.sourceSpan.fullStart, text3.sourceSpan.end, text3.sourceSpan.fullStart, text3.sourceSpan.details);
      this.pieces.push(new LiteralPiece(text3.value, sourceSpan));
    }
  }
  visitContainer(container) {
    container.children.forEach((child) => child.visit(this));
  }
  visitIcu(icu) {
    this.pieces.push(new LiteralPiece(serializeIcuNode(icu), icu.sourceSpan));
  }
  visitTagPlaceholder(ph) {
    this.pieces.push(this.createPlaceholderPiece(ph.startName, ph.startSourceSpan ?? ph.sourceSpan));
    if (!ph.isVoid) {
      ph.children.forEach((child) => child.visit(this));
      this.pieces.push(this.createPlaceholderPiece(ph.closeName, ph.endSourceSpan ?? ph.sourceSpan));
    }
  }
  visitPlaceholder(ph) {
    this.pieces.push(this.createPlaceholderPiece(ph.name, ph.sourceSpan));
  }
  visitBlockPlaceholder(ph) {
    this.pieces.push(this.createPlaceholderPiece(ph.startName, ph.startSourceSpan ?? ph.sourceSpan));
    ph.children.forEach((child) => child.visit(this));
    this.pieces.push(this.createPlaceholderPiece(ph.closeName, ph.endSourceSpan ?? ph.sourceSpan));
  }
  visitIcuPlaceholder(ph) {
    this.pieces.push(this.createPlaceholderPiece(ph.name, ph.sourceSpan, this.placeholderToMessage[ph.name]));
  }
  createPlaceholderPiece(name, sourceSpan, associatedMessage) {
    return new PlaceholderPiece(formatI18nPlaceholderName(
      name,
      /* useCamelCase */
      false
    ), sourceSpan, associatedMessage);
  }
};
function serializeI18nMessageForLocalize(message) {
  const pieces = [];
  const serializerVisitor2 = new LocalizeSerializerVisitor(message.placeholderToMessage, pieces);
  message.nodes.forEach((node) => node.visit(serializerVisitor2));
  return processMessagePieces(pieces);
}
function getSourceSpan(message) {
  const startNode = message.nodes[0];
  const endNode = message.nodes[message.nodes.length - 1];
  return new ParseSourceSpan(startNode.sourceSpan.fullStart, endNode.sourceSpan.end, startNode.sourceSpan.fullStart, startNode.sourceSpan.details);
}
function processMessagePieces(pieces) {
  const messageParts = [];
  const placeHolders = [];
  if (pieces[0] instanceof PlaceholderPiece) {
    messageParts.push(createEmptyMessagePart(pieces[0].sourceSpan.start));
  }
  for (let i = 0; i < pieces.length; i++) {
    const part = pieces[i];
    if (part instanceof LiteralPiece) {
      messageParts.push(part);
    } else {
      placeHolders.push(part);
      if (pieces[i - 1] instanceof PlaceholderPiece) {
        messageParts.push(createEmptyMessagePart(pieces[i - 1].sourceSpan.end));
      }
    }
  }
  if (pieces[pieces.length - 1] instanceof PlaceholderPiece) {
    messageParts.push(createEmptyMessagePart(pieces[pieces.length - 1].sourceSpan.end));
  }
  return {
    messageParts,
    placeHolders
  };
}
function createEmptyMessagePart(location2) {
  return new LiteralPiece("", new ParseSourceSpan(location2, location2));
}
var NG_I18N_CLOSURE_MODE = "ngI18nClosureMode";
var TRANSLATION_VAR_PREFIX = "i18n_";
var I18N_ICU_MAPPING_PREFIX = "I18N_EXP_";
var ESCAPE = "\uFFFD";
var CLOSURE_TRANSLATION_VAR_PREFIX = "MSG_";
function getTranslationConstPrefix(extra) {
  return `${CLOSURE_TRANSLATION_VAR_PREFIX}${extra}`.toUpperCase();
}
function declareI18nVariable(variable2) {
  return new DeclareVarStmt(variable2.name, void 0, INFERRED_TYPE, void 0, variable2.sourceSpan);
}
function collectI18nConsts(job) {
  const fileBasedI18nSuffix = job.relativeContextFilePath.replace(/[^A-Za-z0-9]/g, "_").toUpperCase() + "_";
  const extractedAttributesByI18nContext = /* @__PURE__ */ new Map();
  const i18nAttributesByElement = /* @__PURE__ */ new Map();
  const i18nExpressionsByElement = /* @__PURE__ */ new Map();
  const messages = /* @__PURE__ */ new Map();
  for (const unit of job.units) {
    for (const op2 of unit.ops()) {
      if (op2.kind === OpKind.ExtractedAttribute && op2.i18nContext !== null) {
        const attributes = extractedAttributesByI18nContext.get(op2.i18nContext) ?? [];
        attributes.push(op2);
        extractedAttributesByI18nContext.set(op2.i18nContext, attributes);
      } else if (op2.kind === OpKind.I18nAttributes) {
        i18nAttributesByElement.set(op2.target, op2);
      } else if (op2.kind === OpKind.I18nExpression && op2.usage === I18nExpressionFor.I18nAttribute) {
        const expressions = i18nExpressionsByElement.get(op2.target) ?? [];
        expressions.push(op2);
        i18nExpressionsByElement.set(op2.target, expressions);
      } else if (op2.kind === OpKind.I18nMessage) {
        messages.set(op2.xref, op2);
      }
    }
  }
  const i18nValuesByContext = /* @__PURE__ */ new Map();
  const messageConstIndices = /* @__PURE__ */ new Map();
  for (const unit of job.units) {
    for (const op2 of unit.create) {
      if (op2.kind === OpKind.I18nMessage) {
        if (op2.messagePlaceholder === null) {
          const {
            mainVar,
            statements
          } = collectMessage(job, fileBasedI18nSuffix, messages, op2);
          if (op2.i18nBlock !== null) {
            const i18nConst = job.addConst(mainVar, statements);
            messageConstIndices.set(op2.i18nBlock, i18nConst);
          } else {
            job.constsInitializers.push(...statements);
            i18nValuesByContext.set(op2.i18nContext, mainVar);
            const attributesForMessage = extractedAttributesByI18nContext.get(op2.i18nContext);
            if (attributesForMessage !== void 0) {
              for (const attr of attributesForMessage) {
                attr.expression = mainVar.clone();
              }
            }
          }
        }
        OpList.remove(op2);
      }
    }
  }
  for (const unit of job.units) {
    for (const elem of unit.create) {
      if (isElementOrContainerOp(elem)) {
        const i18nAttributes2 = i18nAttributesByElement.get(elem.xref);
        if (i18nAttributes2 === void 0) {
          continue;
        }
        let i18nExpressions = i18nExpressionsByElement.get(elem.xref);
        if (i18nExpressions === void 0) {
          throw new Error("AssertionError: Could not find any i18n expressions associated with an I18nAttributes instruction");
        }
        const seenPropertyNames = /* @__PURE__ */ new Set();
        i18nExpressions = i18nExpressions.filter((i18nExpr) => {
          const seen = seenPropertyNames.has(i18nExpr.name);
          seenPropertyNames.add(i18nExpr.name);
          return !seen;
        });
        const i18nAttributeConfig = i18nExpressions.flatMap((i18nExpr) => {
          const i18nExprValue = i18nValuesByContext.get(i18nExpr.context);
          if (i18nExprValue === void 0) {
            throw new Error("AssertionError: Could not find i18n expression's value");
          }
          return [literal(i18nExpr.name), i18nExprValue];
        });
        i18nAttributes2.i18nAttributesConfig = job.addConst(new LiteralArrayExpr(i18nAttributeConfig));
      }
    }
  }
  for (const unit of job.units) {
    for (const op2 of unit.create) {
      if (op2.kind === OpKind.I18nStart) {
        const msgIndex = messageConstIndices.get(op2.root);
        if (msgIndex === void 0) {
          throw new Error("AssertionError: Could not find corresponding i18n block index for an i18n message op; was an i18n message incorrectly assumed to correspond to an attribute?");
        }
        op2.messageIndex = msgIndex;
      }
    }
  }
}
function collectMessage(job, fileBasedI18nSuffix, messages, messageOp) {
  const statements = [];
  const subMessagePlaceholders = /* @__PURE__ */ new Map();
  for (const subMessageId of messageOp.subMessages) {
    const subMessage = messages.get(subMessageId);
    const {
      mainVar: subMessageVar,
      statements: subMessageStatements
    } = collectMessage(job, fileBasedI18nSuffix, messages, subMessage);
    statements.push(...subMessageStatements);
    const subMessages = subMessagePlaceholders.get(subMessage.messagePlaceholder) ?? [];
    subMessages.push(subMessageVar);
    subMessagePlaceholders.set(subMessage.messagePlaceholder, subMessages);
  }
  addSubMessageParams(messageOp, subMessagePlaceholders);
  messageOp.params = new Map([...messageOp.params.entries()].sort());
  const mainVar = variable(job.pool.uniqueName(TRANSLATION_VAR_PREFIX));
  const closureVar = i18nGenerateClosureVar(job.pool, messageOp.message.id, fileBasedI18nSuffix, job.i18nUseExternalIds);
  let transformFn = void 0;
  if (messageOp.needsPostprocessing || messageOp.postprocessingParams.size > 0) {
    const postprocessingParams = Object.fromEntries([...messageOp.postprocessingParams.entries()].sort());
    const formattedPostprocessingParams = formatI18nPlaceholderNamesInMap(
      postprocessingParams,
      /* useCamelCase */
      false
    );
    const extraTransformFnParams = [];
    if (messageOp.postprocessingParams.size > 0) {
      extraTransformFnParams.push(mapLiteral(
        formattedPostprocessingParams,
        /* quoted */
        true
      ));
    }
    transformFn = (expr) => importExpr(Identifiers.i18nPostprocess).callFn([expr, ...extraTransformFnParams]);
  }
  statements.push(...getTranslationDeclStmts(messageOp.message, mainVar, closureVar, messageOp.params, transformFn));
  return {
    mainVar,
    statements
  };
}
function addSubMessageParams(messageOp, subMessagePlaceholders) {
  for (const [placeholder, subMessages] of subMessagePlaceholders) {
    if (subMessages.length === 1) {
      messageOp.params.set(placeholder, subMessages[0]);
    } else {
      messageOp.params.set(placeholder, literal(`${ESCAPE}${I18N_ICU_MAPPING_PREFIX}${placeholder}${ESCAPE}`));
      messageOp.postprocessingParams.set(placeholder, literalArr(subMessages));
    }
  }
}
function getTranslationDeclStmts(message, variable2, closureVar, params, transformFn) {
  const paramsObject = Object.fromEntries(params);
  const statements = [declareI18nVariable(variable2), ifStmt(createClosureModeGuard(), createGoogleGetMsgStatements(variable2, message, closureVar, paramsObject), createLocalizeStatements(variable2, message, formatI18nPlaceholderNamesInMap(
    paramsObject,
    /* useCamelCase */
    false
  )))];
  if (transformFn) {
    statements.push(new ExpressionStatement(variable2.set(transformFn(variable2))));
  }
  return statements;
}
function createClosureModeGuard() {
  return typeofExpr(variable(NG_I18N_CLOSURE_MODE)).notIdentical(literal("undefined", STRING_TYPE)).and(variable(NG_I18N_CLOSURE_MODE));
}
function i18nGenerateClosureVar(pool, messageId, fileBasedI18nSuffix, useExternalIds) {
  let name;
  const suffix = fileBasedI18nSuffix;
  if (useExternalIds) {
    const prefix = getTranslationConstPrefix(`EXTERNAL_`);
    const uniqueSuffix = pool.uniqueName(suffix);
    name = `${prefix}${sanitizeIdentifier(messageId)}$$${uniqueSuffix}`;
  } else {
    const prefix = getTranslationConstPrefix(suffix);
    name = pool.uniqueName(prefix);
  }
  return variable(name);
}
function convertI18nText(job) {
  for (const unit of job.units) {
    let currentI18n = null;
    let currentIcu = null;
    const textNodeI18nBlocks = /* @__PURE__ */ new Map();
    const textNodeIcus = /* @__PURE__ */ new Map();
    const icuPlaceholderByText = /* @__PURE__ */ new Map();
    for (const op2 of unit.create) {
      switch (op2.kind) {
        case OpKind.I18nStart:
          if (op2.context === null) {
            throw Error("I18n op should have its context set.");
          }
          currentI18n = op2;
          break;
        case OpKind.I18nEnd:
          currentI18n = null;
          break;
        case OpKind.IcuStart:
          if (op2.context === null) {
            throw Error("Icu op should have its context set.");
          }
          currentIcu = op2;
          break;
        case OpKind.IcuEnd:
          currentIcu = null;
          break;
        case OpKind.Text:
          if (currentI18n !== null) {
            textNodeI18nBlocks.set(op2.xref, currentI18n);
            textNodeIcus.set(op2.xref, currentIcu);
            if (op2.icuPlaceholder !== null) {
              const icuPlaceholderOp = createIcuPlaceholderOp(job.allocateXrefId(), op2.icuPlaceholder, [op2.initialValue]);
              OpList.replace(op2, icuPlaceholderOp);
              icuPlaceholderByText.set(op2.xref, icuPlaceholderOp);
            } else {
              OpList.remove(op2);
            }
          }
          break;
      }
    }
    for (const op2 of unit.update) {
      switch (op2.kind) {
        case OpKind.InterpolateText:
          if (!textNodeI18nBlocks.has(op2.target)) {
            continue;
          }
          const i18nOp = textNodeI18nBlocks.get(op2.target);
          const icuOp = textNodeIcus.get(op2.target);
          const icuPlaceholder = icuPlaceholderByText.get(op2.target);
          const contextId = icuOp ? icuOp.context : i18nOp.context;
          const resolutionTime = icuOp ? I18nParamResolutionTime.Postproccessing : I18nParamResolutionTime.Creation;
          const ops = [];
          for (let i = 0; i < op2.interpolation.expressions.length; i++) {
            const expr = op2.interpolation.expressions[i];
            ops.push(createI18nExpressionOp(contextId, i18nOp.xref, i18nOp.xref, i18nOp.handle, expr, icuPlaceholder?.xref ?? null, op2.interpolation.i18nPlaceholders[i] ?? null, resolutionTime, I18nExpressionFor.I18nText, "", expr.sourceSpan ?? op2.sourceSpan));
          }
          OpList.replaceWithMany(op2, ops);
          if (icuPlaceholder !== void 0) {
            icuPlaceholder.strings = op2.interpolation.strings;
          }
          break;
      }
    }
  }
}
function liftLocalRefs(job) {
  for (const unit of job.units) {
    for (const op2 of unit.create) {
      switch (op2.kind) {
        case OpKind.ElementStart:
        case OpKind.Template:
          if (!Array.isArray(op2.localRefs)) {
            throw new Error(`AssertionError: expected localRefs to be an array still`);
          }
          op2.numSlotsUsed += op2.localRefs.length;
          if (op2.localRefs.length > 0) {
            const localRefs = serializeLocalRefs(op2.localRefs);
            op2.localRefs = job.addConst(localRefs);
          } else {
            op2.localRefs = null;
          }
          break;
      }
    }
  }
}
function serializeLocalRefs(refs) {
  const constRefs = [];
  for (const ref of refs) {
    constRefs.push(literal(ref.name), literal(ref.target));
  }
  return literalArr(constRefs);
}
function emitNamespaceChanges(job) {
  for (const unit of job.units) {
    let activeNamespace = Namespace.HTML;
    for (const op2 of unit.create) {
      if (op2.kind !== OpKind.ElementStart) {
        continue;
      }
      if (op2.namespace !== activeNamespace) {
        OpList.insertBefore(createNamespaceOp(op2.namespace), op2);
        activeNamespace = op2.namespace;
      }
    }
  }
}
function parse(value) {
  const styles2 = [];
  let i = 0;
  let parenDepth = 0;
  let quote = 0;
  let valueStart = 0;
  let propStart = 0;
  let currentProp = null;
  while (i < value.length) {
    const token = value.charCodeAt(i++);
    switch (token) {
      case 40:
        parenDepth++;
        break;
      case 41:
        parenDepth--;
        break;
      case 39:
        if (quote === 0) {
          quote = 39;
        } else if (quote === 39 && value.charCodeAt(i - 1) !== 92) {
          quote = 0;
        }
        break;
      case 34:
        if (quote === 0) {
          quote = 34;
        } else if (quote === 34 && value.charCodeAt(i - 1) !== 92) {
          quote = 0;
        }
        break;
      case 58:
        if (!currentProp && parenDepth === 0 && quote === 0) {
          currentProp = hyphenate(value.substring(propStart, i - 1).trim());
          valueStart = i;
        }
        break;
      case 59:
        if (currentProp && valueStart > 0 && parenDepth === 0 && quote === 0) {
          const styleVal = value.substring(valueStart, i - 1).trim();
          styles2.push(currentProp, styleVal);
          propStart = i;
          valueStart = 0;
          currentProp = null;
        }
        break;
    }
  }
  if (currentProp && valueStart) {
    const styleVal = value.slice(valueStart).trim();
    styles2.push(currentProp, styleVal);
  }
  return styles2;
}
function hyphenate(value) {
  return value.replace(/[a-z][A-Z]/g, (v) => {
    return v.charAt(0) + "-" + v.charAt(1);
  }).toLowerCase();
}
function parseExtractedStyles(job) {
  const elements = /* @__PURE__ */ new Map();
  for (const unit of job.units) {
    for (const op2 of unit.create) {
      if (isElementOrContainerOp(op2)) {
        elements.set(op2.xref, op2);
      }
    }
  }
  for (const unit of job.units) {
    for (const op2 of unit.create) {
      if (op2.kind === OpKind.ExtractedAttribute && op2.bindingKind === BindingKind.Attribute && isStringLiteral(op2.expression)) {
        const target = elements.get(op2.target);
        if (target !== void 0 && target.kind === OpKind.Template && target.templateKind === TemplateKind.Structural) {
          continue;
        }
        if (op2.name === "style") {
          const parsedStyles = parse(op2.expression.value);
          for (let i = 0; i < parsedStyles.length - 1; i += 2) {
            OpList.insertBefore(createExtractedAttributeOp(op2.target, BindingKind.StyleProperty, null, parsedStyles[i], literal(parsedStyles[i + 1]), null, null, SecurityContext2.STYLE), op2);
          }
          OpList.remove(op2);
        } else if (op2.name === "class") {
          const parsedClasses = op2.expression.value.trim().split(/\s+/g);
          for (const parsedClass of parsedClasses) {
            OpList.insertBefore(createExtractedAttributeOp(op2.target, BindingKind.ClassName, null, parsedClass, null, null, null, SecurityContext2.NONE), op2);
          }
          OpList.remove(op2);
        }
      }
    }
  }
}
function nameFunctionsAndVariables(job) {
  addNamesToView(job.root, job.componentName, {
    index: 0
  }, job.compatibility === CompatibilityMode.TemplateDefinitionBuilder);
}
function addNamesToView(unit, baseName, state, compatibility) {
  if (unit.fnName === null) {
    unit.fnName = unit.job.pool.uniqueName(
      sanitizeIdentifier(`${baseName}_${unit.job.fnSuffix}`),
      /* alwaysIncludeSuffix */
      false
    );
  }
  const varNames = /* @__PURE__ */ new Map();
  for (const op2 of unit.ops()) {
    switch (op2.kind) {
      case OpKind.Property:
      case OpKind.HostProperty:
        if (op2.isAnimationTrigger) {
          op2.name = "@" + op2.name;
        }
        break;
      case OpKind.Listener:
        if (op2.handlerFnName !== null) {
          break;
        }
        if (!op2.hostListener && op2.targetSlot.slot === null) {
          throw new Error(`Expected a slot to be assigned`);
        }
        let animation = "";
        if (op2.isAnimationListener) {
          op2.name = `@${op2.name}.${op2.animationPhase}`;
          animation = "animation";
        }
        if (op2.hostListener) {
          op2.handlerFnName = `${baseName}_${animation}${op2.name}_HostBindingHandler`;
        } else {
          op2.handlerFnName = `${unit.fnName}_${op2.tag.replace("-", "_")}_${animation}${op2.name}_${op2.targetSlot.slot}_listener`;
        }
        op2.handlerFnName = sanitizeIdentifier(op2.handlerFnName);
        break;
      case OpKind.TwoWayListener:
        if (op2.handlerFnName !== null) {
          break;
        }
        if (op2.targetSlot.slot === null) {
          throw new Error(`Expected a slot to be assigned`);
        }
        op2.handlerFnName = sanitizeIdentifier(`${unit.fnName}_${op2.tag.replace("-", "_")}_${op2.name}_${op2.targetSlot.slot}_listener`);
        break;
      case OpKind.Variable:
        varNames.set(op2.xref, getVariableName(unit, op2.variable, state));
        break;
      case OpKind.RepeaterCreate:
        if (!(unit instanceof ViewCompilationUnit)) {
          throw new Error(`AssertionError: must be compiling a component`);
        }
        if (op2.handle.slot === null) {
          throw new Error(`Expected slot to be assigned`);
        }
        if (op2.emptyView !== null) {
          const emptyView = unit.job.views.get(op2.emptyView);
          addNamesToView(emptyView, `${baseName}_${op2.functionNameSuffix}Empty_${op2.handle.slot + 2}`, state, compatibility);
        }
        addNamesToView(unit.job.views.get(op2.xref), `${baseName}_${op2.functionNameSuffix}_${op2.handle.slot + 1}`, state, compatibility);
        break;
      case OpKind.Projection:
        if (!(unit instanceof ViewCompilationUnit)) {
          throw new Error(`AssertionError: must be compiling a component`);
        }
        if (op2.handle.slot === null) {
          throw new Error(`Expected slot to be assigned`);
        }
        if (op2.fallbackView !== null) {
          const fallbackView = unit.job.views.get(op2.fallbackView);
          addNamesToView(fallbackView, `${baseName}_ProjectionFallback_${op2.handle.slot}`, state, compatibility);
        }
        break;
      case OpKind.Template:
        if (!(unit instanceof ViewCompilationUnit)) {
          throw new Error(`AssertionError: must be compiling a component`);
        }
        const childView = unit.job.views.get(op2.xref);
        if (op2.handle.slot === null) {
          throw new Error(`Expected slot to be assigned`);
        }
        const suffix = op2.functionNameSuffix.length === 0 ? "" : `_${op2.functionNameSuffix}`;
        addNamesToView(childView, `${baseName}${suffix}_${op2.handle.slot}`, state, compatibility);
        break;
      case OpKind.StyleProp:
        op2.name = normalizeStylePropName(op2.name);
        if (compatibility) {
          op2.name = stripImportant(op2.name);
        }
        break;
      case OpKind.ClassProp:
        if (compatibility) {
          op2.name = stripImportant(op2.name);
        }
        break;
    }
  }
  for (const op2 of unit.ops()) {
    visitExpressionsInOp(op2, (expr) => {
      if (!(expr instanceof ReadVariableExpr) || expr.name !== null) {
        return;
      }
      if (!varNames.has(expr.xref)) {
        throw new Error(`Variable ${expr.xref} not yet named`);
      }
      expr.name = varNames.get(expr.xref);
    });
  }
}
function getVariableName(unit, variable2, state) {
  if (variable2.name === null) {
    switch (variable2.kind) {
      case SemanticVariableKind.Context:
        variable2.name = `ctx_r${state.index++}`;
        break;
      case SemanticVariableKind.Identifier:
        if (unit.job.compatibility === CompatibilityMode.TemplateDefinitionBuilder) {
          const compatPrefix = variable2.identifier === "ctx" ? "i" : "";
          variable2.name = `${variable2.identifier}_${compatPrefix}r${++state.index}`;
        } else {
          variable2.name = `${variable2.identifier}_i${state.index++}`;
        }
        break;
      default:
        variable2.name = `_r${++state.index}`;
        break;
    }
  }
  return variable2.name;
}
function normalizeStylePropName(name) {
  return name.startsWith("--") ? name : hyphenate(name);
}
function stripImportant(name) {
  const importantIndex = name.indexOf("!important");
  if (importantIndex > -1) {
    return name.substring(0, importantIndex);
  }
  return name;
}
function mergeNextContextExpressions(job) {
  for (const unit of job.units) {
    for (const op2 of unit.create) {
      if (op2.kind === OpKind.Listener || op2.kind === OpKind.TwoWayListener) {
        mergeNextContextsInOps(op2.handlerOps);
      }
    }
    mergeNextContextsInOps(unit.update);
  }
}
function mergeNextContextsInOps(ops) {
  for (const op2 of ops) {
    if (op2.kind !== OpKind.Statement || !(op2.statement instanceof ExpressionStatement) || !(op2.statement.expr instanceof NextContextExpr)) {
      continue;
    }
    const mergeSteps = op2.statement.expr.steps;
    let tryToMerge = true;
    for (let candidate = op2.next; candidate.kind !== OpKind.ListEnd && tryToMerge; candidate = candidate.next) {
      visitExpressionsInOp(candidate, (expr, flags) => {
        if (!isIrExpression(expr)) {
          return expr;
        }
        if (!tryToMerge) {
          return;
        }
        if (flags & VisitorContextFlag.InChildOperation) {
          return;
        }
        switch (expr.kind) {
          case ExpressionKind.NextContext:
            expr.steps += mergeSteps;
            OpList.remove(op2);
            tryToMerge = false;
            break;
          case ExpressionKind.GetCurrentView:
          case ExpressionKind.Reference:
          case ExpressionKind.ContextLetReference:
            tryToMerge = false;
            break;
        }
        return;
      });
    }
  }
}
var CONTAINER_TAG = "ng-container";
function generateNgContainerOps(job) {
  for (const unit of job.units) {
    const updatedElementXrefs = /* @__PURE__ */ new Set();
    for (const op2 of unit.create) {
      if (op2.kind === OpKind.ElementStart && op2.tag === CONTAINER_TAG) {
        op2.kind = OpKind.ContainerStart;
        updatedElementXrefs.add(op2.xref);
      }
      if (op2.kind === OpKind.ElementEnd && updatedElementXrefs.has(op2.xref)) {
        op2.kind = OpKind.ContainerEnd;
      }
    }
  }
}
function lookupElement(elements, xref) {
  const el = elements.get(xref);
  if (el === void 0) {
    throw new Error("All attributes should have an element-like target.");
  }
  return el;
}
function disableBindings$1(job) {
  const elements = /* @__PURE__ */ new Map();
  for (const view of job.units) {
    for (const op2 of view.create) {
      if (!isElementOrContainerOp(op2)) {
        continue;
      }
      elements.set(op2.xref, op2);
    }
  }
  for (const unit of job.units) {
    for (const op2 of unit.create) {
      if ((op2.kind === OpKind.ElementStart || op2.kind === OpKind.ContainerStart) && op2.nonBindable) {
        OpList.insertAfter(createDisableBindingsOp(op2.xref), op2);
      }
      if ((op2.kind === OpKind.ElementEnd || op2.kind === OpKind.ContainerEnd) && lookupElement(elements, op2.xref).nonBindable) {
        OpList.insertBefore(createEnableBindingsOp(op2.xref), op2);
      }
    }
  }
}
function generateNullishCoalesceExpressions(job) {
  for (const unit of job.units) {
    for (const op2 of unit.ops()) {
      transformExpressionsInOp(op2, (expr) => {
        if (!(expr instanceof BinaryOperatorExpr) || expr.operator !== BinaryOperator.NullishCoalesce) {
          return expr;
        }
        const assignment = new AssignTemporaryExpr(expr.lhs.clone(), job.allocateXrefId());
        const read = new ReadTemporaryExpr(assignment.xref);
        return new ConditionalExpr(new BinaryOperatorExpr(BinaryOperator.And, new BinaryOperatorExpr(BinaryOperator.NotIdentical, assignment, NULL_EXPR), new BinaryOperatorExpr(BinaryOperator.NotIdentical, read, new LiteralExpr(void 0))), read.clone(), expr.rhs);
      }, VisitorContextFlag.None);
    }
  }
}
function kindTest(kind) {
  return (op2) => op2.kind === kind;
}
function kindWithInterpolationTest(kind, interpolation) {
  return (op2) => {
    return op2.kind === kind && interpolation === op2.expression instanceof Interpolation2;
  };
}
function basicListenerKindTest(op2) {
  return op2.kind === OpKind.Listener && !(op2.hostListener && op2.isAnimationListener) || op2.kind === OpKind.TwoWayListener;
}
function nonInterpolationPropertyKindTest(op2) {
  return (op2.kind === OpKind.Property || op2.kind === OpKind.TwoWayProperty) && !(op2.expression instanceof Interpolation2);
}
var CREATE_ORDERING = [{
  test: (op2) => op2.kind === OpKind.Listener && op2.hostListener && op2.isAnimationListener
}, {
  test: basicListenerKindTest
}];
var UPDATE_ORDERING = [{
  test: kindTest(OpKind.StyleMap),
  transform: keepLast
}, {
  test: kindTest(OpKind.ClassMap),
  transform: keepLast
}, {
  test: kindTest(OpKind.StyleProp)
}, {
  test: kindTest(OpKind.ClassProp)
}, {
  test: kindWithInterpolationTest(OpKind.Attribute, true)
}, {
  test: kindWithInterpolationTest(OpKind.Property, true)
}, {
  test: nonInterpolationPropertyKindTest
}, {
  test: kindWithInterpolationTest(OpKind.Attribute, false)
}];
var UPDATE_HOST_ORDERING = [{
  test: kindWithInterpolationTest(OpKind.HostProperty, true)
}, {
  test: kindWithInterpolationTest(OpKind.HostProperty, false)
}, {
  test: kindTest(OpKind.Attribute)
}, {
  test: kindTest(OpKind.StyleMap),
  transform: keepLast
}, {
  test: kindTest(OpKind.ClassMap),
  transform: keepLast
}, {
  test: kindTest(OpKind.StyleProp)
}, {
  test: kindTest(OpKind.ClassProp)
}];
var handledOpKinds = /* @__PURE__ */ new Set([OpKind.Listener, OpKind.TwoWayListener, OpKind.StyleMap, OpKind.ClassMap, OpKind.StyleProp, OpKind.ClassProp, OpKind.Property, OpKind.TwoWayProperty, OpKind.HostProperty, OpKind.Attribute]);
function orderOps(job) {
  for (const unit of job.units) {
    orderWithin(unit.create, CREATE_ORDERING);
    const ordering = unit.job.kind === CompilationJobKind.Host ? UPDATE_HOST_ORDERING : UPDATE_ORDERING;
    orderWithin(unit.update, ordering);
  }
}
function orderWithin(opList, ordering) {
  let opsToOrder = [];
  let firstTargetInGroup = null;
  for (const op2 of opList) {
    const currentTarget = hasDependsOnSlotContextTrait(op2) ? op2.target : null;
    if (!handledOpKinds.has(op2.kind) || currentTarget !== firstTargetInGroup && firstTargetInGroup !== null && currentTarget !== null) {
      OpList.insertBefore(reorder(opsToOrder, ordering), op2);
      opsToOrder = [];
      firstTargetInGroup = null;
    }
    if (handledOpKinds.has(op2.kind)) {
      opsToOrder.push(op2);
      OpList.remove(op2);
      firstTargetInGroup = currentTarget ?? firstTargetInGroup;
    }
  }
  opList.push(reorder(opsToOrder, ordering));
}
function reorder(ops, ordering) {
  const groups = Array.from(ordering, () => new Array());
  for (const op2 of ops) {
    const groupIndex = ordering.findIndex((o) => o.test(op2));
    groups[groupIndex].push(op2);
  }
  return groups.flatMap((group, i) => {
    const transform2 = ordering[i].transform;
    return transform2 ? transform2(group) : group;
  });
}
function keepLast(ops) {
  return ops.slice(ops.length - 1);
}
function removeContentSelectors(job) {
  for (const unit of job.units) {
    const elements = createOpXrefMap(unit);
    for (const op2 of unit.ops()) {
      switch (op2.kind) {
        case OpKind.Binding:
          const target = lookupInXrefMap(elements, op2.target);
          if (isSelectAttribute(op2.name) && target.kind === OpKind.Projection) {
            OpList.remove(op2);
          }
          break;
      }
    }
  }
}
function isSelectAttribute(name) {
  return name.toLowerCase() === "select";
}
function lookupInXrefMap(map2, xref) {
  const el = map2.get(xref);
  if (el === void 0) {
    throw new Error("All attributes should have an slottable target.");
  }
  return el;
}
function createPipes(job) {
  for (const unit of job.units) {
    processPipeBindingsInView(unit);
  }
}
function processPipeBindingsInView(unit) {
  for (const updateOp of unit.update) {
    visitExpressionsInOp(updateOp, (expr, flags) => {
      if (!isIrExpression(expr)) {
        return;
      }
      if (expr.kind !== ExpressionKind.PipeBinding) {
        return;
      }
      if (flags & VisitorContextFlag.InChildOperation) {
        throw new Error(`AssertionError: pipe bindings should not appear in child expressions`);
      }
      if (unit.job.compatibility) {
        const slotHandle = updateOp.target;
        if (slotHandle == void 0) {
          throw new Error(`AssertionError: expected slot handle to be assigned for pipe creation`);
        }
        addPipeToCreationBlock(unit, updateOp.target, expr);
      } else {
        unit.create.push(createPipeOp(expr.target, expr.targetSlot, expr.name));
      }
    });
  }
}
function addPipeToCreationBlock(unit, afterTargetXref, binding) {
  for (let op2 = unit.create.head.next; op2.kind !== OpKind.ListEnd; op2 = op2.next) {
    if (!hasConsumesSlotTrait(op2)) {
      continue;
    }
    if (op2.xref !== afterTargetXref) {
      continue;
    }
    while (op2.next.kind === OpKind.Pipe) {
      op2 = op2.next;
    }
    const pipe3 = createPipeOp(binding.target, binding.targetSlot, binding.name);
    OpList.insertBefore(pipe3, op2.next);
    return;
  }
  throw new Error(`AssertionError: unable to find insertion point for pipe ${binding.name}`);
}
function createVariadicPipes(job) {
  for (const unit of job.units) {
    for (const op2 of unit.update) {
      transformExpressionsInOp(op2, (expr) => {
        if (!(expr instanceof PipeBindingExpr)) {
          return expr;
        }
        if (expr.args.length <= 4) {
          return expr;
        }
        return new PipeBindingVariadicExpr(expr.target, expr.targetSlot, expr.name, literalArr(expr.args), expr.args.length);
      }, VisitorContextFlag.None);
    }
  }
}
function propagateI18nBlocks(job) {
  propagateI18nBlocksToTemplates(job.root, 0);
}
function propagateI18nBlocksToTemplates(unit, subTemplateIndex) {
  let i18nBlock = null;
  for (const op2 of unit.create) {
    switch (op2.kind) {
      case OpKind.I18nStart:
        op2.subTemplateIndex = subTemplateIndex === 0 ? null : subTemplateIndex;
        i18nBlock = op2;
        break;
      case OpKind.I18nEnd:
        if (i18nBlock.subTemplateIndex === null) {
          subTemplateIndex = 0;
        }
        i18nBlock = null;
        break;
      case OpKind.Template:
        subTemplateIndex = propagateI18nBlocksForView(unit.job.views.get(op2.xref), i18nBlock, op2.i18nPlaceholder, subTemplateIndex);
        break;
      case OpKind.RepeaterCreate:
        const forView = unit.job.views.get(op2.xref);
        subTemplateIndex = propagateI18nBlocksForView(forView, i18nBlock, op2.i18nPlaceholder, subTemplateIndex);
        if (op2.emptyView !== null) {
          subTemplateIndex = propagateI18nBlocksForView(unit.job.views.get(op2.emptyView), i18nBlock, op2.emptyI18nPlaceholder, subTemplateIndex);
        }
        break;
    }
  }
  return subTemplateIndex;
}
function propagateI18nBlocksForView(view, i18nBlock, i18nPlaceholder, subTemplateIndex) {
  if (i18nPlaceholder !== void 0) {
    if (i18nBlock === null) {
      throw Error("Expected template with i18n placeholder to be in an i18n block.");
    }
    subTemplateIndex++;
    wrapTemplateWithI18n(view, i18nBlock);
  }
  return propagateI18nBlocksToTemplates(view, subTemplateIndex);
}
function wrapTemplateWithI18n(unit, parentI18n) {
  if (unit.create.head.next?.kind !== OpKind.I18nStart) {
    const id = unit.job.allocateXrefId();
    OpList.insertAfter(
      // Nested ng-template i18n start/end ops should not receive source spans.
      createI18nStartOp(id, parentI18n.message, parentI18n.root, null),
      unit.create.head
    );
    OpList.insertBefore(createI18nEndOp(id, null), unit.create.tail);
  }
}
function extractPureFunctions(job) {
  for (const view of job.units) {
    for (const op2 of view.ops()) {
      visitExpressionsInOp(op2, (expr) => {
        if (!(expr instanceof PureFunctionExpr) || expr.body === null) {
          return;
        }
        const constantDef = new PureFunctionConstant(expr.args.length);
        expr.fn = job.pool.getSharedConstant(constantDef, expr.body);
        expr.body = null;
      });
    }
  }
}
var PureFunctionConstant = class extends GenericKeyFn {
  numArgs;
  constructor(numArgs) {
    super();
    this.numArgs = numArgs;
  }
  keyOf(expr) {
    if (expr instanceof PureFunctionParameterExpr) {
      return `param(${expr.index})`;
    } else {
      return super.keyOf(expr);
    }
  }
  // TODO: Use the new pool method `getSharedFunctionReference`
  toSharedConstantDeclaration(declName, keyExpr) {
    const fnParams = [];
    for (let idx = 0; idx < this.numArgs; idx++) {
      fnParams.push(new FnParam("a" + idx));
    }
    const returnExpr = transformExpressionsInExpression(keyExpr, (expr) => {
      if (!(expr instanceof PureFunctionParameterExpr)) {
        return expr;
      }
      return variable("a" + expr.index);
    }, VisitorContextFlag.None);
    return new DeclareVarStmt(declName, new ArrowFunctionExpr(fnParams, returnExpr), void 0, StmtModifier.Final);
  }
};
function generatePureLiteralStructures(job) {
  for (const unit of job.units) {
    for (const op2 of unit.update) {
      transformExpressionsInOp(op2, (expr, flags) => {
        if (flags & VisitorContextFlag.InChildOperation) {
          return expr;
        }
        if (expr instanceof LiteralArrayExpr) {
          return transformLiteralArray(expr);
        } else if (expr instanceof LiteralMapExpr) {
          return transformLiteralMap(expr);
        }
        return expr;
      }, VisitorContextFlag.None);
    }
  }
}
function transformLiteralArray(expr) {
  const derivedEntries = [];
  const nonConstantArgs = [];
  for (const entry of expr.entries) {
    if (entry.isConstant()) {
      derivedEntries.push(entry);
    } else {
      const idx = nonConstantArgs.length;
      nonConstantArgs.push(entry);
      derivedEntries.push(new PureFunctionParameterExpr(idx));
    }
  }
  return new PureFunctionExpr(literalArr(derivedEntries), nonConstantArgs);
}
function transformLiteralMap(expr) {
  let derivedEntries = [];
  const nonConstantArgs = [];
  for (const entry of expr.entries) {
    if (entry.value.isConstant()) {
      derivedEntries.push(entry);
    } else {
      const idx = nonConstantArgs.length;
      nonConstantArgs.push(entry.value);
      derivedEntries.push(new LiteralMapEntry(entry.key, new PureFunctionParameterExpr(idx), entry.quoted));
    }
  }
  return new PureFunctionExpr(literalMap(derivedEntries), nonConstantArgs);
}
function element(slot, tag, constIndex, localRefIndex, sourceSpan) {
  return elementOrContainerBase(Identifiers.element, slot, tag, constIndex, localRefIndex, sourceSpan);
}
function elementStart(slot, tag, constIndex, localRefIndex, sourceSpan) {
  return elementOrContainerBase(Identifiers.elementStart, slot, tag, constIndex, localRefIndex, sourceSpan);
}
function elementOrContainerBase(instruction, slot, tag, constIndex, localRefIndex, sourceSpan) {
  const args = [literal(slot)];
  if (tag !== null) {
    args.push(literal(tag));
  }
  if (localRefIndex !== null) {
    args.push(
      literal(constIndex),
      // might be null, but that's okay.
      literal(localRefIndex)
    );
  } else if (constIndex !== null) {
    args.push(literal(constIndex));
  }
  return call(instruction, args, sourceSpan);
}
function elementEnd(sourceSpan) {
  return call(Identifiers.elementEnd, [], sourceSpan);
}
function elementContainerStart(slot, constIndex, localRefIndex, sourceSpan) {
  return elementOrContainerBase(
    Identifiers.elementContainerStart,
    slot,
    /* tag */
    null,
    constIndex,
    localRefIndex,
    sourceSpan
  );
}
function elementContainer(slot, constIndex, localRefIndex, sourceSpan) {
  return elementOrContainerBase(
    Identifiers.elementContainer,
    slot,
    /* tag */
    null,
    constIndex,
    localRefIndex,
    sourceSpan
  );
}
function elementContainerEnd() {
  return call(Identifiers.elementContainerEnd, [], null);
}
function template(slot, templateFnRef, decls, vars, tag, constIndex, localRefs, sourceSpan) {
  const args = [literal(slot), templateFnRef, literal(decls), literal(vars), literal(tag), literal(constIndex)];
  if (localRefs !== null) {
    args.push(literal(localRefs));
    args.push(importExpr(Identifiers.templateRefExtractor));
  }
  while (args[args.length - 1].isEquivalent(NULL_EXPR)) {
    args.pop();
  }
  return call(Identifiers.templateCreate, args, sourceSpan);
}
function disableBindings() {
  return call(Identifiers.disableBindings, [], null);
}
function enableBindings() {
  return call(Identifiers.enableBindings, [], null);
}
function listener(name, handlerFn, eventTargetResolver, syntheticHost, sourceSpan) {
  const args = [literal(name), handlerFn];
  if (eventTargetResolver !== null) {
    args.push(literal(false));
    args.push(importExpr(eventTargetResolver));
  }
  return call(syntheticHost ? Identifiers.syntheticHostListener : Identifiers.listener, args, sourceSpan);
}
function twoWayBindingSet(target, value) {
  return importExpr(Identifiers.twoWayBindingSet).callFn([target, value]);
}
function twoWayListener(name, handlerFn, sourceSpan) {
  return call(Identifiers.twoWayListener, [literal(name), handlerFn], sourceSpan);
}
function pipe2(slot, name) {
  return call(Identifiers.pipe, [literal(slot), literal(name)], null);
}
function namespaceHTML() {
  return call(Identifiers.namespaceHTML, [], null);
}
function namespaceSVG() {
  return call(Identifiers.namespaceSVG, [], null);
}
function namespaceMath() {
  return call(Identifiers.namespaceMathML, [], null);
}
function advance(delta, sourceSpan) {
  return call(Identifiers.advance, delta > 1 ? [literal(delta)] : [], sourceSpan);
}
function reference(slot) {
  return importExpr(Identifiers.reference).callFn([literal(slot)]);
}
function nextContext(steps) {
  return importExpr(Identifiers.nextContext).callFn(steps === 1 ? [] : [literal(steps)]);
}
function getCurrentView() {
  return importExpr(Identifiers.getCurrentView).callFn([]);
}
function restoreView(savedView) {
  return importExpr(Identifiers.restoreView).callFn([savedView]);
}
function resetView(returnValue) {
  return importExpr(Identifiers.resetView).callFn([returnValue]);
}
function text(slot, initialValue, sourceSpan) {
  const args = [literal(slot, null)];
  if (initialValue !== "") {
    args.push(literal(initialValue));
  }
  return call(Identifiers.text, args, sourceSpan);
}
function defer2(selfSlot, primarySlot, dependencyResolverFn, loadingSlot, placeholderSlot, errorSlot, loadingConfig, placeholderConfig, enableTimerScheduling, sourceSpan, flags) {
  const args = [literal(selfSlot), literal(primarySlot), dependencyResolverFn ?? literal(null), literal(loadingSlot), literal(placeholderSlot), literal(errorSlot), loadingConfig ?? literal(null), placeholderConfig ?? literal(null), enableTimerScheduling ? importExpr(Identifiers.deferEnableTimerScheduling) : literal(null), literal(flags)];
  let expr;
  while ((expr = args[args.length - 1]) !== null && expr instanceof LiteralExpr && expr.value === null) {
    args.pop();
  }
  return call(Identifiers.defer, args, sourceSpan);
}
var deferTriggerToR3TriggerInstructionsMap = /* @__PURE__ */ new Map([[DeferTriggerKind.Idle, {
  [
    "none"
    /* ir.DeferOpModifierKind.NONE */
  ]: Identifiers.deferOnIdle,
  [
    "prefetch"
    /* ir.DeferOpModifierKind.PREFETCH */
  ]: Identifiers.deferPrefetchOnIdle,
  [
    "hydrate"
    /* ir.DeferOpModifierKind.HYDRATE */
  ]: Identifiers.deferHydrateOnIdle
}], [DeferTriggerKind.Immediate, {
  [
    "none"
    /* ir.DeferOpModifierKind.NONE */
  ]: Identifiers.deferOnImmediate,
  [
    "prefetch"
    /* ir.DeferOpModifierKind.PREFETCH */
  ]: Identifiers.deferPrefetchOnImmediate,
  [
    "hydrate"
    /* ir.DeferOpModifierKind.HYDRATE */
  ]: Identifiers.deferHydrateOnImmediate
}], [DeferTriggerKind.Timer, {
  [
    "none"
    /* ir.DeferOpModifierKind.NONE */
  ]: Identifiers.deferOnTimer,
  [
    "prefetch"
    /* ir.DeferOpModifierKind.PREFETCH */
  ]: Identifiers.deferPrefetchOnTimer,
  [
    "hydrate"
    /* ir.DeferOpModifierKind.HYDRATE */
  ]: Identifiers.deferHydrateOnTimer
}], [DeferTriggerKind.Hover, {
  [
    "none"
    /* ir.DeferOpModifierKind.NONE */
  ]: Identifiers.deferOnHover,
  [
    "prefetch"
    /* ir.DeferOpModifierKind.PREFETCH */
  ]: Identifiers.deferPrefetchOnHover,
  [
    "hydrate"
    /* ir.DeferOpModifierKind.HYDRATE */
  ]: Identifiers.deferHydrateOnHover
}], [DeferTriggerKind.Interaction, {
  [
    "none"
    /* ir.DeferOpModifierKind.NONE */
  ]: Identifiers.deferOnInteraction,
  [
    "prefetch"
    /* ir.DeferOpModifierKind.PREFETCH */
  ]: Identifiers.deferPrefetchOnInteraction,
  [
    "hydrate"
    /* ir.DeferOpModifierKind.HYDRATE */
  ]: Identifiers.deferHydrateOnInteraction
}], [DeferTriggerKind.Viewport, {
  [
    "none"
    /* ir.DeferOpModifierKind.NONE */
  ]: Identifiers.deferOnViewport,
  [
    "prefetch"
    /* ir.DeferOpModifierKind.PREFETCH */
  ]: Identifiers.deferPrefetchOnViewport,
  [
    "hydrate"
    /* ir.DeferOpModifierKind.HYDRATE */
  ]: Identifiers.deferHydrateOnViewport
}], [DeferTriggerKind.Never, {
  [
    "none"
    /* ir.DeferOpModifierKind.NONE */
  ]: Identifiers.deferHydrateNever,
  [
    "prefetch"
    /* ir.DeferOpModifierKind.PREFETCH */
  ]: Identifiers.deferHydrateNever,
  [
    "hydrate"
    /* ir.DeferOpModifierKind.HYDRATE */
  ]: Identifiers.deferHydrateNever
}]]);
function deferOn(trigger, args, modifier, sourceSpan) {
  const instructionToCall = deferTriggerToR3TriggerInstructionsMap.get(trigger)?.[modifier];
  if (instructionToCall === void 0) {
    throw new Error(`Unable to determine instruction for trigger ${trigger}`);
  }
  return call(instructionToCall, args.map((a) => literal(a)), sourceSpan);
}
function projectionDef(def) {
  return call(Identifiers.projectionDef, def ? [def] : [], null);
}
function projection(slot, projectionSlotIndex, attributes, fallbackFnName, fallbackDecls, fallbackVars, sourceSpan) {
  const args = [literal(slot)];
  if (projectionSlotIndex !== 0 || attributes !== null || fallbackFnName !== null) {
    args.push(literal(projectionSlotIndex));
    if (attributes !== null) {
      args.push(attributes);
    }
    if (fallbackFnName !== null) {
      if (attributes === null) {
        args.push(literal(null));
      }
      args.push(variable(fallbackFnName), literal(fallbackDecls), literal(fallbackVars));
    }
  }
  return call(Identifiers.projection, args, sourceSpan);
}
function i18nStart(slot, constIndex, subTemplateIndex, sourceSpan) {
  const args = [literal(slot), literal(constIndex)];
  if (subTemplateIndex !== null) {
    args.push(literal(subTemplateIndex));
  }
  return call(Identifiers.i18nStart, args, sourceSpan);
}
function repeaterCreate(slot, viewFnName, decls, vars, tag, constIndex, trackByFn, trackByUsesComponentInstance, emptyViewFnName, emptyDecls, emptyVars, emptyTag, emptyConstIndex, sourceSpan) {
  const args = [literal(slot), variable(viewFnName), literal(decls), literal(vars), literal(tag), literal(constIndex), trackByFn];
  if (trackByUsesComponentInstance || emptyViewFnName !== null) {
    args.push(literal(trackByUsesComponentInstance));
    if (emptyViewFnName !== null) {
      args.push(variable(emptyViewFnName), literal(emptyDecls), literal(emptyVars));
      if (emptyTag !== null || emptyConstIndex !== null) {
        args.push(literal(emptyTag));
      }
      if (emptyConstIndex !== null) {
        args.push(literal(emptyConstIndex));
      }
    }
  }
  return call(Identifiers.repeaterCreate, args, sourceSpan);
}
function repeater(collection, sourceSpan) {
  return call(Identifiers.repeater, [collection], sourceSpan);
}
function deferWhen(modifier, expr, sourceSpan) {
  if (modifier === "prefetch") {
    return call(Identifiers.deferPrefetchWhen, [expr], sourceSpan);
  } else if (modifier === "hydrate") {
    return call(Identifiers.deferHydrateWhen, [expr], sourceSpan);
  }
  return call(Identifiers.deferWhen, [expr], sourceSpan);
}
function declareLet(slot, sourceSpan) {
  return call(Identifiers.declareLet, [literal(slot)], sourceSpan);
}
function storeLet(value, sourceSpan) {
  return importExpr(Identifiers.storeLet).callFn([value], sourceSpan);
}
function readContextLet(slot) {
  return importExpr(Identifiers.readContextLet).callFn([literal(slot)]);
}
function i18n(slot, constIndex, subTemplateIndex, sourceSpan) {
  const args = [literal(slot), literal(constIndex)];
  if (subTemplateIndex) {
    args.push(literal(subTemplateIndex));
  }
  return call(Identifiers.i18n, args, sourceSpan);
}
function i18nEnd(endSourceSpan) {
  return call(Identifiers.i18nEnd, [], endSourceSpan);
}
function i18nAttributes(slot, i18nAttributesConfig) {
  const args = [literal(slot), literal(i18nAttributesConfig)];
  return call(Identifiers.i18nAttributes, args, null);
}
function property(name, expression, sanitizer, sourceSpan) {
  const args = [literal(name), expression];
  if (sanitizer !== null) {
    args.push(sanitizer);
  }
  return call(Identifiers.property, args, sourceSpan);
}
function twoWayProperty(name, expression, sanitizer, sourceSpan) {
  const args = [literal(name), expression];
  if (sanitizer !== null) {
    args.push(sanitizer);
  }
  return call(Identifiers.twoWayProperty, args, sourceSpan);
}
function attribute(name, expression, sanitizer, namespace) {
  const args = [literal(name), expression];
  if (sanitizer !== null || namespace !== null) {
    args.push(sanitizer ?? literal(null));
  }
  if (namespace !== null) {
    args.push(literal(namespace));
  }
  return call(Identifiers.attribute, args, null);
}
function styleProp(name, expression, unit, sourceSpan) {
  const args = [literal(name), expression];
  if (unit !== null) {
    args.push(literal(unit));
  }
  return call(Identifiers.styleProp, args, sourceSpan);
}
function classProp(name, expression, sourceSpan) {
  return call(Identifiers.classProp, [literal(name), expression], sourceSpan);
}
function styleMap(expression, sourceSpan) {
  return call(Identifiers.styleMap, [expression], sourceSpan);
}
function classMap(expression, sourceSpan) {
  return call(Identifiers.classMap, [expression], sourceSpan);
}
var PIPE_BINDINGS = [Identifiers.pipeBind1, Identifiers.pipeBind2, Identifiers.pipeBind3, Identifiers.pipeBind4];
function pipeBind(slot, varOffset, args) {
  if (args.length < 1 || args.length > PIPE_BINDINGS.length) {
    throw new Error(`pipeBind() argument count out of bounds`);
  }
  const instruction = PIPE_BINDINGS[args.length - 1];
  return importExpr(instruction).callFn([literal(slot), literal(varOffset), ...args]);
}
function pipeBindV(slot, varOffset, args) {
  return importExpr(Identifiers.pipeBindV).callFn([literal(slot), literal(varOffset), args]);
}
function textInterpolate(strings, expressions, sourceSpan) {
  const interpolationArgs = collateInterpolationArgs(strings, expressions);
  return callVariadicInstruction(TEXT_INTERPOLATE_CONFIG, [], interpolationArgs, [], sourceSpan);
}
function i18nExp(expr, sourceSpan) {
  return call(Identifiers.i18nExp, [expr], sourceSpan);
}
function i18nApply(slot, sourceSpan) {
  return call(Identifiers.i18nApply, [literal(slot)], sourceSpan);
}
function propertyInterpolate(name, strings, expressions, sanitizer, sourceSpan) {
  const interpolationArgs = collateInterpolationArgs(strings, expressions);
  const extraArgs = [];
  if (sanitizer !== null) {
    extraArgs.push(sanitizer);
  }
  return callVariadicInstruction(PROPERTY_INTERPOLATE_CONFIG, [literal(name)], interpolationArgs, extraArgs, sourceSpan);
}
function attributeInterpolate(name, strings, expressions, sanitizer, sourceSpan) {
  const interpolationArgs = collateInterpolationArgs(strings, expressions);
  const extraArgs = [];
  if (sanitizer !== null) {
    extraArgs.push(sanitizer);
  }
  return callVariadicInstruction(ATTRIBUTE_INTERPOLATE_CONFIG, [literal(name)], interpolationArgs, extraArgs, sourceSpan);
}
function stylePropInterpolate(name, strings, expressions, unit, sourceSpan) {
  const interpolationArgs = collateInterpolationArgs(strings, expressions);
  const extraArgs = [];
  if (unit !== null) {
    extraArgs.push(literal(unit));
  }
  return callVariadicInstruction(STYLE_PROP_INTERPOLATE_CONFIG, [literal(name)], interpolationArgs, extraArgs, sourceSpan);
}
function styleMapInterpolate(strings, expressions, sourceSpan) {
  const interpolationArgs = collateInterpolationArgs(strings, expressions);
  return callVariadicInstruction(STYLE_MAP_INTERPOLATE_CONFIG, [], interpolationArgs, [], sourceSpan);
}
function classMapInterpolate(strings, expressions, sourceSpan) {
  const interpolationArgs = collateInterpolationArgs(strings, expressions);
  return callVariadicInstruction(CLASS_MAP_INTERPOLATE_CONFIG, [], interpolationArgs, [], sourceSpan);
}
function hostProperty(name, expression, sanitizer, sourceSpan) {
  const args = [literal(name), expression];
  if (sanitizer !== null) {
    args.push(sanitizer);
  }
  return call(Identifiers.hostProperty, args, sourceSpan);
}
function syntheticHostProperty(name, expression, sourceSpan) {
  return call(Identifiers.syntheticHostProperty, [literal(name), expression], sourceSpan);
}
function pureFunction(varOffset, fn2, args) {
  return callVariadicInstructionExpr(PURE_FUNCTION_CONFIG, [literal(varOffset), fn2], args, [], null);
}
function attachSourceLocation(templatePath, locations) {
  return call(Identifiers.attachSourceLocations, [literal(templatePath), locations], null);
}
function collateInterpolationArgs(strings, expressions) {
  if (strings.length < 1 || expressions.length !== strings.length - 1) {
    throw new Error(`AssertionError: expected specific shape of args for strings/expressions in interpolation`);
  }
  const interpolationArgs = [];
  if (expressions.length === 1 && strings[0] === "" && strings[1] === "") {
    interpolationArgs.push(expressions[0]);
  } else {
    let idx;
    for (idx = 0; idx < expressions.length; idx++) {
      interpolationArgs.push(literal(strings[idx]), expressions[idx]);
    }
    interpolationArgs.push(literal(strings[idx]));
  }
  return interpolationArgs;
}
function call(instruction, args, sourceSpan) {
  const expr = importExpr(instruction).callFn(args, sourceSpan);
  return createStatementOp(new ExpressionStatement(expr, sourceSpan));
}
function conditional(condition, contextValue, sourceSpan) {
  const args = [condition];
  if (contextValue !== null) {
    args.push(contextValue);
  }
  return call(Identifiers.conditional, args, sourceSpan);
}
var TEXT_INTERPOLATE_CONFIG = {
  constant: [Identifiers.textInterpolate, Identifiers.textInterpolate1, Identifiers.textInterpolate2, Identifiers.textInterpolate3, Identifiers.textInterpolate4, Identifiers.textInterpolate5, Identifiers.textInterpolate6, Identifiers.textInterpolate7, Identifiers.textInterpolate8],
  variable: Identifiers.textInterpolateV,
  mapping: (n) => {
    if (n % 2 === 0) {
      throw new Error(`Expected odd number of arguments`);
    }
    return (n - 1) / 2;
  }
};
var PROPERTY_INTERPOLATE_CONFIG = {
  constant: [Identifiers.propertyInterpolate, Identifiers.propertyInterpolate1, Identifiers.propertyInterpolate2, Identifiers.propertyInterpolate3, Identifiers.propertyInterpolate4, Identifiers.propertyInterpolate5, Identifiers.propertyInterpolate6, Identifiers.propertyInterpolate7, Identifiers.propertyInterpolate8],
  variable: Identifiers.propertyInterpolateV,
  mapping: (n) => {
    if (n % 2 === 0) {
      throw new Error(`Expected odd number of arguments`);
    }
    return (n - 1) / 2;
  }
};
var STYLE_PROP_INTERPOLATE_CONFIG = {
  constant: [Identifiers.styleProp, Identifiers.stylePropInterpolate1, Identifiers.stylePropInterpolate2, Identifiers.stylePropInterpolate3, Identifiers.stylePropInterpolate4, Identifiers.stylePropInterpolate5, Identifiers.stylePropInterpolate6, Identifiers.stylePropInterpolate7, Identifiers.stylePropInterpolate8],
  variable: Identifiers.stylePropInterpolateV,
  mapping: (n) => {
    if (n % 2 === 0) {
      throw new Error(`Expected odd number of arguments`);
    }
    return (n - 1) / 2;
  }
};
var ATTRIBUTE_INTERPOLATE_CONFIG = {
  constant: [Identifiers.attribute, Identifiers.attributeInterpolate1, Identifiers.attributeInterpolate2, Identifiers.attributeInterpolate3, Identifiers.attributeInterpolate4, Identifiers.attributeInterpolate5, Identifiers.attributeInterpolate6, Identifiers.attributeInterpolate7, Identifiers.attributeInterpolate8],
  variable: Identifiers.attributeInterpolateV,
  mapping: (n) => {
    if (n % 2 === 0) {
      throw new Error(`Expected odd number of arguments`);
    }
    return (n - 1) / 2;
  }
};
var STYLE_MAP_INTERPOLATE_CONFIG = {
  constant: [Identifiers.styleMap, Identifiers.styleMapInterpolate1, Identifiers.styleMapInterpolate2, Identifiers.styleMapInterpolate3, Identifiers.styleMapInterpolate4, Identifiers.styleMapInterpolate5, Identifiers.styleMapInterpolate6, Identifiers.styleMapInterpolate7, Identifiers.styleMapInterpolate8],
  variable: Identifiers.styleMapInterpolateV,
  mapping: (n) => {
    if (n % 2 === 0) {
      throw new Error(`Expected odd number of arguments`);
    }
    return (n - 1) / 2;
  }
};
var CLASS_MAP_INTERPOLATE_CONFIG = {
  constant: [Identifiers.classMap, Identifiers.classMapInterpolate1, Identifiers.classMapInterpolate2, Identifiers.classMapInterpolate3, Identifiers.classMapInterpolate4, Identifiers.classMapInterpolate5, Identifiers.classMapInterpolate6, Identifiers.classMapInterpolate7, Identifiers.classMapInterpolate8],
  variable: Identifiers.classMapInterpolateV,
  mapping: (n) => {
    if (n % 2 === 0) {
      throw new Error(`Expected odd number of arguments`);
    }
    return (n - 1) / 2;
  }
};
var PURE_FUNCTION_CONFIG = {
  constant: [Identifiers.pureFunction0, Identifiers.pureFunction1, Identifiers.pureFunction2, Identifiers.pureFunction3, Identifiers.pureFunction4, Identifiers.pureFunction5, Identifiers.pureFunction6, Identifiers.pureFunction7, Identifiers.pureFunction8],
  variable: Identifiers.pureFunctionV,
  mapping: (n) => n
};
function callVariadicInstructionExpr(config, baseArgs, interpolationArgs, extraArgs, sourceSpan) {
  const n = config.mapping(interpolationArgs.length);
  if (n < config.constant.length) {
    return importExpr(config.constant[n]).callFn([...baseArgs, ...interpolationArgs, ...extraArgs], sourceSpan);
  } else if (config.variable !== null) {
    return importExpr(config.variable).callFn([...baseArgs, literalArr(interpolationArgs), ...extraArgs], sourceSpan);
  } else {
    throw new Error(`AssertionError: unable to call variadic function`);
  }
}
function callVariadicInstruction(config, baseArgs, interpolationArgs, extraArgs, sourceSpan) {
  return createStatementOp(callVariadicInstructionExpr(config, baseArgs, interpolationArgs, extraArgs, sourceSpan).toStmt());
}
var GLOBAL_TARGET_RESOLVERS = /* @__PURE__ */ new Map([["window", Identifiers.resolveWindow], ["document", Identifiers.resolveDocument], ["body", Identifiers.resolveBody]]);
function reify(job) {
  for (const unit of job.units) {
    reifyCreateOperations(unit, unit.create);
    reifyUpdateOperations(unit, unit.update);
  }
}
function reifyCreateOperations(unit, ops) {
  for (const op2 of ops) {
    transformExpressionsInOp(op2, reifyIrExpression, VisitorContextFlag.None);
    switch (op2.kind) {
      case OpKind.Text:
        OpList.replace(op2, text(op2.handle.slot, op2.initialValue, op2.sourceSpan));
        break;
      case OpKind.ElementStart:
        OpList.replace(op2, elementStart(op2.handle.slot, op2.tag, op2.attributes, op2.localRefs, op2.startSourceSpan));
        break;
      case OpKind.Element:
        OpList.replace(op2, element(op2.handle.slot, op2.tag, op2.attributes, op2.localRefs, op2.wholeSourceSpan));
        break;
      case OpKind.ElementEnd:
        OpList.replace(op2, elementEnd(op2.sourceSpan));
        break;
      case OpKind.ContainerStart:
        OpList.replace(op2, elementContainerStart(op2.handle.slot, op2.attributes, op2.localRefs, op2.startSourceSpan));
        break;
      case OpKind.Container:
        OpList.replace(op2, elementContainer(op2.handle.slot, op2.attributes, op2.localRefs, op2.wholeSourceSpan));
        break;
      case OpKind.ContainerEnd:
        OpList.replace(op2, elementContainerEnd());
        break;
      case OpKind.I18nStart:
        OpList.replace(op2, i18nStart(op2.handle.slot, op2.messageIndex, op2.subTemplateIndex, op2.sourceSpan));
        break;
      case OpKind.I18nEnd:
        OpList.replace(op2, i18nEnd(op2.sourceSpan));
        break;
      case OpKind.I18n:
        OpList.replace(op2, i18n(op2.handle.slot, op2.messageIndex, op2.subTemplateIndex, op2.sourceSpan));
        break;
      case OpKind.I18nAttributes:
        if (op2.i18nAttributesConfig === null) {
          throw new Error(`AssertionError: i18nAttributesConfig was not set`);
        }
        OpList.replace(op2, i18nAttributes(op2.handle.slot, op2.i18nAttributesConfig));
        break;
      case OpKind.Template:
        if (!(unit instanceof ViewCompilationUnit)) {
          throw new Error(`AssertionError: must be compiling a component`);
        }
        if (Array.isArray(op2.localRefs)) {
          throw new Error(`AssertionError: local refs array should have been extracted into a constant`);
        }
        const childView = unit.job.views.get(op2.xref);
        OpList.replace(op2, template(op2.handle.slot, variable(childView.fnName), childView.decls, childView.vars, op2.tag, op2.attributes, op2.localRefs, op2.startSourceSpan));
        break;
      case OpKind.DisableBindings:
        OpList.replace(op2, disableBindings());
        break;
      case OpKind.EnableBindings:
        OpList.replace(op2, enableBindings());
        break;
      case OpKind.Pipe:
        OpList.replace(op2, pipe2(op2.handle.slot, op2.name));
        break;
      case OpKind.DeclareLet:
        OpList.replace(op2, declareLet(op2.handle.slot, op2.sourceSpan));
        break;
      case OpKind.Listener:
        const listenerFn = reifyListenerHandler(unit, op2.handlerFnName, op2.handlerOps, op2.consumesDollarEvent);
        const eventTargetResolver = op2.eventTarget ? GLOBAL_TARGET_RESOLVERS.get(op2.eventTarget) : null;
        if (eventTargetResolver === void 0) {
          throw new Error(`Unexpected global target '${op2.eventTarget}' defined for '${op2.name}' event. Supported list of global targets: window,document,body.`);
        }
        OpList.replace(op2, listener(op2.name, listenerFn, eventTargetResolver, op2.hostListener && op2.isAnimationListener, op2.sourceSpan));
        break;
      case OpKind.TwoWayListener:
        OpList.replace(op2, twoWayListener(op2.name, reifyListenerHandler(unit, op2.handlerFnName, op2.handlerOps, true), op2.sourceSpan));
        break;
      case OpKind.Variable:
        if (op2.variable.name === null) {
          throw new Error(`AssertionError: unnamed variable ${op2.xref}`);
        }
        OpList.replace(op2, createStatementOp(new DeclareVarStmt(op2.variable.name, op2.initializer, void 0, StmtModifier.Final)));
        break;
      case OpKind.Namespace:
        switch (op2.active) {
          case Namespace.HTML:
            OpList.replace(op2, namespaceHTML());
            break;
          case Namespace.SVG:
            OpList.replace(op2, namespaceSVG());
            break;
          case Namespace.Math:
            OpList.replace(op2, namespaceMath());
            break;
        }
        break;
      case OpKind.Defer:
        const timerScheduling = !!op2.loadingMinimumTime || !!op2.loadingAfterTime || !!op2.placeholderMinimumTime;
        OpList.replace(op2, defer2(op2.handle.slot, op2.mainSlot.slot, op2.resolverFn, op2.loadingSlot?.slot ?? null, op2.placeholderSlot?.slot ?? null, op2.errorSlot?.slot ?? null, op2.loadingConfig, op2.placeholderConfig, timerScheduling, op2.sourceSpan, op2.flags));
        break;
      case OpKind.DeferOn:
        let args = [];
        switch (op2.trigger.kind) {
          case DeferTriggerKind.Never:
          case DeferTriggerKind.Idle:
          case DeferTriggerKind.Immediate:
            break;
          case DeferTriggerKind.Timer:
            args = [op2.trigger.delay];
            break;
          case DeferTriggerKind.Interaction:
          case DeferTriggerKind.Hover:
          case DeferTriggerKind.Viewport:
            if (op2.modifier === "hydrate") {
              args = [];
            } else {
              if (op2.trigger.targetSlot?.slot == null || op2.trigger.targetSlotViewSteps === null) {
                throw new Error(`Slot or view steps not set in trigger reification for trigger kind ${op2.trigger.kind}`);
              }
              args = [op2.trigger.targetSlot.slot];
              if (op2.trigger.targetSlotViewSteps !== 0) {
                args.push(op2.trigger.targetSlotViewSteps);
              }
            }
            break;
          default:
            throw new Error(`AssertionError: Unsupported reification of defer trigger kind ${op2.trigger.kind}`);
        }
        OpList.replace(op2, deferOn(op2.trigger.kind, args, op2.modifier, op2.sourceSpan));
        break;
      case OpKind.ProjectionDef:
        OpList.replace(op2, projectionDef(op2.def));
        break;
      case OpKind.Projection:
        if (op2.handle.slot === null) {
          throw new Error("No slot was assigned for project instruction");
        }
        let fallbackViewFnName = null;
        let fallbackDecls = null;
        let fallbackVars = null;
        if (op2.fallbackView !== null) {
          if (!(unit instanceof ViewCompilationUnit)) {
            throw new Error(`AssertionError: must be compiling a component`);
          }
          const fallbackView = unit.job.views.get(op2.fallbackView);
          if (fallbackView === void 0) {
            throw new Error("AssertionError: projection had fallback view xref, but fallback view was not found");
          }
          if (fallbackView.fnName === null || fallbackView.decls === null || fallbackView.vars === null) {
            throw new Error(`AssertionError: expected projection fallback view to have been named and counted`);
          }
          fallbackViewFnName = fallbackView.fnName;
          fallbackDecls = fallbackView.decls;
          fallbackVars = fallbackView.vars;
        }
        OpList.replace(op2, projection(op2.handle.slot, op2.projectionSlotIndex, op2.attributes, fallbackViewFnName, fallbackDecls, fallbackVars, op2.sourceSpan));
        break;
      case OpKind.RepeaterCreate:
        if (op2.handle.slot === null) {
          throw new Error("No slot was assigned for repeater instruction");
        }
        if (!(unit instanceof ViewCompilationUnit)) {
          throw new Error(`AssertionError: must be compiling a component`);
        }
        const repeaterView = unit.job.views.get(op2.xref);
        if (repeaterView.fnName === null) {
          throw new Error(`AssertionError: expected repeater primary view to have been named`);
        }
        let emptyViewFnName = null;
        let emptyDecls = null;
        let emptyVars = null;
        if (op2.emptyView !== null) {
          const emptyView = unit.job.views.get(op2.emptyView);
          if (emptyView === void 0) {
            throw new Error("AssertionError: repeater had empty view xref, but empty view was not found");
          }
          if (emptyView.fnName === null || emptyView.decls === null || emptyView.vars === null) {
            throw new Error(`AssertionError: expected repeater empty view to have been named and counted`);
          }
          emptyViewFnName = emptyView.fnName;
          emptyDecls = emptyView.decls;
          emptyVars = emptyView.vars;
        }
        OpList.replace(op2, repeaterCreate(op2.handle.slot, repeaterView.fnName, op2.decls, op2.vars, op2.tag, op2.attributes, reifyTrackBy(unit, op2), op2.usesComponentInstance, emptyViewFnName, emptyDecls, emptyVars, op2.emptyTag, op2.emptyAttributes, op2.wholeSourceSpan));
        break;
      case OpKind.SourceLocation:
        const locationsLiteral = literalArr(op2.locations.map(({
          targetSlot,
          offset,
          line,
          column
        }) => {
          if (targetSlot.slot === null) {
            throw new Error("No slot was assigned for source location");
          }
          return literalArr([literal(targetSlot.slot), literal(offset), literal(line), literal(column)]);
        }));
        OpList.replace(op2, attachSourceLocation(op2.templatePath, locationsLiteral));
        break;
      case OpKind.Statement:
        break;
      default:
        throw new Error(`AssertionError: Unsupported reification of create op ${OpKind[op2.kind]}`);
    }
  }
}
function reifyUpdateOperations(_unit, ops) {
  for (const op2 of ops) {
    transformExpressionsInOp(op2, reifyIrExpression, VisitorContextFlag.None);
    switch (op2.kind) {
      case OpKind.Advance:
        OpList.replace(op2, advance(op2.delta, op2.sourceSpan));
        break;
      case OpKind.Property:
        if (op2.expression instanceof Interpolation2) {
          OpList.replace(op2, propertyInterpolate(op2.name, op2.expression.strings, op2.expression.expressions, op2.sanitizer, op2.sourceSpan));
        } else {
          OpList.replace(op2, property(op2.name, op2.expression, op2.sanitizer, op2.sourceSpan));
        }
        break;
      case OpKind.TwoWayProperty:
        OpList.replace(op2, twoWayProperty(op2.name, op2.expression, op2.sanitizer, op2.sourceSpan));
        break;
      case OpKind.StyleProp:
        if (op2.expression instanceof Interpolation2) {
          OpList.replace(op2, stylePropInterpolate(op2.name, op2.expression.strings, op2.expression.expressions, op2.unit, op2.sourceSpan));
        } else {
          OpList.replace(op2, styleProp(op2.name, op2.expression, op2.unit, op2.sourceSpan));
        }
        break;
      case OpKind.ClassProp:
        OpList.replace(op2, classProp(op2.name, op2.expression, op2.sourceSpan));
        break;
      case OpKind.StyleMap:
        if (op2.expression instanceof Interpolation2) {
          OpList.replace(op2, styleMapInterpolate(op2.expression.strings, op2.expression.expressions, op2.sourceSpan));
        } else {
          OpList.replace(op2, styleMap(op2.expression, op2.sourceSpan));
        }
        break;
      case OpKind.ClassMap:
        if (op2.expression instanceof Interpolation2) {
          OpList.replace(op2, classMapInterpolate(op2.expression.strings, op2.expression.expressions, op2.sourceSpan));
        } else {
          OpList.replace(op2, classMap(op2.expression, op2.sourceSpan));
        }
        break;
      case OpKind.I18nExpression:
        OpList.replace(op2, i18nExp(op2.expression, op2.sourceSpan));
        break;
      case OpKind.I18nApply:
        OpList.replace(op2, i18nApply(op2.handle.slot, op2.sourceSpan));
        break;
      case OpKind.InterpolateText:
        OpList.replace(op2, textInterpolate(op2.interpolation.strings, op2.interpolation.expressions, op2.sourceSpan));
        break;
      case OpKind.Attribute:
        if (op2.expression instanceof Interpolation2) {
          OpList.replace(op2, attributeInterpolate(op2.name, op2.expression.strings, op2.expression.expressions, op2.sanitizer, op2.sourceSpan));
        } else {
          OpList.replace(op2, attribute(op2.name, op2.expression, op2.sanitizer, op2.namespace));
        }
        break;
      case OpKind.HostProperty:
        if (op2.expression instanceof Interpolation2) {
          throw new Error("not yet handled");
        } else {
          if (op2.isAnimationTrigger) {
            OpList.replace(op2, syntheticHostProperty(op2.name, op2.expression, op2.sourceSpan));
          } else {
            OpList.replace(op2, hostProperty(op2.name, op2.expression, op2.sanitizer, op2.sourceSpan));
          }
        }
        break;
      case OpKind.Variable:
        if (op2.variable.name === null) {
          throw new Error(`AssertionError: unnamed variable ${op2.xref}`);
        }
        OpList.replace(op2, createStatementOp(new DeclareVarStmt(op2.variable.name, op2.initializer, void 0, StmtModifier.Final)));
        break;
      case OpKind.Conditional:
        if (op2.processed === null) {
          throw new Error(`Conditional test was not set.`);
        }
        OpList.replace(op2, conditional(op2.processed, op2.contextValue, op2.sourceSpan));
        break;
      case OpKind.Repeater:
        OpList.replace(op2, repeater(op2.collection, op2.sourceSpan));
        break;
      case OpKind.DeferWhen:
        OpList.replace(op2, deferWhen(op2.modifier, op2.expr, op2.sourceSpan));
        break;
      case OpKind.StoreLet:
        throw new Error(`AssertionError: unexpected storeLet ${op2.declaredName}`);
      case OpKind.Statement:
        break;
      default:
        throw new Error(`AssertionError: Unsupported reification of update op ${OpKind[op2.kind]}`);
    }
  }
}
function reifyIrExpression(expr) {
  if (!isIrExpression(expr)) {
    return expr;
  }
  switch (expr.kind) {
    case ExpressionKind.NextContext:
      return nextContext(expr.steps);
    case ExpressionKind.Reference:
      return reference(expr.targetSlot.slot + 1 + expr.offset);
    case ExpressionKind.LexicalRead:
      throw new Error(`AssertionError: unresolved LexicalRead of ${expr.name}`);
    case ExpressionKind.TwoWayBindingSet:
      throw new Error(`AssertionError: unresolved TwoWayBindingSet`);
    case ExpressionKind.RestoreView:
      if (typeof expr.view === "number") {
        throw new Error(`AssertionError: unresolved RestoreView`);
      }
      return restoreView(expr.view);
    case ExpressionKind.ResetView:
      return resetView(expr.expr);
    case ExpressionKind.GetCurrentView:
      return getCurrentView();
    case ExpressionKind.ReadVariable:
      if (expr.name === null) {
        throw new Error(`Read of unnamed variable ${expr.xref}`);
      }
      return variable(expr.name);
    case ExpressionKind.ReadTemporaryExpr:
      if (expr.name === null) {
        throw new Error(`Read of unnamed temporary ${expr.xref}`);
      }
      return variable(expr.name);
    case ExpressionKind.AssignTemporaryExpr:
      if (expr.name === null) {
        throw new Error(`Assign of unnamed temporary ${expr.xref}`);
      }
      return variable(expr.name).set(expr.expr);
    case ExpressionKind.PureFunctionExpr:
      if (expr.fn === null) {
        throw new Error(`AssertionError: expected PureFunctions to have been extracted`);
      }
      return pureFunction(expr.varOffset, expr.fn, expr.args);
    case ExpressionKind.PureFunctionParameterExpr:
      throw new Error(`AssertionError: expected PureFunctionParameterExpr to have been extracted`);
    case ExpressionKind.PipeBinding:
      return pipeBind(expr.targetSlot.slot, expr.varOffset, expr.args);
    case ExpressionKind.PipeBindingVariadic:
      return pipeBindV(expr.targetSlot.slot, expr.varOffset, expr.args);
    case ExpressionKind.SlotLiteralExpr:
      return literal(expr.slot.slot);
    case ExpressionKind.ContextLetReference:
      return readContextLet(expr.targetSlot.slot);
    case ExpressionKind.StoreLet:
      return storeLet(expr.value, expr.sourceSpan);
    case ExpressionKind.TrackContext:
      return variable("this");
    default:
      throw new Error(`AssertionError: Unsupported reification of ir.Expression kind: ${ExpressionKind[expr.kind]}`);
  }
}
function reifyListenerHandler(unit, name, handlerOps, consumesDollarEvent) {
  reifyUpdateOperations(unit, handlerOps);
  const handlerStmts = [];
  for (const op2 of handlerOps) {
    if (op2.kind !== OpKind.Statement) {
      throw new Error(`AssertionError: expected reified statements, but found op ${OpKind[op2.kind]}`);
    }
    handlerStmts.push(op2.statement);
  }
  const params = [];
  if (consumesDollarEvent) {
    params.push(new FnParam("$event"));
  }
  return fn(params, handlerStmts, void 0, void 0, name);
}
function reifyTrackBy(unit, op2) {
  if (op2.trackByFn !== null) {
    return op2.trackByFn;
  }
  const params = [new FnParam("$index"), new FnParam("$item")];
  let fn$1;
  if (op2.trackByOps === null) {
    fn$1 = op2.usesComponentInstance ? fn(params, [new ReturnStatement(op2.track)]) : arrowFn(params, op2.track);
  } else {
    reifyUpdateOperations(unit, op2.trackByOps);
    const statements = [];
    for (const trackOp of op2.trackByOps) {
      if (trackOp.kind !== OpKind.Statement) {
        throw new Error(`AssertionError: expected reified statements, but found op ${OpKind[trackOp.kind]}`);
      }
      statements.push(trackOp.statement);
    }
    fn$1 = op2.usesComponentInstance || statements.length !== 1 || !(statements[0] instanceof ReturnStatement) ? fn(params, statements) : arrowFn(params, statements[0].value);
  }
  op2.trackByFn = unit.job.pool.getSharedFunctionReference(fn$1, "_forTrack");
  return op2.trackByFn;
}
function removeEmptyBindings(job) {
  for (const unit of job.units) {
    for (const op2 of unit.update) {
      switch (op2.kind) {
        case OpKind.Attribute:
        case OpKind.Binding:
        case OpKind.ClassProp:
        case OpKind.ClassMap:
        case OpKind.Property:
        case OpKind.StyleProp:
        case OpKind.StyleMap:
          if (op2.expression instanceof EmptyExpr2) {
            OpList.remove(op2);
          }
          break;
      }
    }
  }
}
function removeI18nContexts(job) {
  for (const unit of job.units) {
    for (const op2 of unit.create) {
      switch (op2.kind) {
        case OpKind.I18nContext:
          OpList.remove(op2);
          break;
        case OpKind.I18nStart:
          op2.context = null;
          break;
      }
    }
  }
}
function removeUnusedI18nAttributesOps(job) {
  for (const unit of job.units) {
    const ownersWithI18nExpressions = /* @__PURE__ */ new Set();
    for (const op2 of unit.update) {
      switch (op2.kind) {
        case OpKind.I18nExpression:
          ownersWithI18nExpressions.add(op2.i18nOwner);
      }
    }
    for (const op2 of unit.create) {
      switch (op2.kind) {
        case OpKind.I18nAttributes:
          if (ownersWithI18nExpressions.has(op2.xref)) {
            continue;
          }
          OpList.remove(op2);
      }
    }
  }
}
function resolveContexts(job) {
  for (const unit of job.units) {
    processLexicalScope$1(unit, unit.create);
    processLexicalScope$1(unit, unit.update);
  }
}
function processLexicalScope$1(view, ops) {
  const scope = /* @__PURE__ */ new Map();
  scope.set(view.xref, variable("ctx"));
  for (const op2 of ops) {
    switch (op2.kind) {
      case OpKind.Variable:
        switch (op2.variable.kind) {
          case SemanticVariableKind.Context:
            scope.set(op2.variable.view, new ReadVariableExpr(op2.xref));
            break;
        }
        break;
      case OpKind.Listener:
      case OpKind.TwoWayListener:
        processLexicalScope$1(view, op2.handlerOps);
        break;
      case OpKind.RepeaterCreate:
        if (op2.trackByOps !== null) {
          processLexicalScope$1(view, op2.trackByOps);
        }
        break;
    }
  }
  if (view === view.job.root) {
    scope.set(view.xref, variable("ctx"));
  }
  for (const op2 of ops) {
    transformExpressionsInOp(op2, (expr) => {
      if (expr instanceof ContextExpr) {
        if (!scope.has(expr.view)) {
          throw new Error(`No context found for reference to view ${expr.view} from view ${view.xref}`);
        }
        return scope.get(expr.view);
      } else {
        return expr;
      }
    }, VisitorContextFlag.None);
  }
}
function resolveDollarEvent(job) {
  for (const unit of job.units) {
    transformDollarEvent(unit.create);
    transformDollarEvent(unit.update);
  }
}
function transformDollarEvent(ops) {
  for (const op2 of ops) {
    if (op2.kind === OpKind.Listener || op2.kind === OpKind.TwoWayListener) {
      transformExpressionsInOp(op2, (expr) => {
        if (expr instanceof LexicalReadExpr && expr.name === "$event") {
          if (op2.kind === OpKind.Listener) {
            op2.consumesDollarEvent = true;
          }
          return new ReadVarExpr(expr.name);
        }
        return expr;
      }, VisitorContextFlag.InChildOperation);
    }
  }
}
function resolveI18nElementPlaceholders(job) {
  const i18nContexts = /* @__PURE__ */ new Map();
  const elements = /* @__PURE__ */ new Map();
  for (const unit of job.units) {
    for (const op2 of unit.create) {
      switch (op2.kind) {
        case OpKind.I18nContext:
          i18nContexts.set(op2.xref, op2);
          break;
        case OpKind.ElementStart:
          elements.set(op2.xref, op2);
          break;
      }
    }
  }
  resolvePlaceholdersForView(job, job.root, i18nContexts, elements);
}
function resolvePlaceholdersForView(job, unit, i18nContexts, elements, pendingStructuralDirective) {
  let currentOps = null;
  let pendingStructuralDirectiveCloses = /* @__PURE__ */ new Map();
  for (const op2 of unit.create) {
    switch (op2.kind) {
      case OpKind.I18nStart:
        if (!op2.context) {
          throw Error("Could not find i18n context for i18n op");
        }
        currentOps = {
          i18nBlock: op2,
          i18nContext: i18nContexts.get(op2.context)
        };
        break;
      case OpKind.I18nEnd:
        currentOps = null;
        break;
      case OpKind.ElementStart:
        if (op2.i18nPlaceholder !== void 0) {
          if (currentOps === null) {
            throw Error("i18n tag placeholder should only occur inside an i18n block");
          }
          recordElementStart(op2, currentOps.i18nContext, currentOps.i18nBlock, pendingStructuralDirective);
          if (pendingStructuralDirective && op2.i18nPlaceholder.closeName) {
            pendingStructuralDirectiveCloses.set(op2.xref, pendingStructuralDirective);
          }
          pendingStructuralDirective = void 0;
        }
        break;
      case OpKind.ElementEnd:
        const startOp = elements.get(op2.xref);
        if (startOp && startOp.i18nPlaceholder !== void 0) {
          if (currentOps === null) {
            throw Error("AssertionError: i18n tag placeholder should only occur inside an i18n block");
          }
          recordElementClose(startOp, currentOps.i18nContext, currentOps.i18nBlock, pendingStructuralDirectiveCloses.get(op2.xref));
          pendingStructuralDirectiveCloses.delete(op2.xref);
        }
        break;
      case OpKind.Projection:
        if (op2.i18nPlaceholder !== void 0) {
          if (currentOps === null) {
            throw Error("i18n tag placeholder should only occur inside an i18n block");
          }
          recordElementStart(op2, currentOps.i18nContext, currentOps.i18nBlock, pendingStructuralDirective);
          recordElementClose(op2, currentOps.i18nContext, currentOps.i18nBlock, pendingStructuralDirective);
          pendingStructuralDirective = void 0;
        }
        break;
      case OpKind.Template:
        const view = job.views.get(op2.xref);
        if (op2.i18nPlaceholder === void 0) {
          resolvePlaceholdersForView(job, view, i18nContexts, elements);
        } else {
          if (currentOps === null) {
            throw Error("i18n tag placeholder should only occur inside an i18n block");
          }
          if (op2.templateKind === TemplateKind.Structural) {
            resolvePlaceholdersForView(job, view, i18nContexts, elements, op2);
          } else {
            recordTemplateStart(job, view, op2.handle.slot, op2.i18nPlaceholder, currentOps.i18nContext, currentOps.i18nBlock, pendingStructuralDirective);
            resolvePlaceholdersForView(job, view, i18nContexts, elements);
            recordTemplateClose(job, view, op2.handle.slot, op2.i18nPlaceholder, currentOps.i18nContext, currentOps.i18nBlock, pendingStructuralDirective);
            pendingStructuralDirective = void 0;
          }
        }
        break;
      case OpKind.RepeaterCreate:
        if (pendingStructuralDirective !== void 0) {
          throw Error("AssertionError: Unexpected structural directive associated with @for block");
        }
        const forSlot = op2.handle.slot + 1;
        const forView = job.views.get(op2.xref);
        if (op2.i18nPlaceholder === void 0) {
          resolvePlaceholdersForView(job, forView, i18nContexts, elements);
        } else {
          if (currentOps === null) {
            throw Error("i18n tag placeholder should only occur inside an i18n block");
          }
          recordTemplateStart(job, forView, forSlot, op2.i18nPlaceholder, currentOps.i18nContext, currentOps.i18nBlock, pendingStructuralDirective);
          resolvePlaceholdersForView(job, forView, i18nContexts, elements);
          recordTemplateClose(job, forView, forSlot, op2.i18nPlaceholder, currentOps.i18nContext, currentOps.i18nBlock, pendingStructuralDirective);
          pendingStructuralDirective = void 0;
        }
        if (op2.emptyView !== null) {
          const emptySlot = op2.handle.slot + 2;
          const emptyView = job.views.get(op2.emptyView);
          if (op2.emptyI18nPlaceholder === void 0) {
            resolvePlaceholdersForView(job, emptyView, i18nContexts, elements);
          } else {
            if (currentOps === null) {
              throw Error("i18n tag placeholder should only occur inside an i18n block");
            }
            recordTemplateStart(job, emptyView, emptySlot, op2.emptyI18nPlaceholder, currentOps.i18nContext, currentOps.i18nBlock, pendingStructuralDirective);
            resolvePlaceholdersForView(job, emptyView, i18nContexts, elements);
            recordTemplateClose(job, emptyView, emptySlot, op2.emptyI18nPlaceholder, currentOps.i18nContext, currentOps.i18nBlock, pendingStructuralDirective);
            pendingStructuralDirective = void 0;
          }
        }
        break;
    }
  }
}
function recordElementStart(op2, i18nContext, i18nBlock, structuralDirective) {
  const {
    startName,
    closeName
  } = op2.i18nPlaceholder;
  let flags = I18nParamValueFlags.ElementTag | I18nParamValueFlags.OpenTag;
  let value = op2.handle.slot;
  if (structuralDirective !== void 0) {
    flags |= I18nParamValueFlags.TemplateTag;
    value = {
      element: value,
      template: structuralDirective.handle.slot
    };
  }
  if (!closeName) {
    flags |= I18nParamValueFlags.CloseTag;
  }
  addParam(i18nContext.params, startName, value, i18nBlock.subTemplateIndex, flags);
}
function recordElementClose(op2, i18nContext, i18nBlock, structuralDirective) {
  const {
    closeName
  } = op2.i18nPlaceholder;
  if (closeName) {
    let flags = I18nParamValueFlags.ElementTag | I18nParamValueFlags.CloseTag;
    let value = op2.handle.slot;
    if (structuralDirective !== void 0) {
      flags |= I18nParamValueFlags.TemplateTag;
      value = {
        element: value,
        template: structuralDirective.handle.slot
      };
    }
    addParam(i18nContext.params, closeName, value, i18nBlock.subTemplateIndex, flags);
  }
}
function recordTemplateStart(job, view, slot, i18nPlaceholder, i18nContext, i18nBlock, structuralDirective) {
  let {
    startName,
    closeName
  } = i18nPlaceholder;
  let flags = I18nParamValueFlags.TemplateTag | I18nParamValueFlags.OpenTag;
  if (!closeName) {
    flags |= I18nParamValueFlags.CloseTag;
  }
  if (structuralDirective !== void 0) {
    addParam(i18nContext.params, startName, structuralDirective.handle.slot, i18nBlock.subTemplateIndex, flags);
  }
  addParam(i18nContext.params, startName, slot, getSubTemplateIndexForTemplateTag(job, i18nBlock, view), flags);
}
function recordTemplateClose(job, view, slot, i18nPlaceholder, i18nContext, i18nBlock, structuralDirective) {
  const {
    closeName
  } = i18nPlaceholder;
  const flags = I18nParamValueFlags.TemplateTag | I18nParamValueFlags.CloseTag;
  if (closeName) {
    addParam(i18nContext.params, closeName, slot, getSubTemplateIndexForTemplateTag(job, i18nBlock, view), flags);
    if (structuralDirective !== void 0) {
      addParam(i18nContext.params, closeName, structuralDirective.handle.slot, i18nBlock.subTemplateIndex, flags);
    }
  }
}
function getSubTemplateIndexForTemplateTag(job, i18nOp, view) {
  for (const childOp of view.create) {
    if (childOp.kind === OpKind.I18nStart) {
      return childOp.subTemplateIndex;
    }
  }
  return i18nOp.subTemplateIndex;
}
function addParam(params, placeholder, value, subTemplateIndex, flags) {
  const values = params.get(placeholder) ?? [];
  values.push({
    value,
    subTemplateIndex,
    flags
  });
  params.set(placeholder, values);
}
function resolveI18nExpressionPlaceholders(job) {
  const subTemplateIndices = /* @__PURE__ */ new Map();
  const i18nContexts = /* @__PURE__ */ new Map();
  const icuPlaceholders = /* @__PURE__ */ new Map();
  for (const unit of job.units) {
    for (const op2 of unit.create) {
      switch (op2.kind) {
        case OpKind.I18nStart:
          subTemplateIndices.set(op2.xref, op2.subTemplateIndex);
          break;
        case OpKind.I18nContext:
          i18nContexts.set(op2.xref, op2);
          break;
        case OpKind.IcuPlaceholder:
          icuPlaceholders.set(op2.xref, op2);
          break;
      }
    }
  }
  const expressionIndices = /* @__PURE__ */ new Map();
  const referenceIndex = (op2) => op2.usage === I18nExpressionFor.I18nText ? op2.i18nOwner : op2.context;
  for (const unit of job.units) {
    for (const op2 of unit.update) {
      if (op2.kind === OpKind.I18nExpression) {
        const index = expressionIndices.get(referenceIndex(op2)) || 0;
        const subTemplateIndex = subTemplateIndices.get(op2.i18nOwner) ?? null;
        const value = {
          value: index,
          subTemplateIndex,
          flags: I18nParamValueFlags.ExpressionIndex
        };
        updatePlaceholder(op2, value, i18nContexts, icuPlaceholders);
        expressionIndices.set(referenceIndex(op2), index + 1);
      }
    }
  }
}
function updatePlaceholder(op2, value, i18nContexts, icuPlaceholders) {
  if (op2.i18nPlaceholder !== null) {
    const i18nContext = i18nContexts.get(op2.context);
    const params = op2.resolutionTime === I18nParamResolutionTime.Creation ? i18nContext.params : i18nContext.postprocessingParams;
    const values = params.get(op2.i18nPlaceholder) || [];
    values.push(value);
    params.set(op2.i18nPlaceholder, values);
  }
  if (op2.icuPlaceholder !== null) {
    const icuPlaceholderOp = icuPlaceholders.get(op2.icuPlaceholder);
    icuPlaceholderOp?.expressionPlaceholders.push(value);
  }
}
function resolveNames(job) {
  for (const unit of job.units) {
    processLexicalScope(unit, unit.create, null);
    processLexicalScope(unit, unit.update, null);
  }
}
function processLexicalScope(unit, ops, savedView) {
  const scope = /* @__PURE__ */ new Map();
  const localDefinitions = /* @__PURE__ */ new Map();
  for (const op2 of ops) {
    switch (op2.kind) {
      case OpKind.Variable:
        switch (op2.variable.kind) {
          case SemanticVariableKind.Identifier:
            if (op2.variable.local) {
              if (localDefinitions.has(op2.variable.identifier)) {
                continue;
              }
              localDefinitions.set(op2.variable.identifier, op2.xref);
            } else if (scope.has(op2.variable.identifier)) {
              continue;
            }
            scope.set(op2.variable.identifier, op2.xref);
            break;
          case SemanticVariableKind.Alias:
            if (scope.has(op2.variable.identifier)) {
              continue;
            }
            scope.set(op2.variable.identifier, op2.xref);
            break;
          case SemanticVariableKind.SavedView:
            savedView = {
              view: op2.variable.view,
              variable: op2.xref
            };
            break;
        }
        break;
      case OpKind.Listener:
      case OpKind.TwoWayListener:
        processLexicalScope(unit, op2.handlerOps, savedView);
        break;
      case OpKind.RepeaterCreate:
        if (op2.trackByOps !== null) {
          processLexicalScope(unit, op2.trackByOps, savedView);
        }
        break;
    }
  }
  for (const op2 of ops) {
    if (op2.kind == OpKind.Listener || op2.kind === OpKind.TwoWayListener) {
      continue;
    }
    transformExpressionsInOp(op2, (expr) => {
      if (expr instanceof LexicalReadExpr) {
        if (localDefinitions.has(expr.name)) {
          return new ReadVariableExpr(localDefinitions.get(expr.name));
        } else if (scope.has(expr.name)) {
          return new ReadVariableExpr(scope.get(expr.name));
        } else {
          return new ReadPropExpr(new ContextExpr(unit.job.root.xref), expr.name);
        }
      } else if (expr instanceof RestoreViewExpr && typeof expr.view === "number") {
        if (savedView === null || savedView.view !== expr.view) {
          throw new Error(`AssertionError: no saved view ${expr.view} from view ${unit.xref}`);
        }
        expr.view = new ReadVariableExpr(savedView.variable);
        return expr;
      } else {
        return expr;
      }
    }, VisitorContextFlag.None);
  }
  for (const op2 of ops) {
    visitExpressionsInOp(op2, (expr) => {
      if (expr instanceof LexicalReadExpr) {
        throw new Error(`AssertionError: no lexical reads should remain, but found read of ${expr.name}`);
      }
    });
  }
}
var sanitizerFns = /* @__PURE__ */ new Map([[SecurityContext2.HTML, Identifiers.sanitizeHtml], [SecurityContext2.RESOURCE_URL, Identifiers.sanitizeResourceUrl], [SecurityContext2.SCRIPT, Identifiers.sanitizeScript], [SecurityContext2.STYLE, Identifiers.sanitizeStyle], [SecurityContext2.URL, Identifiers.sanitizeUrl]]);
var trustedValueFns = /* @__PURE__ */ new Map([[SecurityContext2.HTML, Identifiers.trustConstantHtml], [SecurityContext2.RESOURCE_URL, Identifiers.trustConstantResourceUrl]]);
function resolveSanitizers(job) {
  for (const unit of job.units) {
    const elements = createOpXrefMap(unit);
    if (job.kind !== CompilationJobKind.Host) {
      for (const op2 of unit.create) {
        if (op2.kind === OpKind.ExtractedAttribute) {
          const trustedValueFn = trustedValueFns.get(getOnlySecurityContext(op2.securityContext)) ?? null;
          op2.trustedValueFn = trustedValueFn !== null ? importExpr(trustedValueFn) : null;
        }
      }
    }
    for (const op2 of unit.update) {
      switch (op2.kind) {
        case OpKind.Property:
        case OpKind.Attribute:
        case OpKind.HostProperty:
          let sanitizerFn = null;
          if (Array.isArray(op2.securityContext) && op2.securityContext.length === 2 && op2.securityContext.indexOf(SecurityContext2.URL) > -1 && op2.securityContext.indexOf(SecurityContext2.RESOURCE_URL) > -1) {
            sanitizerFn = Identifiers.sanitizeUrlOrResourceUrl;
          } else {
            sanitizerFn = sanitizerFns.get(getOnlySecurityContext(op2.securityContext)) ?? null;
          }
          op2.sanitizer = sanitizerFn !== null ? importExpr(sanitizerFn) : null;
          if (op2.sanitizer === null) {
            let isIframe = false;
            if (job.kind === CompilationJobKind.Host || op2.kind === OpKind.HostProperty) {
              isIframe = true;
            } else {
              const ownerOp = elements.get(op2.target);
              if (ownerOp === void 0 || !isElementOrContainerOp(ownerOp)) {
                throw Error("Property should have an element-like owner");
              }
              isIframe = isIframeElement(ownerOp);
            }
            if (isIframe && isIframeSecuritySensitiveAttr(op2.name)) {
              op2.sanitizer = importExpr(Identifiers.validateIframeAttribute);
            }
          }
          break;
      }
    }
  }
}
function isIframeElement(op2) {
  return op2.kind === OpKind.ElementStart && op2.tag?.toLowerCase() === "iframe";
}
function getOnlySecurityContext(securityContext) {
  if (Array.isArray(securityContext)) {
    if (securityContext.length > 1) {
      throw Error(`AssertionError: Ambiguous security context`);
    }
    return securityContext[0] || SecurityContext2.NONE;
  }
  return securityContext;
}
function transformTwoWayBindingSet(job) {
  for (const unit of job.units) {
    for (const op2 of unit.create) {
      if (op2.kind === OpKind.TwoWayListener) {
        transformExpressionsInOp(op2, (expr) => {
          if (!(expr instanceof TwoWayBindingSetExpr)) {
            return expr;
          }
          const {
            target,
            value
          } = expr;
          if (target instanceof ReadPropExpr || target instanceof ReadKeyExpr) {
            return twoWayBindingSet(target, value).or(target.set(value));
          }
          if (target instanceof ReadVariableExpr) {
            return twoWayBindingSet(target, value);
          }
          throw new Error(`Unsupported expression in two-way action binding.`);
        }, VisitorContextFlag.InChildOperation);
      }
    }
  }
}
function saveAndRestoreView(job) {
  for (const unit of job.units) {
    unit.create.prepend([createVariableOp(unit.job.allocateXrefId(), {
      kind: SemanticVariableKind.SavedView,
      name: null,
      view: unit.xref
    }, new GetCurrentViewExpr(), VariableFlags.None)]);
    for (const op2 of unit.create) {
      if (op2.kind !== OpKind.Listener && op2.kind !== OpKind.TwoWayListener) {
        continue;
      }
      let needsRestoreView = unit !== job.root;
      if (!needsRestoreView) {
        for (const handlerOp of op2.handlerOps) {
          visitExpressionsInOp(handlerOp, (expr) => {
            if (expr instanceof ReferenceExpr || expr instanceof ContextLetReferenceExpr) {
              needsRestoreView = true;
            }
          });
        }
      }
      if (needsRestoreView) {
        addSaveRestoreViewOperationToListener(unit, op2);
      }
    }
  }
}
function addSaveRestoreViewOperationToListener(unit, op2) {
  op2.handlerOps.prepend([createVariableOp(unit.job.allocateXrefId(), {
    kind: SemanticVariableKind.Context,
    name: null,
    view: unit.xref
  }, new RestoreViewExpr(unit.xref), VariableFlags.None)]);
  for (const handlerOp of op2.handlerOps) {
    if (handlerOp.kind === OpKind.Statement && handlerOp.statement instanceof ReturnStatement) {
      handlerOp.statement.value = new ResetViewExpr(handlerOp.statement.value);
    }
  }
}
function allocateSlots(job) {
  const slotMap = /* @__PURE__ */ new Map();
  for (const unit of job.units) {
    let slotCount = 0;
    for (const op2 of unit.create) {
      if (!hasConsumesSlotTrait(op2)) {
        continue;
      }
      op2.handle.slot = slotCount;
      slotMap.set(op2.xref, op2.handle.slot);
      slotCount += op2.numSlotsUsed;
    }
    unit.decls = slotCount;
  }
  for (const unit of job.units) {
    for (const op2 of unit.ops()) {
      if (op2.kind === OpKind.Template || op2.kind === OpKind.RepeaterCreate) {
        const childView = job.views.get(op2.xref);
        op2.decls = childView.decls;
      }
    }
  }
}
function specializeStyleBindings(job) {
  for (const unit of job.units) {
    for (const op2 of unit.update) {
      if (op2.kind !== OpKind.Binding) {
        continue;
      }
      switch (op2.bindingKind) {
        case BindingKind.ClassName:
          if (op2.expression instanceof Interpolation2) {
            throw new Error(`Unexpected interpolation in ClassName binding`);
          }
          OpList.replace(op2, createClassPropOp(op2.target, op2.name, op2.expression, op2.sourceSpan));
          break;
        case BindingKind.StyleProperty:
          OpList.replace(op2, createStylePropOp(op2.target, op2.name, op2.expression, op2.unit, op2.sourceSpan));
          break;
        case BindingKind.Property:
        case BindingKind.Template:
          if (op2.name === "style") {
            OpList.replace(op2, createStyleMapOp(op2.target, op2.expression, op2.sourceSpan));
          } else if (op2.name === "class") {
            OpList.replace(op2, createClassMapOp(op2.target, op2.expression, op2.sourceSpan));
          }
          break;
      }
    }
  }
}
function generateTemporaryVariables(job) {
  for (const unit of job.units) {
    unit.create.prepend(generateTemporaries(unit.create));
    unit.update.prepend(generateTemporaries(unit.update));
  }
}
function generateTemporaries(ops) {
  let opCount = 0;
  let generatedStatements = [];
  for (const op2 of ops) {
    const finalReads = /* @__PURE__ */ new Map();
    visitExpressionsInOp(op2, (expr, flag) => {
      if (flag & VisitorContextFlag.InChildOperation) {
        return;
      }
      if (expr instanceof ReadTemporaryExpr) {
        finalReads.set(expr.xref, expr);
      }
    });
    let count = 0;
    const assigned = /* @__PURE__ */ new Set();
    const released = /* @__PURE__ */ new Set();
    const defs = /* @__PURE__ */ new Map();
    visitExpressionsInOp(op2, (expr, flag) => {
      if (flag & VisitorContextFlag.InChildOperation) {
        return;
      }
      if (expr instanceof AssignTemporaryExpr) {
        if (!assigned.has(expr.xref)) {
          assigned.add(expr.xref);
          defs.set(expr.xref, `tmp_${opCount}_${count++}`);
        }
        assignName(defs, expr);
      } else if (expr instanceof ReadTemporaryExpr) {
        if (finalReads.get(expr.xref) === expr) {
          released.add(expr.xref);
          count--;
        }
        assignName(defs, expr);
      }
    });
    generatedStatements.push(...Array.from(new Set(defs.values())).map((name) => createStatementOp(new DeclareVarStmt(name))));
    opCount++;
    if (op2.kind === OpKind.Listener || op2.kind === OpKind.TwoWayListener) {
      op2.handlerOps.prepend(generateTemporaries(op2.handlerOps));
    } else if (op2.kind === OpKind.RepeaterCreate && op2.trackByOps !== null) {
      op2.trackByOps.prepend(generateTemporaries(op2.trackByOps));
    }
  }
  return generatedStatements;
}
function assignName(names, expr) {
  const name = names.get(expr.xref);
  if (name === void 0) {
    throw new Error(`Found xref with unassigned name: ${expr.xref}`);
  }
  expr.name = name;
}
function optimizeTrackFns(job) {
  for (const unit of job.units) {
    for (const op2 of unit.create) {
      if (op2.kind !== OpKind.RepeaterCreate) {
        continue;
      }
      if (op2.track instanceof ReadVarExpr && op2.track.name === "$index") {
        op2.trackByFn = importExpr(Identifiers.repeaterTrackByIndex);
      } else if (op2.track instanceof ReadVarExpr && op2.track.name === "$item") {
        op2.trackByFn = importExpr(Identifiers.repeaterTrackByIdentity);
      } else if (isTrackByFunctionCall(job.root.xref, op2.track)) {
        op2.usesComponentInstance = true;
        if (op2.track.receiver.receiver.view === unit.xref) {
          op2.trackByFn = op2.track.receiver;
        } else {
          op2.trackByFn = importExpr(Identifiers.componentInstance).callFn([]).prop(op2.track.receiver.name);
          op2.track = op2.trackByFn;
        }
      } else {
        op2.track = transformExpressionsInExpression(op2.track, (expr) => {
          if (expr instanceof PipeBindingExpr || expr instanceof PipeBindingVariadicExpr) {
            throw new Error(`Illegal State: Pipes are not allowed in this context`);
          } else if (expr instanceof ContextExpr) {
            op2.usesComponentInstance = true;
            return new TrackContextExpr(expr.view);
          }
          return expr;
        }, VisitorContextFlag.None);
        const trackOpList = new OpList();
        trackOpList.push(createStatementOp(new ReturnStatement(op2.track, op2.track.sourceSpan)));
        op2.trackByOps = trackOpList;
      }
    }
  }
}
function isTrackByFunctionCall(rootView, expr) {
  if (!(expr instanceof InvokeFunctionExpr) || expr.args.length === 0 || expr.args.length > 2) {
    return false;
  }
  if (!(expr.receiver instanceof ReadPropExpr && expr.receiver.receiver instanceof ContextExpr) || expr.receiver.receiver.view !== rootView) {
    return false;
  }
  const [arg0, arg1] = expr.args;
  if (!(arg0 instanceof ReadVarExpr) || arg0.name !== "$index") {
    return false;
  } else if (expr.args.length === 1) {
    return true;
  }
  if (!(arg1 instanceof ReadVarExpr) || arg1.name !== "$item") {
    return false;
  }
  return true;
}
function generateTrackVariables(job) {
  for (const unit of job.units) {
    for (const op2 of unit.create) {
      if (op2.kind !== OpKind.RepeaterCreate) {
        continue;
      }
      op2.track = transformExpressionsInExpression(op2.track, (expr) => {
        if (expr instanceof LexicalReadExpr) {
          if (op2.varNames.$index.has(expr.name)) {
            return variable("$index");
          } else if (expr.name === op2.varNames.$implicit) {
            return variable("$item");
          }
        }
        return expr;
      }, VisitorContextFlag.None);
    }
  }
}
function countVariables(job) {
  for (const unit of job.units) {
    let varCount = 0;
    for (const op2 of unit.ops()) {
      if (hasConsumesVarsTrait(op2)) {
        varCount += varsUsedByOp(op2);
      }
    }
    for (const op2 of unit.ops()) {
      visitExpressionsInOp(op2, (expr) => {
        if (!isIrExpression(expr)) {
          return;
        }
        if (job.compatibility === CompatibilityMode.TemplateDefinitionBuilder && expr instanceof PureFunctionExpr) {
          return;
        }
        if (hasUsesVarOffsetTrait(expr)) {
          expr.varOffset = varCount;
        }
        if (hasConsumesVarsTrait(expr)) {
          varCount += varsUsedByIrExpression(expr);
        }
      });
    }
    if (job.compatibility === CompatibilityMode.TemplateDefinitionBuilder) {
      for (const op2 of unit.ops()) {
        visitExpressionsInOp(op2, (expr) => {
          if (!isIrExpression(expr) || !(expr instanceof PureFunctionExpr)) {
            return;
          }
          if (hasUsesVarOffsetTrait(expr)) {
            expr.varOffset = varCount;
          }
          if (hasConsumesVarsTrait(expr)) {
            varCount += varsUsedByIrExpression(expr);
          }
        });
      }
    }
    unit.vars = varCount;
  }
  if (job instanceof ComponentCompilationJob) {
    for (const unit of job.units) {
      for (const op2 of unit.create) {
        if (op2.kind !== OpKind.Template && op2.kind !== OpKind.RepeaterCreate) {
          continue;
        }
        const childView = job.views.get(op2.xref);
        op2.vars = childView.vars;
      }
    }
  }
}
function varsUsedByOp(op2) {
  let slots;
  switch (op2.kind) {
    case OpKind.Property:
    case OpKind.HostProperty:
    case OpKind.Attribute:
      slots = 1;
      if (op2.expression instanceof Interpolation2 && !isSingletonInterpolation(op2.expression)) {
        slots += op2.expression.expressions.length;
      }
      return slots;
    case OpKind.TwoWayProperty:
      return 1;
    case OpKind.StyleProp:
    case OpKind.ClassProp:
    case OpKind.StyleMap:
    case OpKind.ClassMap:
      slots = 2;
      if (op2.expression instanceof Interpolation2) {
        slots += op2.expression.expressions.length;
      }
      return slots;
    case OpKind.InterpolateText:
      return op2.interpolation.expressions.length;
    case OpKind.I18nExpression:
    case OpKind.Conditional:
    case OpKind.DeferWhen:
    case OpKind.StoreLet:
      return 1;
    case OpKind.RepeaterCreate:
      return op2.emptyView ? 1 : 0;
    default:
      throw new Error(`Unhandled op: ${OpKind[op2.kind]}`);
  }
}
function varsUsedByIrExpression(expr) {
  switch (expr.kind) {
    case ExpressionKind.PureFunctionExpr:
      return 1 + expr.args.length;
    case ExpressionKind.PipeBinding:
      return 1 + expr.args.length;
    case ExpressionKind.PipeBindingVariadic:
      return 1 + expr.numArgs;
    case ExpressionKind.StoreLet:
      return 1;
    default:
      throw new Error(`AssertionError: unhandled ConsumesVarsTrait expression ${expr.constructor.name}`);
  }
}
function isSingletonInterpolation(expr) {
  if (expr.expressions.length !== 1 || expr.strings.length !== 2) {
    return false;
  }
  if (expr.strings[0] !== "" || expr.strings[1] !== "") {
    return false;
  }
  return true;
}
function optimizeVariables(job) {
  for (const unit of job.units) {
    inlineAlwaysInlineVariables(unit.create);
    inlineAlwaysInlineVariables(unit.update);
    for (const op2 of unit.create) {
      if (op2.kind === OpKind.Listener || op2.kind === OpKind.TwoWayListener) {
        inlineAlwaysInlineVariables(op2.handlerOps);
      } else if (op2.kind === OpKind.RepeaterCreate && op2.trackByOps !== null) {
        inlineAlwaysInlineVariables(op2.trackByOps);
      }
    }
    optimizeVariablesInOpList(unit.create, job.compatibility);
    optimizeVariablesInOpList(unit.update, job.compatibility);
    for (const op2 of unit.create) {
      if (op2.kind === OpKind.Listener || op2.kind === OpKind.TwoWayListener) {
        optimizeVariablesInOpList(op2.handlerOps, job.compatibility);
      } else if (op2.kind === OpKind.RepeaterCreate && op2.trackByOps !== null) {
        optimizeVariablesInOpList(op2.trackByOps, job.compatibility);
      }
    }
  }
}
var Fence;
(function(Fence2) {
  Fence2[Fence2["None"] = 0] = "None";
  Fence2[Fence2["ViewContextRead"] = 1] = "ViewContextRead";
  Fence2[Fence2["ViewContextWrite"] = 2] = "ViewContextWrite";
  Fence2[Fence2["SideEffectful"] = 4] = "SideEffectful";
})(Fence || (Fence = {}));
function inlineAlwaysInlineVariables(ops) {
  const vars = /* @__PURE__ */ new Map();
  for (const op2 of ops) {
    if (op2.kind === OpKind.Variable && op2.flags & VariableFlags.AlwaysInline) {
      visitExpressionsInOp(op2, (expr) => {
        if (isIrExpression(expr) && fencesForIrExpression(expr) !== Fence.None) {
          throw new Error(`AssertionError: A context-sensitive variable was marked AlwaysInline`);
        }
      });
      vars.set(op2.xref, op2);
    }
    transformExpressionsInOp(op2, (expr) => {
      if (expr instanceof ReadVariableExpr && vars.has(expr.xref)) {
        const varOp = vars.get(expr.xref);
        return varOp.initializer.clone();
      }
      return expr;
    }, VisitorContextFlag.None);
  }
  for (const op2 of vars.values()) {
    OpList.remove(op2);
  }
}
function optimizeVariablesInOpList(ops, compatibility) {
  const varDecls = /* @__PURE__ */ new Map();
  const varUsages = /* @__PURE__ */ new Map();
  const varRemoteUsages = /* @__PURE__ */ new Set();
  const opMap = /* @__PURE__ */ new Map();
  for (const op2 of ops) {
    if (op2.kind === OpKind.Variable) {
      if (varDecls.has(op2.xref) || varUsages.has(op2.xref)) {
        throw new Error(`Should not see two declarations of the same variable: ${op2.xref}`);
      }
      varDecls.set(op2.xref, op2);
      varUsages.set(op2.xref, 0);
    }
    opMap.set(op2, collectOpInfo(op2));
    countVariableUsages(op2, varUsages, varRemoteUsages);
  }
  let contextIsUsed = false;
  for (const op2 of ops.reversed()) {
    const opInfo = opMap.get(op2);
    if (op2.kind === OpKind.Variable && varUsages.get(op2.xref) === 0) {
      if (contextIsUsed && opInfo.fences & Fence.ViewContextWrite || opInfo.fences & Fence.SideEffectful) {
        const stmtOp = createStatementOp(op2.initializer.toStmt());
        opMap.set(stmtOp, opInfo);
        OpList.replace(op2, stmtOp);
      } else {
        uncountVariableUsages(op2, varUsages);
        OpList.remove(op2);
      }
      opMap.delete(op2);
      varDecls.delete(op2.xref);
      varUsages.delete(op2.xref);
      continue;
    }
    if (opInfo.fences & Fence.ViewContextRead) {
      contextIsUsed = true;
    }
  }
  const toInline = [];
  for (const [id, count] of varUsages) {
    const decl = varDecls.get(id);
    const isAlwaysInline = !!(decl.flags & VariableFlags.AlwaysInline);
    if (count !== 1 || isAlwaysInline) {
      continue;
    }
    if (varRemoteUsages.has(id)) {
      continue;
    }
    toInline.push(id);
  }
  let candidate;
  while (candidate = toInline.pop()) {
    const decl = varDecls.get(candidate);
    const varInfo = opMap.get(decl);
    const isAlwaysInline = !!(decl.flags & VariableFlags.AlwaysInline);
    if (isAlwaysInline) {
      throw new Error(`AssertionError: Found an 'AlwaysInline' variable after the always inlining pass.`);
    }
    for (let targetOp = decl.next; targetOp.kind !== OpKind.ListEnd; targetOp = targetOp.next) {
      const opInfo = opMap.get(targetOp);
      if (opInfo.variablesUsed.has(candidate)) {
        if (compatibility === CompatibilityMode.TemplateDefinitionBuilder && !allowConservativeInlining(decl, targetOp)) {
          break;
        }
        if (tryInlineVariableInitializer(candidate, decl.initializer, targetOp, varInfo.fences)) {
          opInfo.variablesUsed.delete(candidate);
          for (const id of varInfo.variablesUsed) {
            opInfo.variablesUsed.add(id);
          }
          opInfo.fences |= varInfo.fences;
          varDecls.delete(candidate);
          varUsages.delete(candidate);
          opMap.delete(decl);
          OpList.remove(decl);
        }
        break;
      }
      if (!safeToInlinePastFences(opInfo.fences, varInfo.fences)) {
        break;
      }
    }
  }
}
function fencesForIrExpression(expr) {
  switch (expr.kind) {
    case ExpressionKind.NextContext:
      return Fence.ViewContextRead | Fence.ViewContextWrite;
    case ExpressionKind.RestoreView:
      return Fence.ViewContextRead | Fence.ViewContextWrite | Fence.SideEffectful;
    case ExpressionKind.StoreLet:
      return Fence.SideEffectful;
    case ExpressionKind.Reference:
    case ExpressionKind.ContextLetReference:
      return Fence.ViewContextRead;
    default:
      return Fence.None;
  }
}
function collectOpInfo(op2) {
  let fences = Fence.None;
  const variablesUsed = /* @__PURE__ */ new Set();
  visitExpressionsInOp(op2, (expr) => {
    if (!isIrExpression(expr)) {
      return;
    }
    switch (expr.kind) {
      case ExpressionKind.ReadVariable:
        variablesUsed.add(expr.xref);
        break;
      default:
        fences |= fencesForIrExpression(expr);
    }
  });
  return {
    fences,
    variablesUsed
  };
}
function countVariableUsages(op2, varUsages, varRemoteUsage) {
  visitExpressionsInOp(op2, (expr, flags) => {
    if (!isIrExpression(expr)) {
      return;
    }
    if (expr.kind !== ExpressionKind.ReadVariable) {
      return;
    }
    const count = varUsages.get(expr.xref);
    if (count === void 0) {
      return;
    }
    varUsages.set(expr.xref, count + 1);
    if (flags & VisitorContextFlag.InChildOperation) {
      varRemoteUsage.add(expr.xref);
    }
  });
}
function uncountVariableUsages(op2, varUsages) {
  visitExpressionsInOp(op2, (expr) => {
    if (!isIrExpression(expr)) {
      return;
    }
    if (expr.kind !== ExpressionKind.ReadVariable) {
      return;
    }
    const count = varUsages.get(expr.xref);
    if (count === void 0) {
      return;
    } else if (count === 0) {
      throw new Error(`Inaccurate variable count: ${expr.xref} - found another read but count is already 0`);
    }
    varUsages.set(expr.xref, count - 1);
  });
}
function safeToInlinePastFences(fences, declFences) {
  if (fences & Fence.ViewContextWrite) {
    if (declFences & Fence.ViewContextRead) {
      return false;
    }
  } else if (fences & Fence.ViewContextRead) {
    if (declFences & Fence.ViewContextWrite) {
      return false;
    }
  }
  return true;
}
function tryInlineVariableInitializer(id, initializer, target, declFences) {
  let inlined = false;
  let inliningAllowed = true;
  transformExpressionsInOp(target, (expr, flags) => {
    if (!isIrExpression(expr)) {
      return expr;
    }
    if (inlined || !inliningAllowed) {
      return expr;
    } else if (flags & VisitorContextFlag.InChildOperation && declFences & Fence.ViewContextRead) {
      return expr;
    }
    switch (expr.kind) {
      case ExpressionKind.ReadVariable:
        if (expr.xref === id) {
          inlined = true;
          return initializer;
        }
        break;
      default:
        const exprFences = fencesForIrExpression(expr);
        inliningAllowed = inliningAllowed && safeToInlinePastFences(exprFences, declFences);
        break;
    }
    return expr;
  }, VisitorContextFlag.None);
  return inlined;
}
function allowConservativeInlining(decl, target) {
  switch (decl.variable.kind) {
    case SemanticVariableKind.Identifier:
      if (decl.initializer instanceof ReadVarExpr && decl.initializer.name === "ctx") {
        return true;
      }
      return false;
    case SemanticVariableKind.Context:
      return target.kind === OpKind.Variable;
    default:
      return true;
  }
}
function wrapI18nIcus(job) {
  for (const unit of job.units) {
    let currentI18nOp = null;
    let addedI18nId = null;
    for (const op2 of unit.create) {
      switch (op2.kind) {
        case OpKind.I18nStart:
          currentI18nOp = op2;
          break;
        case OpKind.I18nEnd:
          currentI18nOp = null;
          break;
        case OpKind.IcuStart:
          if (currentI18nOp === null) {
            addedI18nId = job.allocateXrefId();
            OpList.insertBefore(createI18nStartOp(addedI18nId, op2.message, void 0, null), op2);
          }
          break;
        case OpKind.IcuEnd:
          if (addedI18nId !== null) {
            OpList.insertAfter(createI18nEndOp(addedI18nId, null), op2);
            addedI18nId = null;
          }
          break;
      }
    }
  }
}
function optimizeStoreLet(job) {
  const letUsedExternally = /* @__PURE__ */ new Set();
  for (const unit of job.units) {
    for (const op2 of unit.ops()) {
      visitExpressionsInOp(op2, (expr) => {
        if (expr instanceof ContextLetReferenceExpr) {
          letUsedExternally.add(expr.target);
        }
      });
    }
  }
  for (const unit of job.units) {
    for (const op2 of unit.update) {
      transformExpressionsInOp(op2, (expression) => expression instanceof StoreLetExpr && !letUsedExternally.has(expression.target) ? expression.value : expression, VisitorContextFlag.None);
    }
  }
}
function removeIllegalLetReferences(job) {
  for (const unit of job.units) {
    for (const op2 of unit.update) {
      if (op2.kind !== OpKind.Variable || op2.variable.kind !== SemanticVariableKind.Identifier || !(op2.initializer instanceof StoreLetExpr)) {
        continue;
      }
      const name = op2.variable.identifier;
      let current = op2;
      while (current && current.kind !== OpKind.ListEnd) {
        transformExpressionsInOp(current, (expr) => expr instanceof LexicalReadExpr && expr.name === name ? literal(void 0) : expr, VisitorContextFlag.None);
        current = current.prev;
      }
    }
  }
}
function generateLocalLetReferences(job) {
  for (const unit of job.units) {
    for (const op2 of unit.update) {
      if (op2.kind !== OpKind.StoreLet) {
        continue;
      }
      const variable2 = {
        kind: SemanticVariableKind.Identifier,
        name: null,
        identifier: op2.declaredName,
        local: true
      };
      OpList.replace(op2, createVariableOp(job.allocateXrefId(), variable2, new StoreLetExpr(op2.target, op2.value, op2.sourceSpan), VariableFlags.None));
    }
  }
}
function attachSourceLocations(job) {
  if (!job.enableDebugLocations || job.relativeTemplatePath === null) {
    return;
  }
  for (const unit of job.units) {
    const locations = [];
    for (const op2 of unit.create) {
      if (op2.kind === OpKind.ElementStart || op2.kind === OpKind.Element) {
        const start = op2.startSourceSpan.start;
        locations.push({
          targetSlot: op2.handle,
          offset: start.offset,
          line: start.line,
          column: start.col
        });
      }
    }
    if (locations.length > 0) {
      unit.create.push(createSourceLocationOp(job.relativeTemplatePath, locations));
    }
  }
}
var phases = [{
  kind: CompilationJobKind.Tmpl,
  fn: removeContentSelectors
}, {
  kind: CompilationJobKind.Host,
  fn: parseHostStyleProperties
}, {
  kind: CompilationJobKind.Tmpl,
  fn: emitNamespaceChanges
}, {
  kind: CompilationJobKind.Tmpl,
  fn: propagateI18nBlocks
}, {
  kind: CompilationJobKind.Tmpl,
  fn: wrapI18nIcus
}, {
  kind: CompilationJobKind.Both,
  fn: deduplicateTextBindings
}, {
  kind: CompilationJobKind.Both,
  fn: specializeStyleBindings
}, {
  kind: CompilationJobKind.Both,
  fn: specializeBindings
}, {
  kind: CompilationJobKind.Both,
  fn: extractAttributes
}, {
  kind: CompilationJobKind.Tmpl,
  fn: createI18nContexts
}, {
  kind: CompilationJobKind.Both,
  fn: parseExtractedStyles
}, {
  kind: CompilationJobKind.Tmpl,
  fn: removeEmptyBindings
}, {
  kind: CompilationJobKind.Both,
  fn: collapseSingletonInterpolations
}, {
  kind: CompilationJobKind.Both,
  fn: orderOps
}, {
  kind: CompilationJobKind.Tmpl,
  fn: generateConditionalExpressions
}, {
  kind: CompilationJobKind.Tmpl,
  fn: createPipes
}, {
  kind: CompilationJobKind.Tmpl,
  fn: configureDeferInstructions
}, {
  kind: CompilationJobKind.Tmpl,
  fn: convertI18nText
}, {
  kind: CompilationJobKind.Tmpl,
  fn: convertI18nBindings
}, {
  kind: CompilationJobKind.Tmpl,
  fn: removeUnusedI18nAttributesOps
}, {
  kind: CompilationJobKind.Tmpl,
  fn: assignI18nSlotDependencies
}, {
  kind: CompilationJobKind.Tmpl,
  fn: applyI18nExpressions
}, {
  kind: CompilationJobKind.Tmpl,
  fn: createVariadicPipes
}, {
  kind: CompilationJobKind.Both,
  fn: generatePureLiteralStructures
}, {
  kind: CompilationJobKind.Tmpl,
  fn: generateProjectionDefs
}, {
  kind: CompilationJobKind.Tmpl,
  fn: generateLocalLetReferences
}, {
  kind: CompilationJobKind.Tmpl,
  fn: generateVariables
}, {
  kind: CompilationJobKind.Tmpl,
  fn: saveAndRestoreView
}, {
  kind: CompilationJobKind.Both,
  fn: deleteAnyCasts
}, {
  kind: CompilationJobKind.Both,
  fn: resolveDollarEvent
}, {
  kind: CompilationJobKind.Tmpl,
  fn: generateTrackVariables
}, {
  kind: CompilationJobKind.Tmpl,
  fn: removeIllegalLetReferences
}, {
  kind: CompilationJobKind.Both,
  fn: resolveNames
}, {
  kind: CompilationJobKind.Tmpl,
  fn: resolveDeferTargetNames
}, {
  kind: CompilationJobKind.Tmpl,
  fn: transformTwoWayBindingSet
}, {
  kind: CompilationJobKind.Tmpl,
  fn: optimizeTrackFns
}, {
  kind: CompilationJobKind.Both,
  fn: resolveContexts
}, {
  kind: CompilationJobKind.Both,
  fn: resolveSanitizers
}, {
  kind: CompilationJobKind.Tmpl,
  fn: liftLocalRefs
}, {
  kind: CompilationJobKind.Both,
  fn: generateNullishCoalesceExpressions
}, {
  kind: CompilationJobKind.Both,
  fn: expandSafeReads
}, {
  kind: CompilationJobKind.Both,
  fn: generateTemporaryVariables
}, {
  kind: CompilationJobKind.Both,
  fn: optimizeVariables
}, {
  kind: CompilationJobKind.Both,
  fn: optimizeStoreLet
}, {
  kind: CompilationJobKind.Tmpl,
  fn: allocateSlots
}, {
  kind: CompilationJobKind.Tmpl,
  fn: resolveI18nElementPlaceholders
}, {
  kind: CompilationJobKind.Tmpl,
  fn: resolveI18nExpressionPlaceholders
}, {
  kind: CompilationJobKind.Tmpl,
  fn: extractI18nMessages
}, {
  kind: CompilationJobKind.Tmpl,
  fn: collectI18nConsts
}, {
  kind: CompilationJobKind.Tmpl,
  fn: collectConstExpressions
}, {
  kind: CompilationJobKind.Both,
  fn: collectElementConsts
}, {
  kind: CompilationJobKind.Tmpl,
  fn: removeI18nContexts
}, {
  kind: CompilationJobKind.Both,
  fn: countVariables
}, {
  kind: CompilationJobKind.Tmpl,
  fn: generateAdvance
}, {
  kind: CompilationJobKind.Both,
  fn: nameFunctionsAndVariables
}, {
  kind: CompilationJobKind.Tmpl,
  fn: resolveDeferDepsFns
}, {
  kind: CompilationJobKind.Tmpl,
  fn: mergeNextContextExpressions
}, {
  kind: CompilationJobKind.Tmpl,
  fn: generateNgContainerOps
}, {
  kind: CompilationJobKind.Tmpl,
  fn: collapseEmptyInstructions
}, {
  kind: CompilationJobKind.Tmpl,
  fn: attachSourceLocations
}, {
  kind: CompilationJobKind.Tmpl,
  fn: disableBindings$1
}, {
  kind: CompilationJobKind.Both,
  fn: extractPureFunctions
}, {
  kind: CompilationJobKind.Both,
  fn: reify
}, {
  kind: CompilationJobKind.Both,
  fn: chain
}];
function transform(job, kind) {
  for (const phase of phases) {
    if (phase.kind === kind || phase.kind === CompilationJobKind.Both) {
      phase.fn(job);
    }
  }
}
function emitTemplateFn(tpl, pool) {
  const rootFn = emitView(tpl.root);
  emitChildViews(tpl.root, pool);
  return rootFn;
}
function emitChildViews(parent, pool) {
  for (const unit of parent.job.units) {
    if (unit.parent !== parent.xref) {
      continue;
    }
    emitChildViews(unit, pool);
    const viewFn = emitView(unit);
    pool.statements.push(viewFn.toDeclStmt(viewFn.name));
  }
}
function emitView(view) {
  if (view.fnName === null) {
    throw new Error(`AssertionError: view ${view.xref} is unnamed`);
  }
  const createStatements = [];
  for (const op2 of view.create) {
    if (op2.kind !== OpKind.Statement) {
      throw new Error(`AssertionError: expected all create ops to have been compiled, but got ${OpKind[op2.kind]}`);
    }
    createStatements.push(op2.statement);
  }
  const updateStatements = [];
  for (const op2 of view.update) {
    if (op2.kind !== OpKind.Statement) {
      throw new Error(`AssertionError: expected all update ops to have been compiled, but got ${OpKind[op2.kind]}`);
    }
    updateStatements.push(op2.statement);
  }
  const createCond = maybeGenerateRfBlock(1, createStatements);
  const updateCond = maybeGenerateRfBlock(2, updateStatements);
  return fn(
    [new FnParam("rf"), new FnParam("ctx")],
    [...createCond, ...updateCond],
    /* type */
    void 0,
    /* sourceSpan */
    void 0,
    view.fnName
  );
}
function maybeGenerateRfBlock(flag, statements) {
  if (statements.length === 0) {
    return [];
  }
  return [ifStmt(new BinaryOperatorExpr(BinaryOperator.BitwiseAnd, variable("rf"), literal(flag)), statements)];
}
function emitHostBindingFunction(job) {
  if (job.root.fnName === null) {
    throw new Error(`AssertionError: host binding function is unnamed`);
  }
  const createStatements = [];
  for (const op2 of job.root.create) {
    if (op2.kind !== OpKind.Statement) {
      throw new Error(`AssertionError: expected all create ops to have been compiled, but got ${OpKind[op2.kind]}`);
    }
    createStatements.push(op2.statement);
  }
  const updateStatements = [];
  for (const op2 of job.root.update) {
    if (op2.kind !== OpKind.Statement) {
      throw new Error(`AssertionError: expected all update ops to have been compiled, but got ${OpKind[op2.kind]}`);
    }
    updateStatements.push(op2.statement);
  }
  if (createStatements.length === 0 && updateStatements.length === 0) {
    return null;
  }
  const createCond = maybeGenerateRfBlock(1, createStatements);
  const updateCond = maybeGenerateRfBlock(2, updateStatements);
  return fn(
    [new FnParam("rf"), new FnParam("ctx")],
    [...createCond, ...updateCond],
    /* type */
    void 0,
    /* sourceSpan */
    void 0,
    job.root.fnName
  );
}
var compatibilityMode = CompatibilityMode.TemplateDefinitionBuilder;
var domSchema = new DomElementSchemaRegistry();
var NG_TEMPLATE_TAG_NAME = "ng-template";
function isI18nRootNode(meta) {
  return meta instanceof Message;
}
function isSingleI18nIcu(meta) {
  return isI18nRootNode(meta) && meta.nodes.length === 1 && meta.nodes[0] instanceof Icu2;
}
function ingestComponent(componentName, template2, constantPool, relativeContextFilePath, i18nUseExternalIds, deferMeta, allDeferrableDepsFn, relativeTemplatePath, enableDebugLocations) {
  const job = new ComponentCompilationJob(componentName, constantPool, compatibilityMode, relativeContextFilePath, i18nUseExternalIds, deferMeta, allDeferrableDepsFn, relativeTemplatePath, enableDebugLocations);
  ingestNodes(job.root, template2);
  return job;
}
function ingestHostBinding(input2, bindingParser, constantPool) {
  const job = new HostBindingCompilationJob(input2.componentName, constantPool, compatibilityMode);
  for (const property2 of input2.properties ?? []) {
    let bindingKind = BindingKind.Property;
    if (property2.name.startsWith("attr.")) {
      property2.name = property2.name.substring("attr.".length);
      bindingKind = BindingKind.Attribute;
    }
    if (property2.isAnimation) {
      bindingKind = BindingKind.Animation;
    }
    const securityContexts = bindingParser.calcPossibleSecurityContexts(input2.componentSelector, property2.name, bindingKind === BindingKind.Attribute).filter((context) => context !== SecurityContext2.NONE);
    ingestHostProperty(job, property2, bindingKind, securityContexts);
  }
  for (const [name, expr] of Object.entries(input2.attributes) ?? []) {
    const securityContexts = bindingParser.calcPossibleSecurityContexts(input2.componentSelector, name, true).filter((context) => context !== SecurityContext2.NONE);
    ingestHostAttribute(job, name, expr, securityContexts);
  }
  for (const event of input2.events ?? []) {
    ingestHostEvent(job, event);
  }
  return job;
}
function ingestHostProperty(job, property2, bindingKind, securityContexts) {
  let expression;
  const ast = property2.expression.ast;
  if (ast instanceof Interpolation$1) {
    expression = new Interpolation2(ast.strings, ast.expressions.map((expr) => convertAst(expr, job, property2.sourceSpan)), []);
  } else {
    expression = convertAst(ast, job, property2.sourceSpan);
  }
  job.root.update.push(createBindingOp(
    job.root.xref,
    bindingKind,
    property2.name,
    expression,
    null,
    securityContexts,
    false,
    false,
    null,
    /* TODO: How do Host bindings handle i18n attrs? */
    null,
    property2.sourceSpan
  ));
}
function ingestHostAttribute(job, name, value, securityContexts) {
  const attrBinding = createBindingOp(
    job.root.xref,
    BindingKind.Attribute,
    name,
    value,
    null,
    securityContexts,
    /* Host attributes should always be extracted to const hostAttrs, even if they are not
     *strictly* text literals */
    true,
    false,
    null,
    /* TODO */
    null,
    /** TODO: May be null? */
    value.sourceSpan
  );
  job.root.update.push(attrBinding);
}
function ingestHostEvent(job, event) {
  const [phase, target] = event.type !== ParsedEventType.Animation ? [null, event.targetOrPhase] : [event.targetOrPhase, null];
  const eventBinding = createListenerOp(job.root.xref, new SlotHandle(), event.name, null, makeListenerHandlerOps(job.root, event.handler, event.handlerSpan), phase, target, true, event.sourceSpan);
  job.root.create.push(eventBinding);
}
function ingestNodes(unit, template2) {
  for (const node of template2) {
    if (node instanceof Element$1) {
      ingestElement(unit, node);
    } else if (node instanceof Template) {
      ingestTemplate(unit, node);
    } else if (node instanceof Content) {
      ingestContent(unit, node);
    } else if (node instanceof Text$3) {
      ingestText(unit, node, null);
    } else if (node instanceof BoundText) {
      ingestBoundText(unit, node, null);
    } else if (node instanceof IfBlock) {
      ingestIfBlock(unit, node);
    } else if (node instanceof SwitchBlock) {
      ingestSwitchBlock(unit, node);
    } else if (node instanceof DeferredBlock) {
      ingestDeferBlock(unit, node);
    } else if (node instanceof Icu$1) {
      ingestIcu(unit, node);
    } else if (node instanceof ForLoopBlock) {
      ingestForBlock(unit, node);
    } else if (node instanceof LetDeclaration$1) {
      ingestLetDeclaration(unit, node);
    } else {
      throw new Error(`Unsupported template node: ${node.constructor.name}`);
    }
  }
}
function ingestElement(unit, element2) {
  if (element2.i18n !== void 0 && !(element2.i18n instanceof Message || element2.i18n instanceof TagPlaceholder)) {
    throw Error(`Unhandled i18n metadata type for element: ${element2.i18n.constructor.name}`);
  }
  const id = unit.job.allocateXrefId();
  const [namespaceKey, elementName] = splitNsName(element2.name);
  const startOp = createElementStartOp(elementName, id, namespaceForKey(namespaceKey), element2.i18n instanceof TagPlaceholder ? element2.i18n : void 0, element2.startSourceSpan, element2.sourceSpan);
  unit.create.push(startOp);
  ingestElementBindings(unit, startOp, element2);
  ingestReferences(startOp, element2);
  let i18nBlockId = null;
  if (element2.i18n instanceof Message) {
    i18nBlockId = unit.job.allocateXrefId();
    unit.create.push(createI18nStartOp(i18nBlockId, element2.i18n, void 0, element2.startSourceSpan));
  }
  ingestNodes(unit, element2.children);
  const endOp = createElementEndOp(id, element2.endSourceSpan ?? element2.startSourceSpan);
  unit.create.push(endOp);
  if (i18nBlockId !== null) {
    OpList.insertBefore(createI18nEndOp(i18nBlockId, element2.endSourceSpan ?? element2.startSourceSpan), endOp);
  }
}
function ingestTemplate(unit, tmpl) {
  if (tmpl.i18n !== void 0 && !(tmpl.i18n instanceof Message || tmpl.i18n instanceof TagPlaceholder)) {
    throw Error(`Unhandled i18n metadata type for template: ${tmpl.i18n.constructor.name}`);
  }
  const childView = unit.job.allocateView(unit.xref);
  let tagNameWithoutNamespace = tmpl.tagName;
  let namespacePrefix = "";
  if (tmpl.tagName) {
    [namespacePrefix, tagNameWithoutNamespace] = splitNsName(tmpl.tagName);
  }
  const i18nPlaceholder = tmpl.i18n instanceof TagPlaceholder ? tmpl.i18n : void 0;
  const namespace = namespaceForKey(namespacePrefix);
  const functionNameSuffix = tagNameWithoutNamespace === null ? "" : prefixWithNamespace(tagNameWithoutNamespace, namespace);
  const templateKind = isPlainTemplate(tmpl) ? TemplateKind.NgTemplate : TemplateKind.Structural;
  const templateOp = createTemplateOp(childView.xref, templateKind, tagNameWithoutNamespace, functionNameSuffix, namespace, i18nPlaceholder, tmpl.startSourceSpan, tmpl.sourceSpan);
  unit.create.push(templateOp);
  ingestTemplateBindings(unit, templateOp, tmpl, templateKind);
  ingestReferences(templateOp, tmpl);
  ingestNodes(childView, tmpl.children);
  for (const {
    name,
    value
  } of tmpl.variables) {
    childView.contextVariables.set(name, value !== "" ? value : "$implicit");
  }
  if (templateKind === TemplateKind.NgTemplate && tmpl.i18n instanceof Message) {
    const id = unit.job.allocateXrefId();
    OpList.insertAfter(createI18nStartOp(id, tmpl.i18n, void 0, tmpl.startSourceSpan), childView.create.head);
    OpList.insertBefore(createI18nEndOp(id, tmpl.endSourceSpan ?? tmpl.startSourceSpan), childView.create.tail);
  }
}
function ingestContent(unit, content) {
  if (content.i18n !== void 0 && !(content.i18n instanceof TagPlaceholder)) {
    throw Error(`Unhandled i18n metadata type for element: ${content.i18n.constructor.name}`);
  }
  let fallbackView = null;
  if (content.children.some((child) => !(child instanceof Comment$1) && (!(child instanceof Text$3) || child.value.trim().length > 0))) {
    fallbackView = unit.job.allocateView(unit.xref);
    ingestNodes(fallbackView, content.children);
  }
  const id = unit.job.allocateXrefId();
  const op2 = createProjectionOp(id, content.selector, content.i18n, fallbackView?.xref ?? null, content.sourceSpan);
  for (const attr of content.attributes) {
    const securityContext = domSchema.securityContext(content.name, attr.name, true);
    unit.update.push(createBindingOp(op2.xref, BindingKind.Attribute, attr.name, literal(attr.value), null, securityContext, true, false, null, asMessage(attr.i18n), attr.sourceSpan));
  }
  unit.create.push(op2);
}
function ingestText(unit, text3, icuPlaceholder) {
  unit.create.push(createTextOp(unit.job.allocateXrefId(), text3.value, icuPlaceholder, text3.sourceSpan));
}
function ingestBoundText(unit, text3, icuPlaceholder) {
  let value = text3.value;
  if (value instanceof ASTWithSource) {
    value = value.ast;
  }
  if (!(value instanceof Interpolation$1)) {
    throw new Error(`AssertionError: expected Interpolation for BoundText node, got ${value.constructor.name}`);
  }
  if (text3.i18n !== void 0 && !(text3.i18n instanceof Container)) {
    throw Error(`Unhandled i18n metadata type for text interpolation: ${text3.i18n?.constructor.name}`);
  }
  const i18nPlaceholders = text3.i18n instanceof Container ? text3.i18n.children.filter((node) => node instanceof Placeholder).map((placeholder) => placeholder.name) : [];
  if (i18nPlaceholders.length > 0 && i18nPlaceholders.length !== value.expressions.length) {
    throw Error(`Unexpected number of i18n placeholders (${value.expressions.length}) for BoundText with ${value.expressions.length} expressions`);
  }
  const textXref = unit.job.allocateXrefId();
  unit.create.push(createTextOp(textXref, "", icuPlaceholder, text3.sourceSpan));
  const baseSourceSpan = unit.job.compatibility ? null : text3.sourceSpan;
  unit.update.push(createInterpolateTextOp(textXref, new Interpolation2(value.strings, value.expressions.map((expr) => convertAst(expr, unit.job, baseSourceSpan)), i18nPlaceholders), text3.sourceSpan));
}
function ingestIfBlock(unit, ifBlock) {
  let firstXref = null;
  let conditions = [];
  for (let i = 0; i < ifBlock.branches.length; i++) {
    const ifCase = ifBlock.branches[i];
    const cView = unit.job.allocateView(unit.xref);
    const tagName = ingestControlFlowInsertionPoint(unit, cView.xref, ifCase);
    if (ifCase.expressionAlias !== null) {
      cView.contextVariables.set(ifCase.expressionAlias.name, CTX_REF);
    }
    let ifCaseI18nMeta = void 0;
    if (ifCase.i18n !== void 0) {
      if (!(ifCase.i18n instanceof BlockPlaceholder)) {
        throw Error(`Unhandled i18n metadata type for if block: ${ifCase.i18n?.constructor.name}`);
      }
      ifCaseI18nMeta = ifCase.i18n;
    }
    const templateOp = createTemplateOp(cView.xref, TemplateKind.Block, tagName, "Conditional", Namespace.HTML, ifCaseI18nMeta, ifCase.startSourceSpan, ifCase.sourceSpan);
    unit.create.push(templateOp);
    if (firstXref === null) {
      firstXref = cView.xref;
    }
    const caseExpr = ifCase.expression ? convertAst(ifCase.expression, unit.job, null) : null;
    const conditionalCaseExpr = new ConditionalCaseExpr(caseExpr, templateOp.xref, templateOp.handle, ifCase.expressionAlias);
    conditions.push(conditionalCaseExpr);
    ingestNodes(cView, ifCase.children);
  }
  unit.update.push(createConditionalOp(firstXref, null, conditions, ifBlock.sourceSpan));
}
function ingestSwitchBlock(unit, switchBlock) {
  if (switchBlock.cases.length === 0) {
    return;
  }
  let firstXref = null;
  let conditions = [];
  for (const switchCase of switchBlock.cases) {
    const cView = unit.job.allocateView(unit.xref);
    const tagName = ingestControlFlowInsertionPoint(unit, cView.xref, switchCase);
    let switchCaseI18nMeta = void 0;
    if (switchCase.i18n !== void 0) {
      if (!(switchCase.i18n instanceof BlockPlaceholder)) {
        throw Error(`Unhandled i18n metadata type for switch block: ${switchCase.i18n?.constructor.name}`);
      }
      switchCaseI18nMeta = switchCase.i18n;
    }
    const templateOp = createTemplateOp(cView.xref, TemplateKind.Block, tagName, "Case", Namespace.HTML, switchCaseI18nMeta, switchCase.startSourceSpan, switchCase.sourceSpan);
    unit.create.push(templateOp);
    if (firstXref === null) {
      firstXref = cView.xref;
    }
    const caseExpr = switchCase.expression ? convertAst(switchCase.expression, unit.job, switchBlock.startSourceSpan) : null;
    const conditionalCaseExpr = new ConditionalCaseExpr(caseExpr, templateOp.xref, templateOp.handle);
    conditions.push(conditionalCaseExpr);
    ingestNodes(cView, switchCase.children);
  }
  unit.update.push(createConditionalOp(firstXref, convertAst(switchBlock.expression, unit.job, null), conditions, switchBlock.sourceSpan));
}
function ingestDeferView(unit, suffix, i18nMeta, children, sourceSpan) {
  if (i18nMeta !== void 0 && !(i18nMeta instanceof BlockPlaceholder)) {
    throw Error("Unhandled i18n metadata type for defer block");
  }
  if (children === void 0) {
    return null;
  }
  const secondaryView = unit.job.allocateView(unit.xref);
  ingestNodes(secondaryView, children);
  const templateOp = createTemplateOp(secondaryView.xref, TemplateKind.Block, null, `Defer${suffix}`, Namespace.HTML, i18nMeta, sourceSpan, sourceSpan);
  unit.create.push(templateOp);
  return templateOp;
}
function ingestDeferBlock(unit, deferBlock) {
  let ownResolverFn = null;
  if (unit.job.deferMeta.mode === 0) {
    if (!unit.job.deferMeta.blocks.has(deferBlock)) {
      throw new Error(`AssertionError: unable to find a dependency function for this deferred block`);
    }
    ownResolverFn = unit.job.deferMeta.blocks.get(deferBlock) ?? null;
  }
  const main2 = ingestDeferView(unit, "", deferBlock.i18n, deferBlock.children, deferBlock.sourceSpan);
  const loading = ingestDeferView(unit, "Loading", deferBlock.loading?.i18n, deferBlock.loading?.children, deferBlock.loading?.sourceSpan);
  const placeholder = ingestDeferView(unit, "Placeholder", deferBlock.placeholder?.i18n, deferBlock.placeholder?.children, deferBlock.placeholder?.sourceSpan);
  const error = ingestDeferView(unit, "Error", deferBlock.error?.i18n, deferBlock.error?.children, deferBlock.error?.sourceSpan);
  const deferXref = unit.job.allocateXrefId();
  const deferOp = createDeferOp(deferXref, main2.xref, main2.handle, ownResolverFn, unit.job.allDeferrableDepsFn, deferBlock.sourceSpan);
  deferOp.placeholderView = placeholder?.xref ?? null;
  deferOp.placeholderSlot = placeholder?.handle ?? null;
  deferOp.loadingSlot = loading?.handle ?? null;
  deferOp.errorSlot = error?.handle ?? null;
  deferOp.placeholderMinimumTime = deferBlock.placeholder?.minimumTime ?? null;
  deferOp.loadingMinimumTime = deferBlock.loading?.minimumTime ?? null;
  deferOp.loadingAfterTime = deferBlock.loading?.afterTime ?? null;
  deferOp.flags = calcDeferBlockFlags(deferBlock);
  unit.create.push(deferOp);
  const deferOnOps = [];
  const deferWhenOps = [];
  ingestDeferTriggers("hydrate", deferBlock.hydrateTriggers, deferOnOps, deferWhenOps, unit, deferXref);
  ingestDeferTriggers("none", deferBlock.triggers, deferOnOps, deferWhenOps, unit, deferXref);
  ingestDeferTriggers("prefetch", deferBlock.prefetchTriggers, deferOnOps, deferWhenOps, unit, deferXref);
  const hasConcreteTrigger = deferOnOps.some(
    (op2) => op2.modifier === "none"
    /* ir.DeferOpModifierKind.NONE */
  ) || deferWhenOps.some(
    (op2) => op2.modifier === "none"
    /* ir.DeferOpModifierKind.NONE */
  );
  if (!hasConcreteTrigger) {
    deferOnOps.push(createDeferOnOp(deferXref, {
      kind: DeferTriggerKind.Idle
    }, "none", null));
  }
  unit.create.push(deferOnOps);
  unit.update.push(deferWhenOps);
}
function calcDeferBlockFlags(deferBlockDetails) {
  if (Object.keys(deferBlockDetails.hydrateTriggers).length > 0) {
    return 1;
  }
  return null;
}
function ingestDeferTriggers(modifier, triggers, onOps, whenOps, unit, deferXref) {
  if (triggers.idle !== void 0) {
    const deferOnOp = createDeferOnOp(deferXref, {
      kind: DeferTriggerKind.Idle
    }, modifier, triggers.idle.sourceSpan);
    onOps.push(deferOnOp);
  }
  if (triggers.immediate !== void 0) {
    const deferOnOp = createDeferOnOp(deferXref, {
      kind: DeferTriggerKind.Immediate
    }, modifier, triggers.immediate.sourceSpan);
    onOps.push(deferOnOp);
  }
  if (triggers.timer !== void 0) {
    const deferOnOp = createDeferOnOp(deferXref, {
      kind: DeferTriggerKind.Timer,
      delay: triggers.timer.delay
    }, modifier, triggers.timer.sourceSpan);
    onOps.push(deferOnOp);
  }
  if (triggers.hover !== void 0) {
    const deferOnOp = createDeferOnOp(deferXref, {
      kind: DeferTriggerKind.Hover,
      targetName: triggers.hover.reference,
      targetXref: null,
      targetSlot: null,
      targetView: null,
      targetSlotViewSteps: null
    }, modifier, triggers.hover.sourceSpan);
    onOps.push(deferOnOp);
  }
  if (triggers.interaction !== void 0) {
    const deferOnOp = createDeferOnOp(deferXref, {
      kind: DeferTriggerKind.Interaction,
      targetName: triggers.interaction.reference,
      targetXref: null,
      targetSlot: null,
      targetView: null,
      targetSlotViewSteps: null
    }, modifier, triggers.interaction.sourceSpan);
    onOps.push(deferOnOp);
  }
  if (triggers.viewport !== void 0) {
    const deferOnOp = createDeferOnOp(deferXref, {
      kind: DeferTriggerKind.Viewport,
      targetName: triggers.viewport.reference,
      targetXref: null,
      targetSlot: null,
      targetView: null,
      targetSlotViewSteps: null
    }, modifier, triggers.viewport.sourceSpan);
    onOps.push(deferOnOp);
  }
  if (triggers.never !== void 0) {
    const deferOnOp = createDeferOnOp(deferXref, {
      kind: DeferTriggerKind.Never
    }, modifier, triggers.never.sourceSpan);
    onOps.push(deferOnOp);
  }
  if (triggers.when !== void 0) {
    if (triggers.when.value instanceof Interpolation$1) {
      throw new Error(`Unexpected interpolation in defer block when trigger`);
    }
    const deferOnOp = createDeferWhenOp(deferXref, convertAst(triggers.when.value, unit.job, triggers.when.sourceSpan), modifier, triggers.when.sourceSpan);
    whenOps.push(deferOnOp);
  }
}
function ingestIcu(unit, icu) {
  if (icu.i18n instanceof Message && isSingleI18nIcu(icu.i18n)) {
    const xref = unit.job.allocateXrefId();
    unit.create.push(createIcuStartOp(xref, icu.i18n, icuFromI18nMessage(icu.i18n).name, null));
    for (const [placeholder, text3] of Object.entries(__spreadValues(__spreadValues({}, icu.vars), icu.placeholders))) {
      if (text3 instanceof BoundText) {
        ingestBoundText(unit, text3, placeholder);
      } else {
        ingestText(unit, text3, placeholder);
      }
    }
    unit.create.push(createIcuEndOp(xref));
  } else {
    throw Error(`Unhandled i18n metadata type for ICU: ${icu.i18n?.constructor.name}`);
  }
}
function ingestForBlock(unit, forBlock) {
  const repeaterView = unit.job.allocateView(unit.xref);
  const indexName = `\u0275$index_${repeaterView.xref}`;
  const countName = `\u0275$count_${repeaterView.xref}`;
  const indexVarNames = /* @__PURE__ */ new Set();
  repeaterView.contextVariables.set(forBlock.item.name, forBlock.item.value);
  for (const variable2 of forBlock.contextVariables) {
    if (variable2.value === "$index") {
      indexVarNames.add(variable2.name);
    }
    if (variable2.name === "$index") {
      repeaterView.contextVariables.set("$index", variable2.value).set(indexName, variable2.value);
    } else if (variable2.name === "$count") {
      repeaterView.contextVariables.set("$count", variable2.value).set(countName, variable2.value);
    } else {
      repeaterView.aliases.add({
        kind: SemanticVariableKind.Alias,
        name: null,
        identifier: variable2.name,
        expression: getComputedForLoopVariableExpression(variable2, indexName, countName)
      });
    }
  }
  const sourceSpan = convertSourceSpan(forBlock.trackBy.span, forBlock.sourceSpan);
  const track = convertAst(forBlock.trackBy, unit.job, sourceSpan);
  ingestNodes(repeaterView, forBlock.children);
  let emptyView = null;
  let emptyTagName = null;
  if (forBlock.empty !== null) {
    emptyView = unit.job.allocateView(unit.xref);
    ingestNodes(emptyView, forBlock.empty.children);
    emptyTagName = ingestControlFlowInsertionPoint(unit, emptyView.xref, forBlock.empty);
  }
  const varNames = {
    $index: indexVarNames,
    $implicit: forBlock.item.name
  };
  if (forBlock.i18n !== void 0 && !(forBlock.i18n instanceof BlockPlaceholder)) {
    throw Error("AssertionError: Unhandled i18n metadata type or @for");
  }
  if (forBlock.empty?.i18n !== void 0 && !(forBlock.empty.i18n instanceof BlockPlaceholder)) {
    throw Error("AssertionError: Unhandled i18n metadata type or @empty");
  }
  const i18nPlaceholder = forBlock.i18n;
  const emptyI18nPlaceholder = forBlock.empty?.i18n;
  const tagName = ingestControlFlowInsertionPoint(unit, repeaterView.xref, forBlock);
  const repeaterCreate2 = createRepeaterCreateOp(repeaterView.xref, emptyView?.xref ?? null, tagName, track, varNames, emptyTagName, i18nPlaceholder, emptyI18nPlaceholder, forBlock.startSourceSpan, forBlock.sourceSpan);
  unit.create.push(repeaterCreate2);
  const expression = convertAst(forBlock.expression, unit.job, convertSourceSpan(forBlock.expression.span, forBlock.sourceSpan));
  const repeater2 = createRepeaterOp(repeaterCreate2.xref, repeaterCreate2.handle, expression, forBlock.sourceSpan);
  unit.update.push(repeater2);
}
function getComputedForLoopVariableExpression(variable2, indexName, countName) {
  switch (variable2.value) {
    case "$index":
      return new LexicalReadExpr(indexName);
    case "$count":
      return new LexicalReadExpr(countName);
    case "$first":
      return new LexicalReadExpr(indexName).identical(literal(0));
    case "$last":
      return new LexicalReadExpr(indexName).identical(new LexicalReadExpr(countName).minus(literal(1)));
    case "$even":
      return new LexicalReadExpr(indexName).modulo(literal(2)).identical(literal(0));
    case "$odd":
      return new LexicalReadExpr(indexName).modulo(literal(2)).notIdentical(literal(0));
    default:
      throw new Error(`AssertionError: unknown @for loop variable ${variable2.value}`);
  }
}
function ingestLetDeclaration(unit, node) {
  const target = unit.job.allocateXrefId();
  unit.create.push(createDeclareLetOp(target, node.name, node.sourceSpan));
  unit.update.push(createStoreLetOp(target, node.name, convertAst(node.value, unit.job, node.valueSpan), node.sourceSpan));
}
function convertAst(ast, job, baseSourceSpan) {
  if (ast instanceof ASTWithSource) {
    return convertAst(ast.ast, job, baseSourceSpan);
  } else if (ast instanceof PropertyRead) {
    const isImplicitReceiver = ast.receiver instanceof ImplicitReceiver && !(ast.receiver instanceof ThisReceiver);
    if (isImplicitReceiver) {
      return new LexicalReadExpr(ast.name);
    } else {
      return new ReadPropExpr(convertAst(ast.receiver, job, baseSourceSpan), ast.name, null, convertSourceSpan(ast.span, baseSourceSpan));
    }
  } else if (ast instanceof PropertyWrite) {
    if (ast.receiver instanceof ImplicitReceiver) {
      return new WritePropExpr(
        // TODO: Is it correct to always use the root context in place of the implicit receiver?
        new ContextExpr(job.root.xref),
        ast.name,
        convertAst(ast.value, job, baseSourceSpan),
        null,
        convertSourceSpan(ast.span, baseSourceSpan)
      );
    }
    return new WritePropExpr(convertAst(ast.receiver, job, baseSourceSpan), ast.name, convertAst(ast.value, job, baseSourceSpan), void 0, convertSourceSpan(ast.span, baseSourceSpan));
  } else if (ast instanceof KeyedWrite) {
    return new WriteKeyExpr(convertAst(ast.receiver, job, baseSourceSpan), convertAst(ast.key, job, baseSourceSpan), convertAst(ast.value, job, baseSourceSpan), void 0, convertSourceSpan(ast.span, baseSourceSpan));
  } else if (ast instanceof Call) {
    if (ast.receiver instanceof ImplicitReceiver) {
      throw new Error(`Unexpected ImplicitReceiver`);
    } else {
      return new InvokeFunctionExpr(convertAst(ast.receiver, job, baseSourceSpan), ast.args.map((arg) => convertAst(arg, job, baseSourceSpan)), void 0, convertSourceSpan(ast.span, baseSourceSpan));
    }
  } else if (ast instanceof LiteralPrimitive) {
    return literal(ast.value, void 0, convertSourceSpan(ast.span, baseSourceSpan));
  } else if (ast instanceof Unary) {
    switch (ast.operator) {
      case "+":
        return new UnaryOperatorExpr(UnaryOperator.Plus, convertAst(ast.expr, job, baseSourceSpan), void 0, convertSourceSpan(ast.span, baseSourceSpan));
      case "-":
        return new UnaryOperatorExpr(UnaryOperator.Minus, convertAst(ast.expr, job, baseSourceSpan), void 0, convertSourceSpan(ast.span, baseSourceSpan));
      default:
        throw new Error(`AssertionError: unknown unary operator ${ast.operator}`);
    }
  } else if (ast instanceof Binary) {
    const operator = BINARY_OPERATORS.get(ast.operation);
    if (operator === void 0) {
      throw new Error(`AssertionError: unknown binary operator ${ast.operation}`);
    }
    return new BinaryOperatorExpr(operator, convertAst(ast.left, job, baseSourceSpan), convertAst(ast.right, job, baseSourceSpan), void 0, convertSourceSpan(ast.span, baseSourceSpan));
  } else if (ast instanceof ThisReceiver) {
    return new ContextExpr(job.root.xref);
  } else if (ast instanceof KeyedRead) {
    return new ReadKeyExpr(convertAst(ast.receiver, job, baseSourceSpan), convertAst(ast.key, job, baseSourceSpan), void 0, convertSourceSpan(ast.span, baseSourceSpan));
  } else if (ast instanceof Chain) {
    throw new Error(`AssertionError: Chain in unknown context`);
  } else if (ast instanceof LiteralMap) {
    const entries = ast.keys.map((key, idx) => {
      const value = ast.values[idx];
      return new LiteralMapEntry(key.key, convertAst(value, job, baseSourceSpan), key.quoted);
    });
    return new LiteralMapExpr(entries, void 0, convertSourceSpan(ast.span, baseSourceSpan));
  } else if (ast instanceof LiteralArray) {
    return new LiteralArrayExpr(ast.expressions.map((expr) => convertAst(expr, job, baseSourceSpan)));
  } else if (ast instanceof Conditional) {
    return new ConditionalExpr(convertAst(ast.condition, job, baseSourceSpan), convertAst(ast.trueExp, job, baseSourceSpan), convertAst(ast.falseExp, job, baseSourceSpan), void 0, convertSourceSpan(ast.span, baseSourceSpan));
  } else if (ast instanceof NonNullAssert) {
    return convertAst(ast.expression, job, baseSourceSpan);
  } else if (ast instanceof BindingPipe) {
    return new PipeBindingExpr(job.allocateXrefId(), new SlotHandle(), ast.name, [convertAst(ast.exp, job, baseSourceSpan), ...ast.args.map((arg) => convertAst(arg, job, baseSourceSpan))]);
  } else if (ast instanceof SafeKeyedRead) {
    return new SafeKeyedReadExpr(convertAst(ast.receiver, job, baseSourceSpan), convertAst(ast.key, job, baseSourceSpan), convertSourceSpan(ast.span, baseSourceSpan));
  } else if (ast instanceof SafePropertyRead) {
    return new SafePropertyReadExpr(convertAst(ast.receiver, job, baseSourceSpan), ast.name);
  } else if (ast instanceof SafeCall) {
    return new SafeInvokeFunctionExpr(convertAst(ast.receiver, job, baseSourceSpan), ast.args.map((a) => convertAst(a, job, baseSourceSpan)));
  } else if (ast instanceof EmptyExpr$1) {
    return new EmptyExpr2(convertSourceSpan(ast.span, baseSourceSpan));
  } else if (ast instanceof PrefixNot) {
    return not(convertAst(ast.expression, job, baseSourceSpan), convertSourceSpan(ast.span, baseSourceSpan));
  } else if (ast instanceof TypeofExpression) {
    return typeofExpr(convertAst(ast.expression, job, baseSourceSpan));
  } else if (ast instanceof TemplateLiteral) {
    return new TemplateLiteralExpr(ast.elements.map((el) => {
      return new TemplateLiteralElementExpr(el.text, convertSourceSpan(el.span, baseSourceSpan));
    }), ast.expressions.map((expr) => convertAst(expr, job, baseSourceSpan)), convertSourceSpan(ast.span, baseSourceSpan));
  } else {
    throw new Error(`Unhandled expression type "${ast.constructor.name}" in file "${baseSourceSpan?.start.file.url}"`);
  }
}
function convertAstWithInterpolation(job, value, i18nMeta, sourceSpan) {
  let expression;
  if (value instanceof Interpolation$1) {
    expression = new Interpolation2(value.strings, value.expressions.map((e) => convertAst(e, job, null)), Object.keys(asMessage(i18nMeta)?.placeholders ?? {}));
  } else if (value instanceof AST) {
    expression = convertAst(value, job, null);
  } else {
    expression = literal(value);
  }
  return expression;
}
var BINDING_KINDS = /* @__PURE__ */ new Map([[BindingType.Property, BindingKind.Property], [BindingType.TwoWay, BindingKind.TwoWayProperty], [BindingType.Attribute, BindingKind.Attribute], [BindingType.Class, BindingKind.ClassName], [BindingType.Style, BindingKind.StyleProperty], [BindingType.Animation, BindingKind.Animation]]);
function isPlainTemplate(tmpl) {
  return splitNsName(tmpl.tagName ?? "")[1] === NG_TEMPLATE_TAG_NAME;
}
function asMessage(i18nMeta) {
  if (i18nMeta == null) {
    return null;
  }
  if (!(i18nMeta instanceof Message)) {
    throw Error(`Expected i18n meta to be a Message, but got: ${i18nMeta.constructor.name}`);
  }
  return i18nMeta;
}
function ingestElementBindings(unit, op2, element2) {
  let bindings = new Array();
  let i18nAttributeBindingNames = /* @__PURE__ */ new Set();
  for (const attr of element2.attributes) {
    const securityContext = domSchema.securityContext(element2.name, attr.name, true);
    bindings.push(createBindingOp(op2.xref, BindingKind.Attribute, attr.name, convertAstWithInterpolation(unit.job, attr.value, attr.i18n), null, securityContext, true, false, null, asMessage(attr.i18n), attr.sourceSpan));
    if (attr.i18n) {
      i18nAttributeBindingNames.add(attr.name);
    }
  }
  for (const input2 of element2.inputs) {
    if (i18nAttributeBindingNames.has(input2.name)) {
      console.error(`On component ${unit.job.componentName}, the binding ${input2.name} is both an i18n attribute and a property. You may want to remove the property binding. This will become a compilation error in future versions of Angular.`);
    }
    bindings.push(createBindingOp(op2.xref, BINDING_KINDS.get(input2.type), input2.name, convertAstWithInterpolation(unit.job, astOf(input2.value), input2.i18n), input2.unit, input2.securityContext, false, false, null, asMessage(input2.i18n) ?? null, input2.sourceSpan));
  }
  unit.create.push(bindings.filter((b) => b?.kind === OpKind.ExtractedAttribute));
  unit.update.push(bindings.filter((b) => b?.kind === OpKind.Binding));
  for (const output of element2.outputs) {
    if (output.type === ParsedEventType.Animation && output.phase === null) {
      throw Error("Animation listener should have a phase");
    }
    if (output.type === ParsedEventType.TwoWay) {
      unit.create.push(createTwoWayListenerOp(op2.xref, op2.handle, output.name, op2.tag, makeTwoWayListenerHandlerOps(unit, output.handler, output.handlerSpan), output.sourceSpan));
    } else {
      unit.create.push(createListenerOp(op2.xref, op2.handle, output.name, op2.tag, makeListenerHandlerOps(unit, output.handler, output.handlerSpan), output.phase, output.target, false, output.sourceSpan));
    }
  }
  if (bindings.some((b) => b?.i18nMessage) !== null) {
    unit.create.push(createI18nAttributesOp(unit.job.allocateXrefId(), new SlotHandle(), op2.xref));
  }
}
function ingestTemplateBindings(unit, op2, template2, templateKind) {
  let bindings = new Array();
  for (const attr of template2.templateAttrs) {
    if (attr instanceof TextAttribute) {
      const securityContext = domSchema.securityContext(NG_TEMPLATE_TAG_NAME, attr.name, true);
      bindings.push(createTemplateBinding(unit, op2.xref, BindingType.Attribute, attr.name, attr.value, null, securityContext, true, templateKind, asMessage(attr.i18n), attr.sourceSpan));
    } else {
      bindings.push(createTemplateBinding(unit, op2.xref, attr.type, attr.name, astOf(attr.value), attr.unit, attr.securityContext, true, templateKind, asMessage(attr.i18n), attr.sourceSpan));
    }
  }
  for (const attr of template2.attributes) {
    const securityContext = domSchema.securityContext(NG_TEMPLATE_TAG_NAME, attr.name, true);
    bindings.push(createTemplateBinding(unit, op2.xref, BindingType.Attribute, attr.name, attr.value, null, securityContext, false, templateKind, asMessage(attr.i18n), attr.sourceSpan));
  }
  for (const input2 of template2.inputs) {
    bindings.push(createTemplateBinding(unit, op2.xref, input2.type, input2.name, astOf(input2.value), input2.unit, input2.securityContext, false, templateKind, asMessage(input2.i18n), input2.sourceSpan));
  }
  unit.create.push(bindings.filter((b) => b?.kind === OpKind.ExtractedAttribute));
  unit.update.push(bindings.filter((b) => b?.kind === OpKind.Binding));
  for (const output of template2.outputs) {
    if (output.type === ParsedEventType.Animation && output.phase === null) {
      throw Error("Animation listener should have a phase");
    }
    if (templateKind === TemplateKind.NgTemplate) {
      if (output.type === ParsedEventType.TwoWay) {
        unit.create.push(createTwoWayListenerOp(op2.xref, op2.handle, output.name, op2.tag, makeTwoWayListenerHandlerOps(unit, output.handler, output.handlerSpan), output.sourceSpan));
      } else {
        unit.create.push(createListenerOp(op2.xref, op2.handle, output.name, op2.tag, makeListenerHandlerOps(unit, output.handler, output.handlerSpan), output.phase, output.target, false, output.sourceSpan));
      }
    }
    if (templateKind === TemplateKind.Structural && output.type !== ParsedEventType.Animation) {
      const securityContext = domSchema.securityContext(NG_TEMPLATE_TAG_NAME, output.name, false);
      unit.create.push(createExtractedAttributeOp(op2.xref, BindingKind.Property, null, output.name, null, null, null, securityContext));
    }
  }
  if (bindings.some((b) => b?.i18nMessage) !== null) {
    unit.create.push(createI18nAttributesOp(unit.job.allocateXrefId(), new SlotHandle(), op2.xref));
  }
}
function createTemplateBinding(view, xref, type, name, value, unit, securityContext, isStructuralTemplateAttribute, templateKind, i18nMessage, sourceSpan) {
  const isTextBinding = typeof value === "string";
  if (templateKind === TemplateKind.Structural) {
    if (!isStructuralTemplateAttribute) {
      switch (type) {
        case BindingType.Property:
        case BindingType.Class:
        case BindingType.Style:
          return createExtractedAttributeOp(xref, BindingKind.Property, null, name, null, null, i18nMessage, securityContext);
        case BindingType.TwoWay:
          return createExtractedAttributeOp(xref, BindingKind.TwoWayProperty, null, name, null, null, i18nMessage, securityContext);
      }
    }
    if (!isTextBinding && (type === BindingType.Attribute || type === BindingType.Animation)) {
      return null;
    }
  }
  let bindingType = BINDING_KINDS.get(type);
  if (templateKind === TemplateKind.NgTemplate) {
    if (type === BindingType.Class || type === BindingType.Style || type === BindingType.Attribute && !isTextBinding) {
      bindingType = BindingKind.Property;
    }
  }
  return createBindingOp(xref, bindingType, name, convertAstWithInterpolation(view.job, value, i18nMessage), unit, securityContext, isTextBinding, isStructuralTemplateAttribute, templateKind, i18nMessage, sourceSpan);
}
function makeListenerHandlerOps(unit, handler, handlerSpan) {
  handler = astOf(handler);
  const handlerOps = new Array();
  let handlerExprs = handler instanceof Chain ? handler.expressions : [handler];
  if (handlerExprs.length === 0) {
    throw new Error("Expected listener to have non-empty expression list.");
  }
  const expressions = handlerExprs.map((expr) => convertAst(expr, unit.job, handlerSpan));
  const returnExpr = expressions.pop();
  handlerOps.push(...expressions.map((e) => createStatementOp(new ExpressionStatement(e, e.sourceSpan))));
  handlerOps.push(createStatementOp(new ReturnStatement(returnExpr, returnExpr.sourceSpan)));
  return handlerOps;
}
function makeTwoWayListenerHandlerOps(unit, handler, handlerSpan) {
  handler = astOf(handler);
  const handlerOps = new Array();
  if (handler instanceof Chain) {
    if (handler.expressions.length === 1) {
      handler = handler.expressions[0];
    } else {
      throw new Error("Expected two-way listener to have a single expression.");
    }
  }
  const handlerExpr = convertAst(handler, unit.job, handlerSpan);
  const eventReference = new LexicalReadExpr("$event");
  const twoWaySetExpr = new TwoWayBindingSetExpr(handlerExpr, eventReference);
  handlerOps.push(createStatementOp(new ExpressionStatement(twoWaySetExpr)));
  handlerOps.push(createStatementOp(new ReturnStatement(eventReference)));
  return handlerOps;
}
function astOf(ast) {
  return ast instanceof ASTWithSource ? ast.ast : ast;
}
function ingestReferences(op2, element2) {
  assertIsArray(op2.localRefs);
  for (const {
    name,
    value
  } of element2.references) {
    op2.localRefs.push({
      name,
      target: value
    });
  }
}
function assertIsArray(value) {
  if (!Array.isArray(value)) {
    throw new Error(`AssertionError: expected an array`);
  }
}
function convertSourceSpan(span, baseSourceSpan) {
  if (baseSourceSpan === null) {
    return null;
  }
  const start = baseSourceSpan.start.moveBy(span.start);
  const end = baseSourceSpan.start.moveBy(span.end);
  const fullStart = baseSourceSpan.fullStart.moveBy(span.start);
  return new ParseSourceSpan(start, end, fullStart);
}
function ingestControlFlowInsertionPoint(unit, xref, node) {
  let root = null;
  for (const child of node.children) {
    if (child instanceof Comment$1 || child instanceof LetDeclaration$1) {
      continue;
    }
    if (root !== null) {
      return null;
    }
    if (child instanceof Element$1 || child instanceof Template && child.tagName !== null) {
      root = child;
    } else {
      return null;
    }
  }
  if (root !== null) {
    for (const attr of root.attributes) {
      const securityContext = domSchema.securityContext(NG_TEMPLATE_TAG_NAME, attr.name, true);
      unit.update.push(createBindingOp(xref, BindingKind.Attribute, attr.name, literal(attr.value), null, securityContext, true, false, null, asMessage(attr.i18n), attr.sourceSpan));
    }
    for (const attr of root.inputs) {
      if (attr.type !== BindingType.Animation && attr.type !== BindingType.Attribute) {
        const securityContext = domSchema.securityContext(NG_TEMPLATE_TAG_NAME, attr.name, true);
        unit.create.push(createExtractedAttributeOp(xref, BindingKind.Property, null, attr.name, null, null, null, securityContext));
      }
    }
    const tagName = root instanceof Element$1 ? root.name : root.tagName;
    return tagName === NG_TEMPLATE_TAG_NAME ? null : tagName;
  }
  return null;
}
var ENABLE_TEMPLATE_SOURCE_LOCATIONS = false;
function getTemplateSourceLocationsEnabled() {
  return ENABLE_TEMPLATE_SOURCE_LOCATIONS;
}
function renderFlagCheckIfStmt(flags, statements) {
  return ifStmt(variable(RENDER_FLAGS).bitwiseAnd(literal(flags), null, false), statements);
}
function toQueryFlags(query) {
  return (query.descendants ? 1 : 0) | (query.static ? 2 : 0) | (query.emitDistinctChangesOnly ? 4 : 0);
}
function getQueryPredicate(query, constantPool) {
  if (Array.isArray(query.predicate)) {
    let predicate = [];
    query.predicate.forEach((selector) => {
      const selectors = selector.split(",").map((token) => literal(token.trim()));
      predicate.push(...selectors);
    });
    return constantPool.getConstLiteral(literalArr(predicate), true);
  } else {
    switch (query.predicate.forwardRef) {
      case 0:
      case 2:
        return query.predicate.expression;
      case 1:
        return importExpr(Identifiers.resolveForwardRef).callFn([query.predicate.expression]);
    }
  }
}
function createQueryCreateCall(query, constantPool, queryTypeFns, prependParams) {
  const parameters = [];
  if (prependParams !== void 0) {
    parameters.push(...prependParams);
  }
  if (query.isSignal) {
    parameters.push(new ReadPropExpr(variable(CONTEXT_NAME), query.propertyName));
  }
  parameters.push(getQueryPredicate(query, constantPool), literal(toQueryFlags(query)));
  if (query.read) {
    parameters.push(query.read);
  }
  const queryCreateFn = query.isSignal ? queryTypeFns.signalBased : queryTypeFns.nonSignal;
  return importExpr(queryCreateFn).callFn(parameters);
}
var queryAdvancePlaceholder = Symbol("queryAdvancePlaceholder");
function collapseAdvanceStatements(statements) {
  const result = [];
  let advanceCollapseCount = 0;
  const flushAdvanceCount = () => {
    if (advanceCollapseCount > 0) {
      result.unshift(importExpr(Identifiers.queryAdvance).callFn(advanceCollapseCount === 1 ? [] : [literal(advanceCollapseCount)]).toStmt());
      advanceCollapseCount = 0;
    }
  };
  for (let i = statements.length - 1; i >= 0; i--) {
    const st = statements[i];
    if (st === queryAdvancePlaceholder) {
      advanceCollapseCount++;
    } else {
      flushAdvanceCount();
      result.unshift(st);
    }
  }
  flushAdvanceCount();
  return result;
}
function createViewQueriesFunction(viewQueries, constantPool, name) {
  const createStatements = [];
  const updateStatements = [];
  const tempAllocator = temporaryAllocator((st) => updateStatements.push(st), TEMPORARY_NAME);
  viewQueries.forEach((query) => {
    const queryDefinitionCall = createQueryCreateCall(query, constantPool, {
      signalBased: Identifiers.viewQuerySignal,
      nonSignal: Identifiers.viewQuery
    });
    createStatements.push(queryDefinitionCall.toStmt());
    if (query.isSignal) {
      updateStatements.push(queryAdvancePlaceholder);
      return;
    }
    const temporary = tempAllocator();
    const getQueryList = importExpr(Identifiers.loadQuery).callFn([]);
    const refresh = importExpr(Identifiers.queryRefresh).callFn([temporary.set(getQueryList)]);
    const updateDirective = variable(CONTEXT_NAME).prop(query.propertyName).set(query.first ? temporary.prop("first") : temporary);
    updateStatements.push(refresh.and(updateDirective).toStmt());
  });
  const viewQueryFnName = name ? `${name}_Query` : null;
  return fn([new FnParam(RENDER_FLAGS, NUMBER_TYPE), new FnParam(CONTEXT_NAME, null)], [renderFlagCheckIfStmt(1, createStatements), renderFlagCheckIfStmt(2, collapseAdvanceStatements(updateStatements))], INFERRED_TYPE, null, viewQueryFnName);
}
function createContentQueriesFunction(queries, constantPool, name) {
  const createStatements = [];
  const updateStatements = [];
  const tempAllocator = temporaryAllocator((st) => updateStatements.push(st), TEMPORARY_NAME);
  for (const query of queries) {
    createStatements.push(createQueryCreateCall(
      query,
      constantPool,
      {
        nonSignal: Identifiers.contentQuery,
        signalBased: Identifiers.contentQuerySignal
      },
      /* prependParams */
      [variable("dirIndex")]
    ).toStmt());
    if (query.isSignal) {
      updateStatements.push(queryAdvancePlaceholder);
      continue;
    }
    const temporary = tempAllocator();
    const getQueryList = importExpr(Identifiers.loadQuery).callFn([]);
    const refresh = importExpr(Identifiers.queryRefresh).callFn([temporary.set(getQueryList)]);
    const updateDirective = variable(CONTEXT_NAME).prop(query.propertyName).set(query.first ? temporary.prop("first") : temporary);
    updateStatements.push(refresh.and(updateDirective).toStmt());
  }
  const contentQueriesFnName = name ? `${name}_ContentQueries` : null;
  return fn([new FnParam(RENDER_FLAGS, NUMBER_TYPE), new FnParam(CONTEXT_NAME, null), new FnParam("dirIndex", null)], [renderFlagCheckIfStmt(1, createStatements), renderFlagCheckIfStmt(2, collapseAdvanceStatements(updateStatements))], INFERRED_TYPE, null, contentQueriesFnName);
}
var HtmlParser = class extends Parser$1 {
  constructor() {
    super(getHtmlTagDefinition);
  }
  parse(source, url, options) {
    return super.parse(source, url, options);
  }
};
var PROPERTY_PARTS_SEPARATOR = ".";
var ATTRIBUTE_PREFIX = "attr";
var CLASS_PREFIX = "class";
var STYLE_PREFIX = "style";
var TEMPLATE_ATTR_PREFIX$1 = "*";
var ANIMATE_PROP_PREFIX = "animate-";
var BindingParser = class {
  _exprParser;
  _interpolationConfig;
  _schemaRegistry;
  errors;
  constructor(_exprParser, _interpolationConfig, _schemaRegistry, errors) {
    this._exprParser = _exprParser;
    this._interpolationConfig = _interpolationConfig;
    this._schemaRegistry = _schemaRegistry;
    this.errors = errors;
  }
  get interpolationConfig() {
    return this._interpolationConfig;
  }
  createBoundHostProperties(properties, sourceSpan) {
    const boundProps = [];
    for (const propName of Object.keys(properties)) {
      const expression = properties[propName];
      if (typeof expression === "string") {
        this.parsePropertyBinding(
          propName,
          expression,
          true,
          false,
          sourceSpan,
          sourceSpan.start.offset,
          void 0,
          [],
          // Use the `sourceSpan` for  `keySpan`. This isn't really accurate, but neither is the
          // sourceSpan, as it represents the sourceSpan of the host itself rather than the
          // source of the host binding (which doesn't exist in the template). Regardless,
          // neither of these values are used in Ivy but are only here to satisfy the function
          // signature. This should likely be refactored in the future so that `sourceSpan`
          // isn't being used inaccurately.
          boundProps,
          sourceSpan
        );
      } else {
        this._reportError(`Value of the host property binding "${propName}" needs to be a string representing an expression but got "${expression}" (${typeof expression})`, sourceSpan);
      }
    }
    return boundProps;
  }
  createDirectiveHostEventAsts(hostListeners, sourceSpan) {
    const targetEvents = [];
    for (const propName of Object.keys(hostListeners)) {
      const expression = hostListeners[propName];
      if (typeof expression === "string") {
        this.parseEvent(
          propName,
          expression,
          /* isAssignmentEvent */
          false,
          sourceSpan,
          sourceSpan,
          [],
          targetEvents,
          sourceSpan
        );
      } else {
        this._reportError(`Value of the host listener "${propName}" needs to be a string representing an expression but got "${expression}" (${typeof expression})`, sourceSpan);
      }
    }
    return targetEvents;
  }
  parseInterpolation(value, sourceSpan, interpolatedTokens) {
    const sourceInfo = sourceSpan.start.toString();
    const absoluteOffset = sourceSpan.fullStart.offset;
    try {
      const ast = this._exprParser.parseInterpolation(value, sourceInfo, absoluteOffset, interpolatedTokens, this._interpolationConfig);
      if (ast) this._reportExpressionParserErrors(ast.errors, sourceSpan);
      return ast;
    } catch (e) {
      this._reportError(`${e}`, sourceSpan);
      return this._exprParser.wrapLiteralPrimitive("ERROR", sourceInfo, absoluteOffset);
    }
  }
  /**
   * Similar to `parseInterpolation`, but treats the provided string as a single expression
   * element that would normally appear within the interpolation prefix and suffix (`{{` and `}}`).
   * This is used for parsing the switch expression in ICUs.
   */
  parseInterpolationExpression(expression, sourceSpan) {
    const sourceInfo = sourceSpan.start.toString();
    const absoluteOffset = sourceSpan.start.offset;
    try {
      const ast = this._exprParser.parseInterpolationExpression(expression, sourceInfo, absoluteOffset);
      if (ast) this._reportExpressionParserErrors(ast.errors, sourceSpan);
      return ast;
    } catch (e) {
      this._reportError(`${e}`, sourceSpan);
      return this._exprParser.wrapLiteralPrimitive("ERROR", sourceInfo, absoluteOffset);
    }
  }
  /**
   * Parses the bindings in a microsyntax expression, and converts them to
   * `ParsedProperty` or `ParsedVariable`.
   *
   * @param tplKey template binding name
   * @param tplValue template binding value
   * @param sourceSpan span of template binding relative to entire the template
   * @param absoluteValueOffset start of the tplValue relative to the entire template
   * @param targetMatchableAttrs potential attributes to match in the template
   * @param targetProps target property bindings in the template
   * @param targetVars target variables in the template
   */
  parseInlineTemplateBinding(tplKey, tplValue, sourceSpan, absoluteValueOffset, targetMatchableAttrs, targetProps, targetVars, isIvyAst) {
    const absoluteKeyOffset = sourceSpan.start.offset + TEMPLATE_ATTR_PREFIX$1.length;
    const bindings = this._parseTemplateBindings(tplKey, tplValue, sourceSpan, absoluteKeyOffset, absoluteValueOffset);
    for (const binding of bindings) {
      const bindingSpan = moveParseSourceSpan(sourceSpan, binding.sourceSpan);
      const key = binding.key.source;
      const keySpan = moveParseSourceSpan(sourceSpan, binding.key.span);
      if (binding instanceof VariableBinding) {
        const value = binding.value ? binding.value.source : "$implicit";
        const valueSpan = binding.value ? moveParseSourceSpan(sourceSpan, binding.value.span) : void 0;
        targetVars.push(new ParsedVariable(key, value, bindingSpan, keySpan, valueSpan));
      } else if (binding.value) {
        const srcSpan = isIvyAst ? bindingSpan : sourceSpan;
        const valueSpan = moveParseSourceSpan(sourceSpan, binding.value.ast.sourceSpan);
        this._parsePropertyAst(key, binding.value, false, srcSpan, keySpan, valueSpan, targetMatchableAttrs, targetProps);
      } else {
        targetMatchableAttrs.push([
          key,
          ""
          /* value */
        ]);
        this.parseLiteralAttr(key, null, keySpan, absoluteValueOffset, void 0, targetMatchableAttrs, targetProps, keySpan);
      }
    }
  }
  /**
   * Parses the bindings in a microsyntax expression, e.g.
   * ```html
   *    <tag *tplKey="let value1 = prop; let value2 = localVar">
   * ```
   *
   * @param tplKey template binding name
   * @param tplValue template binding value
   * @param sourceSpan span of template binding relative to entire the template
   * @param absoluteKeyOffset start of the `tplKey`
   * @param absoluteValueOffset start of the `tplValue`
   */
  _parseTemplateBindings(tplKey, tplValue, sourceSpan, absoluteKeyOffset, absoluteValueOffset) {
    const sourceInfo = sourceSpan.start.toString();
    try {
      const bindingsResult = this._exprParser.parseTemplateBindings(tplKey, tplValue, sourceInfo, absoluteKeyOffset, absoluteValueOffset);
      this._reportExpressionParserErrors(bindingsResult.errors, sourceSpan);
      bindingsResult.warnings.forEach((warning) => {
        this._reportError(warning, sourceSpan, ParseErrorLevel.WARNING);
      });
      return bindingsResult.templateBindings;
    } catch (e) {
      this._reportError(`${e}`, sourceSpan);
      return [];
    }
  }
  parseLiteralAttr(name, value, sourceSpan, absoluteOffset, valueSpan, targetMatchableAttrs, targetProps, keySpan) {
    if (isAnimationLabel(name)) {
      name = name.substring(1);
      if (keySpan !== void 0) {
        keySpan = moveParseSourceSpan(keySpan, new AbsoluteSourceSpan(keySpan.start.offset + 1, keySpan.end.offset));
      }
      if (value) {
        this._reportError(`Assigning animation triggers via @prop="exp" attributes with an expression is invalid. Use property bindings (e.g. [@prop]="exp") or use an attribute without a value (e.g. @prop) instead.`, sourceSpan, ParseErrorLevel.ERROR);
      }
      this._parseAnimation(name, value, sourceSpan, absoluteOffset, keySpan, valueSpan, targetMatchableAttrs, targetProps);
    } else {
      targetProps.push(new ParsedProperty(name, this._exprParser.wrapLiteralPrimitive(value, "", absoluteOffset), ParsedPropertyType.LITERAL_ATTR, sourceSpan, keySpan, valueSpan));
    }
  }
  parsePropertyBinding(name, expression, isHost, isPartOfAssignmentBinding, sourceSpan, absoluteOffset, valueSpan, targetMatchableAttrs, targetProps, keySpan) {
    if (name.length === 0) {
      this._reportError(`Property name is missing in binding`, sourceSpan);
    }
    let isAnimationProp = false;
    if (name.startsWith(ANIMATE_PROP_PREFIX)) {
      isAnimationProp = true;
      name = name.substring(ANIMATE_PROP_PREFIX.length);
      if (keySpan !== void 0) {
        keySpan = moveParseSourceSpan(keySpan, new AbsoluteSourceSpan(keySpan.start.offset + ANIMATE_PROP_PREFIX.length, keySpan.end.offset));
      }
    } else if (isAnimationLabel(name)) {
      isAnimationProp = true;
      name = name.substring(1);
      if (keySpan !== void 0) {
        keySpan = moveParseSourceSpan(keySpan, new AbsoluteSourceSpan(keySpan.start.offset + 1, keySpan.end.offset));
      }
    }
    if (isAnimationProp) {
      this._parseAnimation(name, expression, sourceSpan, absoluteOffset, keySpan, valueSpan, targetMatchableAttrs, targetProps);
    } else {
      this._parsePropertyAst(name, this.parseBinding(expression, isHost, valueSpan || sourceSpan, absoluteOffset), isPartOfAssignmentBinding, sourceSpan, keySpan, valueSpan, targetMatchableAttrs, targetProps);
    }
  }
  parsePropertyInterpolation(name, value, sourceSpan, valueSpan, targetMatchableAttrs, targetProps, keySpan, interpolatedTokens) {
    const expr = this.parseInterpolation(value, valueSpan || sourceSpan, interpolatedTokens);
    if (expr) {
      this._parsePropertyAst(name, expr, false, sourceSpan, keySpan, valueSpan, targetMatchableAttrs, targetProps);
      return true;
    }
    return false;
  }
  _parsePropertyAst(name, ast, isPartOfAssignmentBinding, sourceSpan, keySpan, valueSpan, targetMatchableAttrs, targetProps) {
    targetMatchableAttrs.push([name, ast.source]);
    targetProps.push(new ParsedProperty(name, ast, isPartOfAssignmentBinding ? ParsedPropertyType.TWO_WAY : ParsedPropertyType.DEFAULT, sourceSpan, keySpan, valueSpan));
  }
  _parseAnimation(name, expression, sourceSpan, absoluteOffset, keySpan, valueSpan, targetMatchableAttrs, targetProps) {
    if (name.length === 0) {
      this._reportError("Animation trigger is missing", sourceSpan);
    }
    const ast = this.parseBinding(expression || "undefined", false, valueSpan || sourceSpan, absoluteOffset);
    targetMatchableAttrs.push([name, ast.source]);
    targetProps.push(new ParsedProperty(name, ast, ParsedPropertyType.ANIMATION, sourceSpan, keySpan, valueSpan));
  }
  parseBinding(value, isHostBinding2, sourceSpan, absoluteOffset) {
    const sourceInfo = (sourceSpan && sourceSpan.start || "(unknown)").toString();
    try {
      const ast = isHostBinding2 ? this._exprParser.parseSimpleBinding(value, sourceInfo, absoluteOffset, this._interpolationConfig) : this._exprParser.parseBinding(value, sourceInfo, absoluteOffset, this._interpolationConfig);
      if (ast) this._reportExpressionParserErrors(ast.errors, sourceSpan);
      return ast;
    } catch (e) {
      this._reportError(`${e}`, sourceSpan);
      return this._exprParser.wrapLiteralPrimitive("ERROR", sourceInfo, absoluteOffset);
    }
  }
  createBoundElementProperty(elementSelector, boundProp, skipValidation = false, mapPropertyName = true) {
    if (boundProp.isAnimation) {
      return new BoundElementProperty(boundProp.name, BindingType.Animation, SecurityContext2.NONE, boundProp.expression, null, boundProp.sourceSpan, boundProp.keySpan, boundProp.valueSpan);
    }
    let unit = null;
    let bindingType = void 0;
    let boundPropertyName = null;
    const parts = boundProp.name.split(PROPERTY_PARTS_SEPARATOR);
    let securityContexts = void 0;
    if (parts.length > 1) {
      if (parts[0] == ATTRIBUTE_PREFIX) {
        boundPropertyName = parts.slice(1).join(PROPERTY_PARTS_SEPARATOR);
        if (!skipValidation) {
          this._validatePropertyOrAttributeName(boundPropertyName, boundProp.sourceSpan, true);
        }
        securityContexts = calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, boundPropertyName, true);
        const nsSeparatorIdx = boundPropertyName.indexOf(":");
        if (nsSeparatorIdx > -1) {
          const ns = boundPropertyName.substring(0, nsSeparatorIdx);
          const name = boundPropertyName.substring(nsSeparatorIdx + 1);
          boundPropertyName = mergeNsAndName(ns, name);
        }
        bindingType = BindingType.Attribute;
      } else if (parts[0] == CLASS_PREFIX) {
        boundPropertyName = parts[1];
        bindingType = BindingType.Class;
        securityContexts = [SecurityContext2.NONE];
      } else if (parts[0] == STYLE_PREFIX) {
        unit = parts.length > 2 ? parts[2] : null;
        boundPropertyName = parts[1];
        bindingType = BindingType.Style;
        securityContexts = [SecurityContext2.STYLE];
      }
    }
    if (boundPropertyName === null) {
      const mappedPropName = this._schemaRegistry.getMappedPropName(boundProp.name);
      boundPropertyName = mapPropertyName ? mappedPropName : boundProp.name;
      securityContexts = calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, mappedPropName, false);
      bindingType = boundProp.type === ParsedPropertyType.TWO_WAY ? BindingType.TwoWay : BindingType.Property;
      if (!skipValidation) {
        this._validatePropertyOrAttributeName(mappedPropName, boundProp.sourceSpan, false);
      }
    }
    return new BoundElementProperty(boundPropertyName, bindingType, securityContexts[0], boundProp.expression, unit, boundProp.sourceSpan, boundProp.keySpan, boundProp.valueSpan);
  }
  // TODO: keySpan should be required but was made optional to avoid changing VE parser.
  parseEvent(name, expression, isAssignmentEvent, sourceSpan, handlerSpan, targetMatchableAttrs, targetEvents, keySpan) {
    if (name.length === 0) {
      this._reportError(`Event name is missing in binding`, sourceSpan);
    }
    if (isAnimationLabel(name)) {
      name = name.slice(1);
      if (keySpan !== void 0) {
        keySpan = moveParseSourceSpan(keySpan, new AbsoluteSourceSpan(keySpan.start.offset + 1, keySpan.end.offset));
      }
      this._parseAnimationEvent(name, expression, sourceSpan, handlerSpan, targetEvents, keySpan);
    } else {
      this._parseRegularEvent(name, expression, isAssignmentEvent, sourceSpan, handlerSpan, targetMatchableAttrs, targetEvents, keySpan);
    }
  }
  calcPossibleSecurityContexts(selector, propName, isAttribute) {
    const prop = this._schemaRegistry.getMappedPropName(propName);
    return calcPossibleSecurityContexts(this._schemaRegistry, selector, prop, isAttribute);
  }
  _parseAnimationEvent(name, expression, sourceSpan, handlerSpan, targetEvents, keySpan) {
    const matches = splitAtPeriod(name, [name, ""]);
    const eventName = matches[0];
    const phase = matches[1].toLowerCase();
    const ast = this._parseAction(expression, handlerSpan);
    targetEvents.push(new ParsedEvent(eventName, phase, ParsedEventType.Animation, ast, sourceSpan, handlerSpan, keySpan));
    if (eventName.length === 0) {
      this._reportError(`Animation event name is missing in binding`, sourceSpan);
    }
    if (phase) {
      if (phase !== "start" && phase !== "done") {
        this._reportError(`The provided animation output phase value "${phase}" for "@${eventName}" is not supported (use start or done)`, sourceSpan);
      }
    } else {
      this._reportError(`The animation trigger output event (@${eventName}) is missing its phase value name (start or done are currently supported)`, sourceSpan);
    }
  }
  _parseRegularEvent(name, expression, isAssignmentEvent, sourceSpan, handlerSpan, targetMatchableAttrs, targetEvents, keySpan) {
    const [target, eventName] = splitAtColon(name, [null, name]);
    const prevErrorCount = this.errors.length;
    const ast = this._parseAction(expression, handlerSpan);
    const isValid = this.errors.length === prevErrorCount;
    targetMatchableAttrs.push([name, ast.source]);
    if (isAssignmentEvent && isValid && !this._isAllowedAssignmentEvent(ast)) {
      this._reportError("Unsupported expression in a two-way binding", sourceSpan);
    }
    targetEvents.push(new ParsedEvent(eventName, target, isAssignmentEvent ? ParsedEventType.TwoWay : ParsedEventType.Regular, ast, sourceSpan, handlerSpan, keySpan));
  }
  _parseAction(value, sourceSpan) {
    const sourceInfo = (sourceSpan && sourceSpan.start || "(unknown").toString();
    const absoluteOffset = sourceSpan && sourceSpan.start ? sourceSpan.start.offset : 0;
    try {
      const ast = this._exprParser.parseAction(value, sourceInfo, absoluteOffset, this._interpolationConfig);
      if (ast) {
        this._reportExpressionParserErrors(ast.errors, sourceSpan);
      }
      if (!ast || ast.ast instanceof EmptyExpr$1) {
        this._reportError(`Empty expressions are not allowed`, sourceSpan);
        return this._exprParser.wrapLiteralPrimitive("ERROR", sourceInfo, absoluteOffset);
      }
      return ast;
    } catch (e) {
      this._reportError(`${e}`, sourceSpan);
      return this._exprParser.wrapLiteralPrimitive("ERROR", sourceInfo, absoluteOffset);
    }
  }
  _reportError(message, sourceSpan, level = ParseErrorLevel.ERROR, relatedError) {
    this.errors.push(new ParseError(sourceSpan, message, level, relatedError));
  }
  _reportExpressionParserErrors(errors, sourceSpan) {
    for (const error of errors) {
      this._reportError(error.message, sourceSpan, void 0, error);
    }
  }
  /**
   * @param propName the name of the property / attribute
   * @param sourceSpan
   * @param isAttr true when binding to an attribute
   */
  _validatePropertyOrAttributeName(propName, sourceSpan, isAttr) {
    const report = isAttr ? this._schemaRegistry.validateAttribute(propName) : this._schemaRegistry.validateProperty(propName);
    if (report.error) {
      this._reportError(report.msg, sourceSpan, ParseErrorLevel.ERROR);
    }
  }
  /**
   * Returns whether a parsed AST is allowed to be used within the event side of a two-way binding.
   * @param ast Parsed AST to be checked.
   */
  _isAllowedAssignmentEvent(ast) {
    if (ast instanceof ASTWithSource) {
      return this._isAllowedAssignmentEvent(ast.ast);
    }
    if (ast instanceof NonNullAssert) {
      return this._isAllowedAssignmentEvent(ast.expression);
    }
    if (ast instanceof Call && ast.args.length === 1 && ast.receiver instanceof PropertyRead && ast.receiver.name === "$any" && ast.receiver.receiver instanceof ImplicitReceiver && !(ast.receiver.receiver instanceof ThisReceiver)) {
      return this._isAllowedAssignmentEvent(ast.args[0]);
    }
    if (ast instanceof PropertyRead || ast instanceof KeyedRead) {
      return true;
    }
    return false;
  }
};
function isAnimationLabel(name) {
  return name[0] == "@";
}
function calcPossibleSecurityContexts(registry, selector, propName, isAttribute) {
  const ctxs = [];
  CssSelector.parse(selector).forEach((selector2) => {
    const elementNames = selector2.element ? [selector2.element] : registry.allKnownElementNames();
    const notElementNames = new Set(selector2.notSelectors.filter((selector3) => selector3.isElementSelector()).map((selector3) => selector3.element));
    const possibleElementNames = elementNames.filter((elementName) => !notElementNames.has(elementName));
    ctxs.push(...possibleElementNames.map((elementName) => registry.securityContext(elementName, propName, isAttribute)));
  });
  return ctxs.length === 0 ? [SecurityContext2.NONE] : Array.from(new Set(ctxs)).sort();
}
function moveParseSourceSpan(sourceSpan, absoluteSpan) {
  const startDiff = absoluteSpan.start - sourceSpan.start.offset;
  const endDiff = absoluteSpan.end - sourceSpan.end.offset;
  return new ParseSourceSpan(sourceSpan.start.moveBy(startDiff), sourceSpan.end.moveBy(endDiff), sourceSpan.fullStart.moveBy(startDiff), sourceSpan.details);
}
function isStyleUrlResolvable(url) {
  if (url == null || url.length === 0 || url[0] == "/") return false;
  const schemeMatch = url.match(URL_WITH_SCHEMA_REGEXP);
  return schemeMatch === null || schemeMatch[1] == "package" || schemeMatch[1] == "asset";
}
var URL_WITH_SCHEMA_REGEXP = /^([^:/?#]+):/;
var NG_CONTENT_SELECT_ATTR = "select";
var LINK_ELEMENT = "link";
var LINK_STYLE_REL_ATTR = "rel";
var LINK_STYLE_HREF_ATTR = "href";
var LINK_STYLE_REL_VALUE = "stylesheet";
var STYLE_ELEMENT = "style";
var SCRIPT_ELEMENT = "script";
var NG_NON_BINDABLE_ATTR = "ngNonBindable";
var NG_PROJECT_AS = "ngProjectAs";
function preparseElement(ast) {
  let selectAttr = null;
  let hrefAttr = null;
  let relAttr = null;
  let nonBindable = false;
  let projectAs = "";
  ast.attrs.forEach((attr) => {
    const lcAttrName = attr.name.toLowerCase();
    if (lcAttrName == NG_CONTENT_SELECT_ATTR) {
      selectAttr = attr.value;
    } else if (lcAttrName == LINK_STYLE_HREF_ATTR) {
      hrefAttr = attr.value;
    } else if (lcAttrName == LINK_STYLE_REL_ATTR) {
      relAttr = attr.value;
    } else if (attr.name == NG_NON_BINDABLE_ATTR) {
      nonBindable = true;
    } else if (attr.name == NG_PROJECT_AS) {
      if (attr.value.length > 0) {
        projectAs = attr.value;
      }
    }
  });
  selectAttr = normalizeNgContentSelect(selectAttr);
  const nodeName = ast.name.toLowerCase();
  let type = PreparsedElementType.OTHER;
  if (isNgContent(nodeName)) {
    type = PreparsedElementType.NG_CONTENT;
  } else if (nodeName == STYLE_ELEMENT) {
    type = PreparsedElementType.STYLE;
  } else if (nodeName == SCRIPT_ELEMENT) {
    type = PreparsedElementType.SCRIPT;
  } else if (nodeName == LINK_ELEMENT && relAttr == LINK_STYLE_REL_VALUE) {
    type = PreparsedElementType.STYLESHEET;
  }
  return new PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs);
}
var PreparsedElementType;
(function(PreparsedElementType2) {
  PreparsedElementType2[PreparsedElementType2["NG_CONTENT"] = 0] = "NG_CONTENT";
  PreparsedElementType2[PreparsedElementType2["STYLE"] = 1] = "STYLE";
  PreparsedElementType2[PreparsedElementType2["STYLESHEET"] = 2] = "STYLESHEET";
  PreparsedElementType2[PreparsedElementType2["SCRIPT"] = 3] = "SCRIPT";
  PreparsedElementType2[PreparsedElementType2["OTHER"] = 4] = "OTHER";
})(PreparsedElementType || (PreparsedElementType = {}));
var PreparsedElement = class {
  type;
  selectAttr;
  hrefAttr;
  nonBindable;
  projectAs;
  constructor(type, selectAttr, hrefAttr, nonBindable, projectAs) {
    this.type = type;
    this.selectAttr = selectAttr;
    this.hrefAttr = hrefAttr;
    this.nonBindable = nonBindable;
    this.projectAs = projectAs;
  }
};
function normalizeNgContentSelect(selectAttr) {
  if (selectAttr === null || selectAttr.length === 0) {
    return "*";
  }
  return selectAttr;
}
var FOR_LOOP_EXPRESSION_PATTERN = /^\s*([0-9A-Za-z_$]*)\s+of\s+([\S\s]*)/;
var FOR_LOOP_TRACK_PATTERN = /^track\s+([\S\s]*)/;
var CONDITIONAL_ALIAS_PATTERN = /^(as\s+)(.*)/;
var ELSE_IF_PATTERN = /^else[^\S\r\n]+if/;
var FOR_LOOP_LET_PATTERN = /^let\s+([\S\s]*)/;
var IDENTIFIER_PATTERN = /^[$A-Z_][0-9A-Z_$]*$/i;
var CHARACTERS_IN_SURROUNDING_WHITESPACE_PATTERN = /(\s*)(\S+)(\s*)/;
var ALLOWED_FOR_LOOP_LET_VARIABLES = /* @__PURE__ */ new Set(["$index", "$first", "$last", "$even", "$odd", "$count"]);
function isConnectedForLoopBlock(name) {
  return name === "empty";
}
function isConnectedIfLoopBlock(name) {
  return name === "else" || ELSE_IF_PATTERN.test(name);
}
function createIfBlock(ast, connectedBlocks, visitor, bindingParser) {
  const errors = validateIfConnectedBlocks(connectedBlocks);
  const branches = [];
  const mainBlockParams = parseConditionalBlockParameters(ast, errors, bindingParser);
  if (mainBlockParams !== null) {
    branches.push(new IfBlockBranch(mainBlockParams.expression, visitAll(visitor, ast.children, ast.children), mainBlockParams.expressionAlias, ast.sourceSpan, ast.startSourceSpan, ast.endSourceSpan, ast.nameSpan, ast.i18n));
  }
  for (const block of connectedBlocks) {
    if (ELSE_IF_PATTERN.test(block.name)) {
      const params = parseConditionalBlockParameters(block, errors, bindingParser);
      if (params !== null) {
        const children = visitAll(visitor, block.children, block.children);
        branches.push(new IfBlockBranch(params.expression, children, params.expressionAlias, block.sourceSpan, block.startSourceSpan, block.endSourceSpan, block.nameSpan, block.i18n));
      }
    } else if (block.name === "else") {
      const children = visitAll(visitor, block.children, block.children);
      branches.push(new IfBlockBranch(null, children, null, block.sourceSpan, block.startSourceSpan, block.endSourceSpan, block.nameSpan, block.i18n));
    }
  }
  const ifBlockStartSourceSpan = branches.length > 0 ? branches[0].startSourceSpan : ast.startSourceSpan;
  const ifBlockEndSourceSpan = branches.length > 0 ? branches[branches.length - 1].endSourceSpan : ast.endSourceSpan;
  let wholeSourceSpan = ast.sourceSpan;
  const lastBranch = branches[branches.length - 1];
  if (lastBranch !== void 0) {
    wholeSourceSpan = new ParseSourceSpan(ifBlockStartSourceSpan.start, lastBranch.sourceSpan.end);
  }
  return {
    node: new IfBlock(branches, wholeSourceSpan, ast.startSourceSpan, ifBlockEndSourceSpan, ast.nameSpan),
    errors
  };
}
function createForLoop(ast, connectedBlocks, visitor, bindingParser) {
  const errors = [];
  const params = parseForLoopParameters(ast, errors, bindingParser);
  let node = null;
  let empty = null;
  for (const block of connectedBlocks) {
    if (block.name === "empty") {
      if (empty !== null) {
        errors.push(new ParseError(block.sourceSpan, "@for loop can only have one @empty block"));
      } else if (block.parameters.length > 0) {
        errors.push(new ParseError(block.sourceSpan, "@empty block cannot have parameters"));
      } else {
        empty = new ForLoopBlockEmpty(visitAll(visitor, block.children, block.children), block.sourceSpan, block.startSourceSpan, block.endSourceSpan, block.nameSpan, block.i18n);
      }
    } else {
      errors.push(new ParseError(block.sourceSpan, `Unrecognized @for loop block "${block.name}"`));
    }
  }
  if (params !== null) {
    if (params.trackBy === null) {
      errors.push(new ParseError(ast.startSourceSpan, '@for loop must have a "track" expression'));
    } else {
      const endSpan = empty?.endSourceSpan ?? ast.endSourceSpan;
      const sourceSpan = new ParseSourceSpan(ast.sourceSpan.start, endSpan?.end ?? ast.sourceSpan.end);
      node = new ForLoopBlock(params.itemName, params.expression, params.trackBy.expression, params.trackBy.keywordSpan, params.context, visitAll(visitor, ast.children, ast.children), empty, sourceSpan, ast.sourceSpan, ast.startSourceSpan, endSpan, ast.nameSpan, ast.i18n);
    }
  }
  return {
    node,
    errors
  };
}
function createSwitchBlock(ast, visitor, bindingParser) {
  const errors = validateSwitchBlock(ast);
  const primaryExpression = ast.parameters.length > 0 ? parseBlockParameterToBinding(ast.parameters[0], bindingParser) : bindingParser.parseBinding("", false, ast.sourceSpan, 0);
  const cases = [];
  const unknownBlocks = [];
  let defaultCase = null;
  for (const node of ast.children) {
    if (!(node instanceof Block)) {
      continue;
    }
    if ((node.name !== "case" || node.parameters.length === 0) && node.name !== "default") {
      unknownBlocks.push(new UnknownBlock(node.name, node.sourceSpan, node.nameSpan));
      continue;
    }
    const expression = node.name === "case" ? parseBlockParameterToBinding(node.parameters[0], bindingParser) : null;
    const ast2 = new SwitchBlockCase(expression, visitAll(visitor, node.children, node.children), node.sourceSpan, node.startSourceSpan, node.endSourceSpan, node.nameSpan, node.i18n);
    if (expression === null) {
      defaultCase = ast2;
    } else {
      cases.push(ast2);
    }
  }
  if (defaultCase !== null) {
    cases.push(defaultCase);
  }
  return {
    node: new SwitchBlock(primaryExpression, cases, unknownBlocks, ast.sourceSpan, ast.startSourceSpan, ast.endSourceSpan, ast.nameSpan),
    errors
  };
}
function parseForLoopParameters(block, errors, bindingParser) {
  if (block.parameters.length === 0) {
    errors.push(new ParseError(block.startSourceSpan, "@for loop does not have an expression"));
    return null;
  }
  const [expressionParam, ...secondaryParams] = block.parameters;
  const match2 = stripOptionalParentheses(expressionParam, errors)?.match(FOR_LOOP_EXPRESSION_PATTERN);
  if (!match2 || match2[2].trim().length === 0) {
    errors.push(new ParseError(expressionParam.sourceSpan, 'Cannot parse expression. @for loop expression must match the pattern "<identifier> of <expression>"'));
    return null;
  }
  const [, itemName, rawExpression] = match2;
  if (ALLOWED_FOR_LOOP_LET_VARIABLES.has(itemName)) {
    errors.push(new ParseError(expressionParam.sourceSpan, `@for loop item name cannot be one of ${Array.from(ALLOWED_FOR_LOOP_LET_VARIABLES).join(", ")}.`));
  }
  const variableName = expressionParam.expression.split(" ")[0];
  const variableSpan = new ParseSourceSpan(expressionParam.sourceSpan.start, expressionParam.sourceSpan.start.moveBy(variableName.length));
  const result = {
    itemName: new Variable(itemName, "$implicit", variableSpan, variableSpan),
    trackBy: null,
    expression: parseBlockParameterToBinding(expressionParam, bindingParser, rawExpression),
    context: Array.from(ALLOWED_FOR_LOOP_LET_VARIABLES, (variableName2) => {
      const emptySpanAfterForBlockStart = new ParseSourceSpan(block.startSourceSpan.end, block.startSourceSpan.end);
      return new Variable(variableName2, variableName2, emptySpanAfterForBlockStart, emptySpanAfterForBlockStart);
    })
  };
  for (const param of secondaryParams) {
    const letMatch = param.expression.match(FOR_LOOP_LET_PATTERN);
    if (letMatch !== null) {
      const variablesSpan = new ParseSourceSpan(param.sourceSpan.start.moveBy(letMatch[0].length - letMatch[1].length), param.sourceSpan.end);
      parseLetParameter(param.sourceSpan, letMatch[1], variablesSpan, itemName, result.context, errors);
      continue;
    }
    const trackMatch = param.expression.match(FOR_LOOP_TRACK_PATTERN);
    if (trackMatch !== null) {
      if (result.trackBy !== null) {
        errors.push(new ParseError(param.sourceSpan, '@for loop can only have one "track" expression'));
      } else {
        const expression = parseBlockParameterToBinding(param, bindingParser, trackMatch[1]);
        if (expression.ast instanceof EmptyExpr$1) {
          errors.push(new ParseError(block.startSourceSpan, '@for loop must have a "track" expression'));
        }
        const keywordSpan = new ParseSourceSpan(param.sourceSpan.start, param.sourceSpan.start.moveBy("track".length));
        result.trackBy = {
          expression,
          keywordSpan
        };
      }
      continue;
    }
    errors.push(new ParseError(param.sourceSpan, `Unrecognized @for loop parameter "${param.expression}"`));
  }
  return result;
}
function parseLetParameter(sourceSpan, expression, span, loopItemName, context, errors) {
  const parts = expression.split(",");
  let startSpan = span.start;
  for (const part of parts) {
    const expressionParts = part.split("=");
    const name = expressionParts.length === 2 ? expressionParts[0].trim() : "";
    const variableName = expressionParts.length === 2 ? expressionParts[1].trim() : "";
    if (name.length === 0 || variableName.length === 0) {
      errors.push(new ParseError(sourceSpan, `Invalid @for loop "let" parameter. Parameter should match the pattern "<name> = <variable name>"`));
    } else if (!ALLOWED_FOR_LOOP_LET_VARIABLES.has(variableName)) {
      errors.push(new ParseError(sourceSpan, `Unknown "let" parameter variable "${variableName}". The allowed variables are: ${Array.from(ALLOWED_FOR_LOOP_LET_VARIABLES).join(", ")}`));
    } else if (name === loopItemName) {
      errors.push(new ParseError(sourceSpan, `Invalid @for loop "let" parameter. Variable cannot be called "${loopItemName}"`));
    } else if (context.some((v) => v.name === name)) {
      errors.push(new ParseError(sourceSpan, `Duplicate "let" parameter variable "${variableName}"`));
    } else {
      const [, keyLeadingWhitespace, keyName] = expressionParts[0].match(CHARACTERS_IN_SURROUNDING_WHITESPACE_PATTERN) ?? [];
      const keySpan = keyLeadingWhitespace !== void 0 && expressionParts.length === 2 ? new ParseSourceSpan(
        /* strip leading spaces */
        startSpan.moveBy(keyLeadingWhitespace.length),
        /* advance to end of the variable name */
        startSpan.moveBy(keyLeadingWhitespace.length + keyName.length)
      ) : span;
      let valueSpan = void 0;
      if (expressionParts.length === 2) {
        const [, valueLeadingWhitespace, implicit] = expressionParts[1].match(CHARACTERS_IN_SURROUNDING_WHITESPACE_PATTERN) ?? [];
        valueSpan = valueLeadingWhitespace !== void 0 ? new ParseSourceSpan(startSpan.moveBy(expressionParts[0].length + 1 + valueLeadingWhitespace.length), startSpan.moveBy(expressionParts[0].length + 1 + valueLeadingWhitespace.length + implicit.length)) : void 0;
      }
      const sourceSpan2 = new ParseSourceSpan(keySpan.start, valueSpan?.end ?? keySpan.end);
      context.push(new Variable(name, variableName, sourceSpan2, keySpan, valueSpan));
    }
    startSpan = startSpan.moveBy(
      part.length + 1
      /* add 1 to move past the comma */
    );
  }
}
function validateIfConnectedBlocks(connectedBlocks) {
  const errors = [];
  let hasElse = false;
  for (let i = 0; i < connectedBlocks.length; i++) {
    const block = connectedBlocks[i];
    if (block.name === "else") {
      if (hasElse) {
        errors.push(new ParseError(block.startSourceSpan, "Conditional can only have one @else block"));
      } else if (connectedBlocks.length > 1 && i < connectedBlocks.length - 1) {
        errors.push(new ParseError(block.startSourceSpan, "@else block must be last inside the conditional"));
      } else if (block.parameters.length > 0) {
        errors.push(new ParseError(block.startSourceSpan, "@else block cannot have parameters"));
      }
      hasElse = true;
    } else if (!ELSE_IF_PATTERN.test(block.name)) {
      errors.push(new ParseError(block.startSourceSpan, `Unrecognized conditional block @${block.name}`));
    }
  }
  return errors;
}
function validateSwitchBlock(ast) {
  const errors = [];
  let hasDefault = false;
  if (ast.parameters.length !== 1) {
    errors.push(new ParseError(ast.startSourceSpan, "@switch block must have exactly one parameter"));
    return errors;
  }
  for (const node of ast.children) {
    if (node instanceof Comment2 || node instanceof Text3 && node.value.trim().length === 0) {
      continue;
    }
    if (!(node instanceof Block) || node.name !== "case" && node.name !== "default") {
      errors.push(new ParseError(node.sourceSpan, "@switch block can only contain @case and @default blocks"));
      continue;
    }
    if (node.name === "default") {
      if (hasDefault) {
        errors.push(new ParseError(node.startSourceSpan, "@switch block can only have one @default block"));
      } else if (node.parameters.length > 0) {
        errors.push(new ParseError(node.startSourceSpan, "@default block cannot have parameters"));
      }
      hasDefault = true;
    } else if (node.name === "case" && node.parameters.length !== 1) {
      errors.push(new ParseError(node.startSourceSpan, "@case block must have exactly one parameter"));
    }
  }
  return errors;
}
function parseBlockParameterToBinding(ast, bindingParser, part) {
  let start;
  let end;
  if (typeof part === "string") {
    start = Math.max(0, ast.expression.lastIndexOf(part));
    end = start + part.length;
  } else {
    start = 0;
    end = ast.expression.length;
  }
  return bindingParser.parseBinding(ast.expression.slice(start, end), false, ast.sourceSpan, ast.sourceSpan.start.offset + start);
}
function parseConditionalBlockParameters(block, errors, bindingParser) {
  if (block.parameters.length === 0) {
    errors.push(new ParseError(block.startSourceSpan, "Conditional block does not have an expression"));
    return null;
  }
  const expression = parseBlockParameterToBinding(block.parameters[0], bindingParser);
  let expressionAlias = null;
  for (let i = 1; i < block.parameters.length; i++) {
    const param = block.parameters[i];
    const aliasMatch = param.expression.match(CONDITIONAL_ALIAS_PATTERN);
    if (aliasMatch === null) {
      errors.push(new ParseError(param.sourceSpan, `Unrecognized conditional parameter "${param.expression}"`));
    } else if (block.name !== "if") {
      errors.push(new ParseError(param.sourceSpan, '"as" expression is only allowed on the primary @if block'));
    } else if (expressionAlias !== null) {
      errors.push(new ParseError(param.sourceSpan, 'Conditional can only have one "as" expression'));
    } else {
      const name = aliasMatch[2].trim();
      if (IDENTIFIER_PATTERN.test(name)) {
        const variableStart = param.sourceSpan.start.moveBy(aliasMatch[1].length);
        const variableSpan = new ParseSourceSpan(variableStart, variableStart.moveBy(name.length));
        expressionAlias = new Variable(name, name, variableSpan, variableSpan);
      } else {
        errors.push(new ParseError(param.sourceSpan, '"as" expression must be a valid JavaScript identifier'));
      }
    }
  }
  return {
    expression,
    expressionAlias
  };
}
function stripOptionalParentheses(param, errors) {
  const expression = param.expression;
  const spaceRegex = /^\s$/;
  let openParens = 0;
  let start = 0;
  let end = expression.length - 1;
  for (let i = 0; i < expression.length; i++) {
    const char = expression[i];
    if (char === "(") {
      start = i + 1;
      openParens++;
    } else if (spaceRegex.test(char)) {
      continue;
    } else {
      break;
    }
  }
  if (openParens === 0) {
    return expression;
  }
  for (let i = expression.length - 1; i > -1; i--) {
    const char = expression[i];
    if (char === ")") {
      end = i;
      openParens--;
      if (openParens === 0) {
        break;
      }
    } else if (spaceRegex.test(char)) {
      continue;
    } else {
      break;
    }
  }
  if (openParens !== 0) {
    errors.push(new ParseError(param.sourceSpan, "Unclosed parentheses in expression"));
    return null;
  }
  return expression.slice(start, end);
}
var TIME_PATTERN = /^\d+\.?\d*(ms|s)?$/;
var SEPARATOR_PATTERN = /^\s$/;
var COMMA_DELIMITED_SYNTAX = /* @__PURE__ */ new Map([
  [$LBRACE, $RBRACE],
  // Object literals
  [$LBRACKET, $RBRACKET],
  // Array literals
  [$LPAREN, $RPAREN]
  // Function calls
]);
var OnTriggerType;
(function(OnTriggerType2) {
  OnTriggerType2["IDLE"] = "idle";
  OnTriggerType2["TIMER"] = "timer";
  OnTriggerType2["INTERACTION"] = "interaction";
  OnTriggerType2["IMMEDIATE"] = "immediate";
  OnTriggerType2["HOVER"] = "hover";
  OnTriggerType2["VIEWPORT"] = "viewport";
  OnTriggerType2["NEVER"] = "never";
})(OnTriggerType || (OnTriggerType = {}));
function parseNeverTrigger({
  expression,
  sourceSpan
}, triggers, errors) {
  const neverIndex = expression.indexOf("never");
  const neverSourceSpan = new ParseSourceSpan(sourceSpan.start.moveBy(neverIndex), sourceSpan.start.moveBy(neverIndex + "never".length));
  const prefetchSpan = getPrefetchSpan(expression, sourceSpan);
  const hydrateSpan = getHydrateSpan(expression, sourceSpan);
  if (neverIndex === -1) {
    errors.push(new ParseError(sourceSpan, `Could not find "never" keyword in expression`));
  } else {
    trackTrigger("never", triggers, errors, new NeverDeferredTrigger(neverSourceSpan, sourceSpan, prefetchSpan, null, hydrateSpan));
  }
}
function parseWhenTrigger({
  expression,
  sourceSpan
}, bindingParser, triggers, errors) {
  const whenIndex = expression.indexOf("when");
  const whenSourceSpan = new ParseSourceSpan(sourceSpan.start.moveBy(whenIndex), sourceSpan.start.moveBy(whenIndex + "when".length));
  const prefetchSpan = getPrefetchSpan(expression, sourceSpan);
  const hydrateSpan = getHydrateSpan(expression, sourceSpan);
  if (whenIndex === -1) {
    errors.push(new ParseError(sourceSpan, `Could not find "when" keyword in expression`));
  } else {
    const start = getTriggerParametersStart(expression, whenIndex + 1);
    const parsed = bindingParser.parseBinding(expression.slice(start), false, sourceSpan, sourceSpan.start.offset + start);
    trackTrigger("when", triggers, errors, new BoundDeferredTrigger(parsed, sourceSpan, prefetchSpan, whenSourceSpan, hydrateSpan));
  }
}
function parseOnTrigger({
  expression,
  sourceSpan
}, triggers, errors, placeholder) {
  const onIndex = expression.indexOf("on");
  const onSourceSpan = new ParseSourceSpan(sourceSpan.start.moveBy(onIndex), sourceSpan.start.moveBy(onIndex + "on".length));
  const prefetchSpan = getPrefetchSpan(expression, sourceSpan);
  const hydrateSpan = getHydrateSpan(expression, sourceSpan);
  if (onIndex === -1) {
    errors.push(new ParseError(sourceSpan, `Could not find "on" keyword in expression`));
  } else {
    const start = getTriggerParametersStart(expression, onIndex + 1);
    const parser = new OnTriggerParser(expression, start, sourceSpan, triggers, errors, expression.startsWith("hydrate") ? validateHydrateReferenceBasedTrigger : validatePlainReferenceBasedTrigger, placeholder, prefetchSpan, onSourceSpan, hydrateSpan);
    parser.parse();
  }
}
function getPrefetchSpan(expression, sourceSpan) {
  if (!expression.startsWith("prefetch")) {
    return null;
  }
  return new ParseSourceSpan(sourceSpan.start, sourceSpan.start.moveBy("prefetch".length));
}
function getHydrateSpan(expression, sourceSpan) {
  if (!expression.startsWith("hydrate")) {
    return null;
  }
  return new ParseSourceSpan(sourceSpan.start, sourceSpan.start.moveBy("hydrate".length));
}
var OnTriggerParser = class {
  expression;
  start;
  span;
  triggers;
  errors;
  validator;
  placeholder;
  prefetchSpan;
  onSourceSpan;
  hydrateSpan;
  index = 0;
  tokens;
  constructor(expression, start, span, triggers, errors, validator, placeholder, prefetchSpan, onSourceSpan, hydrateSpan) {
    this.expression = expression;
    this.start = start;
    this.span = span;
    this.triggers = triggers;
    this.errors = errors;
    this.validator = validator;
    this.placeholder = placeholder;
    this.prefetchSpan = prefetchSpan;
    this.onSourceSpan = onSourceSpan;
    this.hydrateSpan = hydrateSpan;
    this.tokens = new Lexer().tokenize(expression.slice(start));
  }
  parse() {
    while (this.tokens.length > 0 && this.index < this.tokens.length) {
      const token = this.token();
      if (!token.isIdentifier()) {
        this.unexpectedToken(token);
        break;
      }
      if (this.isFollowedByOrLast($COMMA)) {
        this.consumeTrigger(token, []);
        this.advance();
      } else if (this.isFollowedByOrLast($LPAREN)) {
        this.advance();
        const prevErrors = this.errors.length;
        const parameters = this.consumeParameters();
        if (this.errors.length !== prevErrors) {
          break;
        }
        this.consumeTrigger(token, parameters);
        this.advance();
      } else if (this.index < this.tokens.length - 1) {
        this.unexpectedToken(this.tokens[this.index + 1]);
      }
      this.advance();
    }
  }
  advance() {
    this.index++;
  }
  isFollowedByOrLast(char) {
    if (this.index === this.tokens.length - 1) {
      return true;
    }
    return this.tokens[this.index + 1].isCharacter(char);
  }
  token() {
    return this.tokens[Math.min(this.index, this.tokens.length - 1)];
  }
  consumeTrigger(identifier, parameters) {
    const triggerNameStartSpan = this.span.start.moveBy(this.start + identifier.index - this.tokens[0].index);
    const nameSpan = new ParseSourceSpan(triggerNameStartSpan, triggerNameStartSpan.moveBy(identifier.strValue.length));
    const endSpan = triggerNameStartSpan.moveBy(this.token().end - identifier.index);
    const isFirstTrigger = identifier.index === 0;
    const onSourceSpan = isFirstTrigger ? this.onSourceSpan : null;
    const prefetchSourceSpan = isFirstTrigger ? this.prefetchSpan : null;
    const hydrateSourceSpan = isFirstTrigger ? this.hydrateSpan : null;
    const sourceSpan = new ParseSourceSpan(isFirstTrigger ? this.span.start : triggerNameStartSpan, endSpan);
    try {
      switch (identifier.toString()) {
        case OnTriggerType.IDLE:
          this.trackTrigger("idle", createIdleTrigger(parameters, nameSpan, sourceSpan, prefetchSourceSpan, onSourceSpan, hydrateSourceSpan));
          break;
        case OnTriggerType.TIMER:
          this.trackTrigger("timer", createTimerTrigger(parameters, nameSpan, sourceSpan, this.prefetchSpan, this.onSourceSpan, this.hydrateSpan));
          break;
        case OnTriggerType.INTERACTION:
          this.trackTrigger("interaction", createInteractionTrigger(parameters, nameSpan, sourceSpan, this.prefetchSpan, this.onSourceSpan, this.hydrateSpan, this.placeholder, this.validator));
          break;
        case OnTriggerType.IMMEDIATE:
          this.trackTrigger("immediate", createImmediateTrigger(parameters, nameSpan, sourceSpan, this.prefetchSpan, this.onSourceSpan, this.hydrateSpan));
          break;
        case OnTriggerType.HOVER:
          this.trackTrigger("hover", createHoverTrigger(parameters, nameSpan, sourceSpan, this.prefetchSpan, this.onSourceSpan, this.hydrateSpan, this.placeholder, this.validator));
          break;
        case OnTriggerType.VIEWPORT:
          this.trackTrigger("viewport", createViewportTrigger(parameters, nameSpan, sourceSpan, this.prefetchSpan, this.onSourceSpan, this.hydrateSpan, this.placeholder, this.validator));
          break;
        default:
          throw new Error(`Unrecognized trigger type "${identifier}"`);
      }
    } catch (e) {
      this.error(identifier, e.message);
    }
  }
  consumeParameters() {
    const parameters = [];
    if (!this.token().isCharacter($LPAREN)) {
      this.unexpectedToken(this.token());
      return parameters;
    }
    this.advance();
    const commaDelimStack = [];
    let current = "";
    while (this.index < this.tokens.length) {
      const token = this.token();
      if (token.isCharacter($RPAREN) && commaDelimStack.length === 0) {
        if (current.length) {
          parameters.push(current);
        }
        break;
      }
      if (token.type === TokenType.Character && COMMA_DELIMITED_SYNTAX.has(token.numValue)) {
        commaDelimStack.push(COMMA_DELIMITED_SYNTAX.get(token.numValue));
      }
      if (commaDelimStack.length > 0 && token.isCharacter(commaDelimStack[commaDelimStack.length - 1])) {
        commaDelimStack.pop();
      }
      if (commaDelimStack.length === 0 && token.isCharacter($COMMA) && current.length > 0) {
        parameters.push(current);
        current = "";
        this.advance();
        continue;
      }
      current += this.tokenText();
      this.advance();
    }
    if (!this.token().isCharacter($RPAREN) || commaDelimStack.length > 0) {
      this.error(this.token(), "Unexpected end of expression");
    }
    if (this.index < this.tokens.length - 1 && !this.tokens[this.index + 1].isCharacter($COMMA)) {
      this.unexpectedToken(this.tokens[this.index + 1]);
    }
    return parameters;
  }
  tokenText() {
    return this.expression.slice(this.start + this.token().index, this.start + this.token().end);
  }
  trackTrigger(name, trigger) {
    trackTrigger(name, this.triggers, this.errors, trigger);
  }
  error(token, message) {
    const newStart = this.span.start.moveBy(this.start + token.index);
    const newEnd = newStart.moveBy(token.end - token.index);
    this.errors.push(new ParseError(new ParseSourceSpan(newStart, newEnd), message));
  }
  unexpectedToken(token) {
    this.error(token, `Unexpected token "${token}"`);
  }
};
function trackTrigger(name, allTriggers, errors, trigger) {
  if (allTriggers[name]) {
    errors.push(new ParseError(trigger.sourceSpan, `Duplicate "${name}" trigger is not allowed`));
  } else {
    allTriggers[name] = trigger;
  }
}
function createIdleTrigger(parameters, nameSpan, sourceSpan, prefetchSpan, onSourceSpan, hydrateSpan) {
  if (parameters.length > 0) {
    throw new Error(`"${OnTriggerType.IDLE}" trigger cannot have parameters`);
  }
  return new IdleDeferredTrigger(nameSpan, sourceSpan, prefetchSpan, onSourceSpan, hydrateSpan);
}
function createTimerTrigger(parameters, nameSpan, sourceSpan, prefetchSpan, onSourceSpan, hydrateSpan) {
  if (parameters.length !== 1) {
    throw new Error(`"${OnTriggerType.TIMER}" trigger must have exactly one parameter`);
  }
  const delay = parseDeferredTime(parameters[0]);
  if (delay === null) {
    throw new Error(`Could not parse time value of trigger "${OnTriggerType.TIMER}"`);
  }
  return new TimerDeferredTrigger(delay, nameSpan, sourceSpan, prefetchSpan, onSourceSpan, hydrateSpan);
}
function createImmediateTrigger(parameters, nameSpan, sourceSpan, prefetchSpan, onSourceSpan, hydrateSpan) {
  if (parameters.length > 0) {
    throw new Error(`"${OnTriggerType.IMMEDIATE}" trigger cannot have parameters`);
  }
  return new ImmediateDeferredTrigger(nameSpan, sourceSpan, prefetchSpan, onSourceSpan, hydrateSpan);
}
function createHoverTrigger(parameters, nameSpan, sourceSpan, prefetchSpan, onSourceSpan, hydrateSpan, placeholder, validator) {
  validator(OnTriggerType.HOVER, parameters, placeholder);
  return new HoverDeferredTrigger(parameters[0] ?? null, nameSpan, sourceSpan, prefetchSpan, onSourceSpan, hydrateSpan);
}
function createInteractionTrigger(parameters, nameSpan, sourceSpan, prefetchSpan, onSourceSpan, hydrateSpan, placeholder, validator) {
  validator(OnTriggerType.INTERACTION, parameters, placeholder);
  return new InteractionDeferredTrigger(parameters[0] ?? null, nameSpan, sourceSpan, prefetchSpan, onSourceSpan, hydrateSpan);
}
function createViewportTrigger(parameters, nameSpan, sourceSpan, prefetchSpan, onSourceSpan, hydrateSpan, placeholder, validator) {
  validator(OnTriggerType.VIEWPORT, parameters, placeholder);
  return new ViewportDeferredTrigger(parameters[0] ?? null, nameSpan, sourceSpan, prefetchSpan, onSourceSpan, hydrateSpan);
}
function validatePlainReferenceBasedTrigger(type, parameters, placeholder) {
  if (parameters.length > 1) {
    throw new Error(`"${type}" trigger can only have zero or one parameters`);
  }
  if (parameters.length === 0) {
    if (placeholder === null) {
      throw new Error(`"${type}" trigger with no parameters can only be placed on an @defer that has a @placeholder block`);
    }
    if (placeholder.children.length !== 1 || !(placeholder.children[0] instanceof Element$1)) {
      throw new Error(`"${type}" trigger with no parameters can only be placed on an @defer that has a @placeholder block with exactly one root element node`);
    }
  }
}
function validateHydrateReferenceBasedTrigger(type, parameters) {
  if (parameters.length > 0) {
    throw new Error(`Hydration trigger "${type}" cannot have parameters`);
  }
}
function getTriggerParametersStart(value, startPosition = 0) {
  let hasFoundSeparator = false;
  for (let i = startPosition; i < value.length; i++) {
    if (SEPARATOR_PATTERN.test(value[i])) {
      hasFoundSeparator = true;
    } else if (hasFoundSeparator) {
      return i;
    }
  }
  return -1;
}
function parseDeferredTime(value) {
  const match2 = value.match(TIME_PATTERN);
  if (!match2) {
    return null;
  }
  const [time, units] = match2;
  return parseFloat(time) * (units === "s" ? 1e3 : 1);
}
var PREFETCH_WHEN_PATTERN = /^prefetch\s+when\s/;
var PREFETCH_ON_PATTERN = /^prefetch\s+on\s/;
var HYDRATE_WHEN_PATTERN = /^hydrate\s+when\s/;
var HYDRATE_ON_PATTERN = /^hydrate\s+on\s/;
var HYDRATE_NEVER_PATTERN = /^hydrate\s+never(\s*)$/;
var MINIMUM_PARAMETER_PATTERN = /^minimum\s/;
var AFTER_PARAMETER_PATTERN = /^after\s/;
var WHEN_PARAMETER_PATTERN = /^when\s/;
var ON_PARAMETER_PATTERN = /^on\s/;
function isConnectedDeferLoopBlock(name) {
  return name === "placeholder" || name === "loading" || name === "error";
}
function createDeferredBlock(ast, connectedBlocks, visitor, bindingParser) {
  const errors = [];
  const {
    placeholder,
    loading,
    error
  } = parseConnectedBlocks(connectedBlocks, errors, visitor);
  const {
    triggers,
    prefetchTriggers,
    hydrateTriggers
  } = parsePrimaryTriggers(ast, bindingParser, errors, placeholder);
  let lastEndSourceSpan = ast.endSourceSpan;
  let endOfLastSourceSpan = ast.sourceSpan.end;
  if (connectedBlocks.length > 0) {
    const lastConnectedBlock = connectedBlocks[connectedBlocks.length - 1];
    lastEndSourceSpan = lastConnectedBlock.endSourceSpan;
    endOfLastSourceSpan = lastConnectedBlock.sourceSpan.end;
  }
  const sourceSpanWithConnectedBlocks = new ParseSourceSpan(ast.sourceSpan.start, endOfLastSourceSpan);
  const node = new DeferredBlock(visitAll(visitor, ast.children, ast.children), triggers, prefetchTriggers, hydrateTriggers, placeholder, loading, error, ast.nameSpan, sourceSpanWithConnectedBlocks, ast.sourceSpan, ast.startSourceSpan, lastEndSourceSpan, ast.i18n);
  return {
    node,
    errors
  };
}
function parseConnectedBlocks(connectedBlocks, errors, visitor) {
  let placeholder = null;
  let loading = null;
  let error = null;
  for (const block of connectedBlocks) {
    try {
      if (!isConnectedDeferLoopBlock(block.name)) {
        errors.push(new ParseError(block.startSourceSpan, `Unrecognized block "@${block.name}"`));
        break;
      }
      switch (block.name) {
        case "placeholder":
          if (placeholder !== null) {
            errors.push(new ParseError(block.startSourceSpan, `@defer block can only have one @placeholder block`));
          } else {
            placeholder = parsePlaceholderBlock(block, visitor);
          }
          break;
        case "loading":
          if (loading !== null) {
            errors.push(new ParseError(block.startSourceSpan, `@defer block can only have one @loading block`));
          } else {
            loading = parseLoadingBlock(block, visitor);
          }
          break;
        case "error":
          if (error !== null) {
            errors.push(new ParseError(block.startSourceSpan, `@defer block can only have one @error block`));
          } else {
            error = parseErrorBlock(block, visitor);
          }
          break;
      }
    } catch (e) {
      errors.push(new ParseError(block.startSourceSpan, e.message));
    }
  }
  return {
    placeholder,
    loading,
    error
  };
}
function parsePlaceholderBlock(ast, visitor) {
  let minimumTime = null;
  for (const param of ast.parameters) {
    if (MINIMUM_PARAMETER_PATTERN.test(param.expression)) {
      if (minimumTime != null) {
        throw new Error(`@placeholder block can only have one "minimum" parameter`);
      }
      const parsedTime = parseDeferredTime(param.expression.slice(getTriggerParametersStart(param.expression)));
      if (parsedTime === null) {
        throw new Error(`Could not parse time value of parameter "minimum"`);
      }
      minimumTime = parsedTime;
    } else {
      throw new Error(`Unrecognized parameter in @placeholder block: "${param.expression}"`);
    }
  }
  return new DeferredBlockPlaceholder(visitAll(visitor, ast.children, ast.children), minimumTime, ast.nameSpan, ast.sourceSpan, ast.startSourceSpan, ast.endSourceSpan, ast.i18n);
}
function parseLoadingBlock(ast, visitor) {
  let afterTime = null;
  let minimumTime = null;
  for (const param of ast.parameters) {
    if (AFTER_PARAMETER_PATTERN.test(param.expression)) {
      if (afterTime != null) {
        throw new Error(`@loading block can only have one "after" parameter`);
      }
      const parsedTime = parseDeferredTime(param.expression.slice(getTriggerParametersStart(param.expression)));
      if (parsedTime === null) {
        throw new Error(`Could not parse time value of parameter "after"`);
      }
      afterTime = parsedTime;
    } else if (MINIMUM_PARAMETER_PATTERN.test(param.expression)) {
      if (minimumTime != null) {
        throw new Error(`@loading block can only have one "minimum" parameter`);
      }
      const parsedTime = parseDeferredTime(param.expression.slice(getTriggerParametersStart(param.expression)));
      if (parsedTime === null) {
        throw new Error(`Could not parse time value of parameter "minimum"`);
      }
      minimumTime = parsedTime;
    } else {
      throw new Error(`Unrecognized parameter in @loading block: "${param.expression}"`);
    }
  }
  return new DeferredBlockLoading(visitAll(visitor, ast.children, ast.children), afterTime, minimumTime, ast.nameSpan, ast.sourceSpan, ast.startSourceSpan, ast.endSourceSpan, ast.i18n);
}
function parseErrorBlock(ast, visitor) {
  if (ast.parameters.length > 0) {
    throw new Error(`@error block cannot have parameters`);
  }
  return new DeferredBlockError(visitAll(visitor, ast.children, ast.children), ast.nameSpan, ast.sourceSpan, ast.startSourceSpan, ast.endSourceSpan, ast.i18n);
}
function parsePrimaryTriggers(ast, bindingParser, errors, placeholder) {
  const triggers = {};
  const prefetchTriggers = {};
  const hydrateTriggers = {};
  for (const param of ast.parameters) {
    if (WHEN_PARAMETER_PATTERN.test(param.expression)) {
      parseWhenTrigger(param, bindingParser, triggers, errors);
    } else if (ON_PARAMETER_PATTERN.test(param.expression)) {
      parseOnTrigger(param, triggers, errors, placeholder);
    } else if (PREFETCH_WHEN_PATTERN.test(param.expression)) {
      parseWhenTrigger(param, bindingParser, prefetchTriggers, errors);
    } else if (PREFETCH_ON_PATTERN.test(param.expression)) {
      parseOnTrigger(param, prefetchTriggers, errors, placeholder);
    } else if (HYDRATE_WHEN_PATTERN.test(param.expression)) {
      parseWhenTrigger(param, bindingParser, hydrateTriggers, errors);
    } else if (HYDRATE_ON_PATTERN.test(param.expression)) {
      parseOnTrigger(param, hydrateTriggers, errors, placeholder);
    } else if (HYDRATE_NEVER_PATTERN.test(param.expression)) {
      parseNeverTrigger(param, hydrateTriggers, errors);
    } else {
      errors.push(new ParseError(param.sourceSpan, "Unrecognized trigger"));
    }
  }
  if (hydrateTriggers.never && Object.keys(hydrateTriggers).length > 1) {
    errors.push(new ParseError(ast.startSourceSpan, "Cannot specify additional `hydrate` triggers if `hydrate never` is present"));
  }
  return {
    triggers,
    prefetchTriggers,
    hydrateTriggers
  };
}
var BIND_NAME_REGEXP = /^(?:(bind-)|(let-)|(ref-|#)|(on-)|(bindon-)|(@))(.*)$/;
var KW_BIND_IDX = 1;
var KW_LET_IDX = 2;
var KW_REF_IDX = 3;
var KW_ON_IDX = 4;
var KW_BINDON_IDX = 5;
var KW_AT_IDX = 6;
var IDENT_KW_IDX = 7;
var BINDING_DELIMS = {
  BANANA_BOX: {
    start: "[(",
    end: ")]"
  },
  PROPERTY: {
    start: "[",
    end: "]"
  },
  EVENT: {
    start: "(",
    end: ")"
  }
};
var TEMPLATE_ATTR_PREFIX = "*";
function htmlAstToRender3Ast(htmlNodes, bindingParser, options) {
  const transformer = new HtmlAstToIvyAst(bindingParser, options);
  const ivyNodes = visitAll(transformer, htmlNodes, htmlNodes);
  const allErrors = bindingParser.errors.concat(transformer.errors);
  const result = {
    nodes: ivyNodes,
    errors: allErrors,
    styleUrls: transformer.styleUrls,
    styles: transformer.styles,
    ngContentSelectors: transformer.ngContentSelectors
  };
  if (options.collectCommentNodes) {
    result.commentNodes = transformer.commentNodes;
  }
  return result;
}
var HtmlAstToIvyAst = class {
  bindingParser;
  options;
  errors = [];
  styles = [];
  styleUrls = [];
  ngContentSelectors = [];
  // This array will be populated if `Render3ParseOptions['collectCommentNodes']` is true
  commentNodes = [];
  inI18nBlock = false;
  /**
   * Keeps track of the nodes that have been processed already when previous nodes were visited.
   * These are typically blocks connected to other blocks or text nodes between connected blocks.
   */
  processedNodes = /* @__PURE__ */ new Set();
  constructor(bindingParser, options) {
    this.bindingParser = bindingParser;
    this.options = options;
  }
  // HTML visitor
  visitElement(element2) {
    const isI18nRootElement = isI18nRootNode(element2.i18n);
    if (isI18nRootElement) {
      if (this.inI18nBlock) {
        this.reportError("Cannot mark an element as translatable inside of a translatable section. Please remove the nested i18n marker.", element2.sourceSpan);
      }
      this.inI18nBlock = true;
    }
    const preparsedElement = preparseElement(element2);
    if (preparsedElement.type === PreparsedElementType.SCRIPT) {
      return null;
    } else if (preparsedElement.type === PreparsedElementType.STYLE) {
      const contents = textContents(element2);
      if (contents !== null) {
        this.styles.push(contents);
      }
      return null;
    } else if (preparsedElement.type === PreparsedElementType.STYLESHEET && isStyleUrlResolvable(preparsedElement.hrefAttr)) {
      this.styleUrls.push(preparsedElement.hrefAttr);
      return null;
    }
    const isTemplateElement = isNgTemplate(element2.name);
    const parsedProperties = [];
    const boundEvents = [];
    const variables = [];
    const references = [];
    const attributes = [];
    const i18nAttrsMeta = {};
    const templateParsedProperties = [];
    const templateVariables = [];
    let elementHasInlineTemplate = false;
    for (const attribute2 of element2.attrs) {
      let hasBinding = false;
      const normalizedName = normalizeAttributeName(attribute2.name);
      let isTemplateBinding = false;
      if (attribute2.i18n) {
        i18nAttrsMeta[attribute2.name] = attribute2.i18n;
      }
      if (normalizedName.startsWith(TEMPLATE_ATTR_PREFIX)) {
        if (elementHasInlineTemplate) {
          this.reportError(`Can't have multiple template bindings on one element. Use only one attribute prefixed with *`, attribute2.sourceSpan);
        }
        isTemplateBinding = true;
        elementHasInlineTemplate = true;
        const templateValue = attribute2.value;
        const templateKey = normalizedName.substring(TEMPLATE_ATTR_PREFIX.length);
        const parsedVariables = [];
        const absoluteValueOffset = attribute2.valueSpan ? attribute2.valueSpan.start.offset : (
          // If there is no value span the attribute does not have a value, like `attr` in
          //`<div attr></div>`. In this case, point to one character beyond the last character of
          // the attribute name.
          attribute2.sourceSpan.start.offset + attribute2.name.length
        );
        this.bindingParser.parseInlineTemplateBinding(
          templateKey,
          templateValue,
          attribute2.sourceSpan,
          absoluteValueOffset,
          [],
          templateParsedProperties,
          parsedVariables,
          true
          /* isIvyAst */
        );
        templateVariables.push(...parsedVariables.map((v) => new Variable(v.name, v.value, v.sourceSpan, v.keySpan, v.valueSpan)));
      } else {
        hasBinding = this.parseAttribute(isTemplateElement, attribute2, [], parsedProperties, boundEvents, variables, references);
      }
      if (!hasBinding && !isTemplateBinding) {
        attributes.push(this.visitAttribute(attribute2));
      }
    }
    let children;
    if (preparsedElement.nonBindable) {
      children = visitAll(NON_BINDABLE_VISITOR, element2.children).flat(Infinity);
    } else {
      children = visitAll(this, element2.children, element2.children);
    }
    let parsedElement;
    if (preparsedElement.type === PreparsedElementType.NG_CONTENT) {
      const selector = preparsedElement.selectAttr;
      const attrs = element2.attrs.map((attr) => this.visitAttribute(attr));
      parsedElement = new Content(selector, attrs, children, element2.sourceSpan, element2.i18n);
      this.ngContentSelectors.push(selector);
    } else if (isTemplateElement) {
      const attrs = this.extractAttributes(element2.name, parsedProperties, i18nAttrsMeta);
      parsedElement = new Template(element2.name, attributes, attrs.bound, boundEvents, [
        /* no template attributes */
      ], children, references, variables, element2.sourceSpan, element2.startSourceSpan, element2.endSourceSpan, element2.i18n);
    } else {
      const attrs = this.extractAttributes(element2.name, parsedProperties, i18nAttrsMeta);
      parsedElement = new Element$1(element2.name, attributes, attrs.bound, boundEvents, children, references, element2.sourceSpan, element2.startSourceSpan, element2.endSourceSpan, element2.i18n);
    }
    if (elementHasInlineTemplate) {
      const attrs = this.extractAttributes("ng-template", templateParsedProperties, i18nAttrsMeta);
      const templateAttrs = [];
      attrs.literal.forEach((attr) => templateAttrs.push(attr));
      attrs.bound.forEach((attr) => templateAttrs.push(attr));
      const hoistedAttrs = parsedElement instanceof Element$1 ? {
        attributes: parsedElement.attributes,
        inputs: parsedElement.inputs,
        outputs: parsedElement.outputs
      } : {
        attributes: [],
        inputs: [],
        outputs: []
      };
      const i18n2 = isTemplateElement && isI18nRootElement ? void 0 : element2.i18n;
      const name = parsedElement instanceof Template ? null : parsedElement.name;
      parsedElement = new Template(name, hoistedAttrs.attributes, hoistedAttrs.inputs, hoistedAttrs.outputs, templateAttrs, [parsedElement], [
        /* no references */
      ], templateVariables, element2.sourceSpan, element2.startSourceSpan, element2.endSourceSpan, i18n2);
    }
    if (isI18nRootElement) {
      this.inI18nBlock = false;
    }
    return parsedElement;
  }
  visitAttribute(attribute2) {
    return new TextAttribute(attribute2.name, attribute2.value, attribute2.sourceSpan, attribute2.keySpan, attribute2.valueSpan, attribute2.i18n);
  }
  visitText(text3) {
    return this.processedNodes.has(text3) ? null : this._visitTextWithInterpolation(text3.value, text3.sourceSpan, text3.tokens, text3.i18n);
  }
  visitExpansion(expansion) {
    if (!expansion.i18n) {
      return null;
    }
    if (!isI18nRootNode(expansion.i18n)) {
      throw new Error(`Invalid type "${expansion.i18n.constructor}" for "i18n" property of ${expansion.sourceSpan.toString()}. Expected a "Message"`);
    }
    const message = expansion.i18n;
    const vars = {};
    const placeholders = {};
    Object.keys(message.placeholders).forEach((key) => {
      const value = message.placeholders[key];
      if (key.startsWith(I18N_ICU_VAR_PREFIX)) {
        const formattedKey = key.trim();
        const ast = this.bindingParser.parseInterpolationExpression(value.text, value.sourceSpan);
        vars[formattedKey] = new BoundText(ast, value.sourceSpan);
      } else {
        placeholders[key] = this._visitTextWithInterpolation(value.text, value.sourceSpan, null);
      }
    });
    return new Icu$1(vars, placeholders, expansion.sourceSpan, message);
  }
  visitExpansionCase(expansionCase) {
    return null;
  }
  visitComment(comment) {
    if (this.options.collectCommentNodes) {
      this.commentNodes.push(new Comment$1(comment.value || "", comment.sourceSpan));
    }
    return null;
  }
  visitLetDeclaration(decl, context) {
    const value = this.bindingParser.parseBinding(decl.value, false, decl.valueSpan, decl.valueSpan.start.offset);
    if (value.errors.length === 0 && value.ast instanceof EmptyExpr$1) {
      this.reportError("@let declaration value cannot be empty", decl.valueSpan);
    }
    return new LetDeclaration$1(decl.name, value, decl.sourceSpan, decl.nameSpan, decl.valueSpan);
  }
  visitBlockParameter() {
    return null;
  }
  visitBlock(block, context) {
    const index = Array.isArray(context) ? context.indexOf(block) : -1;
    if (index === -1) {
      throw new Error("Visitor invoked incorrectly. Expecting visitBlock to be invoked siblings array as its context");
    }
    if (this.processedNodes.has(block)) {
      return null;
    }
    let result = null;
    switch (block.name) {
      case "defer":
        result = createDeferredBlock(block, this.findConnectedBlocks(index, context, isConnectedDeferLoopBlock), this, this.bindingParser);
        break;
      case "switch":
        result = createSwitchBlock(block, this, this.bindingParser);
        break;
      case "for":
        result = createForLoop(block, this.findConnectedBlocks(index, context, isConnectedForLoopBlock), this, this.bindingParser);
        break;
      case "if":
        result = createIfBlock(block, this.findConnectedBlocks(index, context, isConnectedIfLoopBlock), this, this.bindingParser);
        break;
      default:
        let errorMessage;
        if (isConnectedDeferLoopBlock(block.name)) {
          errorMessage = `@${block.name} block can only be used after an @defer block.`;
          this.processedNodes.add(block);
        } else if (isConnectedForLoopBlock(block.name)) {
          errorMessage = `@${block.name} block can only be used after an @for block.`;
          this.processedNodes.add(block);
        } else if (isConnectedIfLoopBlock(block.name)) {
          errorMessage = `@${block.name} block can only be used after an @if or @else if block.`;
          this.processedNodes.add(block);
        } else {
          errorMessage = `Unrecognized block @${block.name}.`;
        }
        result = {
          node: new UnknownBlock(block.name, block.sourceSpan, block.nameSpan),
          errors: [new ParseError(block.sourceSpan, errorMessage)]
        };
        break;
    }
    this.errors.push(...result.errors);
    return result.node;
  }
  findConnectedBlocks(primaryBlockIndex, siblings, predicate) {
    const relatedBlocks = [];
    for (let i = primaryBlockIndex + 1; i < siblings.length; i++) {
      const node = siblings[i];
      if (node instanceof Comment2) {
        continue;
      }
      if (node instanceof Text3 && node.value.trim().length === 0) {
        this.processedNodes.add(node);
        continue;
      }
      if (!(node instanceof Block) || !predicate(node.name)) {
        break;
      }
      relatedBlocks.push(node);
      this.processedNodes.add(node);
    }
    return relatedBlocks;
  }
  // convert view engine `ParsedProperty` to a format suitable for IVY
  extractAttributes(elementName, properties, i18nPropsMeta) {
    const bound = [];
    const literal2 = [];
    properties.forEach((prop) => {
      const i18n2 = i18nPropsMeta[prop.name];
      if (prop.isLiteral) {
        literal2.push(new TextAttribute(prop.name, prop.expression.source || "", prop.sourceSpan, prop.keySpan, prop.valueSpan, i18n2));
      } else {
        const bep = this.bindingParser.createBoundElementProperty(
          elementName,
          prop,
          /* skipValidation */
          true,
          /* mapPropertyName */
          false
        );
        bound.push(BoundAttribute.fromBoundElementProperty(bep, i18n2));
      }
    });
    return {
      bound,
      literal: literal2
    };
  }
  parseAttribute(isTemplateElement, attribute2, matchableAttributes, parsedProperties, boundEvents, variables, references) {
    const name = normalizeAttributeName(attribute2.name);
    const value = attribute2.value;
    const srcSpan = attribute2.sourceSpan;
    const absoluteOffset = attribute2.valueSpan ? attribute2.valueSpan.start.offset : srcSpan.start.offset;
    function createKeySpan(srcSpan2, prefix, identifier) {
      const normalizationAdjustment = attribute2.name.length - name.length;
      const keySpanStart = srcSpan2.start.moveBy(prefix.length + normalizationAdjustment);
      const keySpanEnd = keySpanStart.moveBy(identifier.length);
      return new ParseSourceSpan(keySpanStart, keySpanEnd, keySpanStart, identifier);
    }
    const bindParts = name.match(BIND_NAME_REGEXP);
    if (bindParts) {
      if (bindParts[KW_BIND_IDX] != null) {
        const identifier = bindParts[IDENT_KW_IDX];
        const keySpan2 = createKeySpan(srcSpan, bindParts[KW_BIND_IDX], identifier);
        this.bindingParser.parsePropertyBinding(identifier, value, false, false, srcSpan, absoluteOffset, attribute2.valueSpan, matchableAttributes, parsedProperties, keySpan2);
      } else if (bindParts[KW_LET_IDX]) {
        if (isTemplateElement) {
          const identifier = bindParts[IDENT_KW_IDX];
          const keySpan2 = createKeySpan(srcSpan, bindParts[KW_LET_IDX], identifier);
          this.parseVariable(identifier, value, srcSpan, keySpan2, attribute2.valueSpan, variables);
        } else {
          this.reportError(`"let-" is only supported on ng-template elements.`, srcSpan);
        }
      } else if (bindParts[KW_REF_IDX]) {
        const identifier = bindParts[IDENT_KW_IDX];
        const keySpan2 = createKeySpan(srcSpan, bindParts[KW_REF_IDX], identifier);
        this.parseReference(identifier, value, srcSpan, keySpan2, attribute2.valueSpan, references);
      } else if (bindParts[KW_ON_IDX]) {
        const events = [];
        const identifier = bindParts[IDENT_KW_IDX];
        const keySpan2 = createKeySpan(srcSpan, bindParts[KW_ON_IDX], identifier);
        this.bindingParser.parseEvent(
          identifier,
          value,
          /* isAssignmentEvent */
          false,
          srcSpan,
          attribute2.valueSpan || srcSpan,
          matchableAttributes,
          events,
          keySpan2
        );
        addEvents(events, boundEvents);
      } else if (bindParts[KW_BINDON_IDX]) {
        const identifier = bindParts[IDENT_KW_IDX];
        const keySpan2 = createKeySpan(srcSpan, bindParts[KW_BINDON_IDX], identifier);
        this.bindingParser.parsePropertyBinding(identifier, value, false, true, srcSpan, absoluteOffset, attribute2.valueSpan, matchableAttributes, parsedProperties, keySpan2);
        this.parseAssignmentEvent(identifier, value, srcSpan, attribute2.valueSpan, matchableAttributes, boundEvents, keySpan2);
      } else if (bindParts[KW_AT_IDX]) {
        const keySpan2 = createKeySpan(srcSpan, "", name);
        this.bindingParser.parseLiteralAttr(name, value, srcSpan, absoluteOffset, attribute2.valueSpan, matchableAttributes, parsedProperties, keySpan2);
      }
      return true;
    }
    let delims = null;
    if (name.startsWith(BINDING_DELIMS.BANANA_BOX.start)) {
      delims = BINDING_DELIMS.BANANA_BOX;
    } else if (name.startsWith(BINDING_DELIMS.PROPERTY.start)) {
      delims = BINDING_DELIMS.PROPERTY;
    } else if (name.startsWith(BINDING_DELIMS.EVENT.start)) {
      delims = BINDING_DELIMS.EVENT;
    }
    if (delims !== null && // NOTE: older versions of the parser would match a start/end delimited
    // binding iff the property name was terminated by the ending delimiter
    // and the identifier in the binding was non-empty.
    // TODO(ayazhafiz): update this to handle malformed bindings.
    name.endsWith(delims.end) && name.length > delims.start.length + delims.end.length) {
      const identifier = name.substring(delims.start.length, name.length - delims.end.length);
      const keySpan2 = createKeySpan(srcSpan, delims.start, identifier);
      if (delims.start === BINDING_DELIMS.BANANA_BOX.start) {
        this.bindingParser.parsePropertyBinding(identifier, value, false, true, srcSpan, absoluteOffset, attribute2.valueSpan, matchableAttributes, parsedProperties, keySpan2);
        this.parseAssignmentEvent(identifier, value, srcSpan, attribute2.valueSpan, matchableAttributes, boundEvents, keySpan2);
      } else if (delims.start === BINDING_DELIMS.PROPERTY.start) {
        this.bindingParser.parsePropertyBinding(identifier, value, false, false, srcSpan, absoluteOffset, attribute2.valueSpan, matchableAttributes, parsedProperties, keySpan2);
      } else {
        const events = [];
        this.bindingParser.parseEvent(
          identifier,
          value,
          /* isAssignmentEvent */
          false,
          srcSpan,
          attribute2.valueSpan || srcSpan,
          matchableAttributes,
          events,
          keySpan2
        );
        addEvents(events, boundEvents);
      }
      return true;
    }
    const keySpan = createKeySpan(srcSpan, "", name);
    const hasBinding = this.bindingParser.parsePropertyInterpolation(name, value, srcSpan, attribute2.valueSpan, matchableAttributes, parsedProperties, keySpan, attribute2.valueTokens ?? null);
    return hasBinding;
  }
  _visitTextWithInterpolation(value, sourceSpan, interpolatedTokens, i18n2) {
    const valueNoNgsp = replaceNgsp(value);
    const expr = this.bindingParser.parseInterpolation(valueNoNgsp, sourceSpan, interpolatedTokens);
    return expr ? new BoundText(expr, sourceSpan, i18n2) : new Text$3(valueNoNgsp, sourceSpan);
  }
  parseVariable(identifier, value, sourceSpan, keySpan, valueSpan, variables) {
    if (identifier.indexOf("-") > -1) {
      this.reportError(`"-" is not allowed in variable names`, sourceSpan);
    } else if (identifier.length === 0) {
      this.reportError(`Variable does not have a name`, sourceSpan);
    }
    variables.push(new Variable(identifier, value, sourceSpan, keySpan, valueSpan));
  }
  parseReference(identifier, value, sourceSpan, keySpan, valueSpan, references) {
    if (identifier.indexOf("-") > -1) {
      this.reportError(`"-" is not allowed in reference names`, sourceSpan);
    } else if (identifier.length === 0) {
      this.reportError(`Reference does not have a name`, sourceSpan);
    } else if (references.some((reference2) => reference2.name === identifier)) {
      this.reportError(`Reference "#${identifier}" is defined more than once`, sourceSpan);
    }
    references.push(new Reference(identifier, value, sourceSpan, keySpan, valueSpan));
  }
  parseAssignmentEvent(name, expression, sourceSpan, valueSpan, targetMatchableAttrs, boundEvents, keySpan) {
    const events = [];
    this.bindingParser.parseEvent(
      `${name}Change`,
      expression,
      /* isAssignmentEvent */
      true,
      sourceSpan,
      valueSpan || sourceSpan,
      targetMatchableAttrs,
      events,
      keySpan
    );
    addEvents(events, boundEvents);
  }
  reportError(message, sourceSpan, level = ParseErrorLevel.ERROR) {
    this.errors.push(new ParseError(sourceSpan, message, level));
  }
};
var NonBindableVisitor = class {
  visitElement(ast) {
    const preparsedElement = preparseElement(ast);
    if (preparsedElement.type === PreparsedElementType.SCRIPT || preparsedElement.type === PreparsedElementType.STYLE || preparsedElement.type === PreparsedElementType.STYLESHEET) {
      return null;
    }
    const children = visitAll(this, ast.children, null);
    return new Element$1(
      ast.name,
      visitAll(this, ast.attrs),
      /* inputs */
      [],
      /* outputs */
      [],
      children,
      /* references */
      [],
      ast.sourceSpan,
      ast.startSourceSpan,
      ast.endSourceSpan
    );
  }
  visitComment(comment) {
    return null;
  }
  visitAttribute(attribute2) {
    return new TextAttribute(attribute2.name, attribute2.value, attribute2.sourceSpan, attribute2.keySpan, attribute2.valueSpan, attribute2.i18n);
  }
  visitText(text3) {
    return new Text$3(text3.value, text3.sourceSpan);
  }
  visitExpansion(expansion) {
    return null;
  }
  visitExpansionCase(expansionCase) {
    return null;
  }
  visitBlock(block, context) {
    const nodes = [
      // In an ngNonBindable context we treat the opening/closing tags of block as plain text.
      // This is the as if the `tokenizeBlocks` option was disabled.
      new Text$3(block.startSourceSpan.toString(), block.startSourceSpan),
      ...visitAll(this, block.children)
    ];
    if (block.endSourceSpan !== null) {
      nodes.push(new Text$3(block.endSourceSpan.toString(), block.endSourceSpan));
    }
    return nodes;
  }
  visitBlockParameter(parameter, context) {
    return null;
  }
  visitLetDeclaration(decl, context) {
    return new Text$3(`@let ${decl.name} = ${decl.value};`, decl.sourceSpan);
  }
};
var NON_BINDABLE_VISITOR = new NonBindableVisitor();
function normalizeAttributeName(attrName) {
  return /^data-/i.test(attrName) ? attrName.substring(5) : attrName;
}
function addEvents(events, boundEvents) {
  boundEvents.push(...events.map((e) => BoundEvent.fromParsedEvent(e)));
}
function textContents(node) {
  if (node.children.length !== 1 || !(node.children[0] instanceof Text3)) {
    return null;
  } else {
    return node.children[0].value;
  }
}
var LEADING_TRIVIA_CHARS = [" ", "\n", "\r", "	"];
function parseTemplate(template2, templateUrl, options = {}) {
  const {
    interpolationConfig,
    preserveWhitespaces,
    enableI18nLegacyMessageIdFormat
  } = options;
  const bindingParser = makeBindingParser(interpolationConfig);
  const htmlParser = new HtmlParser();
  const parseResult = htmlParser.parse(template2, templateUrl, __spreadProps(__spreadValues({
    leadingTriviaChars: LEADING_TRIVIA_CHARS
  }, options), {
    tokenizeExpansionForms: true,
    tokenizeBlocks: options.enableBlockSyntax ?? true,
    tokenizeLet: options.enableLetSyntax ?? true
  }));
  if (!options.alwaysAttemptHtmlToR3AstConversion && parseResult.errors && parseResult.errors.length > 0) {
    const parsedTemplate2 = {
      interpolationConfig,
      preserveWhitespaces,
      errors: parseResult.errors,
      nodes: [],
      styleUrls: [],
      styles: [],
      ngContentSelectors: []
    };
    if (options.collectCommentNodes) {
      parsedTemplate2.commentNodes = [];
    }
    return parsedTemplate2;
  }
  let rootNodes = parseResult.rootNodes;
  const retainEmptyTokens = !(options.preserveSignificantWhitespace ?? true);
  const i18nMetaVisitor = new I18nMetaVisitor(
    interpolationConfig,
    /* keepI18nAttrs */
    !preserveWhitespaces,
    enableI18nLegacyMessageIdFormat,
    /* containerBlocks */
    void 0,
    options.preserveSignificantWhitespace,
    retainEmptyTokens
  );
  const i18nMetaResult = i18nMetaVisitor.visitAllWithErrors(rootNodes);
  if (!options.alwaysAttemptHtmlToR3AstConversion && i18nMetaResult.errors && i18nMetaResult.errors.length > 0) {
    const parsedTemplate2 = {
      interpolationConfig,
      preserveWhitespaces,
      errors: i18nMetaResult.errors,
      nodes: [],
      styleUrls: [],
      styles: [],
      ngContentSelectors: []
    };
    if (options.collectCommentNodes) {
      parsedTemplate2.commentNodes = [];
    }
    return parsedTemplate2;
  }
  rootNodes = i18nMetaResult.rootNodes;
  if (!preserveWhitespaces) {
    rootNodes = visitAll(new WhitespaceVisitor(
      /* preserveSignificantWhitespace */
      true,
      /* originalNodeMap */
      void 0,
      /* requireContext */
      false
    ), rootNodes);
    if (i18nMetaVisitor.hasI18nMeta) {
      rootNodes = visitAll(new I18nMetaVisitor(
        interpolationConfig,
        /* keepI18nAttrs */
        false,
        /* enableI18nLegacyMessageIdFormat */
        void 0,
        /* containerBlocks */
        void 0,
        /* preserveSignificantWhitespace */
        true,
        retainEmptyTokens
      ), rootNodes);
    }
  }
  const {
    nodes,
    errors,
    styleUrls,
    styles: styles2,
    ngContentSelectors,
    commentNodes
  } = htmlAstToRender3Ast(rootNodes, bindingParser, {
    collectCommentNodes: !!options.collectCommentNodes
  });
  errors.push(...parseResult.errors, ...i18nMetaResult.errors);
  const parsedTemplate = {
    interpolationConfig,
    preserveWhitespaces,
    errors: errors.length > 0 ? errors : null,
    nodes,
    styleUrls,
    styles: styles2,
    ngContentSelectors
  };
  if (options.collectCommentNodes) {
    parsedTemplate.commentNodes = commentNodes;
  }
  return parsedTemplate;
}
var elementRegistry = new DomElementSchemaRegistry();
function makeBindingParser(interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {
  return new BindingParser(new Parser2(new Lexer()), interpolationConfig, elementRegistry, []);
}
var COMPONENT_VARIABLE = "%COMP%";
var HOST_ATTR = `_nghost-${COMPONENT_VARIABLE}`;
var CONTENT_ATTR = `_ngcontent-${COMPONENT_VARIABLE}`;
function baseDirectiveFields(meta, constantPool, bindingParser) {
  const definitionMap = new DefinitionMap();
  const selectors = parseSelectorToR3Selector(meta.selector);
  definitionMap.set("type", meta.type.value);
  if (selectors.length > 0) {
    definitionMap.set("selectors", asLiteral(selectors));
  }
  if (meta.queries.length > 0) {
    definitionMap.set("contentQueries", createContentQueriesFunction(meta.queries, constantPool, meta.name));
  }
  if (meta.viewQueries.length) {
    definitionMap.set("viewQuery", createViewQueriesFunction(meta.viewQueries, constantPool, meta.name));
  }
  definitionMap.set("hostBindings", createHostBindingsFunction(meta.host, meta.typeSourceSpan, bindingParser, constantPool, meta.selector || "", meta.name, definitionMap));
  definitionMap.set("inputs", conditionallyCreateDirectiveBindingLiteral(meta.inputs, true));
  definitionMap.set("outputs", conditionallyCreateDirectiveBindingLiteral(meta.outputs));
  if (meta.exportAs !== null) {
    definitionMap.set("exportAs", literalArr(meta.exportAs.map((e) => literal(e))));
  }
  if (meta.isStandalone === false) {
    definitionMap.set("standalone", literal(false));
  }
  if (meta.isSignal) {
    definitionMap.set("signals", literal(true));
  }
  return definitionMap;
}
function addFeatures(definitionMap, meta) {
  const features = [];
  const providers = meta.providers;
  const viewProviders = meta.viewProviders;
  if (providers || viewProviders) {
    const args = [providers || new LiteralArrayExpr([])];
    if (viewProviders) {
      args.push(viewProviders);
    }
    features.push(importExpr(Identifiers.ProvidersFeature).callFn(args));
  }
  if (meta.hostDirectives?.length) {
    features.push(importExpr(Identifiers.HostDirectivesFeature).callFn([createHostDirectivesFeatureArg(meta.hostDirectives)]));
  }
  if (meta.usesInheritance) {
    features.push(importExpr(Identifiers.InheritDefinitionFeature));
  }
  if (meta.fullInheritance) {
    features.push(importExpr(Identifiers.CopyDefinitionFeature));
  }
  if (meta.lifecycle.usesOnChanges) {
    features.push(importExpr(Identifiers.NgOnChangesFeature));
  }
  if ("externalStyles" in meta && meta.externalStyles?.length) {
    const externalStyleNodes = meta.externalStyles.map((externalStyle) => literal(externalStyle));
    features.push(importExpr(Identifiers.ExternalStylesFeature).callFn([literalArr(externalStyleNodes)]));
  }
  if (features.length) {
    definitionMap.set("features", literalArr(features));
  }
}
function compileDirectiveFromMetadata(meta, constantPool, bindingParser) {
  const definitionMap = baseDirectiveFields(meta, constantPool, bindingParser);
  addFeatures(definitionMap, meta);
  const expression = importExpr(Identifiers.defineDirective).callFn([definitionMap.toLiteralMap()], void 0, true);
  const type = createDirectiveType(meta);
  return {
    expression,
    type,
    statements: []
  };
}
function compileComponentFromMetadata(meta, constantPool, bindingParser) {
  const definitionMap = baseDirectiveFields(meta, constantPool, bindingParser);
  addFeatures(definitionMap, meta);
  const selector = meta.selector && CssSelector.parse(meta.selector);
  const firstSelector = selector && selector[0];
  if (firstSelector) {
    const selectorAttributes = firstSelector.getAttrs();
    if (selectorAttributes.length) {
      definitionMap.set("attrs", constantPool.getConstLiteral(
        literalArr(selectorAttributes.map((value) => value != null ? literal(value) : literal(void 0))),
        /* forceShared */
        true
      ));
    }
  }
  const templateTypeName = meta.name;
  let allDeferrableDepsFn = null;
  if (meta.defer.mode === 1 && meta.defer.dependenciesFn !== null) {
    const fnName = `${templateTypeName}_DeferFn`;
    constantPool.statements.push(new DeclareVarStmt(fnName, meta.defer.dependenciesFn, void 0, StmtModifier.Final));
    allDeferrableDepsFn = variable(fnName);
  }
  const tpl = ingestComponent(meta.name, meta.template.nodes, constantPool, meta.relativeContextFilePath, meta.i18nUseExternalIds, meta.defer, allDeferrableDepsFn, meta.relativeTemplatePath, getTemplateSourceLocationsEnabled());
  transform(tpl, CompilationJobKind.Tmpl);
  const templateFn = emitTemplateFn(tpl, constantPool);
  if (tpl.contentSelectors !== null) {
    definitionMap.set("ngContentSelectors", tpl.contentSelectors);
  }
  definitionMap.set("decls", literal(tpl.root.decls));
  definitionMap.set("vars", literal(tpl.root.vars));
  if (tpl.consts.length > 0) {
    if (tpl.constsInitializers.length > 0) {
      definitionMap.set("consts", arrowFn([], [...tpl.constsInitializers, new ReturnStatement(literalArr(tpl.consts))]));
    } else {
      definitionMap.set("consts", literalArr(tpl.consts));
    }
  }
  definitionMap.set("template", templateFn);
  if (meta.declarationListEmitMode !== 3 && meta.declarations.length > 0) {
    definitionMap.set("dependencies", compileDeclarationList(literalArr(meta.declarations.map((decl) => decl.type)), meta.declarationListEmitMode));
  } else if (meta.declarationListEmitMode === 3) {
    const args = [meta.type.value];
    if (meta.rawImports) {
      args.push(meta.rawImports);
    }
    definitionMap.set("dependencies", importExpr(Identifiers.getComponentDepsFactory).callFn(args));
  }
  if (meta.encapsulation === null) {
    meta.encapsulation = ViewEncapsulation$1.Emulated;
  }
  let hasStyles = !!meta.externalStyles?.length;
  if (meta.styles && meta.styles.length) {
    const styleValues = meta.encapsulation == ViewEncapsulation$1.Emulated ? compileStyles(meta.styles, CONTENT_ATTR, HOST_ATTR) : meta.styles;
    const styleNodes = styleValues.reduce((result, style) => {
      if (style.trim().length > 0) {
        result.push(constantPool.getConstLiteral(literal(style)));
      }
      return result;
    }, []);
    if (styleNodes.length > 0) {
      hasStyles = true;
      definitionMap.set("styles", literalArr(styleNodes));
    }
  }
  if (!hasStyles && meta.encapsulation === ViewEncapsulation$1.Emulated) {
    meta.encapsulation = ViewEncapsulation$1.None;
  }
  if (meta.encapsulation !== ViewEncapsulation$1.Emulated) {
    definitionMap.set("encapsulation", literal(meta.encapsulation));
  }
  if (meta.animations !== null) {
    definitionMap.set("data", literalMap([{
      key: "animation",
      value: meta.animations,
      quoted: false
    }]));
  }
  if (meta.changeDetection !== null) {
    if (typeof meta.changeDetection === "number" && meta.changeDetection !== ChangeDetectionStrategy.Default) {
      definitionMap.set("changeDetection", literal(meta.changeDetection));
    } else if (typeof meta.changeDetection === "object") {
      definitionMap.set("changeDetection", meta.changeDetection);
    }
  }
  const expression = importExpr(Identifiers.defineComponent).callFn([definitionMap.toLiteralMap()], void 0, true);
  const type = createComponentType(meta);
  return {
    expression,
    type,
    statements: []
  };
}
function createComponentType(meta) {
  const typeParams = createBaseDirectiveTypeParams(meta);
  typeParams.push(stringArrayAsType(meta.template.ngContentSelectors));
  typeParams.push(expressionType(literal(meta.isStandalone)));
  typeParams.push(createHostDirectivesType(meta));
  if (meta.isSignal) {
    typeParams.push(expressionType(literal(meta.isSignal)));
  }
  return expressionType(importExpr(Identifiers.ComponentDeclaration, typeParams));
}
function compileDeclarationList(list, mode) {
  switch (mode) {
    case 0:
      return list;
    case 1:
      return arrowFn([], list);
    case 2:
      const resolvedList = list.prop("map").callFn([importExpr(Identifiers.resolveForwardRef)]);
      return arrowFn([], resolvedList);
    case 3:
      throw new Error(`Unsupported with an array of pre-resolved dependencies`);
  }
}
function stringAsType(str) {
  return expressionType(literal(str));
}
function stringMapAsLiteralExpression(map2) {
  const mapValues = Object.keys(map2).map((key) => {
    const value = Array.isArray(map2[key]) ? map2[key][0] : map2[key];
    return {
      key,
      value: literal(value),
      quoted: true
    };
  });
  return literalMap(mapValues);
}
function stringArrayAsType(arr) {
  return arr.length > 0 ? expressionType(literalArr(arr.map((value) => literal(value)))) : NONE_TYPE;
}
function createBaseDirectiveTypeParams(meta) {
  const selectorForType = meta.selector !== null ? meta.selector.replace(/\n/g, "") : null;
  return [typeWithParameters(meta.type.type, meta.typeArgumentCount), selectorForType !== null ? stringAsType(selectorForType) : NONE_TYPE, meta.exportAs !== null ? stringArrayAsType(meta.exportAs) : NONE_TYPE, expressionType(getInputsTypeExpression(meta)), expressionType(stringMapAsLiteralExpression(meta.outputs)), stringArrayAsType(meta.queries.map((q) => q.propertyName))];
}
function getInputsTypeExpression(meta) {
  return literalMap(Object.keys(meta.inputs).map((key) => {
    const value = meta.inputs[key];
    const values = [{
      key: "alias",
      value: literal(value.bindingPropertyName),
      quoted: true
    }, {
      key: "required",
      value: literal(value.required),
      quoted: true
    }];
    if (value.isSignal) {
      values.push({
        key: "isSignal",
        value: literal(value.isSignal),
        quoted: true
      });
    }
    return {
      key,
      value: literalMap(values),
      quoted: true
    };
  }));
}
function createDirectiveType(meta) {
  const typeParams = createBaseDirectiveTypeParams(meta);
  typeParams.push(NONE_TYPE);
  typeParams.push(expressionType(literal(meta.isStandalone)));
  typeParams.push(createHostDirectivesType(meta));
  if (meta.isSignal) {
    typeParams.push(expressionType(literal(meta.isSignal)));
  }
  return expressionType(importExpr(Identifiers.DirectiveDeclaration, typeParams));
}
function createHostBindingsFunction(hostBindingsMetadata, typeSourceSpan, bindingParser, constantPool, selector, name, definitionMap) {
  const bindings = bindingParser.createBoundHostProperties(hostBindingsMetadata.properties, typeSourceSpan);
  const eventBindings = bindingParser.createDirectiveHostEventAsts(hostBindingsMetadata.listeners, typeSourceSpan);
  if (hostBindingsMetadata.specialAttributes.styleAttr) {
    hostBindingsMetadata.attributes["style"] = literal(hostBindingsMetadata.specialAttributes.styleAttr);
  }
  if (hostBindingsMetadata.specialAttributes.classAttr) {
    hostBindingsMetadata.attributes["class"] = literal(hostBindingsMetadata.specialAttributes.classAttr);
  }
  const hostJob = ingestHostBinding({
    componentName: name,
    componentSelector: selector,
    properties: bindings,
    events: eventBindings,
    attributes: hostBindingsMetadata.attributes
  }, bindingParser, constantPool);
  transform(hostJob, CompilationJobKind.Host);
  definitionMap.set("hostAttrs", hostJob.root.attributes);
  const varCount = hostJob.root.vars;
  if (varCount !== null && varCount > 0) {
    definitionMap.set("hostVars", literal(varCount));
  }
  return emitHostBindingFunction(hostJob);
}
var HOST_REG_EXP = /^(?:\[([^\]]+)\])|(?:\(([^\)]+)\))$/;
function parseHostBindings(host) {
  const attributes = {};
  const listeners = {};
  const properties = {};
  const specialAttributes = {};
  for (const key of Object.keys(host)) {
    const value = host[key];
    const matches = key.match(HOST_REG_EXP);
    if (matches === null) {
      switch (key) {
        case "class":
          if (typeof value !== "string") {
            throw new Error(`Class binding must be string`);
          }
          specialAttributes.classAttr = value;
          break;
        case "style":
          if (typeof value !== "string") {
            throw new Error(`Style binding must be string`);
          }
          specialAttributes.styleAttr = value;
          break;
        default:
          if (typeof value === "string") {
            attributes[key] = literal(value);
          } else {
            attributes[key] = value;
          }
      }
    } else if (matches[
      1
      /* HostBindingGroup.Binding */
    ] != null) {
      if (typeof value !== "string") {
        throw new Error(`Property binding must be string`);
      }
      properties[matches[
        1
        /* HostBindingGroup.Binding */
      ]] = value;
    } else if (matches[
      2
      /* HostBindingGroup.Event */
    ] != null) {
      if (typeof value !== "string") {
        throw new Error(`Event binding must be string`);
      }
      listeners[matches[
        2
        /* HostBindingGroup.Event */
      ]] = value;
    }
  }
  return {
    attributes,
    listeners,
    properties,
    specialAttributes
  };
}
function verifyHostBindings(bindings, sourceSpan) {
  const bindingParser = makeBindingParser();
  bindingParser.createDirectiveHostEventAsts(bindings.listeners, sourceSpan);
  bindingParser.createBoundHostProperties(bindings.properties, sourceSpan);
  return bindingParser.errors;
}
function compileStyles(styles2, selector, hostSelector) {
  const shadowCss = new ShadowCss();
  return styles2.map((style) => {
    return shadowCss.shimCssText(style, selector, hostSelector);
  });
}
function createHostDirectivesType(meta) {
  if (!meta.hostDirectives?.length) {
    return NONE_TYPE;
  }
  return expressionType(literalArr(meta.hostDirectives.map((hostMeta) => literalMap([{
    key: "directive",
    value: typeofExpr(hostMeta.directive.type),
    quoted: false
  }, {
    key: "inputs",
    value: stringMapAsLiteralExpression(hostMeta.inputs || {}),
    quoted: false
  }, {
    key: "outputs",
    value: stringMapAsLiteralExpression(hostMeta.outputs || {}),
    quoted: false
  }]))));
}
function createHostDirectivesFeatureArg(hostDirectives) {
  const expressions = [];
  let hasForwardRef = false;
  for (const current of hostDirectives) {
    if (!current.inputs && !current.outputs) {
      expressions.push(current.directive.type);
    } else {
      const keys = [{
        key: "directive",
        value: current.directive.type,
        quoted: false
      }];
      if (current.inputs) {
        const inputsLiteral = createHostDirectivesMappingArray(current.inputs);
        if (inputsLiteral) {
          keys.push({
            key: "inputs",
            value: inputsLiteral,
            quoted: false
          });
        }
      }
      if (current.outputs) {
        const outputsLiteral = createHostDirectivesMappingArray(current.outputs);
        if (outputsLiteral) {
          keys.push({
            key: "outputs",
            value: outputsLiteral,
            quoted: false
          });
        }
      }
      expressions.push(literalMap(keys));
    }
    if (current.isForwardReference) {
      hasForwardRef = true;
    }
  }
  return hasForwardRef ? new FunctionExpr([], [new ReturnStatement(literalArr(expressions))]) : literalArr(expressions);
}
function createHostDirectivesMappingArray(mapping) {
  const elements = [];
  for (const publicName in mapping) {
    if (mapping.hasOwnProperty(publicName)) {
      elements.push(literal(publicName), literal(mapping[publicName]));
    }
  }
  return elements.length > 0 ? literalArr(elements) : null;
}
var R3TargetBinder = class {
  directiveMatcher;
  constructor(directiveMatcher) {
    this.directiveMatcher = directiveMatcher;
  }
  /**
   * Perform a binding operation on the given `Target` and return a `BoundTarget` which contains
   * metadata about the types referenced in the template.
   */
  bind(target) {
    if (!target.template) {
      throw new Error("Empty bound targets are not supported");
    }
    const directives = /* @__PURE__ */ new Map();
    const eagerDirectives = [];
    const bindings = /* @__PURE__ */ new Map();
    const references = /* @__PURE__ */ new Map();
    const scopedNodeEntities = /* @__PURE__ */ new Map();
    const expressions = /* @__PURE__ */ new Map();
    const symbols2 = /* @__PURE__ */ new Map();
    const nestingLevel = /* @__PURE__ */ new Map();
    const usedPipes = /* @__PURE__ */ new Set();
    const eagerPipes = /* @__PURE__ */ new Set();
    const deferBlocks = [];
    if (target.template) {
      const scope = Scope2.apply(target.template);
      extractScopedNodeEntities(scope, scopedNodeEntities);
      DirectiveBinder.apply(target.template, this.directiveMatcher, directives, eagerDirectives, bindings, references);
      TemplateBinder.applyWithScope(target.template, scope, expressions, symbols2, nestingLevel, usedPipes, eagerPipes, deferBlocks);
    }
    return new R3BoundTarget(target, directives, eagerDirectives, bindings, references, expressions, symbols2, nestingLevel, scopedNodeEntities, usedPipes, eagerPipes, deferBlocks);
  }
};
var Scope2 = class _Scope {
  parentScope;
  rootNode;
  /**
   * Named members of the `Scope`, such as `Reference`s or `Variable`s.
   */
  namedEntities = /* @__PURE__ */ new Map();
  /**
   * Set of elements that belong to this scope.
   */
  elementsInScope = /* @__PURE__ */ new Set();
  /**
   * Child `Scope`s for immediately nested `ScopedNode`s.
   */
  childScopes = /* @__PURE__ */ new Map();
  /** Whether this scope is deferred or if any of its ancestors are deferred. */
  isDeferred;
  constructor(parentScope, rootNode) {
    this.parentScope = parentScope;
    this.rootNode = rootNode;
    this.isDeferred = parentScope !== null && parentScope.isDeferred ? true : rootNode instanceof DeferredBlock;
  }
  static newRootScope() {
    return new _Scope(null, null);
  }
  /**
   * Process a template (either as a `Template` sub-template with variables, or a plain array of
   * template `Node`s) and construct its `Scope`.
   */
  static apply(template2) {
    const scope = _Scope.newRootScope();
    scope.ingest(template2);
    return scope;
  }
  /**
   * Internal method to process the scoped node and populate the `Scope`.
   */
  ingest(nodeOrNodes) {
    if (nodeOrNodes instanceof Template) {
      nodeOrNodes.variables.forEach((node) => this.visitVariable(node));
      nodeOrNodes.children.forEach((node) => node.visit(this));
    } else if (nodeOrNodes instanceof IfBlockBranch) {
      if (nodeOrNodes.expressionAlias !== null) {
        this.visitVariable(nodeOrNodes.expressionAlias);
      }
      nodeOrNodes.children.forEach((node) => node.visit(this));
    } else if (nodeOrNodes instanceof ForLoopBlock) {
      this.visitVariable(nodeOrNodes.item);
      nodeOrNodes.contextVariables.forEach((v) => this.visitVariable(v));
      nodeOrNodes.children.forEach((node) => node.visit(this));
    } else if (nodeOrNodes instanceof SwitchBlockCase || nodeOrNodes instanceof ForLoopBlockEmpty || nodeOrNodes instanceof DeferredBlock || nodeOrNodes instanceof DeferredBlockError || nodeOrNodes instanceof DeferredBlockPlaceholder || nodeOrNodes instanceof DeferredBlockLoading || nodeOrNodes instanceof Content) {
      nodeOrNodes.children.forEach((node) => node.visit(this));
    } else {
      nodeOrNodes.forEach((node) => node.visit(this));
    }
  }
  visitElement(element2) {
    element2.references.forEach((node) => this.visitReference(node));
    element2.children.forEach((node) => node.visit(this));
    this.elementsInScope.add(element2);
  }
  visitTemplate(template2) {
    template2.references.forEach((node) => this.visitReference(node));
    this.ingestScopedNode(template2);
  }
  visitVariable(variable2) {
    this.maybeDeclare(variable2);
  }
  visitReference(reference2) {
    this.maybeDeclare(reference2);
  }
  visitDeferredBlock(deferred) {
    this.ingestScopedNode(deferred);
    deferred.placeholder?.visit(this);
    deferred.loading?.visit(this);
    deferred.error?.visit(this);
  }
  visitDeferredBlockPlaceholder(block) {
    this.ingestScopedNode(block);
  }
  visitDeferredBlockError(block) {
    this.ingestScopedNode(block);
  }
  visitDeferredBlockLoading(block) {
    this.ingestScopedNode(block);
  }
  visitSwitchBlock(block) {
    block.cases.forEach((node) => node.visit(this));
  }
  visitSwitchBlockCase(block) {
    this.ingestScopedNode(block);
  }
  visitForLoopBlock(block) {
    this.ingestScopedNode(block);
    block.empty?.visit(this);
  }
  visitForLoopBlockEmpty(block) {
    this.ingestScopedNode(block);
  }
  visitIfBlock(block) {
    block.branches.forEach((node) => node.visit(this));
  }
  visitIfBlockBranch(block) {
    this.ingestScopedNode(block);
  }
  visitContent(content) {
    this.ingestScopedNode(content);
  }
  visitLetDeclaration(decl) {
    this.maybeDeclare(decl);
  }
  // Unused visitors.
  visitBoundAttribute(attr) {
  }
  visitBoundEvent(event) {
  }
  visitBoundText(text3) {
  }
  visitText(text3) {
  }
  visitTextAttribute(attr) {
  }
  visitIcu(icu) {
  }
  visitDeferredTrigger(trigger) {
  }
  visitUnknownBlock(block) {
  }
  maybeDeclare(thing) {
    if (!this.namedEntities.has(thing.name)) {
      this.namedEntities.set(thing.name, thing);
    }
  }
  /**
   * Look up a variable within this `Scope`.
   *
   * This can recurse into a parent `Scope` if it's available.
   */
  lookup(name) {
    if (this.namedEntities.has(name)) {
      return this.namedEntities.get(name);
    } else if (this.parentScope !== null) {
      return this.parentScope.lookup(name);
    } else {
      return null;
    }
  }
  /**
   * Get the child scope for a `ScopedNode`.
   *
   * This should always be defined.
   */
  getChildScope(node) {
    const res = this.childScopes.get(node);
    if (res === void 0) {
      throw new Error(`Assertion error: child scope for ${node} not found`);
    }
    return res;
  }
  ingestScopedNode(node) {
    const scope = new _Scope(this, node);
    scope.ingest(node);
    this.childScopes.set(node, scope);
  }
};
var DirectiveBinder = class _DirectiveBinder {
  matcher;
  directives;
  eagerDirectives;
  bindings;
  references;
  // Indicates whether we are visiting elements within a `defer` block
  isInDeferBlock = false;
  constructor(matcher, directives, eagerDirectives, bindings, references) {
    this.matcher = matcher;
    this.directives = directives;
    this.eagerDirectives = eagerDirectives;
    this.bindings = bindings;
    this.references = references;
  }
  /**
   * Process a template (list of `Node`s) and perform directive matching against each node.
   *
   * @param template the list of template `Node`s to match (recursively).
   * @param selectorMatcher a `SelectorMatcher` containing the directives that are in scope for
   * this template.
   * @returns three maps which contain information about directives in the template: the
   * `directives` map which lists directives matched on each node, the `bindings` map which
   * indicates which directives claimed which bindings (inputs, outputs, etc), and the `references`
   * map which resolves #references (`Reference`s) within the template to the named directive or
   * template node.
   */
  static apply(template2, selectorMatcher, directives, eagerDirectives, bindings, references) {
    const matcher = new _DirectiveBinder(selectorMatcher, directives, eagerDirectives, bindings, references);
    matcher.ingest(template2);
  }
  ingest(template2) {
    template2.forEach((node) => node.visit(this));
  }
  visitElement(element2) {
    this.visitElementOrTemplate(element2);
  }
  visitTemplate(template2) {
    this.visitElementOrTemplate(template2);
  }
  visitElementOrTemplate(node) {
    const cssSelector = createCssSelectorFromNode(node);
    const directives = [];
    this.matcher.match(cssSelector, (_selector, results) => directives.push(...results));
    if (directives.length > 0) {
      this.directives.set(node, directives);
      if (!this.isInDeferBlock) {
        this.eagerDirectives.push(...directives);
      }
    }
    node.references.forEach((ref) => {
      let dirTarget = null;
      if (ref.value.trim() === "") {
        dirTarget = directives.find((dir) => dir.isComponent) || null;
      } else {
        dirTarget = directives.find((dir) => dir.exportAs !== null && dir.exportAs.some((value) => value === ref.value)) || null;
        if (dirTarget === null) {
          return;
        }
      }
      if (dirTarget !== null) {
        this.references.set(ref, {
          directive: dirTarget,
          node
        });
      } else {
        this.references.set(ref, node);
      }
    });
    const setAttributeBinding = (attribute2, ioType) => {
      const dir = directives.find((dir2) => dir2[ioType].hasBindingPropertyName(attribute2.name));
      const binding = dir !== void 0 ? dir : node;
      this.bindings.set(attribute2, binding);
    };
    node.inputs.forEach((input2) => setAttributeBinding(input2, "inputs"));
    node.attributes.forEach((attr) => setAttributeBinding(attr, "inputs"));
    if (node instanceof Template) {
      node.templateAttrs.forEach((attr) => setAttributeBinding(attr, "inputs"));
    }
    node.outputs.forEach((output) => setAttributeBinding(output, "outputs"));
    node.children.forEach((child) => child.visit(this));
  }
  visitDeferredBlock(deferred) {
    const wasInDeferBlock = this.isInDeferBlock;
    this.isInDeferBlock = true;
    deferred.children.forEach((child) => child.visit(this));
    this.isInDeferBlock = wasInDeferBlock;
    deferred.placeholder?.visit(this);
    deferred.loading?.visit(this);
    deferred.error?.visit(this);
  }
  visitDeferredBlockPlaceholder(block) {
    block.children.forEach((child) => child.visit(this));
  }
  visitDeferredBlockError(block) {
    block.children.forEach((child) => child.visit(this));
  }
  visitDeferredBlockLoading(block) {
    block.children.forEach((child) => child.visit(this));
  }
  visitSwitchBlock(block) {
    block.cases.forEach((node) => node.visit(this));
  }
  visitSwitchBlockCase(block) {
    block.children.forEach((node) => node.visit(this));
  }
  visitForLoopBlock(block) {
    block.item.visit(this);
    block.contextVariables.forEach((v) => v.visit(this));
    block.children.forEach((node) => node.visit(this));
    block.empty?.visit(this);
  }
  visitForLoopBlockEmpty(block) {
    block.children.forEach((node) => node.visit(this));
  }
  visitIfBlock(block) {
    block.branches.forEach((node) => node.visit(this));
  }
  visitIfBlockBranch(block) {
    block.expressionAlias?.visit(this);
    block.children.forEach((node) => node.visit(this));
  }
  visitContent(content) {
    content.children.forEach((child) => child.visit(this));
  }
  // Unused visitors.
  visitVariable(variable2) {
  }
  visitReference(reference2) {
  }
  visitTextAttribute(attribute2) {
  }
  visitBoundAttribute(attribute2) {
  }
  visitBoundEvent(attribute2) {
  }
  visitBoundAttributeOrEvent(node) {
  }
  visitText(text3) {
  }
  visitBoundText(text3) {
  }
  visitIcu(icu) {
  }
  visitDeferredTrigger(trigger) {
  }
  visitUnknownBlock(block) {
  }
  visitLetDeclaration(decl) {
  }
};
var TemplateBinder = class _TemplateBinder extends RecursiveAstVisitor {
  bindings;
  symbols;
  usedPipes;
  eagerPipes;
  deferBlocks;
  nestingLevel;
  scope;
  rootNode;
  level;
  visitNode;
  constructor(bindings, symbols2, usedPipes, eagerPipes, deferBlocks, nestingLevel, scope, rootNode, level) {
    super();
    this.bindings = bindings;
    this.symbols = symbols2;
    this.usedPipes = usedPipes;
    this.eagerPipes = eagerPipes;
    this.deferBlocks = deferBlocks;
    this.nestingLevel = nestingLevel;
    this.scope = scope;
    this.rootNode = rootNode;
    this.level = level;
    this.visitNode = (node) => node.visit(this);
  }
  // This method is defined to reconcile the type of TemplateBinder since both
  // RecursiveAstVisitor and Visitor define the visit() method in their
  // interfaces.
  visit(node, context) {
    if (node instanceof AST) {
      node.visit(this, context);
    } else {
      node.visit(this);
    }
  }
  /**
   * Process a template and extract metadata about expressions and symbols within.
   *
   * @param nodes the nodes of the template to process
   * @param scope the `Scope` of the template being processed.
   * @returns three maps which contain metadata about the template: `expressions` which interprets
   * special `AST` nodes in expressions as pointing to references or variables declared within the
   * template, `symbols` which maps those variables and references to the nested `Template` which
   * declares them, if any, and `nestingLevel` which associates each `Template` with a integer
   * nesting level (how many levels deep within the template structure the `Template` is), starting
   * at 1.
   */
  static applyWithScope(nodes, scope, expressions, symbols2, nestingLevel, usedPipes, eagerPipes, deferBlocks) {
    const template2 = nodes instanceof Template ? nodes : null;
    const binder = new _TemplateBinder(expressions, symbols2, usedPipes, eagerPipes, deferBlocks, nestingLevel, scope, template2, 0);
    binder.ingest(nodes);
  }
  ingest(nodeOrNodes) {
    if (nodeOrNodes instanceof Template) {
      nodeOrNodes.variables.forEach(this.visitNode);
      nodeOrNodes.children.forEach(this.visitNode);
      this.nestingLevel.set(nodeOrNodes, this.level);
    } else if (nodeOrNodes instanceof IfBlockBranch) {
      if (nodeOrNodes.expressionAlias !== null) {
        this.visitNode(nodeOrNodes.expressionAlias);
      }
      nodeOrNodes.children.forEach(this.visitNode);
      this.nestingLevel.set(nodeOrNodes, this.level);
    } else if (nodeOrNodes instanceof ForLoopBlock) {
      this.visitNode(nodeOrNodes.item);
      nodeOrNodes.contextVariables.forEach((v) => this.visitNode(v));
      nodeOrNodes.trackBy.visit(this);
      nodeOrNodes.children.forEach(this.visitNode);
      this.nestingLevel.set(nodeOrNodes, this.level);
    } else if (nodeOrNodes instanceof DeferredBlock) {
      if (this.scope.rootNode !== nodeOrNodes) {
        throw new Error(`Assertion error: resolved incorrect scope for deferred block ${nodeOrNodes}`);
      }
      this.deferBlocks.push([nodeOrNodes, this.scope]);
      nodeOrNodes.children.forEach((node) => node.visit(this));
      this.nestingLevel.set(nodeOrNodes, this.level);
    } else if (nodeOrNodes instanceof SwitchBlockCase || nodeOrNodes instanceof ForLoopBlockEmpty || nodeOrNodes instanceof DeferredBlockError || nodeOrNodes instanceof DeferredBlockPlaceholder || nodeOrNodes instanceof DeferredBlockLoading || nodeOrNodes instanceof Content) {
      nodeOrNodes.children.forEach((node) => node.visit(this));
      this.nestingLevel.set(nodeOrNodes, this.level);
    } else {
      nodeOrNodes.forEach(this.visitNode);
    }
  }
  visitElement(element2) {
    element2.inputs.forEach(this.visitNode);
    element2.outputs.forEach(this.visitNode);
    element2.children.forEach(this.visitNode);
    element2.references.forEach(this.visitNode);
  }
  visitTemplate(template2) {
    template2.inputs.forEach(this.visitNode);
    template2.outputs.forEach(this.visitNode);
    template2.templateAttrs.forEach(this.visitNode);
    template2.references.forEach(this.visitNode);
    this.ingestScopedNode(template2);
  }
  visitVariable(variable2) {
    if (this.rootNode !== null) {
      this.symbols.set(variable2, this.rootNode);
    }
  }
  visitReference(reference2) {
    if (this.rootNode !== null) {
      this.symbols.set(reference2, this.rootNode);
    }
  }
  // Unused template visitors
  visitText(text3) {
  }
  visitTextAttribute(attribute2) {
  }
  visitUnknownBlock(block) {
  }
  visitDeferredTrigger() {
  }
  visitIcu(icu) {
    Object.keys(icu.vars).forEach((key) => icu.vars[key].visit(this));
    Object.keys(icu.placeholders).forEach((key) => icu.placeholders[key].visit(this));
  }
  // The remaining visitors are concerned with processing AST expressions within template bindings
  visitBoundAttribute(attribute2) {
    attribute2.value.visit(this);
  }
  visitBoundEvent(event) {
    event.handler.visit(this);
  }
  visitDeferredBlock(deferred) {
    this.ingestScopedNode(deferred);
    deferred.triggers.when?.value.visit(this);
    deferred.prefetchTriggers.when?.value.visit(this);
    deferred.hydrateTriggers.when?.value.visit(this);
    deferred.hydrateTriggers.never?.visit(this);
    deferred.placeholder && this.visitNode(deferred.placeholder);
    deferred.loading && this.visitNode(deferred.loading);
    deferred.error && this.visitNode(deferred.error);
  }
  visitDeferredBlockPlaceholder(block) {
    this.ingestScopedNode(block);
  }
  visitDeferredBlockError(block) {
    this.ingestScopedNode(block);
  }
  visitDeferredBlockLoading(block) {
    this.ingestScopedNode(block);
  }
  visitSwitchBlock(block) {
    block.expression.visit(this);
    block.cases.forEach(this.visitNode);
  }
  visitSwitchBlockCase(block) {
    block.expression?.visit(this);
    this.ingestScopedNode(block);
  }
  visitForLoopBlock(block) {
    block.expression.visit(this);
    this.ingestScopedNode(block);
    block.empty?.visit(this);
  }
  visitForLoopBlockEmpty(block) {
    this.ingestScopedNode(block);
  }
  visitIfBlock(block) {
    block.branches.forEach((node) => node.visit(this));
  }
  visitIfBlockBranch(block) {
    block.expression?.visit(this);
    this.ingestScopedNode(block);
  }
  visitContent(content) {
    this.ingestScopedNode(content);
  }
  visitBoundText(text3) {
    text3.value.visit(this);
  }
  visitLetDeclaration(decl) {
    decl.value.visit(this);
    if (this.rootNode !== null) {
      this.symbols.set(decl, this.rootNode);
    }
  }
  visitPipe(ast, context) {
    this.usedPipes.add(ast.name);
    if (!this.scope.isDeferred) {
      this.eagerPipes.add(ast.name);
    }
    return super.visitPipe(ast, context);
  }
  // These five types of AST expressions can refer to expression roots, which could be variables
  // or references in the current scope.
  visitPropertyRead(ast, context) {
    this.maybeMap(ast, ast.name);
    return super.visitPropertyRead(ast, context);
  }
  visitSafePropertyRead(ast, context) {
    this.maybeMap(ast, ast.name);
    return super.visitSafePropertyRead(ast, context);
  }
  visitPropertyWrite(ast, context) {
    this.maybeMap(ast, ast.name);
    return super.visitPropertyWrite(ast, context);
  }
  ingestScopedNode(node) {
    const childScope = this.scope.getChildScope(node);
    const binder = new _TemplateBinder(this.bindings, this.symbols, this.usedPipes, this.eagerPipes, this.deferBlocks, this.nestingLevel, childScope, node, this.level + 1);
    binder.ingest(node);
  }
  maybeMap(ast, name) {
    if (!(ast.receiver instanceof ImplicitReceiver) || ast.receiver instanceof ThisReceiver) {
      return;
    }
    const target = this.scope.lookup(name);
    if (target !== null) {
      this.bindings.set(ast, target);
    }
  }
};
var R3BoundTarget = class {
  target;
  directives;
  eagerDirectives;
  bindings;
  references;
  exprTargets;
  symbols;
  nestingLevel;
  scopedNodeEntities;
  usedPipes;
  eagerPipes;
  /** Deferred blocks, ordered as they appear in the template. */
  deferredBlocks;
  /** Map of deferred blocks to their scope. */
  deferredScopes;
  constructor(target, directives, eagerDirectives, bindings, references, exprTargets, symbols2, nestingLevel, scopedNodeEntities, usedPipes, eagerPipes, rawDeferred) {
    this.target = target;
    this.directives = directives;
    this.eagerDirectives = eagerDirectives;
    this.bindings = bindings;
    this.references = references;
    this.exprTargets = exprTargets;
    this.symbols = symbols2;
    this.nestingLevel = nestingLevel;
    this.scopedNodeEntities = scopedNodeEntities;
    this.usedPipes = usedPipes;
    this.eagerPipes = eagerPipes;
    this.deferredBlocks = rawDeferred.map((current) => current[0]);
    this.deferredScopes = new Map(rawDeferred);
  }
  getEntitiesInScope(node) {
    return this.scopedNodeEntities.get(node) ?? /* @__PURE__ */ new Set();
  }
  getDirectivesOfNode(node) {
    return this.directives.get(node) || null;
  }
  getReferenceTarget(ref) {
    return this.references.get(ref) || null;
  }
  getConsumerOfBinding(binding) {
    return this.bindings.get(binding) || null;
  }
  getExpressionTarget(expr) {
    return this.exprTargets.get(expr) || null;
  }
  getDefinitionNodeOfSymbol(symbol) {
    return this.symbols.get(symbol) || null;
  }
  getNestingLevel(node) {
    return this.nestingLevel.get(node) || 0;
  }
  getUsedDirectives() {
    const set = /* @__PURE__ */ new Set();
    this.directives.forEach((dirs) => dirs.forEach((dir) => set.add(dir)));
    return Array.from(set.values());
  }
  getEagerlyUsedDirectives() {
    const set = new Set(this.eagerDirectives);
    return Array.from(set.values());
  }
  getUsedPipes() {
    return Array.from(this.usedPipes);
  }
  getEagerlyUsedPipes() {
    return Array.from(this.eagerPipes);
  }
  getDeferBlocks() {
    return this.deferredBlocks;
  }
  getDeferredTriggerTarget(block, trigger) {
    if (!(trigger instanceof InteractionDeferredTrigger) && !(trigger instanceof ViewportDeferredTrigger) && !(trigger instanceof HoverDeferredTrigger)) {
      return null;
    }
    const name = trigger.reference;
    if (name === null) {
      let trigger2 = null;
      if (block.placeholder !== null) {
        for (const child of block.placeholder.children) {
          if (child instanceof Comment$1) {
            continue;
          }
          if (trigger2 !== null) {
            return null;
          }
          if (child instanceof Element$1) {
            trigger2 = child;
          }
        }
      }
      return trigger2;
    }
    const outsideRef = this.findEntityInScope(block, name);
    if (outsideRef instanceof Reference && this.getDefinitionNodeOfSymbol(outsideRef) !== block) {
      const target = this.getReferenceTarget(outsideRef);
      if (target !== null) {
        return this.referenceTargetToElement(target);
      }
    }
    if (block.placeholder !== null) {
      const refInPlaceholder = this.findEntityInScope(block.placeholder, name);
      const targetInPlaceholder = refInPlaceholder instanceof Reference ? this.getReferenceTarget(refInPlaceholder) : null;
      if (targetInPlaceholder !== null) {
        return this.referenceTargetToElement(targetInPlaceholder);
      }
    }
    return null;
  }
  isDeferred(element2) {
    for (const block of this.deferredBlocks) {
      if (!this.deferredScopes.has(block)) {
        continue;
      }
      const stack = [this.deferredScopes.get(block)];
      while (stack.length > 0) {
        const current = stack.pop();
        if (current.elementsInScope.has(element2)) {
          return true;
        }
        stack.push(...current.childScopes.values());
      }
    }
    return false;
  }
  /**
   * Finds an entity with a specific name in a scope.
   * @param rootNode Root node of the scope.
   * @param name Name of the entity.
   */
  findEntityInScope(rootNode, name) {
    const entities = this.getEntitiesInScope(rootNode);
    for (const entity of entities) {
      if (entity.name === name) {
        return entity;
      }
    }
    return null;
  }
  /** Coerces a `ReferenceTarget` to an `Element`, if possible. */
  referenceTargetToElement(target) {
    if (target instanceof Element$1) {
      return target;
    }
    if (target instanceof Template) {
      return null;
    }
    return this.referenceTargetToElement(target.node);
  }
};
function extractScopedNodeEntities(rootScope, templateEntities) {
  const entityMap = /* @__PURE__ */ new Map();
  function extractScopeEntities(scope) {
    if (entityMap.has(scope.rootNode)) {
      return entityMap.get(scope.rootNode);
    }
    const currentEntities = scope.namedEntities;
    let entities;
    if (scope.parentScope !== null) {
      entities = new Map([...extractScopeEntities(scope.parentScope), ...currentEntities]);
    } else {
      entities = new Map(currentEntities);
    }
    entityMap.set(scope.rootNode, entities);
    return entities;
  }
  const scopesToProcess = [rootScope];
  while (scopesToProcess.length > 0) {
    const scope = scopesToProcess.pop();
    for (const childScope of scope.childScopes.values()) {
      scopesToProcess.push(childScope);
    }
    extractScopeEntities(scope);
  }
  for (const [template2, entities] of entityMap) {
    templateEntities.set(template2, new Set(entities.values()));
  }
}
var ResourceLoader = class {
};
var CompilerFacadeImpl = class {
  jitEvaluator;
  FactoryTarget = FactoryTarget;
  ResourceLoader = ResourceLoader;
  elementSchemaRegistry = new DomElementSchemaRegistry();
  constructor(jitEvaluator = new JitEvaluator()) {
    this.jitEvaluator = jitEvaluator;
  }
  compilePipe(angularCoreEnv, sourceMapUrl, facade) {
    const metadata = {
      type: wrapReference(facade.type),
      typeArgumentCount: 0,
      pipeName: facade.pipeName,
      pure: facade.pure,
      isStandalone: facade.isStandalone
    };
    const res = compilePipeFromMetadata(metadata);
    return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, []);
  }
  compilePipeDeclaration(angularCoreEnv, sourceMapUrl, declaration) {
    const meta = convertDeclarePipeFacadeToMetadata(declaration);
    const res = compilePipeFromMetadata(meta);
    return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, []);
  }
  compileInjectable(angularCoreEnv, sourceMapUrl, facade) {
    const {
      expression,
      statements
    } = compileInjectable(
      {
        name: facade.name,
        type: wrapReference(facade.type),
        typeArgumentCount: facade.typeArgumentCount,
        providedIn: computeProvidedIn(facade.providedIn),
        useClass: convertToProviderExpression(facade, "useClass"),
        useFactory: wrapExpression(facade, "useFactory"),
        useValue: convertToProviderExpression(facade, "useValue"),
        useExisting: convertToProviderExpression(facade, "useExisting"),
        deps: facade.deps?.map(convertR3DependencyMetadata)
      },
      /* resolveForwardRefs */
      true
    );
    return this.jitExpression(expression, angularCoreEnv, sourceMapUrl, statements);
  }
  compileInjectableDeclaration(angularCoreEnv, sourceMapUrl, facade) {
    const {
      expression,
      statements
    } = compileInjectable(
      {
        name: facade.type.name,
        type: wrapReference(facade.type),
        typeArgumentCount: 0,
        providedIn: computeProvidedIn(facade.providedIn),
        useClass: convertToProviderExpression(facade, "useClass"),
        useFactory: wrapExpression(facade, "useFactory"),
        useValue: convertToProviderExpression(facade, "useValue"),
        useExisting: convertToProviderExpression(facade, "useExisting"),
        deps: facade.deps?.map(convertR3DeclareDependencyMetadata)
      },
      /* resolveForwardRefs */
      true
    );
    return this.jitExpression(expression, angularCoreEnv, sourceMapUrl, statements);
  }
  compileInjector(angularCoreEnv, sourceMapUrl, facade) {
    const meta = {
      type: wrapReference(facade.type),
      providers: facade.providers && facade.providers.length > 0 ? new WrappedNodeExpr(facade.providers) : null,
      imports: facade.imports.map((i) => new WrappedNodeExpr(i))
    };
    const res = compileInjector(meta);
    return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, []);
  }
  compileInjectorDeclaration(angularCoreEnv, sourceMapUrl, declaration) {
    const meta = convertDeclareInjectorFacadeToMetadata(declaration);
    const res = compileInjector(meta);
    return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, []);
  }
  compileNgModule(angularCoreEnv, sourceMapUrl, facade) {
    const meta = {
      kind: R3NgModuleMetadataKind.Global,
      type: wrapReference(facade.type),
      bootstrap: facade.bootstrap.map(wrapReference),
      declarations: facade.declarations.map(wrapReference),
      publicDeclarationTypes: null,
      // only needed for types in AOT
      imports: facade.imports.map(wrapReference),
      includeImportTypes: true,
      exports: facade.exports.map(wrapReference),
      selectorScopeMode: R3SelectorScopeMode.Inline,
      containsForwardDecls: false,
      schemas: facade.schemas ? facade.schemas.map(wrapReference) : null,
      id: facade.id ? new WrappedNodeExpr(facade.id) : null
    };
    const res = compileNgModule(meta);
    return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, []);
  }
  compileNgModuleDeclaration(angularCoreEnv, sourceMapUrl, declaration) {
    const expression = compileNgModuleDeclarationExpression(declaration);
    return this.jitExpression(expression, angularCoreEnv, sourceMapUrl, []);
  }
  compileDirective(angularCoreEnv, sourceMapUrl, facade) {
    const meta = convertDirectiveFacadeToMetadata(facade);
    return this.compileDirectiveFromMeta(angularCoreEnv, sourceMapUrl, meta);
  }
  compileDirectiveDeclaration(angularCoreEnv, sourceMapUrl, declaration) {
    const typeSourceSpan = this.createParseSourceSpan("Directive", declaration.type.name, sourceMapUrl);
    const meta = convertDeclareDirectiveFacadeToMetadata(declaration, typeSourceSpan);
    return this.compileDirectiveFromMeta(angularCoreEnv, sourceMapUrl, meta);
  }
  compileDirectiveFromMeta(angularCoreEnv, sourceMapUrl, meta) {
    const constantPool = new ConstantPool();
    const bindingParser = makeBindingParser();
    const res = compileDirectiveFromMetadata(meta, constantPool, bindingParser);
    return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, constantPool.statements);
  }
  compileComponent(angularCoreEnv, sourceMapUrl, facade) {
    const {
      template: template2,
      interpolation,
      defer: defer3
    } = parseJitTemplate(facade.template, facade.name, sourceMapUrl, facade.preserveWhitespaces, facade.interpolation, void 0);
    const meta = __spreadProps(__spreadValues(__spreadValues({}, facade), convertDirectiveFacadeToMetadata(facade)), {
      selector: facade.selector || this.elementSchemaRegistry.getDefaultComponentElementName(),
      template: template2,
      declarations: facade.declarations.map(convertDeclarationFacadeToMetadata),
      declarationListEmitMode: 0,
      defer: defer3,
      styles: [...facade.styles, ...template2.styles],
      encapsulation: facade.encapsulation,
      interpolation,
      changeDetection: facade.changeDetection ?? null,
      animations: facade.animations != null ? new WrappedNodeExpr(facade.animations) : null,
      viewProviders: facade.viewProviders != null ? new WrappedNodeExpr(facade.viewProviders) : null,
      relativeContextFilePath: "",
      i18nUseExternalIds: true,
      relativeTemplatePath: null
    });
    const jitExpressionSourceMap = `ng:///${facade.name}.js`;
    return this.compileComponentFromMeta(angularCoreEnv, jitExpressionSourceMap, meta);
  }
  compileComponentDeclaration(angularCoreEnv, sourceMapUrl, declaration) {
    const typeSourceSpan = this.createParseSourceSpan("Component", declaration.type.name, sourceMapUrl);
    const meta = convertDeclareComponentFacadeToMetadata(declaration, typeSourceSpan, sourceMapUrl);
    return this.compileComponentFromMeta(angularCoreEnv, sourceMapUrl, meta);
  }
  compileComponentFromMeta(angularCoreEnv, sourceMapUrl, meta) {
    const constantPool = new ConstantPool();
    const bindingParser = makeBindingParser(meta.interpolation);
    const res = compileComponentFromMetadata(meta, constantPool, bindingParser);
    return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, constantPool.statements);
  }
  compileFactory(angularCoreEnv, sourceMapUrl, meta) {
    const factoryRes = compileFactoryFunction({
      name: meta.name,
      type: wrapReference(meta.type),
      typeArgumentCount: meta.typeArgumentCount,
      deps: convertR3DependencyMetadataArray(meta.deps),
      target: meta.target
    });
    return this.jitExpression(factoryRes.expression, angularCoreEnv, sourceMapUrl, factoryRes.statements);
  }
  compileFactoryDeclaration(angularCoreEnv, sourceMapUrl, meta) {
    const factoryRes = compileFactoryFunction({
      name: meta.type.name,
      type: wrapReference(meta.type),
      typeArgumentCount: 0,
      deps: Array.isArray(meta.deps) ? meta.deps.map(convertR3DeclareDependencyMetadata) : meta.deps,
      target: meta.target
    });
    return this.jitExpression(factoryRes.expression, angularCoreEnv, sourceMapUrl, factoryRes.statements);
  }
  createParseSourceSpan(kind, typeName, sourceUrl) {
    return r3JitTypeSourceSpan(kind, typeName, sourceUrl);
  }
  /**
   * JIT compiles an expression and returns the result of executing that expression.
   *
   * @param def the definition which will be compiled and executed to get the value to patch
   * @param context an object map of @angular/core symbol names to symbols which will be available
   * in the context of the compiled expression
   * @param sourceUrl a URL to use for the source map of the compiled expression
   * @param preStatements a collection of statements that should be evaluated before the expression.
   */
  jitExpression(def, context, sourceUrl, preStatements) {
    const statements = [...preStatements, new DeclareVarStmt("$def", def, void 0, StmtModifier.Exported)];
    const res = this.jitEvaluator.evaluateStatements(
      sourceUrl,
      statements,
      new R3JitReflector(context),
      /* enableSourceMaps */
      true
    );
    return res["$def"];
  }
};
function convertToR3QueryMetadata(facade) {
  return __spreadProps(__spreadValues({}, facade), {
    isSignal: facade.isSignal,
    predicate: convertQueryPredicate(facade.predicate),
    read: facade.read ? new WrappedNodeExpr(facade.read) : null,
    static: facade.static,
    emitDistinctChangesOnly: facade.emitDistinctChangesOnly
  });
}
function convertQueryDeclarationToMetadata(declaration) {
  return {
    propertyName: declaration.propertyName,
    first: declaration.first ?? false,
    predicate: convertQueryPredicate(declaration.predicate),
    descendants: declaration.descendants ?? false,
    read: declaration.read ? new WrappedNodeExpr(declaration.read) : null,
    static: declaration.static ?? false,
    emitDistinctChangesOnly: declaration.emitDistinctChangesOnly ?? true,
    isSignal: !!declaration.isSignal
  };
}
function convertQueryPredicate(predicate) {
  return Array.isArray(predicate) ? (
    // The predicate is an array of strings so pass it through.
    predicate
  ) : (
    // The predicate is a type - assume that we will need to unwrap any `forwardRef()` calls.
    createMayBeForwardRefExpression(
      new WrappedNodeExpr(predicate),
      1
      /* ForwardRefHandling.Wrapped */
    )
  );
}
function convertDirectiveFacadeToMetadata(facade) {
  const inputsFromMetadata = parseInputsArray(facade.inputs || []);
  const outputsFromMetadata = parseMappingStringArray(facade.outputs || []);
  const propMetadata = facade.propMetadata;
  const inputsFromType = {};
  const outputsFromType = {};
  for (const field in propMetadata) {
    if (propMetadata.hasOwnProperty(field)) {
      propMetadata[field].forEach((ann) => {
        if (isInput(ann)) {
          inputsFromType[field] = {
            bindingPropertyName: ann.alias || field,
            classPropertyName: field,
            required: ann.required || false,
            // For JIT, decorators are used to declare signal inputs. That is because of
            // a technical limitation where it's not possible to statically reflect class
            // members of a directive/component at runtime before instantiating the class.
            isSignal: !!ann.isSignal,
            transformFunction: ann.transform != null ? new WrappedNodeExpr(ann.transform) : null
          };
        } else if (isOutput(ann)) {
          outputsFromType[field] = ann.alias || field;
        }
      });
    }
  }
  const hostDirectives = facade.hostDirectives?.length ? facade.hostDirectives.map((hostDirective) => {
    return typeof hostDirective === "function" ? {
      directive: wrapReference(hostDirective),
      inputs: null,
      outputs: null,
      isForwardReference: false
    } : {
      directive: wrapReference(hostDirective.directive),
      isForwardReference: false,
      inputs: hostDirective.inputs ? parseMappingStringArray(hostDirective.inputs) : null,
      outputs: hostDirective.outputs ? parseMappingStringArray(hostDirective.outputs) : null
    };
  }) : null;
  return __spreadProps(__spreadValues({}, facade), {
    typeArgumentCount: 0,
    typeSourceSpan: facade.typeSourceSpan,
    type: wrapReference(facade.type),
    deps: null,
    host: __spreadValues({}, extractHostBindings(facade.propMetadata, facade.typeSourceSpan, facade.host)),
    inputs: __spreadValues(__spreadValues({}, inputsFromMetadata), inputsFromType),
    outputs: __spreadValues(__spreadValues({}, outputsFromMetadata), outputsFromType),
    queries: facade.queries.map(convertToR3QueryMetadata),
    providers: facade.providers != null ? new WrappedNodeExpr(facade.providers) : null,
    viewQueries: facade.viewQueries.map(convertToR3QueryMetadata),
    fullInheritance: false,
    hostDirectives
  });
}
function convertDeclareDirectiveFacadeToMetadata(declaration, typeSourceSpan) {
  const hostDirectives = declaration.hostDirectives?.length ? declaration.hostDirectives.map((dir) => ({
    directive: wrapReference(dir.directive),
    isForwardReference: false,
    inputs: dir.inputs ? getHostDirectiveBindingMapping(dir.inputs) : null,
    outputs: dir.outputs ? getHostDirectiveBindingMapping(dir.outputs) : null
  })) : null;
  return {
    name: declaration.type.name,
    type: wrapReference(declaration.type),
    typeSourceSpan,
    selector: declaration.selector ?? null,
    inputs: declaration.inputs ? inputsPartialMetadataToInputMetadata(declaration.inputs) : {},
    outputs: declaration.outputs ?? {},
    host: convertHostDeclarationToMetadata(declaration.host),
    queries: (declaration.queries ?? []).map(convertQueryDeclarationToMetadata),
    viewQueries: (declaration.viewQueries ?? []).map(convertQueryDeclarationToMetadata),
    providers: declaration.providers !== void 0 ? new WrappedNodeExpr(declaration.providers) : null,
    exportAs: declaration.exportAs ?? null,
    usesInheritance: declaration.usesInheritance ?? false,
    lifecycle: {
      usesOnChanges: declaration.usesOnChanges ?? false
    },
    deps: null,
    typeArgumentCount: 0,
    fullInheritance: false,
    isStandalone: declaration.isStandalone ?? getJitStandaloneDefaultForVersion(declaration.version),
    isSignal: declaration.isSignal ?? false,
    hostDirectives
  };
}
function convertHostDeclarationToMetadata(host = {}) {
  return {
    attributes: convertOpaqueValuesToExpressions(host.attributes ?? {}),
    listeners: host.listeners ?? {},
    properties: host.properties ?? {},
    specialAttributes: {
      classAttr: host.classAttribute,
      styleAttr: host.styleAttribute
    }
  };
}
function getHostDirectiveBindingMapping(array) {
  let result = null;
  for (let i = 1; i < array.length; i += 2) {
    result = result || {};
    result[array[i - 1]] = array[i];
  }
  return result;
}
function convertOpaqueValuesToExpressions(obj) {
  const result = {};
  for (const key of Object.keys(obj)) {
    result[key] = new WrappedNodeExpr(obj[key]);
  }
  return result;
}
function convertDeclareComponentFacadeToMetadata(decl, typeSourceSpan, sourceMapUrl) {
  const {
    template: template2,
    interpolation,
    defer: defer3
  } = parseJitTemplate(decl.template, decl.type.name, sourceMapUrl, decl.preserveWhitespaces ?? false, decl.interpolation, decl.deferBlockDependencies);
  const declarations = [];
  if (decl.dependencies) {
    for (const innerDep of decl.dependencies) {
      switch (innerDep.kind) {
        case "directive":
        case "component":
          declarations.push(convertDirectiveDeclarationToMetadata(innerDep));
          break;
        case "pipe":
          declarations.push(convertPipeDeclarationToMetadata(innerDep));
          break;
      }
    }
  } else if (decl.components || decl.directives || decl.pipes) {
    decl.components && declarations.push(...decl.components.map((dir) => convertDirectiveDeclarationToMetadata(
      dir,
      /* isComponent */
      true
    )));
    decl.directives && declarations.push(...decl.directives.map((dir) => convertDirectiveDeclarationToMetadata(dir)));
    decl.pipes && declarations.push(...convertPipeMapToMetadata(decl.pipes));
  }
  return __spreadProps(__spreadValues({}, convertDeclareDirectiveFacadeToMetadata(decl, typeSourceSpan)), {
    template: template2,
    styles: decl.styles ?? [],
    declarations,
    viewProviders: decl.viewProviders !== void 0 ? new WrappedNodeExpr(decl.viewProviders) : null,
    animations: decl.animations !== void 0 ? new WrappedNodeExpr(decl.animations) : null,
    defer: defer3,
    changeDetection: decl.changeDetection ?? ChangeDetectionStrategy.Default,
    encapsulation: decl.encapsulation ?? ViewEncapsulation$1.Emulated,
    interpolation,
    declarationListEmitMode: 2,
    relativeContextFilePath: "",
    i18nUseExternalIds: true,
    relativeTemplatePath: null
  });
}
function convertDeclarationFacadeToMetadata(declaration) {
  return __spreadProps(__spreadValues({}, declaration), {
    type: new WrappedNodeExpr(declaration.type)
  });
}
function convertDirectiveDeclarationToMetadata(declaration, isComponent = null) {
  return {
    kind: R3TemplateDependencyKind.Directive,
    isComponent: isComponent || declaration.kind === "component",
    selector: declaration.selector,
    type: new WrappedNodeExpr(declaration.type),
    inputs: declaration.inputs ?? [],
    outputs: declaration.outputs ?? [],
    exportAs: declaration.exportAs ?? null
  };
}
function convertPipeMapToMetadata(pipes) {
  if (!pipes) {
    return [];
  }
  return Object.keys(pipes).map((name) => {
    return {
      kind: R3TemplateDependencyKind.Pipe,
      name,
      type: new WrappedNodeExpr(pipes[name])
    };
  });
}
function convertPipeDeclarationToMetadata(pipe3) {
  return {
    kind: R3TemplateDependencyKind.Pipe,
    name: pipe3.name,
    type: new WrappedNodeExpr(pipe3.type)
  };
}
function parseJitTemplate(template2, typeName, sourceMapUrl, preserveWhitespaces, interpolation, deferBlockDependencies) {
  const interpolationConfig = interpolation ? InterpolationConfig.fromArray(interpolation) : DEFAULT_INTERPOLATION_CONFIG;
  const parsed = parseTemplate(template2, sourceMapUrl, {
    preserveWhitespaces,
    interpolationConfig
  });
  if (parsed.errors !== null) {
    const errors = parsed.errors.map((err) => err.toString()).join(", ");
    throw new Error(`Errors during JIT compilation of template for ${typeName}: ${errors}`);
  }
  const binder = new R3TargetBinder(new SelectorMatcher());
  const boundTarget = binder.bind({
    template: parsed.nodes
  });
  return {
    template: parsed,
    interpolation: interpolationConfig,
    defer: createR3ComponentDeferMetadata(boundTarget, deferBlockDependencies)
  };
}
function convertToProviderExpression(obj, property2) {
  if (obj.hasOwnProperty(property2)) {
    return createMayBeForwardRefExpression(
      new WrappedNodeExpr(obj[property2]),
      0
      /* ForwardRefHandling.None */
    );
  } else {
    return void 0;
  }
}
function wrapExpression(obj, property2) {
  if (obj.hasOwnProperty(property2)) {
    return new WrappedNodeExpr(obj[property2]);
  } else {
    return void 0;
  }
}
function computeProvidedIn(providedIn) {
  const expression = typeof providedIn === "function" ? new WrappedNodeExpr(providedIn) : new LiteralExpr(providedIn ?? null);
  return createMayBeForwardRefExpression(
    expression,
    0
    /* ForwardRefHandling.None */
  );
}
function convertR3DependencyMetadataArray(facades) {
  return facades == null ? null : facades.map(convertR3DependencyMetadata);
}
function convertR3DependencyMetadata(facade) {
  const isAttributeDep = facade.attribute != null;
  const rawToken = facade.token === null ? null : new WrappedNodeExpr(facade.token);
  const token = isAttributeDep ? new WrappedNodeExpr(facade.attribute) : rawToken;
  return createR3DependencyMetadata(token, isAttributeDep, facade.host, facade.optional, facade.self, facade.skipSelf);
}
function convertR3DeclareDependencyMetadata(facade) {
  const isAttributeDep = facade.attribute ?? false;
  const token = facade.token === null ? null : new WrappedNodeExpr(facade.token);
  return createR3DependencyMetadata(token, isAttributeDep, facade.host ?? false, facade.optional ?? false, facade.self ?? false, facade.skipSelf ?? false);
}
function createR3DependencyMetadata(token, isAttributeDep, host, optional, self2, skipSelf) {
  const attributeNameType = isAttributeDep ? literal("unknown") : null;
  return {
    token,
    attributeNameType,
    host,
    optional,
    self: self2,
    skipSelf
  };
}
function createR3ComponentDeferMetadata(boundTarget, deferBlockDependencies) {
  const deferredBlocks = boundTarget.getDeferBlocks();
  const blocks = /* @__PURE__ */ new Map();
  for (let i = 0; i < deferredBlocks.length; i++) {
    const dependencyFn = deferBlockDependencies?.[i];
    blocks.set(deferredBlocks[i], dependencyFn ? new WrappedNodeExpr(dependencyFn) : null);
  }
  return {
    mode: 0,
    blocks
  };
}
function extractHostBindings(propMetadata, sourceSpan, host) {
  const bindings = parseHostBindings(host || {});
  const errors = verifyHostBindings(bindings, sourceSpan);
  if (errors.length) {
    throw new Error(errors.map((error) => error.msg).join("\n"));
  }
  for (const field in propMetadata) {
    if (propMetadata.hasOwnProperty(field)) {
      propMetadata[field].forEach((ann) => {
        if (isHostBinding(ann)) {
          bindings.properties[ann.hostPropertyName || field] = getSafePropertyAccessString("this", field);
        } else if (isHostListener(ann)) {
          bindings.listeners[ann.eventName || field] = `${field}(${(ann.args || []).join(",")})`;
        }
      });
    }
  }
  return bindings;
}
function isHostBinding(value) {
  return value.ngMetadataName === "HostBinding";
}
function isHostListener(value) {
  return value.ngMetadataName === "HostListener";
}
function isInput(value) {
  return value.ngMetadataName === "Input";
}
function isOutput(value) {
  return value.ngMetadataName === "Output";
}
function inputsPartialMetadataToInputMetadata(inputs) {
  return Object.keys(inputs).reduce((result, minifiedClassName) => {
    const value = inputs[minifiedClassName];
    if (typeof value === "string" || Array.isArray(value)) {
      result[minifiedClassName] = parseLegacyInputPartialOutput(value);
    } else {
      result[minifiedClassName] = {
        bindingPropertyName: value.publicName,
        classPropertyName: minifiedClassName,
        transformFunction: value.transformFunction !== null ? new WrappedNodeExpr(value.transformFunction) : null,
        required: value.isRequired,
        isSignal: value.isSignal
      };
    }
    return result;
  }, {});
}
function parseLegacyInputPartialOutput(value) {
  if (typeof value === "string") {
    return {
      bindingPropertyName: value,
      classPropertyName: value,
      transformFunction: null,
      required: false,
      // legacy partial output does not capture signal inputs.
      isSignal: false
    };
  }
  return {
    bindingPropertyName: value[0],
    classPropertyName: value[1],
    transformFunction: value[2] ? new WrappedNodeExpr(value[2]) : null,
    required: false,
    // legacy partial output does not capture signal inputs.
    isSignal: false
  };
}
function parseInputsArray(values) {
  return values.reduce((results, value) => {
    if (typeof value === "string") {
      const [bindingPropertyName, classPropertyName] = parseMappingString(value);
      results[classPropertyName] = {
        bindingPropertyName,
        classPropertyName,
        required: false,
        // Signal inputs not supported for the inputs array.
        isSignal: false,
        transformFunction: null
      };
    } else {
      results[value.name] = {
        bindingPropertyName: value.alias || value.name,
        classPropertyName: value.name,
        required: value.required || false,
        // Signal inputs not supported for the inputs array.
        isSignal: false,
        transformFunction: value.transform != null ? new WrappedNodeExpr(value.transform) : null
      };
    }
    return results;
  }, {});
}
function parseMappingStringArray(values) {
  return values.reduce((results, value) => {
    const [alias, fieldName] = parseMappingString(value);
    results[fieldName] = alias;
    return results;
  }, {});
}
function parseMappingString(value) {
  const [fieldName, bindingPropertyName] = value.split(":", 2).map((str) => str.trim());
  return [bindingPropertyName ?? fieldName, fieldName];
}
function convertDeclarePipeFacadeToMetadata(declaration) {
  return {
    name: declaration.type.name,
    type: wrapReference(declaration.type),
    typeArgumentCount: 0,
    pipeName: declaration.name,
    deps: null,
    pure: declaration.pure ?? true,
    isStandalone: declaration.isStandalone ?? getJitStandaloneDefaultForVersion(declaration.version)
  };
}
function convertDeclareInjectorFacadeToMetadata(declaration) {
  return {
    name: declaration.type.name,
    type: wrapReference(declaration.type),
    providers: declaration.providers !== void 0 && declaration.providers.length > 0 ? new WrappedNodeExpr(declaration.providers) : null,
    imports: declaration.imports !== void 0 ? declaration.imports.map((i) => new WrappedNodeExpr(i)) : []
  };
}
function publishFacade(global2) {
  const ng = global2.ng || (global2.ng = {});
  ng.\u0275compilerFacade = new CompilerFacadeImpl();
}
var VERSION = new Version2("19.2.14");
var _VisitorMode;
(function(_VisitorMode2) {
  _VisitorMode2[_VisitorMode2["Extract"] = 0] = "Extract";
  _VisitorMode2[_VisitorMode2["Merge"] = 1] = "Merge";
})(_VisitorMode || (_VisitorMode = {}));
var XmlTagDefinition = class {
  closedByParent = false;
  implicitNamespacePrefix = null;
  isVoid = false;
  ignoreFirstLf = false;
  canSelfClose = true;
  preventNamespaceInheritance = false;
  requireExtraParent(currentParent) {
    return false;
  }
  isClosedByChild(name) {
    return false;
  }
  getContentType() {
    return TagContentType.PARSABLE_DATA;
  }
};
var _TAG_DEFINITION = new XmlTagDefinition();
publishFacade(_global2);

// node_modules/@angular/platform-browser/fesm2022/dom_renderer-DGKzginR.mjs
var EVENT_MANAGER_PLUGINS = new InjectionToken(ngDevMode ? "EventManagerPlugins" : "");
var EventManager = class _EventManager {
  _zone;
  _plugins;
  _eventNameToPlugin = /* @__PURE__ */ new Map();
  /**
   * Initializes an instance of the event-manager service.
   */
  constructor(plugins, _zone) {
    this._zone = _zone;
    plugins.forEach((plugin) => {
      plugin.manager = this;
    });
    this._plugins = plugins.slice().reverse();
  }
  /**
   * Registers a handler for a specific element and event.
   *
   * @param element The HTML element to receive event notifications.
   * @param eventName The name of the event to listen for.
   * @param handler A function to call when the notification occurs. Receives the
   * event object as an argument.
   * @param options Options that configure how the event listener is bound.
   * @returns  A callback function that can be used to remove the handler.
   */
  addEventListener(element2, eventName, handler, options) {
    const plugin = this._findPluginFor(eventName);
    return plugin.addEventListener(element2, eventName, handler, options);
  }
  /**
   * Retrieves the compilation zone in which event listeners are registered.
   */
  getZone() {
    return this._zone;
  }
  /** @internal */
  _findPluginFor(eventName) {
    let plugin = this._eventNameToPlugin.get(eventName);
    if (plugin) {
      return plugin;
    }
    const plugins = this._plugins;
    plugin = plugins.find((plugin2) => plugin2.supports(eventName));
    if (!plugin) {
      throw new RuntimeError(5101, (typeof ngDevMode === "undefined" || ngDevMode) && `No event manager plugin found for event ${eventName}`);
    }
    this._eventNameToPlugin.set(eventName, plugin);
    return plugin;
  }
  static \u0275fac = function EventManager_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _EventManager)(\u0275\u0275inject(EVENT_MANAGER_PLUGINS), \u0275\u0275inject(NgZone));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _EventManager,
    factory: _EventManager.\u0275fac
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(EventManager, [{
    type: Injectable
  }], () => [{
    type: void 0,
    decorators: [{
      type: Inject,
      args: [EVENT_MANAGER_PLUGINS]
    }]
  }, {
    type: NgZone
  }], null);
})();
var EventManagerPlugin = class {
  _doc;
  // TODO: remove (has some usage in G3)
  constructor(_doc) {
    this._doc = _doc;
  }
  // Using non-null assertion because it's set by EventManager's constructor
  manager;
};
var APP_ID_ATTRIBUTE_NAME = "ng-app-id";
function removeElements(elements) {
  for (const element2 of elements) {
    element2.remove();
  }
}
function createStyleElement(style, doc) {
  const styleElement = doc.createElement("style");
  styleElement.textContent = style;
  return styleElement;
}
function addServerStyles(doc, appId, inline, external) {
  const elements = doc.head?.querySelectorAll(`style[${APP_ID_ATTRIBUTE_NAME}="${appId}"],link[${APP_ID_ATTRIBUTE_NAME}="${appId}"]`);
  if (elements) {
    for (const styleElement of elements) {
      styleElement.removeAttribute(APP_ID_ATTRIBUTE_NAME);
      if (styleElement instanceof HTMLLinkElement) {
        external.set(styleElement.href.slice(styleElement.href.lastIndexOf("/") + 1), {
          usage: 0,
          elements: [styleElement]
        });
      } else if (styleElement.textContent) {
        inline.set(styleElement.textContent, {
          usage: 0,
          elements: [styleElement]
        });
      }
    }
  }
}
function createLinkElement(url, doc) {
  const linkElement = doc.createElement("link");
  linkElement.setAttribute("rel", "stylesheet");
  linkElement.setAttribute("href", url);
  return linkElement;
}
var SharedStylesHost = class _SharedStylesHost {
  doc;
  appId;
  nonce;
  /**
   * Provides usage information for active inline style content and associated HTML <style> elements.
   * Embedded styles typically originate from the `styles` metadata of a rendered component.
   */
  inline = /* @__PURE__ */ new Map();
  /**
   * Provides usage information for active external style URLs and the associated HTML <link> elements.
   * External styles typically originate from the `ɵɵExternalStylesFeature` of a rendered component.
   */
  external = /* @__PURE__ */ new Map();
  /**
   * Set of host DOM nodes that will have styles attached.
   */
  hosts = /* @__PURE__ */ new Set();
  /**
   * Whether the application code is currently executing on a server.
   */
  isServer;
  constructor(doc, appId, nonce, platformId = {}) {
    this.doc = doc;
    this.appId = appId;
    this.nonce = nonce;
    this.isServer = isPlatformServer(platformId);
    addServerStyles(doc, appId, this.inline, this.external);
    this.hosts.add(doc.head);
  }
  /**
   * Adds embedded styles to the DOM via HTML `style` elements.
   * @param styles An array of style content strings.
   */
  addStyles(styles2, urls) {
    for (const value of styles2) {
      this.addUsage(value, this.inline, createStyleElement);
    }
    urls?.forEach((value) => this.addUsage(value, this.external, createLinkElement));
  }
  /**
   * Removes embedded styles from the DOM that were added as HTML `style` elements.
   * @param styles An array of style content strings.
   */
  removeStyles(styles2, urls) {
    for (const value of styles2) {
      this.removeUsage(value, this.inline);
    }
    urls?.forEach((value) => this.removeUsage(value, this.external));
  }
  addUsage(value, usages, creator) {
    const record = usages.get(value);
    if (record) {
      if ((typeof ngDevMode === "undefined" || ngDevMode) && record.usage === 0) {
        record.elements.forEach((element2) => element2.setAttribute("ng-style-reused", ""));
      }
      record.usage++;
    } else {
      usages.set(value, {
        usage: 1,
        elements: [...this.hosts].map((host) => this.addElement(host, creator(value, this.doc)))
      });
    }
  }
  removeUsage(value, usages) {
    const record = usages.get(value);
    if (record) {
      record.usage--;
      if (record.usage <= 0) {
        removeElements(record.elements);
        usages.delete(value);
      }
    }
  }
  ngOnDestroy() {
    for (const [, {
      elements
    }] of [...this.inline, ...this.external]) {
      removeElements(elements);
    }
    this.hosts.clear();
  }
  /**
   * Adds a host node to the set of style hosts and adds all existing style usage to
   * the newly added host node.
   *
   * This is currently only used for Shadow DOM encapsulation mode.
   */
  addHost(hostNode) {
    this.hosts.add(hostNode);
    for (const [style, {
      elements
    }] of this.inline) {
      elements.push(this.addElement(hostNode, createStyleElement(style, this.doc)));
    }
    for (const [url, {
      elements
    }] of this.external) {
      elements.push(this.addElement(hostNode, createLinkElement(url, this.doc)));
    }
  }
  removeHost(hostNode) {
    this.hosts.delete(hostNode);
  }
  addElement(host, element2) {
    if (this.nonce) {
      element2.setAttribute("nonce", this.nonce);
    }
    if (this.isServer) {
      element2.setAttribute(APP_ID_ATTRIBUTE_NAME, this.appId);
    }
    return host.appendChild(element2);
  }
  static \u0275fac = function SharedStylesHost_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _SharedStylesHost)(\u0275\u0275inject(DOCUMENT), \u0275\u0275inject(APP_ID), \u0275\u0275inject(CSP_NONCE, 8), \u0275\u0275inject(PLATFORM_ID));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _SharedStylesHost,
    factory: _SharedStylesHost.\u0275fac
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(SharedStylesHost, [{
    type: Injectable
  }], () => [{
    type: Document,
    decorators: [{
      type: Inject,
      args: [DOCUMENT]
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [APP_ID]
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [CSP_NONCE]
    }, {
      type: Optional
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [PLATFORM_ID]
    }]
  }], null);
})();
var NAMESPACE_URIS = {
  "svg": "http://www.w3.org/2000/svg",
  "xhtml": "http://www.w3.org/1999/xhtml",
  "xlink": "http://www.w3.org/1999/xlink",
  "xml": "http://www.w3.org/XML/1998/namespace",
  "xmlns": "http://www.w3.org/2000/xmlns/",
  "math": "http://www.w3.org/1998/Math/MathML"
};
var COMPONENT_REGEX = /%COMP%/g;
var SOURCEMAP_URL_REGEXP = /\/\*#\s*sourceMappingURL=(.+?)\s*\*\//;
var PROTOCOL_REGEXP = /^https?:/;
var COMPONENT_VARIABLE2 = "%COMP%";
var HOST_ATTR2 = `_nghost-${COMPONENT_VARIABLE2}`;
var CONTENT_ATTR2 = `_ngcontent-${COMPONENT_VARIABLE2}`;
var REMOVE_STYLES_ON_COMPONENT_DESTROY_DEFAULT = true;
var REMOVE_STYLES_ON_COMPONENT_DESTROY = new InjectionToken(ngDevMode ? "RemoveStylesOnCompDestroy" : "", {
  providedIn: "root",
  factory: () => REMOVE_STYLES_ON_COMPONENT_DESTROY_DEFAULT
});
function shimContentAttribute(componentShortId) {
  return CONTENT_ATTR2.replace(COMPONENT_REGEX, componentShortId);
}
function shimHostAttribute(componentShortId) {
  return HOST_ATTR2.replace(COMPONENT_REGEX, componentShortId);
}
function shimStylesContent(compId, styles2) {
  return styles2.map((s) => s.replace(COMPONENT_REGEX, compId));
}
function addBaseHrefToCssSourceMap(baseHref, styles2) {
  if (!baseHref) {
    return styles2;
  }
  const absoluteBaseHrefUrl = new URL(baseHref, "http://localhost");
  return styles2.map((cssContent) => {
    if (!cssContent.includes("sourceMappingURL=")) {
      return cssContent;
    }
    return cssContent.replace(SOURCEMAP_URL_REGEXP, (_, sourceMapUrl) => {
      if (sourceMapUrl[0] === "/" || sourceMapUrl.startsWith("data:") || PROTOCOL_REGEXP.test(sourceMapUrl)) {
        return `/*# sourceMappingURL=${sourceMapUrl} */`;
      }
      const {
        pathname: resolvedSourceMapUrl
      } = new URL(sourceMapUrl, absoluteBaseHrefUrl);
      return `/*# sourceMappingURL=${resolvedSourceMapUrl} */`;
    });
  });
}
var DomRendererFactory2 = class _DomRendererFactory2 {
  eventManager;
  sharedStylesHost;
  appId;
  removeStylesOnCompDestroy;
  doc;
  platformId;
  ngZone;
  nonce;
  tracingService;
  rendererByCompId = /* @__PURE__ */ new Map();
  defaultRenderer;
  platformIsServer;
  constructor(eventManager, sharedStylesHost, appId, removeStylesOnCompDestroy, doc, platformId, ngZone, nonce = null, tracingService = null) {
    this.eventManager = eventManager;
    this.sharedStylesHost = sharedStylesHost;
    this.appId = appId;
    this.removeStylesOnCompDestroy = removeStylesOnCompDestroy;
    this.doc = doc;
    this.platformId = platformId;
    this.ngZone = ngZone;
    this.nonce = nonce;
    this.tracingService = tracingService;
    this.platformIsServer = isPlatformServer(platformId);
    this.defaultRenderer = new DefaultDomRenderer2(eventManager, doc, ngZone, this.platformIsServer, this.tracingService);
  }
  createRenderer(element2, type) {
    if (!element2 || !type) {
      return this.defaultRenderer;
    }
    if (this.platformIsServer && type.encapsulation === ViewEncapsulation.ShadowDom) {
      type = __spreadProps(__spreadValues({}, type), {
        encapsulation: ViewEncapsulation.Emulated
      });
    }
    const renderer = this.getOrCreateRenderer(element2, type);
    if (renderer instanceof EmulatedEncapsulationDomRenderer2) {
      renderer.applyToHost(element2);
    } else if (renderer instanceof NoneEncapsulationDomRenderer) {
      renderer.applyStyles();
    }
    return renderer;
  }
  getOrCreateRenderer(element2, type) {
    const rendererByCompId = this.rendererByCompId;
    let renderer = rendererByCompId.get(type.id);
    if (!renderer) {
      const doc = this.doc;
      const ngZone = this.ngZone;
      const eventManager = this.eventManager;
      const sharedStylesHost = this.sharedStylesHost;
      const removeStylesOnCompDestroy = this.removeStylesOnCompDestroy;
      const platformIsServer = this.platformIsServer;
      const tracingService = this.tracingService;
      switch (type.encapsulation) {
        case ViewEncapsulation.Emulated:
          renderer = new EmulatedEncapsulationDomRenderer2(eventManager, sharedStylesHost, type, this.appId, removeStylesOnCompDestroy, doc, ngZone, platformIsServer, tracingService);
          break;
        case ViewEncapsulation.ShadowDom:
          return new ShadowDomRenderer(eventManager, sharedStylesHost, element2, type, doc, ngZone, this.nonce, platformIsServer, tracingService);
        default:
          renderer = new NoneEncapsulationDomRenderer(eventManager, sharedStylesHost, type, removeStylesOnCompDestroy, doc, ngZone, platformIsServer, tracingService);
          break;
      }
      rendererByCompId.set(type.id, renderer);
    }
    return renderer;
  }
  ngOnDestroy() {
    this.rendererByCompId.clear();
  }
  /**
   * Used during HMR to clear any cached data about a component.
   * @param componentId ID of the component that is being replaced.
   */
  componentReplaced(componentId) {
    this.rendererByCompId.delete(componentId);
  }
  static \u0275fac = function DomRendererFactory2_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DomRendererFactory2)(\u0275\u0275inject(EventManager), \u0275\u0275inject(SharedStylesHost), \u0275\u0275inject(APP_ID), \u0275\u0275inject(REMOVE_STYLES_ON_COMPONENT_DESTROY), \u0275\u0275inject(DOCUMENT), \u0275\u0275inject(PLATFORM_ID), \u0275\u0275inject(NgZone), \u0275\u0275inject(CSP_NONCE), \u0275\u0275inject(TracingService, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _DomRendererFactory2,
    factory: _DomRendererFactory2.\u0275fac
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DomRendererFactory2, [{
    type: Injectable
  }], () => [{
    type: EventManager
  }, {
    type: SharedStylesHost
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [APP_ID]
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [REMOVE_STYLES_ON_COMPONENT_DESTROY]
    }]
  }, {
    type: Document,
    decorators: [{
      type: Inject,
      args: [DOCUMENT]
    }]
  }, {
    type: Object,
    decorators: [{
      type: Inject,
      args: [PLATFORM_ID]
    }]
  }, {
    type: NgZone
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [CSP_NONCE]
    }]
  }, {
    type: TracingService,
    decorators: [{
      type: Inject,
      args: [TracingService]
    }, {
      type: Optional
    }]
  }], null);
})();
var DefaultDomRenderer2 = class {
  eventManager;
  doc;
  ngZone;
  platformIsServer;
  tracingService;
  data = /* @__PURE__ */ Object.create(null);
  /**
   * By default this renderer throws when encountering synthetic properties
   * This can be disabled for example by the AsyncAnimationRendererFactory
   */
  throwOnSyntheticProps = true;
  constructor(eventManager, doc, ngZone, platformIsServer, tracingService) {
    this.eventManager = eventManager;
    this.doc = doc;
    this.ngZone = ngZone;
    this.platformIsServer = platformIsServer;
    this.tracingService = tracingService;
  }
  destroy() {
  }
  destroyNode = null;
  createElement(name, namespace) {
    if (namespace) {
      return this.doc.createElementNS(NAMESPACE_URIS[namespace] || namespace, name);
    }
    return this.doc.createElement(name);
  }
  createComment(value) {
    return this.doc.createComment(value);
  }
  createText(value) {
    return this.doc.createTextNode(value);
  }
  appendChild(parent, newChild) {
    const targetParent = isTemplateNode(parent) ? parent.content : parent;
    targetParent.appendChild(newChild);
  }
  insertBefore(parent, newChild, refChild) {
    if (parent) {
      const targetParent = isTemplateNode(parent) ? parent.content : parent;
      targetParent.insertBefore(newChild, refChild);
    }
  }
  removeChild(_parent, oldChild) {
    oldChild.remove();
  }
  selectRootElement(selectorOrNode, preserveContent) {
    let el = typeof selectorOrNode === "string" ? this.doc.querySelector(selectorOrNode) : selectorOrNode;
    if (!el) {
      throw new RuntimeError(-5104, (typeof ngDevMode === "undefined" || ngDevMode) && `The selector "${selectorOrNode}" did not match any elements`);
    }
    if (!preserveContent) {
      el.textContent = "";
    }
    return el;
  }
  parentNode(node) {
    return node.parentNode;
  }
  nextSibling(node) {
    return node.nextSibling;
  }
  setAttribute(el, name, value, namespace) {
    if (namespace) {
      name = namespace + ":" + name;
      const namespaceUri = NAMESPACE_URIS[namespace];
      if (namespaceUri) {
        el.setAttributeNS(namespaceUri, name, value);
      } else {
        el.setAttribute(name, value);
      }
    } else {
      el.setAttribute(name, value);
    }
  }
  removeAttribute(el, name, namespace) {
    if (namespace) {
      const namespaceUri = NAMESPACE_URIS[namespace];
      if (namespaceUri) {
        el.removeAttributeNS(namespaceUri, name);
      } else {
        el.removeAttribute(`${namespace}:${name}`);
      }
    } else {
      el.removeAttribute(name);
    }
  }
  addClass(el, name) {
    el.classList.add(name);
  }
  removeClass(el, name) {
    el.classList.remove(name);
  }
  setStyle(el, style, value, flags) {
    if (flags & (RendererStyleFlags2.DashCase | RendererStyleFlags2.Important)) {
      el.style.setProperty(style, value, flags & RendererStyleFlags2.Important ? "important" : "");
    } else {
      el.style[style] = value;
    }
  }
  removeStyle(el, style, flags) {
    if (flags & RendererStyleFlags2.DashCase) {
      el.style.removeProperty(style);
    } else {
      el.style[style] = "";
    }
  }
  setProperty(el, name, value) {
    if (el == null) {
      return;
    }
    (typeof ngDevMode === "undefined" || ngDevMode) && this.throwOnSyntheticProps && checkNoSyntheticProp(name, "property");
    el[name] = value;
  }
  setValue(node, value) {
    node.nodeValue = value;
  }
  listen(target, event, callback, options) {
    (typeof ngDevMode === "undefined" || ngDevMode) && this.throwOnSyntheticProps && checkNoSyntheticProp(event, "listener");
    if (typeof target === "string") {
      target = getDOM().getGlobalEventTarget(this.doc, target);
      if (!target) {
        throw new RuntimeError(5102, (typeof ngDevMode === "undefined" || ngDevMode) && `Unsupported event target ${target} for event ${event}`);
      }
    }
    let wrappedCallback = this.decoratePreventDefault(callback);
    if (this.tracingService?.wrapEventListener) {
      wrappedCallback = this.tracingService.wrapEventListener(target, event, wrappedCallback);
    }
    return this.eventManager.addEventListener(target, event, wrappedCallback, options);
  }
  decoratePreventDefault(eventHandler) {
    return (event) => {
      if (event === "__ngUnwrap__") {
        return eventHandler;
      }
      const allowDefaultBehavior = this.platformIsServer ? this.ngZone.runGuarded(() => eventHandler(event)) : eventHandler(event);
      if (allowDefaultBehavior === false) {
        event.preventDefault();
      }
      return void 0;
    };
  }
};
var AT_CHARCODE = (() => "@".charCodeAt(0))();
function checkNoSyntheticProp(name, nameKind) {
  if (name.charCodeAt(0) === AT_CHARCODE) {
    throw new RuntimeError(5105, `Unexpected synthetic ${nameKind} ${name} found. Please make sure that:
  - Make sure \`provideAnimationsAsync()\`, \`provideAnimations()\` or \`provideNoopAnimations()\` call was added to a list of providers used to bootstrap an application.
  - There is a corresponding animation configuration named \`${name}\` defined in the \`animations\` field of the \`@Component\` decorator (see https://angular.dev/api/core/Component#animations).`);
  }
}
function isTemplateNode(node) {
  return node.tagName === "TEMPLATE" && node.content !== void 0;
}
var ShadowDomRenderer = class extends DefaultDomRenderer2 {
  sharedStylesHost;
  hostEl;
  shadowRoot;
  constructor(eventManager, sharedStylesHost, hostEl, component, doc, ngZone, nonce, platformIsServer, tracingService) {
    super(eventManager, doc, ngZone, platformIsServer, tracingService);
    this.sharedStylesHost = sharedStylesHost;
    this.hostEl = hostEl;
    this.shadowRoot = hostEl.attachShadow({
      mode: "open"
    });
    this.sharedStylesHost.addHost(this.shadowRoot);
    let styles2 = component.styles;
    if (ngDevMode) {
      const baseHref = getDOM().getBaseHref(doc) ?? "";
      styles2 = addBaseHrefToCssSourceMap(baseHref, styles2);
    }
    styles2 = shimStylesContent(component.id, styles2);
    for (const style of styles2) {
      const styleEl = document.createElement("style");
      if (nonce) {
        styleEl.setAttribute("nonce", nonce);
      }
      styleEl.textContent = style;
      this.shadowRoot.appendChild(styleEl);
    }
    const styleUrls = component.getExternalStyles?.();
    if (styleUrls) {
      for (const styleUrl of styleUrls) {
        const linkEl = createLinkElement(styleUrl, doc);
        if (nonce) {
          linkEl.setAttribute("nonce", nonce);
        }
        this.shadowRoot.appendChild(linkEl);
      }
    }
  }
  nodeOrShadowRoot(node) {
    return node === this.hostEl ? this.shadowRoot : node;
  }
  appendChild(parent, newChild) {
    return super.appendChild(this.nodeOrShadowRoot(parent), newChild);
  }
  insertBefore(parent, newChild, refChild) {
    return super.insertBefore(this.nodeOrShadowRoot(parent), newChild, refChild);
  }
  removeChild(_parent, oldChild) {
    return super.removeChild(null, oldChild);
  }
  parentNode(node) {
    return this.nodeOrShadowRoot(super.parentNode(this.nodeOrShadowRoot(node)));
  }
  destroy() {
    this.sharedStylesHost.removeHost(this.shadowRoot);
  }
};
var NoneEncapsulationDomRenderer = class extends DefaultDomRenderer2 {
  sharedStylesHost;
  removeStylesOnCompDestroy;
  styles;
  styleUrls;
  constructor(eventManager, sharedStylesHost, component, removeStylesOnCompDestroy, doc, ngZone, platformIsServer, tracingService, compId) {
    super(eventManager, doc, ngZone, platformIsServer, tracingService);
    this.sharedStylesHost = sharedStylesHost;
    this.removeStylesOnCompDestroy = removeStylesOnCompDestroy;
    let styles2 = component.styles;
    if (ngDevMode) {
      const baseHref = getDOM().getBaseHref(doc) ?? "";
      styles2 = addBaseHrefToCssSourceMap(baseHref, styles2);
    }
    this.styles = compId ? shimStylesContent(compId, styles2) : styles2;
    this.styleUrls = component.getExternalStyles?.(compId);
  }
  applyStyles() {
    this.sharedStylesHost.addStyles(this.styles, this.styleUrls);
  }
  destroy() {
    if (!this.removeStylesOnCompDestroy) {
      return;
    }
    this.sharedStylesHost.removeStyles(this.styles, this.styleUrls);
  }
};
var EmulatedEncapsulationDomRenderer2 = class extends NoneEncapsulationDomRenderer {
  contentAttr;
  hostAttr;
  constructor(eventManager, sharedStylesHost, component, appId, removeStylesOnCompDestroy, doc, ngZone, platformIsServer, tracingService) {
    const compId = appId + "-" + component.id;
    super(eventManager, sharedStylesHost, component, removeStylesOnCompDestroy, doc, ngZone, platformIsServer, tracingService, compId);
    this.contentAttr = shimContentAttribute(compId);
    this.hostAttr = shimHostAttribute(compId);
  }
  applyToHost(element2) {
    this.applyStyles();
    this.setAttribute(element2, this.hostAttr, "");
  }
  createElement(parent, name) {
    const el = super.createElement(parent, name);
    super.setAttribute(el, this.contentAttr, "");
    return el;
  }
};

// node_modules/@angular/platform-browser/fesm2022/browser-D-u-fknz.mjs
var BrowserDomAdapter = class _BrowserDomAdapter extends DomAdapter {
  supportsDOMEvents = true;
  static makeCurrent() {
    setRootDomAdapter(new _BrowserDomAdapter());
  }
  onAndCancel(el, evt, listener2, options) {
    el.addEventListener(evt, listener2, options);
    return () => {
      el.removeEventListener(evt, listener2, options);
    };
  }
  dispatchEvent(el, evt) {
    el.dispatchEvent(evt);
  }
  remove(node) {
    node.remove();
  }
  createElement(tagName, doc) {
    doc = doc || this.getDefaultDocument();
    return doc.createElement(tagName);
  }
  createHtmlDocument() {
    return document.implementation.createHTMLDocument("fakeTitle");
  }
  getDefaultDocument() {
    return document;
  }
  isElementNode(node) {
    return node.nodeType === Node.ELEMENT_NODE;
  }
  isShadowRoot(node) {
    return node instanceof DocumentFragment;
  }
  /** @deprecated No longer being used in Ivy code. To be removed in version 14. */
  getGlobalEventTarget(doc, target) {
    if (target === "window") {
      return window;
    }
    if (target === "document") {
      return doc;
    }
    if (target === "body") {
      return doc.body;
    }
    return null;
  }
  getBaseHref(doc) {
    const href = getBaseElementHref();
    return href == null ? null : relativePath(href);
  }
  resetBaseElement() {
    baseElement = null;
  }
  getUserAgent() {
    return window.navigator.userAgent;
  }
  getCookie(name) {
    return parseCookieValue(document.cookie, name);
  }
};
var baseElement = null;
function getBaseElementHref() {
  baseElement = baseElement || document.head.querySelector("base");
  return baseElement ? baseElement.getAttribute("href") : null;
}
function relativePath(url) {
  return new URL(url, document.baseURI).pathname;
}
var BrowserGetTestability = class {
  addToWindow(registry) {
    _global["getAngularTestability"] = (elem, findInAncestors = true) => {
      const testability = registry.findTestabilityInTree(elem, findInAncestors);
      if (testability == null) {
        throw new RuntimeError(5103, (typeof ngDevMode === "undefined" || ngDevMode) && "Could not find testability for element.");
      }
      return testability;
    };
    _global["getAllAngularTestabilities"] = () => registry.getAllTestabilities();
    _global["getAllAngularRootElements"] = () => registry.getAllRootElements();
    const whenAllStable = (callback) => {
      const testabilities = _global["getAllAngularTestabilities"]();
      let count = testabilities.length;
      const decrement = function() {
        count--;
        if (count == 0) {
          callback();
        }
      };
      testabilities.forEach((testability) => {
        testability.whenStable(decrement);
      });
    };
    if (!_global["frameworkStabilizers"]) {
      _global["frameworkStabilizers"] = [];
    }
    _global["frameworkStabilizers"].push(whenAllStable);
  }
  findTestabilityInTree(registry, elem, findInAncestors) {
    if (elem == null) {
      return null;
    }
    const t = registry.getTestability(elem);
    if (t != null) {
      return t;
    } else if (!findInAncestors) {
      return null;
    }
    if (getDOM().isShadowRoot(elem)) {
      return this.findTestabilityInTree(registry, elem.host, true);
    }
    return this.findTestabilityInTree(registry, elem.parentElement, true);
  }
};
var BrowserXhr = class _BrowserXhr {
  build() {
    return new XMLHttpRequest();
  }
  static \u0275fac = function BrowserXhr_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _BrowserXhr)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _BrowserXhr,
    factory: _BrowserXhr.\u0275fac
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(BrowserXhr, [{
    type: Injectable
  }], null, null);
})();
var DomEventsPlugin = class _DomEventsPlugin extends EventManagerPlugin {
  constructor(doc) {
    super(doc);
  }
  // This plugin should come last in the list of plugins, because it accepts all
  // events.
  supports(eventName) {
    return true;
  }
  addEventListener(element2, eventName, handler, options) {
    element2.addEventListener(eventName, handler, options);
    return () => this.removeEventListener(element2, eventName, handler, options);
  }
  removeEventListener(target, eventName, callback, options) {
    return target.removeEventListener(eventName, callback, options);
  }
  static \u0275fac = function DomEventsPlugin_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DomEventsPlugin)(\u0275\u0275inject(DOCUMENT));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _DomEventsPlugin,
    factory: _DomEventsPlugin.\u0275fac
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DomEventsPlugin, [{
    type: Injectable
  }], () => [{
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT]
    }]
  }], null);
})();
var MODIFIER_KEYS = ["alt", "control", "meta", "shift"];
var _keyMap = {
  "\b": "Backspace",
  "	": "Tab",
  "\x7F": "Delete",
  "\x1B": "Escape",
  "Del": "Delete",
  "Esc": "Escape",
  "Left": "ArrowLeft",
  "Right": "ArrowRight",
  "Up": "ArrowUp",
  "Down": "ArrowDown",
  "Menu": "ContextMenu",
  "Scroll": "ScrollLock",
  "Win": "OS"
};
var MODIFIER_KEY_GETTERS = {
  "alt": (event) => event.altKey,
  "control": (event) => event.ctrlKey,
  "meta": (event) => event.metaKey,
  "shift": (event) => event.shiftKey
};
var KeyEventsPlugin = class _KeyEventsPlugin extends EventManagerPlugin {
  /**
   * Initializes an instance of the browser plug-in.
   * @param doc The document in which key events will be detected.
   */
  constructor(doc) {
    super(doc);
  }
  /**
   * Reports whether a named key event is supported.
   * @param eventName The event name to query.
   * @return True if the named key event is supported.
   */
  supports(eventName) {
    return _KeyEventsPlugin.parseEventName(eventName) != null;
  }
  /**
   * Registers a handler for a specific element and key event.
   * @param element The HTML element to receive event notifications.
   * @param eventName The name of the key event to listen for.
   * @param handler A function to call when the notification occurs. Receives the
   * event object as an argument.
   * @returns The key event that was registered.
   */
  addEventListener(element2, eventName, handler, options) {
    const parsedEvent = _KeyEventsPlugin.parseEventName(eventName);
    const outsideHandler = _KeyEventsPlugin.eventCallback(parsedEvent["fullKey"], handler, this.manager.getZone());
    return this.manager.getZone().runOutsideAngular(() => {
      return getDOM().onAndCancel(element2, parsedEvent["domEventName"], outsideHandler, options);
    });
  }
  /**
   * Parses the user provided full keyboard event definition and normalizes it for
   * later internal use. It ensures the string is all lowercase, converts special
   * characters to a standard spelling, and orders all the values consistently.
   *
   * @param eventName The name of the key event to listen for.
   * @returns an object with the full, normalized string, and the dom event name
   * or null in the case when the event doesn't match a keyboard event.
   */
  static parseEventName(eventName) {
    const parts = eventName.toLowerCase().split(".");
    const domEventName = parts.shift();
    if (parts.length === 0 || !(domEventName === "keydown" || domEventName === "keyup")) {
      return null;
    }
    const key = _KeyEventsPlugin._normalizeKey(parts.pop());
    let fullKey = "";
    let codeIX = parts.indexOf("code");
    if (codeIX > -1) {
      parts.splice(codeIX, 1);
      fullKey = "code.";
    }
    MODIFIER_KEYS.forEach((modifierName) => {
      const index = parts.indexOf(modifierName);
      if (index > -1) {
        parts.splice(index, 1);
        fullKey += modifierName + ".";
      }
    });
    fullKey += key;
    if (parts.length != 0 || key.length === 0) {
      return null;
    }
    const result = {};
    result["domEventName"] = domEventName;
    result["fullKey"] = fullKey;
    return result;
  }
  /**
   * Determines whether the actual keys pressed match the configured key code string.
   * The `fullKeyCode` event is normalized in the `parseEventName` method when the
   * event is attached to the DOM during the `addEventListener` call. This is unseen
   * by the end user and is normalized for internal consistency and parsing.
   *
   * @param event The keyboard event.
   * @param fullKeyCode The normalized user defined expected key event string
   * @returns boolean.
   */
  static matchEventFullKeyCode(event, fullKeyCode) {
    let keycode = _keyMap[event.key] || event.key;
    let key = "";
    if (fullKeyCode.indexOf("code.") > -1) {
      keycode = event.code;
      key = "code.";
    }
    if (keycode == null || !keycode) return false;
    keycode = keycode.toLowerCase();
    if (keycode === " ") {
      keycode = "space";
    } else if (keycode === ".") {
      keycode = "dot";
    }
    MODIFIER_KEYS.forEach((modifierName) => {
      if (modifierName !== keycode) {
        const modifierGetter = MODIFIER_KEY_GETTERS[modifierName];
        if (modifierGetter(event)) {
          key += modifierName + ".";
        }
      }
    });
    key += keycode;
    return key === fullKeyCode;
  }
  /**
   * Configures a handler callback for a key event.
   * @param fullKey The event name that combines all simultaneous keystrokes.
   * @param handler The function that responds to the key event.
   * @param zone The zone in which the event occurred.
   * @returns A callback function.
   */
  static eventCallback(fullKey, handler, zone) {
    return (event) => {
      if (_KeyEventsPlugin.matchEventFullKeyCode(event, fullKey)) {
        zone.runGuarded(() => handler(event));
      }
    };
  }
  /** @internal */
  static _normalizeKey(keyName) {
    return keyName === "esc" ? "escape" : keyName;
  }
  static \u0275fac = function KeyEventsPlugin_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _KeyEventsPlugin)(\u0275\u0275inject(DOCUMENT));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _KeyEventsPlugin,
    factory: _KeyEventsPlugin.\u0275fac
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(KeyEventsPlugin, [{
    type: Injectable
  }], () => [{
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT]
    }]
  }], null);
})();
function bootstrapApplication(rootComponent, options) {
  return internalCreateApplication(__spreadValues({
    rootComponent
  }, createProvidersConfig(options)));
}
function createProvidersConfig(options) {
  return {
    appProviders: [...BROWSER_MODULE_PROVIDERS, ...options?.providers ?? []],
    platformProviders: INTERNAL_BROWSER_PLATFORM_PROVIDERS
  };
}
function initDomAdapter() {
  BrowserDomAdapter.makeCurrent();
}
function errorHandler() {
  return new ErrorHandler();
}
function _document() {
  setDocument(document);
  return document;
}
var INTERNAL_BROWSER_PLATFORM_PROVIDERS = [{
  provide: PLATFORM_ID,
  useValue: PLATFORM_BROWSER_ID
}, {
  provide: PLATFORM_INITIALIZER,
  useValue: initDomAdapter,
  multi: true
}, {
  provide: DOCUMENT,
  useFactory: _document
}];
var platformBrowser = createPlatformFactory(platformCore, "browser", INTERNAL_BROWSER_PLATFORM_PROVIDERS);
var BROWSER_MODULE_PROVIDERS_MARKER = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "BrowserModule Providers Marker" : "");
var TESTABILITY_PROVIDERS = [{
  provide: TESTABILITY_GETTER,
  useClass: BrowserGetTestability
}, {
  provide: TESTABILITY,
  useClass: Testability,
  deps: [NgZone, TestabilityRegistry, TESTABILITY_GETTER]
}, {
  provide: Testability,
  // Also provide as `Testability` for backwards-compatibility.
  useClass: Testability,
  deps: [NgZone, TestabilityRegistry, TESTABILITY_GETTER]
}];
var BROWSER_MODULE_PROVIDERS = [{
  provide: INJECTOR_SCOPE,
  useValue: "root"
}, {
  provide: ErrorHandler,
  useFactory: errorHandler
}, {
  provide: EVENT_MANAGER_PLUGINS,
  useClass: DomEventsPlugin,
  multi: true,
  deps: [DOCUMENT]
}, {
  provide: EVENT_MANAGER_PLUGINS,
  useClass: KeyEventsPlugin,
  multi: true,
  deps: [DOCUMENT]
}, DomRendererFactory2, SharedStylesHost, EventManager, {
  provide: RendererFactory2,
  useExisting: DomRendererFactory2
}, {
  provide: XhrFactory,
  useClass: BrowserXhr
}, typeof ngDevMode === "undefined" || ngDevMode ? {
  provide: BROWSER_MODULE_PROVIDERS_MARKER,
  useValue: true
} : []];
var BrowserModule = class _BrowserModule {
  constructor() {
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      const providersAlreadyPresent = inject(BROWSER_MODULE_PROVIDERS_MARKER, {
        optional: true,
        skipSelf: true
      });
      if (providersAlreadyPresent) {
        throw new RuntimeError(5100, `Providers from the \`BrowserModule\` have already been loaded. If you need access to common directives such as NgIf and NgFor, import the \`CommonModule\` instead.`);
      }
    }
  }
  static \u0275fac = function BrowserModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _BrowserModule)();
  };
  static \u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
    type: _BrowserModule,
    exports: [CommonModule, ApplicationModule]
  });
  static \u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
    providers: [...BROWSER_MODULE_PROVIDERS, ...TESTABILITY_PROVIDERS],
    imports: [CommonModule, ApplicationModule]
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(BrowserModule, [{
    type: NgModule,
    args: [{
      providers: [...BROWSER_MODULE_PROVIDERS, ...TESTABILITY_PROVIDERS],
      exports: [CommonModule, ApplicationModule]
    }]
  }], () => [], null);
})();

// node_modules/@angular/platform-browser/fesm2022/platform-browser.mjs
var Meta = class _Meta {
  _doc;
  _dom;
  constructor(_doc) {
    this._doc = _doc;
    this._dom = getDOM();
  }
  /**
   * Retrieves or creates a specific `<meta>` tag element in the current HTML document.
   * In searching for an existing tag, Angular attempts to match the `name` or `property` attribute
   * values in the provided tag definition, and verifies that all other attribute values are equal.
   * If an existing element is found, it is returned and is not modified in any way.
   * @param tag The definition of a `<meta>` element to match or create.
   * @param forceCreation True to create a new element without checking whether one already exists.
   * @returns The existing element with the same attributes and values if found,
   * the new element if no match is found, or `null` if the tag parameter is not defined.
   */
  addTag(tag, forceCreation = false) {
    if (!tag) return null;
    return this._getOrCreateElement(tag, forceCreation);
  }
  /**
   * Retrieves or creates a set of `<meta>` tag elements in the current HTML document.
   * In searching for an existing tag, Angular attempts to match the `name` or `property` attribute
   * values in the provided tag definition, and verifies that all other attribute values are equal.
   * @param tags An array of tag definitions to match or create.
   * @param forceCreation True to create new elements without checking whether they already exist.
   * @returns The matching elements if found, or the new elements.
   */
  addTags(tags, forceCreation = false) {
    if (!tags) return [];
    return tags.reduce((result, tag) => {
      if (tag) {
        result.push(this._getOrCreateElement(tag, forceCreation));
      }
      return result;
    }, []);
  }
  /**
   * Retrieves a `<meta>` tag element in the current HTML document.
   * @param attrSelector The tag attribute and value to match against, in the format
   * `"tag_attribute='value string'"`.
   * @returns The matching element, if any.
   */
  getTag(attrSelector) {
    if (!attrSelector) return null;
    return this._doc.querySelector(`meta[${attrSelector}]`) || null;
  }
  /**
   * Retrieves a set of `<meta>` tag elements in the current HTML document.
   * @param attrSelector The tag attribute and value to match against, in the format
   * `"tag_attribute='value string'"`.
   * @returns The matching elements, if any.
   */
  getTags(attrSelector) {
    if (!attrSelector) return [];
    const list = this._doc.querySelectorAll(`meta[${attrSelector}]`);
    return list ? [].slice.call(list) : [];
  }
  /**
   * Modifies an existing `<meta>` tag element in the current HTML document.
   * @param tag The tag description with which to replace the existing tag content.
   * @param selector A tag attribute and value to match against, to identify
   * an existing tag. A string in the format `"tag_attribute=`value string`"`.
   * If not supplied, matches a tag with the same `name` or `property` attribute value as the
   * replacement tag.
   * @return The modified element.
   */
  updateTag(tag, selector) {
    if (!tag) return null;
    selector = selector || this._parseSelector(tag);
    const meta = this.getTag(selector);
    if (meta) {
      return this._setMetaElementAttributes(tag, meta);
    }
    return this._getOrCreateElement(tag, true);
  }
  /**
   * Removes an existing `<meta>` tag element from the current HTML document.
   * @param attrSelector A tag attribute and value to match against, to identify
   * an existing tag. A string in the format `"tag_attribute=`value string`"`.
   */
  removeTag(attrSelector) {
    this.removeTagElement(this.getTag(attrSelector));
  }
  /**
   * Removes an existing `<meta>` tag element from the current HTML document.
   * @param meta The tag definition to match against to identify an existing tag.
   */
  removeTagElement(meta) {
    if (meta) {
      this._dom.remove(meta);
    }
  }
  _getOrCreateElement(meta, forceCreation = false) {
    if (!forceCreation) {
      const selector = this._parseSelector(meta);
      const elem = this.getTags(selector).filter((elem2) => this._containsAttributes(meta, elem2))[0];
      if (elem !== void 0) return elem;
    }
    const element2 = this._dom.createElement("meta");
    this._setMetaElementAttributes(meta, element2);
    const head = this._doc.getElementsByTagName("head")[0];
    head.appendChild(element2);
    return element2;
  }
  _setMetaElementAttributes(tag, el) {
    Object.keys(tag).forEach((prop) => el.setAttribute(this._getMetaKeyMap(prop), tag[prop]));
    return el;
  }
  _parseSelector(tag) {
    const attr = tag.name ? "name" : "property";
    return `${attr}="${tag[attr]}"`;
  }
  _containsAttributes(tag, elem) {
    return Object.keys(tag).every((key) => elem.getAttribute(this._getMetaKeyMap(key)) === tag[key]);
  }
  _getMetaKeyMap(prop) {
    return META_KEYS_MAP[prop] || prop;
  }
  static \u0275fac = function Meta_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _Meta)(\u0275\u0275inject(DOCUMENT));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _Meta,
    factory: _Meta.\u0275fac,
    providedIn: "root"
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(Meta, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT]
    }]
  }], null);
})();
var META_KEYS_MAP = {
  httpEquiv: "http-equiv"
};
var Title = class _Title {
  _doc;
  constructor(_doc) {
    this._doc = _doc;
  }
  /**
   * Get the title of the current HTML document.
   */
  getTitle() {
    return this._doc.title;
  }
  /**
   * Set the title of the current HTML document.
   * @param newTitle
   */
  setTitle(newTitle) {
    this._doc.title = newTitle || "";
  }
  static \u0275fac = function Title_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _Title)(\u0275\u0275inject(DOCUMENT));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _Title,
    factory: _Title.\u0275fac,
    providedIn: "root"
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(Title, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT]
    }]
  }], null);
})();
var EVENT_NAMES = {
  // pan
  "pan": true,
  "panstart": true,
  "panmove": true,
  "panend": true,
  "pancancel": true,
  "panleft": true,
  "panright": true,
  "panup": true,
  "pandown": true,
  // pinch
  "pinch": true,
  "pinchstart": true,
  "pinchmove": true,
  "pinchend": true,
  "pinchcancel": true,
  "pinchin": true,
  "pinchout": true,
  // press
  "press": true,
  "pressup": true,
  // rotate
  "rotate": true,
  "rotatestart": true,
  "rotatemove": true,
  "rotateend": true,
  "rotatecancel": true,
  // swipe
  "swipe": true,
  "swipeleft": true,
  "swiperight": true,
  "swipeup": true,
  "swipedown": true,
  // tap
  "tap": true,
  "doubletap": true
};
var HAMMER_GESTURE_CONFIG = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "HammerGestureConfig" : "");
var HAMMER_LOADER = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "HammerLoader" : "");
var HammerGestureConfig = class _HammerGestureConfig {
  /**
   * A set of supported event names for gestures to be used in Angular.
   * Angular supports all built-in recognizers, as listed in
   * [HammerJS documentation](https://hammerjs.github.io/).
   */
  events = [];
  /**
   * Maps gesture event names to a set of configuration options
   * that specify overrides to the default values for specific properties.
   *
   * The key is a supported event name to be configured,
   * and the options object contains a set of properties, with override values
   * to be applied to the named recognizer event.
   * For example, to disable recognition of the rotate event, specify
   *  `{"rotate": {"enable": false}}`.
   *
   * Properties that are not present take the HammerJS default values.
   * For information about which properties are supported for which events,
   * and their allowed and default values, see
   * [HammerJS documentation](https://hammerjs.github.io/).
   *
   */
  overrides = {};
  /**
   * Properties whose default values can be overridden for a given event.
   * Different sets of properties apply to different events.
   * For information about which properties are supported for which events,
   * and their allowed and default values, see
   * [HammerJS documentation](https://hammerjs.github.io/).
   */
  options;
  /**
   * Creates a [HammerJS Manager](https://hammerjs.github.io/api/#hammermanager)
   * and attaches it to a given HTML element.
   * @param element The element that will recognize gestures.
   * @returns A HammerJS event-manager object.
   */
  buildHammer(element2) {
    const mc = new Hammer(element2, this.options);
    mc.get("pinch").set({
      enable: true
    });
    mc.get("rotate").set({
      enable: true
    });
    for (const eventName in this.overrides) {
      mc.get(eventName).set(this.overrides[eventName]);
    }
    return mc;
  }
  static \u0275fac = function HammerGestureConfig_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _HammerGestureConfig)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _HammerGestureConfig,
    factory: _HammerGestureConfig.\u0275fac
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(HammerGestureConfig, [{
    type: Injectable
  }], null, null);
})();
var HammerGesturesPlugin = class _HammerGesturesPlugin extends EventManagerPlugin {
  _config;
  _injector;
  loader;
  _loaderPromise = null;
  constructor(doc, _config, _injector, loader) {
    super(doc);
    this._config = _config;
    this._injector = _injector;
    this.loader = loader;
  }
  supports(eventName) {
    if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {
      return false;
    }
    if (!window.Hammer && !this.loader) {
      if (typeof ngDevMode === "undefined" || ngDevMode) {
        const _console = this._injector.get(Console);
        _console.warn(`The "${eventName}" event cannot be bound because Hammer.JS is not loaded and no custom loader has been specified.`);
      }
      return false;
    }
    return true;
  }
  addEventListener(element2, eventName, handler) {
    const zone = this.manager.getZone();
    eventName = eventName.toLowerCase();
    if (!window.Hammer && this.loader) {
      this._loaderPromise = this._loaderPromise || zone.runOutsideAngular(() => this.loader());
      let cancelRegistration = false;
      let deregister = () => {
        cancelRegistration = true;
      };
      zone.runOutsideAngular(() => this._loaderPromise.then(() => {
        if (!window.Hammer) {
          if (typeof ngDevMode === "undefined" || ngDevMode) {
            const _console = this._injector.get(Console);
            _console.warn(`The custom HAMMER_LOADER completed, but Hammer.JS is not present.`);
          }
          deregister = () => {
          };
          return;
        }
        if (!cancelRegistration) {
          deregister = this.addEventListener(element2, eventName, handler);
        }
      }).catch(() => {
        if (typeof ngDevMode === "undefined" || ngDevMode) {
          const _console = this._injector.get(Console);
          _console.warn(`The "${eventName}" event cannot be bound because the custom Hammer.JS loader failed.`);
        }
        deregister = () => {
        };
      }));
      return () => {
        deregister();
      };
    }
    return zone.runOutsideAngular(() => {
      const mc = this._config.buildHammer(element2);
      const callback = function(eventObj) {
        zone.runGuarded(function() {
          handler(eventObj);
        });
      };
      mc.on(eventName, callback);
      return () => {
        mc.off(eventName, callback);
        if (typeof mc.destroy === "function") {
          mc.destroy();
        }
      };
    });
  }
  isCustomEvent(eventName) {
    return this._config.events.indexOf(eventName) > -1;
  }
  static \u0275fac = function HammerGesturesPlugin_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _HammerGesturesPlugin)(\u0275\u0275inject(DOCUMENT), \u0275\u0275inject(HAMMER_GESTURE_CONFIG), \u0275\u0275inject(Injector), \u0275\u0275inject(HAMMER_LOADER, 8));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _HammerGesturesPlugin,
    factory: _HammerGesturesPlugin.\u0275fac
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(HammerGesturesPlugin, [{
    type: Injectable
  }], () => [{
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT]
    }]
  }, {
    type: HammerGestureConfig,
    decorators: [{
      type: Inject,
      args: [HAMMER_GESTURE_CONFIG]
    }]
  }, {
    type: Injector
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [HAMMER_LOADER]
    }]
  }], null);
})();
var HammerModule = class _HammerModule {
  static \u0275fac = function HammerModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _HammerModule)();
  };
  static \u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
    type: _HammerModule
  });
  static \u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
    providers: [{
      provide: EVENT_MANAGER_PLUGINS,
      useClass: HammerGesturesPlugin,
      multi: true,
      deps: [DOCUMENT, HAMMER_GESTURE_CONFIG, Injector, [new Optional(), HAMMER_LOADER]]
    }, {
      provide: HAMMER_GESTURE_CONFIG,
      useClass: HammerGestureConfig
    }]
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(HammerModule, [{
    type: NgModule,
    args: [{
      providers: [{
        provide: EVENT_MANAGER_PLUGINS,
        useClass: HammerGesturesPlugin,
        multi: true,
        deps: [DOCUMENT, HAMMER_GESTURE_CONFIG, Injector, [new Optional(), HAMMER_LOADER]]
      }, {
        provide: HAMMER_GESTURE_CONFIG,
        useClass: HammerGestureConfig
      }]
    }]
  }], null, null);
})();
var DomSanitizer = class _DomSanitizer {
  static \u0275fac = function DomSanitizer_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DomSanitizer)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _DomSanitizer,
    factory: function DomSanitizer_Factory(__ngFactoryType__) {
      let __ngConditionalFactory__ = null;
      if (__ngFactoryType__) {
        __ngConditionalFactory__ = new (__ngFactoryType__ || _DomSanitizer)();
      } else {
        __ngConditionalFactory__ = \u0275\u0275inject(DomSanitizerImpl);
      }
      return __ngConditionalFactory__;
    },
    providedIn: "root"
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DomSanitizer, [{
    type: Injectable,
    args: [{
      providedIn: "root",
      useExisting: forwardRef(() => DomSanitizerImpl)
    }]
  }], null, null);
})();
var DomSanitizerImpl = class _DomSanitizerImpl extends DomSanitizer {
  _doc;
  constructor(_doc) {
    super();
    this._doc = _doc;
  }
  sanitize(ctx, value) {
    if (value == null) return null;
    switch (ctx) {
      case SecurityContext.NONE:
        return value;
      case SecurityContext.HTML:
        if (allowSanitizationBypassAndThrow(
          value,
          "HTML"
          /* BypassType.Html */
        )) {
          return unwrapSafeValue(value);
        }
        return _sanitizeHtml(this._doc, String(value)).toString();
      case SecurityContext.STYLE:
        if (allowSanitizationBypassAndThrow(
          value,
          "Style"
          /* BypassType.Style */
        )) {
          return unwrapSafeValue(value);
        }
        return value;
      case SecurityContext.SCRIPT:
        if (allowSanitizationBypassAndThrow(
          value,
          "Script"
          /* BypassType.Script */
        )) {
          return unwrapSafeValue(value);
        }
        throw new RuntimeError(5200, (typeof ngDevMode === "undefined" || ngDevMode) && "unsafe value used in a script context");
      case SecurityContext.URL:
        if (allowSanitizationBypassAndThrow(
          value,
          "URL"
          /* BypassType.Url */
        )) {
          return unwrapSafeValue(value);
        }
        return _sanitizeUrl(String(value));
      case SecurityContext.RESOURCE_URL:
        if (allowSanitizationBypassAndThrow(
          value,
          "ResourceURL"
          /* BypassType.ResourceUrl */
        )) {
          return unwrapSafeValue(value);
        }
        throw new RuntimeError(5201, (typeof ngDevMode === "undefined" || ngDevMode) && `unsafe value used in a resource URL context (see ${XSS_SECURITY_URL})`);
      default:
        throw new RuntimeError(5202, (typeof ngDevMode === "undefined" || ngDevMode) && `Unexpected SecurityContext ${ctx} (see ${XSS_SECURITY_URL})`);
    }
  }
  bypassSecurityTrustHtml(value) {
    return bypassSanitizationTrustHtml(value);
  }
  bypassSecurityTrustStyle(value) {
    return bypassSanitizationTrustStyle(value);
  }
  bypassSecurityTrustScript(value) {
    return bypassSanitizationTrustScript(value);
  }
  bypassSecurityTrustUrl(value) {
    return bypassSanitizationTrustUrl(value);
  }
  bypassSecurityTrustResourceUrl(value) {
    return bypassSanitizationTrustResourceUrl(value);
  }
  static \u0275fac = function DomSanitizerImpl_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DomSanitizerImpl)(\u0275\u0275inject(DOCUMENT));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _DomSanitizerImpl,
    factory: _DomSanitizerImpl.\u0275fac,
    providedIn: "root"
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DomSanitizerImpl, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT]
    }]
  }], null);
})();
var HydrationFeatureKind;
(function(HydrationFeatureKind2) {
  HydrationFeatureKind2[HydrationFeatureKind2["NoHttpTransferCache"] = 0] = "NoHttpTransferCache";
  HydrationFeatureKind2[HydrationFeatureKind2["HttpTransferCacheOptions"] = 1] = "HttpTransferCacheOptions";
  HydrationFeatureKind2[HydrationFeatureKind2["I18nSupport"] = 2] = "I18nSupport";
  HydrationFeatureKind2[HydrationFeatureKind2["EventReplay"] = 3] = "EventReplay";
  HydrationFeatureKind2[HydrationFeatureKind2["IncrementalHydration"] = 4] = "IncrementalHydration";
})(HydrationFeatureKind || (HydrationFeatureKind = {}));
var VERSION2 = new Version("19.2.14");

// src/app/services/auth.service.ts
var AuthService = class _AuthService {
  http;
  /** @private Base authentication API URL */
  apiUrl = environment.apiUrl + "/auth";
  /** @private BehaviorSubject for reactive user role management */
  role$ = new BehaviorSubject(localStorage.getItem("role"));
  /** @private BehaviorSubject for reactive user name management */
  userName$ = new BehaviorSubject(localStorage.getItem("userName"));
  // Added for user name
  /**
   * @constructor
   * @description Initializes the AuthService with HTTP client dependency
   * @param {HttpClient} http - Angular HTTP client for API communication
   */
  constructor(http) {
    this.http = http;
  }
  /**
   * @method register
   * @description Registers a new user in the system
   * @param {Object} data - User registration data
   * @param {string} data.username - Unique username for the new user
   * @param {string} data.email - Email address of the new user
   * @param {string} data.password - Password for the new user account
   * @param {string} [data.role] - Optional role assignment (defaults to basic user)
   * @returns {Observable<any>} Observable containing registration response
   * @throws {HttpErrorResponse} When registration fails due to validation errors or duplicate users
   *
   * @example
   * ```typescript
   * const userData = {
   *   username: 'newadmin',
   *   email: 'newadmin@nexprep.com',
   *   password: 'securePassword123',
   *   role: 'admin'
   * };
   *
   * this.authService.register(userData).subscribe({
   *   next: (response) => console.log('User registered successfully:', response),
   *   error: (error) => console.error('Registration failed:', error)
   * });
   * ```
   */
  register(data) {
    return this.http.post(`${this.apiUrl}/register`, data);
  }
  /**
   * @method login
   * @description Authenticates a user and establishes a session
   * @param {string} email - User's email address
   * @param {string} password - User's password
   * @returns {Observable<AuthResponse>} Observable containing authentication response with token and user details
   * @throws {HttpErrorResponse} When authentication fails due to invalid credentials
   *
   * @example
   * ```typescript
   * this.authService.login('admin@nexprep.com', 'password123').subscribe({
   *   next: (response) => {
   *     console.log('Login successful for:', response.name);
   *     console.log('User role:', response.role);
   *     this.router.navigate(['/dashboard']);
   *   },
   *   error: (error) => {
   *     console.error('Login failed:', error);
   *     this.showErrorMessage('Invalid email or password');
   *   }
   * });
   * ```
   */
  login(email, password) {
    return this.http.post(`${this.apiUrl}/login`, { email, password }).pipe(tap((res) => {
      localStorage.setItem("token", res.token);
      localStorage.setItem("role", res.role);
      localStorage.setItem("userName", res.name);
      localStorage.setItem("userId", res.userId);
      this.role$.next(res.role);
      this.userName$.next(res.name);
    }));
  }
  /**
   * @method logout
   * @description Logs out the current user and clears all session data
   * @returns {void}
   *
   * @example
   * ```typescript
   * this.authService.logout();
   * console.log('User logged out successfully');
   * this.router.navigate(['/login']);
   * ```
   */
  logout() {
    localStorage.removeItem("token");
    localStorage.removeItem("role");
    localStorage.removeItem("userName");
    localStorage.removeItem("userId");
    this.role$.next(null);
    this.userName$.next(null);
  }
  /**
   * @method isLoggedIn
   * @description Checks if a user is currently authenticated
   * @returns {boolean} True if user is logged in, false otherwise
   *
   * @example
   * ```typescript
   * if (this.authService.isLoggedIn()) {
   *   console.log('User is authenticated');
   *   this.loadUserData();
   * } else {
   *   console.log('User not authenticated');
   *   this.router.navigate(['/login']);
   * }
   * ```
   */
  isLoggedIn() {
    return !!localStorage.getItem("token");
  }
  /**
   * @method getToken
   * @description Retrieves the current authentication token
   * @returns {string|null} JWT token if user is logged in, null otherwise
   *
   * @example
   * ```typescript
   * const token = this.authService.getToken();
   * if (token) {
   *   console.log('Token available for API requests');
   *   // Use token for authenticated API calls
   * } else {
   *   console.log('No token available - user not authenticated');
   * }
   * ```
   */
  getToken() {
    return localStorage.getItem("token");
  }
  /**
  * @method getUserRole
  * @description Retrieves the current user's role
  * @returns {string|null} User role string if logged in, null otherwise
  *
  * @example
  * ```typescript
  * const userRole = this.authService.getUserRole();
  * if (userRole === 'admin') {
  *   console.log('User has admin privileges');
  *   this.showAdminMenu();
  * } else if (userRole === 'moderator') {
  *   console.log('User has moderator privileges');
  *   this.showModeratorMenu();
  * }
  * ```
  */
  getUserRole() {
    return localStorage.getItem("role");
  }
  /**
   * @method getRole
   * @description Alias for getUserRole method for backward compatibility
   * @returns {string|null} User role string if logged in, null otherwise
   * @deprecated Use getUserRole() instead
   *
   * @example
   * ```typescript
   * // Deprecated - use getUserRole() instead
   * const role = this.authService.getRole();
   * ```
   */
  // Alias for getUserRole for backward compatibility
  getRole() {
    return this.getUserRole();
  }
  /**
   * @method getUserName
   * @description Retrieves the current user's display name
   * @returns {string|null} User name if logged in, null otherwise
   *
   * @example
   * ```typescript
   * const userName = this.authService.getUserName();
   * if (userName) {
   *   this.welcomeMessage = `Welcome back, ${userName}!`;
   * }
   * ```
   */
  getUserName() {
    return localStorage.getItem("userName");
  }
  /**
   * @method getUserId
   * @description Retrieves the current user's unique identifier
   * @returns {string|null} User ID if logged in, null otherwise
   *
   * @example
   * ```typescript
   * const userId = this.authService.getUserId();
   * if (userId) {
   *   this.loadUserSpecificData(userId);
   * }
   * ```
   */
  getUserId() {
    return localStorage.getItem("userId");
  }
  /**
   * @method getUserNameObservable
   * @description Returns an observable for reactive user name changes
   * @returns {Observable<string|null>} Observable that emits user name changes
   *
   * @example
   * ```typescript
   * ngOnInit() {
   *   this.authService.getUserNameObservable().subscribe(name => {
   *     this.currentUserName = name;
   *     if (name) {
   *       this.updateUserInterface();
   *     }
   *   });
   * }
   * ```
   */
  getUserNameObservable() {
    return this.userName$.asObservable();
  }
  static \u0275fac = function AuthService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AuthService)(\u0275\u0275inject(HttpClient));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _AuthService, factory: _AuthService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AuthService, [{
    type: Injectable,
    args: [{ providedIn: "root" }]
  }], () => [{ type: HttpClient }], null);
})();

// src/app/services/auth.interceptor.ts
var AuthInterceptor = class _AuthInterceptor {
  auth;
  constructor(auth) {
    this.auth = auth;
  }
  intercept(req, next) {
    const token = this.auth.getToken();
    if (token) {
      req = req.clone({
        setHeaders: { Authorization: `Bearer ${token}` }
      });
    }
    return next.handle(req);
  }
  static \u0275fac = function AuthInterceptor_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AuthInterceptor)(\u0275\u0275inject(AuthService));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _AuthInterceptor, factory: _AuthInterceptor.\u0275fac });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AuthInterceptor, [{
    type: Injectable
  }], () => [{ type: AuthService }], null);
})();

// node_modules/@angular/router/fesm2022/router-Dwfin5Au.mjs
var PRIMARY_OUTLET = "primary";
var RouteTitleKey = /* @__PURE__ */ Symbol("RouteTitle");
var ParamsAsMap = class {
  params;
  constructor(params) {
    this.params = params || {};
  }
  has(name) {
    return Object.prototype.hasOwnProperty.call(this.params, name);
  }
  get(name) {
    if (this.has(name)) {
      const v = this.params[name];
      return Array.isArray(v) ? v[0] : v;
    }
    return null;
  }
  getAll(name) {
    if (this.has(name)) {
      const v = this.params[name];
      return Array.isArray(v) ? v : [v];
    }
    return [];
  }
  get keys() {
    return Object.keys(this.params);
  }
};
function convertToParamMap(params) {
  return new ParamsAsMap(params);
}
function defaultUrlMatcher(segments, segmentGroup, route) {
  const parts = route.path.split("/");
  if (parts.length > segments.length) {
    return null;
  }
  if (route.pathMatch === "full" && (segmentGroup.hasChildren() || parts.length < segments.length)) {
    return null;
  }
  const posParams = {};
  for (let index = 0; index < parts.length; index++) {
    const part = parts[index];
    const segment = segments[index];
    const isParameter = part[0] === ":";
    if (isParameter) {
      posParams[part.substring(1)] = segment;
    } else if (part !== segment.path) {
      return null;
    }
  }
  return {
    consumed: segments.slice(0, parts.length),
    posParams
  };
}
function shallowEqualArrays(a, b) {
  if (a.length !== b.length) return false;
  for (let i = 0; i < a.length; ++i) {
    if (!shallowEqual(a[i], b[i])) return false;
  }
  return true;
}
function shallowEqual(a, b) {
  const k1 = a ? getDataKeys(a) : void 0;
  const k2 = b ? getDataKeys(b) : void 0;
  if (!k1 || !k2 || k1.length != k2.length) {
    return false;
  }
  let key;
  for (let i = 0; i < k1.length; i++) {
    key = k1[i];
    if (!equalArraysOrString(a[key], b[key])) {
      return false;
    }
  }
  return true;
}
function getDataKeys(obj) {
  return [...Object.keys(obj), ...Object.getOwnPropertySymbols(obj)];
}
function equalArraysOrString(a, b) {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    const aSorted = [...a].sort();
    const bSorted = [...b].sort();
    return aSorted.every((val, index) => bSorted[index] === val);
  } else {
    return a === b;
  }
}
function last2(a) {
  return a.length > 0 ? a[a.length - 1] : null;
}
function wrapIntoObservable(value) {
  if (isObservable(value)) {
    return value;
  }
  if (isPromise(value)) {
    return from(Promise.resolve(value));
  }
  return of(value);
}
var pathCompareMap = {
  "exact": equalSegmentGroups,
  "subset": containsSegmentGroup
};
var paramCompareMap = {
  "exact": equalParams,
  "subset": containsParams,
  "ignored": () => true
};
function containsTree(container, containee, options) {
  return pathCompareMap[options.paths](container.root, containee.root, options.matrixParams) && paramCompareMap[options.queryParams](container.queryParams, containee.queryParams) && !(options.fragment === "exact" && container.fragment !== containee.fragment);
}
function equalParams(container, containee) {
  return shallowEqual(container, containee);
}
function equalSegmentGroups(container, containee, matrixParams) {
  if (!equalPath(container.segments, containee.segments)) return false;
  if (!matrixParamsMatch(container.segments, containee.segments, matrixParams)) {
    return false;
  }
  if (container.numberOfChildren !== containee.numberOfChildren) return false;
  for (const c in containee.children) {
    if (!container.children[c]) return false;
    if (!equalSegmentGroups(container.children[c], containee.children[c], matrixParams)) return false;
  }
  return true;
}
function containsParams(container, containee) {
  return Object.keys(containee).length <= Object.keys(container).length && Object.keys(containee).every((key) => equalArraysOrString(container[key], containee[key]));
}
function containsSegmentGroup(container, containee, matrixParams) {
  return containsSegmentGroupHelper(container, containee, containee.segments, matrixParams);
}
function containsSegmentGroupHelper(container, containee, containeePaths, matrixParams) {
  if (container.segments.length > containeePaths.length) {
    const current = container.segments.slice(0, containeePaths.length);
    if (!equalPath(current, containeePaths)) return false;
    if (containee.hasChildren()) return false;
    if (!matrixParamsMatch(current, containeePaths, matrixParams)) return false;
    return true;
  } else if (container.segments.length === containeePaths.length) {
    if (!equalPath(container.segments, containeePaths)) return false;
    if (!matrixParamsMatch(container.segments, containeePaths, matrixParams)) return false;
    for (const c in containee.children) {
      if (!container.children[c]) return false;
      if (!containsSegmentGroup(container.children[c], containee.children[c], matrixParams)) {
        return false;
      }
    }
    return true;
  } else {
    const current = containeePaths.slice(0, container.segments.length);
    const next = containeePaths.slice(container.segments.length);
    if (!equalPath(container.segments, current)) return false;
    if (!matrixParamsMatch(container.segments, current, matrixParams)) return false;
    if (!container.children[PRIMARY_OUTLET]) return false;
    return containsSegmentGroupHelper(container.children[PRIMARY_OUTLET], containee, next, matrixParams);
  }
}
function matrixParamsMatch(containerPaths, containeePaths, options) {
  return containeePaths.every((containeeSegment, i) => {
    return paramCompareMap[options](containerPaths[i].parameters, containeeSegment.parameters);
  });
}
var UrlTree = class {
  root;
  queryParams;
  fragment;
  /** @internal */
  _queryParamMap;
  constructor(root = new UrlSegmentGroup([], {}), queryParams = {}, fragment = null) {
    this.root = root;
    this.queryParams = queryParams;
    this.fragment = fragment;
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      if (root.segments.length > 0) {
        throw new RuntimeError(4015, "The root `UrlSegmentGroup` should not contain `segments`. Instead, these segments belong in the `children` so they can be associated with a named outlet.");
      }
    }
  }
  get queryParamMap() {
    this._queryParamMap ??= convertToParamMap(this.queryParams);
    return this._queryParamMap;
  }
  /** @docsNotRequired */
  toString() {
    return DEFAULT_SERIALIZER.serialize(this);
  }
};
var UrlSegmentGroup = class {
  segments;
  children;
  /** The parent node in the url tree */
  parent = null;
  constructor(segments, children) {
    this.segments = segments;
    this.children = children;
    Object.values(children).forEach((v) => v.parent = this);
  }
  /** Whether the segment has child segments */
  hasChildren() {
    return this.numberOfChildren > 0;
  }
  /** Number of child segments */
  get numberOfChildren() {
    return Object.keys(this.children).length;
  }
  /** @docsNotRequired */
  toString() {
    return serializePaths(this);
  }
};
var UrlSegment = class {
  path;
  parameters;
  /** @internal */
  _parameterMap;
  constructor(path2, parameters) {
    this.path = path2;
    this.parameters = parameters;
  }
  get parameterMap() {
    this._parameterMap ??= convertToParamMap(this.parameters);
    return this._parameterMap;
  }
  /** @docsNotRequired */
  toString() {
    return serializePath(this);
  }
};
function equalSegments(as, bs) {
  return equalPath(as, bs) && as.every((a, i) => shallowEqual(a.parameters, bs[i].parameters));
}
function equalPath(as, bs) {
  if (as.length !== bs.length) return false;
  return as.every((a, i) => a.path === bs[i].path);
}
function mapChildrenIntoArray(segment, fn2) {
  let res = [];
  Object.entries(segment.children).forEach(([childOutlet, child]) => {
    if (childOutlet === PRIMARY_OUTLET) {
      res = res.concat(fn2(child, childOutlet));
    }
  });
  Object.entries(segment.children).forEach(([childOutlet, child]) => {
    if (childOutlet !== PRIMARY_OUTLET) {
      res = res.concat(fn2(child, childOutlet));
    }
  });
  return res;
}
var UrlSerializer = class _UrlSerializer {
  static \u0275fac = function UrlSerializer_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _UrlSerializer)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _UrlSerializer,
    factory: () => (() => new DefaultUrlSerializer())(),
    providedIn: "root"
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(UrlSerializer, [{
    type: Injectable,
    args: [{
      providedIn: "root",
      useFactory: () => new DefaultUrlSerializer()
    }]
  }], null, null);
})();
var DefaultUrlSerializer = class {
  /** Parses a url into a `UrlTree` */
  parse(url) {
    const p = new UrlParser(url);
    return new UrlTree(p.parseRootSegment(), p.parseQueryParams(), p.parseFragment());
  }
  /** Converts a `UrlTree` into a url */
  serialize(tree2) {
    const segment = `/${serializeSegment(tree2.root, true)}`;
    const query = serializeQueryParams(tree2.queryParams);
    const fragment = typeof tree2.fragment === `string` ? `#${encodeUriFragment(tree2.fragment)}` : "";
    return `${segment}${query}${fragment}`;
  }
};
var DEFAULT_SERIALIZER = new DefaultUrlSerializer();
function serializePaths(segment) {
  return segment.segments.map((p) => serializePath(p)).join("/");
}
function serializeSegment(segment, root) {
  if (!segment.hasChildren()) {
    return serializePaths(segment);
  }
  if (root) {
    const primary = segment.children[PRIMARY_OUTLET] ? serializeSegment(segment.children[PRIMARY_OUTLET], false) : "";
    const children = [];
    Object.entries(segment.children).forEach(([k, v]) => {
      if (k !== PRIMARY_OUTLET) {
        children.push(`${k}:${serializeSegment(v, false)}`);
      }
    });
    return children.length > 0 ? `${primary}(${children.join("//")})` : primary;
  } else {
    const children = mapChildrenIntoArray(segment, (v, k) => {
      if (k === PRIMARY_OUTLET) {
        return [serializeSegment(segment.children[PRIMARY_OUTLET], false)];
      }
      return [`${k}:${serializeSegment(v, false)}`];
    });
    if (Object.keys(segment.children).length === 1 && segment.children[PRIMARY_OUTLET] != null) {
      return `${serializePaths(segment)}/${children[0]}`;
    }
    return `${serializePaths(segment)}/(${children.join("//")})`;
  }
}
function encodeUriString(s) {
  return encodeURIComponent(s).replace(/%40/g, "@").replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",");
}
function encodeUriQuery(s) {
  return encodeUriString(s).replace(/%3B/gi, ";");
}
function encodeUriFragment(s) {
  return encodeURI(s);
}
function encodeUriSegment(s) {
  return encodeUriString(s).replace(/\(/g, "%28").replace(/\)/g, "%29").replace(/%26/gi, "&");
}
function decode(s) {
  return decodeURIComponent(s);
}
function decodeQuery(s) {
  return decode(s.replace(/\+/g, "%20"));
}
function serializePath(path2) {
  return `${encodeUriSegment(path2.path)}${serializeMatrixParams(path2.parameters)}`;
}
function serializeMatrixParams(params) {
  return Object.entries(params).map(([key, value]) => `;${encodeUriSegment(key)}=${encodeUriSegment(value)}`).join("");
}
function serializeQueryParams(params) {
  const strParams = Object.entries(params).map(([name, value]) => {
    return Array.isArray(value) ? value.map((v) => `${encodeUriQuery(name)}=${encodeUriQuery(v)}`).join("&") : `${encodeUriQuery(name)}=${encodeUriQuery(value)}`;
  }).filter((s) => s);
  return strParams.length ? `?${strParams.join("&")}` : "";
}
var SEGMENT_RE = /^[^\/()?;#]+/;
function matchSegments(str) {
  const match2 = str.match(SEGMENT_RE);
  return match2 ? match2[0] : "";
}
var MATRIX_PARAM_SEGMENT_RE = /^[^\/()?;=#]+/;
function matchMatrixKeySegments(str) {
  const match2 = str.match(MATRIX_PARAM_SEGMENT_RE);
  return match2 ? match2[0] : "";
}
var QUERY_PARAM_RE = /^[^=?&#]+/;
function matchQueryParams(str) {
  const match2 = str.match(QUERY_PARAM_RE);
  return match2 ? match2[0] : "";
}
var QUERY_PARAM_VALUE_RE = /^[^&#]+/;
function matchUrlQueryParamValue(str) {
  const match2 = str.match(QUERY_PARAM_VALUE_RE);
  return match2 ? match2[0] : "";
}
var UrlParser = class {
  url;
  remaining;
  constructor(url) {
    this.url = url;
    this.remaining = url;
  }
  parseRootSegment() {
    this.consumeOptional("/");
    if (this.remaining === "" || this.peekStartsWith("?") || this.peekStartsWith("#")) {
      return new UrlSegmentGroup([], {});
    }
    return new UrlSegmentGroup([], this.parseChildren());
  }
  parseQueryParams() {
    const params = {};
    if (this.consumeOptional("?")) {
      do {
        this.parseQueryParam(params);
      } while (this.consumeOptional("&"));
    }
    return params;
  }
  parseFragment() {
    return this.consumeOptional("#") ? decodeURIComponent(this.remaining) : null;
  }
  parseChildren() {
    if (this.remaining === "") {
      return {};
    }
    this.consumeOptional("/");
    const segments = [];
    if (!this.peekStartsWith("(")) {
      segments.push(this.parseSegment());
    }
    while (this.peekStartsWith("/") && !this.peekStartsWith("//") && !this.peekStartsWith("/(")) {
      this.capture("/");
      segments.push(this.parseSegment());
    }
    let children = {};
    if (this.peekStartsWith("/(")) {
      this.capture("/");
      children = this.parseParens(true);
    }
    let res = {};
    if (this.peekStartsWith("(")) {
      res = this.parseParens(false);
    }
    if (segments.length > 0 || Object.keys(children).length > 0) {
      res[PRIMARY_OUTLET] = new UrlSegmentGroup(segments, children);
    }
    return res;
  }
  // parse a segment with its matrix parameters
  // ie `name;k1=v1;k2`
  parseSegment() {
    const path2 = matchSegments(this.remaining);
    if (path2 === "" && this.peekStartsWith(";")) {
      throw new RuntimeError(4009, (typeof ngDevMode === "undefined" || ngDevMode) && `Empty path url segment cannot have parameters: '${this.remaining}'.`);
    }
    this.capture(path2);
    return new UrlSegment(decode(path2), this.parseMatrixParams());
  }
  parseMatrixParams() {
    const params = {};
    while (this.consumeOptional(";")) {
      this.parseParam(params);
    }
    return params;
  }
  parseParam(params) {
    const key = matchMatrixKeySegments(this.remaining);
    if (!key) {
      return;
    }
    this.capture(key);
    let value = "";
    if (this.consumeOptional("=")) {
      const valueMatch = matchSegments(this.remaining);
      if (valueMatch) {
        value = valueMatch;
        this.capture(value);
      }
    }
    params[decode(key)] = decode(value);
  }
  // Parse a single query parameter `name[=value]`
  parseQueryParam(params) {
    const key = matchQueryParams(this.remaining);
    if (!key) {
      return;
    }
    this.capture(key);
    let value = "";
    if (this.consumeOptional("=")) {
      const valueMatch = matchUrlQueryParamValue(this.remaining);
      if (valueMatch) {
        value = valueMatch;
        this.capture(value);
      }
    }
    const decodedKey = decodeQuery(key);
    const decodedVal = decodeQuery(value);
    if (params.hasOwnProperty(decodedKey)) {
      let currentVal = params[decodedKey];
      if (!Array.isArray(currentVal)) {
        currentVal = [currentVal];
        params[decodedKey] = currentVal;
      }
      currentVal.push(decodedVal);
    } else {
      params[decodedKey] = decodedVal;
    }
  }
  // parse `(a/b//outlet_name:c/d)`
  parseParens(allowPrimary) {
    const segments = {};
    this.capture("(");
    while (!this.consumeOptional(")") && this.remaining.length > 0) {
      const path2 = matchSegments(this.remaining);
      const next = this.remaining[path2.length];
      if (next !== "/" && next !== ")" && next !== ";") {
        throw new RuntimeError(4010, (typeof ngDevMode === "undefined" || ngDevMode) && `Cannot parse url '${this.url}'`);
      }
      let outletName = void 0;
      if (path2.indexOf(":") > -1) {
        outletName = path2.slice(0, path2.indexOf(":"));
        this.capture(outletName);
        this.capture(":");
      } else if (allowPrimary) {
        outletName = PRIMARY_OUTLET;
      }
      const children = this.parseChildren();
      segments[outletName] = Object.keys(children).length === 1 ? children[PRIMARY_OUTLET] : new UrlSegmentGroup([], children);
      this.consumeOptional("//");
    }
    return segments;
  }
  peekStartsWith(str) {
    return this.remaining.startsWith(str);
  }
  // Consumes the prefix when it is present and returns whether it has been consumed
  consumeOptional(str) {
    if (this.peekStartsWith(str)) {
      this.remaining = this.remaining.substring(str.length);
      return true;
    }
    return false;
  }
  capture(str) {
    if (!this.consumeOptional(str)) {
      throw new RuntimeError(4011, (typeof ngDevMode === "undefined" || ngDevMode) && `Expected "${str}".`);
    }
  }
};
function createRoot(rootCandidate) {
  return rootCandidate.segments.length > 0 ? new UrlSegmentGroup([], {
    [PRIMARY_OUTLET]: rootCandidate
  }) : rootCandidate;
}
function squashSegmentGroup(segmentGroup) {
  const newChildren = {};
  for (const [childOutlet, child] of Object.entries(segmentGroup.children)) {
    const childCandidate = squashSegmentGroup(child);
    if (childOutlet === PRIMARY_OUTLET && childCandidate.segments.length === 0 && childCandidate.hasChildren()) {
      for (const [grandChildOutlet, grandChild] of Object.entries(childCandidate.children)) {
        newChildren[grandChildOutlet] = grandChild;
      }
    } else if (childCandidate.segments.length > 0 || childCandidate.hasChildren()) {
      newChildren[childOutlet] = childCandidate;
    }
  }
  const s = new UrlSegmentGroup(segmentGroup.segments, newChildren);
  return mergeTrivialChildren(s);
}
function mergeTrivialChildren(s) {
  if (s.numberOfChildren === 1 && s.children[PRIMARY_OUTLET]) {
    const c = s.children[PRIMARY_OUTLET];
    return new UrlSegmentGroup(s.segments.concat(c.segments), c.children);
  }
  return s;
}
function isUrlTree(v) {
  return v instanceof UrlTree;
}
function createUrlTreeFromSnapshot(relativeTo, commands, queryParams = null, fragment = null) {
  const relativeToUrlSegmentGroup = createSegmentGroupFromRoute(relativeTo);
  return createUrlTreeFromSegmentGroup(relativeToUrlSegmentGroup, commands, queryParams, fragment);
}
function createSegmentGroupFromRoute(route) {
  let targetGroup;
  function createSegmentGroupFromRouteRecursive(currentRoute) {
    const childOutlets = {};
    for (const childSnapshot of currentRoute.children) {
      const root = createSegmentGroupFromRouteRecursive(childSnapshot);
      childOutlets[childSnapshot.outlet] = root;
    }
    const segmentGroup = new UrlSegmentGroup(currentRoute.url, childOutlets);
    if (currentRoute === route) {
      targetGroup = segmentGroup;
    }
    return segmentGroup;
  }
  const rootCandidate = createSegmentGroupFromRouteRecursive(route.root);
  const rootSegmentGroup = createRoot(rootCandidate);
  return targetGroup ?? rootSegmentGroup;
}
function createUrlTreeFromSegmentGroup(relativeTo, commands, queryParams, fragment) {
  let root = relativeTo;
  while (root.parent) {
    root = root.parent;
  }
  if (commands.length === 0) {
    return tree(root, root, root, queryParams, fragment);
  }
  const nav = computeNavigation(commands);
  if (nav.toRoot()) {
    return tree(root, root, new UrlSegmentGroup([], {}), queryParams, fragment);
  }
  const position = findStartingPositionForTargetGroup(nav, root, relativeTo);
  const newSegmentGroup = position.processChildren ? updateSegmentGroupChildren(position.segmentGroup, position.index, nav.commands) : updateSegmentGroup(position.segmentGroup, position.index, nav.commands);
  return tree(root, position.segmentGroup, newSegmentGroup, queryParams, fragment);
}
function isMatrixParams(command) {
  return typeof command === "object" && command != null && !command.outlets && !command.segmentPath;
}
function isCommandWithOutlets(command) {
  return typeof command === "object" && command != null && command.outlets;
}
function tree(oldRoot, oldSegmentGroup, newSegmentGroup, queryParams, fragment) {
  let qp = {};
  if (queryParams) {
    Object.entries(queryParams).forEach(([name, value]) => {
      qp[name] = Array.isArray(value) ? value.map((v) => `${v}`) : `${value}`;
    });
  }
  let rootCandidate;
  if (oldRoot === oldSegmentGroup) {
    rootCandidate = newSegmentGroup;
  } else {
    rootCandidate = replaceSegment(oldRoot, oldSegmentGroup, newSegmentGroup);
  }
  const newRoot = createRoot(squashSegmentGroup(rootCandidate));
  return new UrlTree(newRoot, qp, fragment);
}
function replaceSegment(current, oldSegment, newSegment) {
  const children = {};
  Object.entries(current.children).forEach(([outletName, c]) => {
    if (c === oldSegment) {
      children[outletName] = newSegment;
    } else {
      children[outletName] = replaceSegment(c, oldSegment, newSegment);
    }
  });
  return new UrlSegmentGroup(current.segments, children);
}
var Navigation = class {
  isAbsolute;
  numberOfDoubleDots;
  commands;
  constructor(isAbsolute, numberOfDoubleDots, commands) {
    this.isAbsolute = isAbsolute;
    this.numberOfDoubleDots = numberOfDoubleDots;
    this.commands = commands;
    if (isAbsolute && commands.length > 0 && isMatrixParams(commands[0])) {
      throw new RuntimeError(4003, (typeof ngDevMode === "undefined" || ngDevMode) && "Root segment cannot have matrix parameters");
    }
    const cmdWithOutlet = commands.find(isCommandWithOutlets);
    if (cmdWithOutlet && cmdWithOutlet !== last2(commands)) {
      throw new RuntimeError(4004, (typeof ngDevMode === "undefined" || ngDevMode) && "{outlets:{}} has to be the last command");
    }
  }
  toRoot() {
    return this.isAbsolute && this.commands.length === 1 && this.commands[0] == "/";
  }
};
function computeNavigation(commands) {
  if (typeof commands[0] === "string" && commands.length === 1 && commands[0] === "/") {
    return new Navigation(true, 0, commands);
  }
  let numberOfDoubleDots = 0;
  let isAbsolute = false;
  const res = commands.reduce((res2, cmd, cmdIdx) => {
    if (typeof cmd === "object" && cmd != null) {
      if (cmd.outlets) {
        const outlets = {};
        Object.entries(cmd.outlets).forEach(([name, commands2]) => {
          outlets[name] = typeof commands2 === "string" ? commands2.split("/") : commands2;
        });
        return [...res2, {
          outlets
        }];
      }
      if (cmd.segmentPath) {
        return [...res2, cmd.segmentPath];
      }
    }
    if (!(typeof cmd === "string")) {
      return [...res2, cmd];
    }
    if (cmdIdx === 0) {
      cmd.split("/").forEach((urlPart, partIndex) => {
        if (partIndex == 0 && urlPart === ".") ;
        else if (partIndex == 0 && urlPart === "") {
          isAbsolute = true;
        } else if (urlPart === "..") {
          numberOfDoubleDots++;
        } else if (urlPart != "") {
          res2.push(urlPart);
        }
      });
      return res2;
    }
    return [...res2, cmd];
  }, []);
  return new Navigation(isAbsolute, numberOfDoubleDots, res);
}
var Position = class {
  segmentGroup;
  processChildren;
  index;
  constructor(segmentGroup, processChildren, index) {
    this.segmentGroup = segmentGroup;
    this.processChildren = processChildren;
    this.index = index;
  }
};
function findStartingPositionForTargetGroup(nav, root, target) {
  if (nav.isAbsolute) {
    return new Position(root, true, 0);
  }
  if (!target) {
    return new Position(root, false, NaN);
  }
  if (target.parent === null) {
    return new Position(target, true, 0);
  }
  const modifier = isMatrixParams(nav.commands[0]) ? 0 : 1;
  const index = target.segments.length - 1 + modifier;
  return createPositionApplyingDoubleDots(target, index, nav.numberOfDoubleDots);
}
function createPositionApplyingDoubleDots(group, index, numberOfDoubleDots) {
  let g = group;
  let ci = index;
  let dd = numberOfDoubleDots;
  while (dd > ci) {
    dd -= ci;
    g = g.parent;
    if (!g) {
      throw new RuntimeError(4005, (typeof ngDevMode === "undefined" || ngDevMode) && "Invalid number of '../'");
    }
    ci = g.segments.length;
  }
  return new Position(g, false, ci - dd);
}
function getOutlets(commands) {
  if (isCommandWithOutlets(commands[0])) {
    return commands[0].outlets;
  }
  return {
    [PRIMARY_OUTLET]: commands
  };
}
function updateSegmentGroup(segmentGroup, startIndex, commands) {
  segmentGroup ??= new UrlSegmentGroup([], {});
  if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {
    return updateSegmentGroupChildren(segmentGroup, startIndex, commands);
  }
  const m = prefixedWith(segmentGroup, startIndex, commands);
  const slicedCommands = commands.slice(m.commandIndex);
  if (m.match && m.pathIndex < segmentGroup.segments.length) {
    const g = new UrlSegmentGroup(segmentGroup.segments.slice(0, m.pathIndex), {});
    g.children[PRIMARY_OUTLET] = new UrlSegmentGroup(segmentGroup.segments.slice(m.pathIndex), segmentGroup.children);
    return updateSegmentGroupChildren(g, 0, slicedCommands);
  } else if (m.match && slicedCommands.length === 0) {
    return new UrlSegmentGroup(segmentGroup.segments, {});
  } else if (m.match && !segmentGroup.hasChildren()) {
    return createNewSegmentGroup(segmentGroup, startIndex, commands);
  } else if (m.match) {
    return updateSegmentGroupChildren(segmentGroup, 0, slicedCommands);
  } else {
    return createNewSegmentGroup(segmentGroup, startIndex, commands);
  }
}
function updateSegmentGroupChildren(segmentGroup, startIndex, commands) {
  if (commands.length === 0) {
    return new UrlSegmentGroup(segmentGroup.segments, {});
  } else {
    const outlets = getOutlets(commands);
    const children = {};
    if (Object.keys(outlets).some((o) => o !== PRIMARY_OUTLET) && segmentGroup.children[PRIMARY_OUTLET] && segmentGroup.numberOfChildren === 1 && segmentGroup.children[PRIMARY_OUTLET].segments.length === 0) {
      const childrenOfEmptyChild = updateSegmentGroupChildren(segmentGroup.children[PRIMARY_OUTLET], startIndex, commands);
      return new UrlSegmentGroup(segmentGroup.segments, childrenOfEmptyChild.children);
    }
    Object.entries(outlets).forEach(([outlet, commands2]) => {
      if (typeof commands2 === "string") {
        commands2 = [commands2];
      }
      if (commands2 !== null) {
        children[outlet] = updateSegmentGroup(segmentGroup.children[outlet], startIndex, commands2);
      }
    });
    Object.entries(segmentGroup.children).forEach(([childOutlet, child]) => {
      if (outlets[childOutlet] === void 0) {
        children[childOutlet] = child;
      }
    });
    return new UrlSegmentGroup(segmentGroup.segments, children);
  }
}
function prefixedWith(segmentGroup, startIndex, commands) {
  let currentCommandIndex = 0;
  let currentPathIndex = startIndex;
  const noMatch2 = {
    match: false,
    pathIndex: 0,
    commandIndex: 0
  };
  while (currentPathIndex < segmentGroup.segments.length) {
    if (currentCommandIndex >= commands.length) return noMatch2;
    const path2 = segmentGroup.segments[currentPathIndex];
    const command = commands[currentCommandIndex];
    if (isCommandWithOutlets(command)) {
      break;
    }
    const curr = `${command}`;
    const next = currentCommandIndex < commands.length - 1 ? commands[currentCommandIndex + 1] : null;
    if (currentPathIndex > 0 && curr === void 0) break;
    if (curr && next && typeof next === "object" && next.outlets === void 0) {
      if (!compare(curr, next, path2)) return noMatch2;
      currentCommandIndex += 2;
    } else {
      if (!compare(curr, {}, path2)) return noMatch2;
      currentCommandIndex++;
    }
    currentPathIndex++;
  }
  return {
    match: true,
    pathIndex: currentPathIndex,
    commandIndex: currentCommandIndex
  };
}
function createNewSegmentGroup(segmentGroup, startIndex, commands) {
  const paths = segmentGroup.segments.slice(0, startIndex);
  let i = 0;
  while (i < commands.length) {
    const command = commands[i];
    if (isCommandWithOutlets(command)) {
      const children = createNewSegmentChildren(command.outlets);
      return new UrlSegmentGroup(paths, children);
    }
    if (i === 0 && isMatrixParams(commands[0])) {
      const p = segmentGroup.segments[startIndex];
      paths.push(new UrlSegment(p.path, stringify2(commands[0])));
      i++;
      continue;
    }
    const curr = isCommandWithOutlets(command) ? command.outlets[PRIMARY_OUTLET] : `${command}`;
    const next = i < commands.length - 1 ? commands[i + 1] : null;
    if (curr && next && isMatrixParams(next)) {
      paths.push(new UrlSegment(curr, stringify2(next)));
      i += 2;
    } else {
      paths.push(new UrlSegment(curr, {}));
      i++;
    }
  }
  return new UrlSegmentGroup(paths, {});
}
function createNewSegmentChildren(outlets) {
  const children = {};
  Object.entries(outlets).forEach(([outlet, commands]) => {
    if (typeof commands === "string") {
      commands = [commands];
    }
    if (commands !== null) {
      children[outlet] = createNewSegmentGroup(new UrlSegmentGroup([], {}), 0, commands);
    }
  });
  return children;
}
function stringify2(params) {
  const res = {};
  Object.entries(params).forEach(([k, v]) => res[k] = `${v}`);
  return res;
}
function compare(path2, params, segment) {
  return path2 == segment.path && shallowEqual(params, segment.parameters);
}
var IMPERATIVE_NAVIGATION = "imperative";
var EventType;
(function(EventType2) {
  EventType2[EventType2["NavigationStart"] = 0] = "NavigationStart";
  EventType2[EventType2["NavigationEnd"] = 1] = "NavigationEnd";
  EventType2[EventType2["NavigationCancel"] = 2] = "NavigationCancel";
  EventType2[EventType2["NavigationError"] = 3] = "NavigationError";
  EventType2[EventType2["RoutesRecognized"] = 4] = "RoutesRecognized";
  EventType2[EventType2["ResolveStart"] = 5] = "ResolveStart";
  EventType2[EventType2["ResolveEnd"] = 6] = "ResolveEnd";
  EventType2[EventType2["GuardsCheckStart"] = 7] = "GuardsCheckStart";
  EventType2[EventType2["GuardsCheckEnd"] = 8] = "GuardsCheckEnd";
  EventType2[EventType2["RouteConfigLoadStart"] = 9] = "RouteConfigLoadStart";
  EventType2[EventType2["RouteConfigLoadEnd"] = 10] = "RouteConfigLoadEnd";
  EventType2[EventType2["ChildActivationStart"] = 11] = "ChildActivationStart";
  EventType2[EventType2["ChildActivationEnd"] = 12] = "ChildActivationEnd";
  EventType2[EventType2["ActivationStart"] = 13] = "ActivationStart";
  EventType2[EventType2["ActivationEnd"] = 14] = "ActivationEnd";
  EventType2[EventType2["Scroll"] = 15] = "Scroll";
  EventType2[EventType2["NavigationSkipped"] = 16] = "NavigationSkipped";
})(EventType || (EventType = {}));
var RouterEvent = class {
  id;
  url;
  constructor(id, url) {
    this.id = id;
    this.url = url;
  }
};
var NavigationStart = class extends RouterEvent {
  type = EventType.NavigationStart;
  /**
   * Identifies the call or event that triggered the navigation.
   * An `imperative` trigger is a call to `router.navigateByUrl()` or `router.navigate()`.
   *
   * @see {@link NavigationEnd}
   * @see {@link NavigationCancel}
   * @see {@link NavigationError}
   */
  navigationTrigger;
  /**
   * The navigation state that was previously supplied to the `pushState` call,
   * when the navigation is triggered by a `popstate` event. Otherwise null.
   *
   * The state object is defined by `NavigationExtras`, and contains any
   * developer-defined state value, as well as a unique ID that
   * the router assigns to every router transition/navigation.
   *
   * From the perspective of the router, the router never "goes back".
   * When the user clicks on the back button in the browser,
   * a new navigation ID is created.
   *
   * Use the ID in this previous-state object to differentiate between a newly created
   * state and one returned to by a `popstate` event, so that you can restore some
   * remembered state, such as scroll position.
   *
   */
  restoredState;
  constructor(id, url, navigationTrigger = "imperative", restoredState = null) {
    super(id, url);
    this.navigationTrigger = navigationTrigger;
    this.restoredState = restoredState;
  }
  /** @docsNotRequired */
  toString() {
    return `NavigationStart(id: ${this.id}, url: '${this.url}')`;
  }
};
var NavigationEnd = class extends RouterEvent {
  urlAfterRedirects;
  type = EventType.NavigationEnd;
  constructor(id, url, urlAfterRedirects) {
    super(id, url);
    this.urlAfterRedirects = urlAfterRedirects;
  }
  /** @docsNotRequired */
  toString() {
    return `NavigationEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}')`;
  }
};
var NavigationCancellationCode;
(function(NavigationCancellationCode2) {
  NavigationCancellationCode2[NavigationCancellationCode2["Redirect"] = 0] = "Redirect";
  NavigationCancellationCode2[NavigationCancellationCode2["SupersededByNewNavigation"] = 1] = "SupersededByNewNavigation";
  NavigationCancellationCode2[NavigationCancellationCode2["NoDataFromResolver"] = 2] = "NoDataFromResolver";
  NavigationCancellationCode2[NavigationCancellationCode2["GuardRejected"] = 3] = "GuardRejected";
})(NavigationCancellationCode || (NavigationCancellationCode = {}));
var NavigationSkippedCode;
(function(NavigationSkippedCode2) {
  NavigationSkippedCode2[NavigationSkippedCode2["IgnoredSameUrlNavigation"] = 0] = "IgnoredSameUrlNavigation";
  NavigationSkippedCode2[NavigationSkippedCode2["IgnoredByUrlHandlingStrategy"] = 1] = "IgnoredByUrlHandlingStrategy";
})(NavigationSkippedCode || (NavigationSkippedCode = {}));
var NavigationCancel = class extends RouterEvent {
  reason;
  code;
  type = EventType.NavigationCancel;
  constructor(id, url, reason, code) {
    super(id, url);
    this.reason = reason;
    this.code = code;
  }
  /** @docsNotRequired */
  toString() {
    return `NavigationCancel(id: ${this.id}, url: '${this.url}')`;
  }
};
var NavigationSkipped = class extends RouterEvent {
  reason;
  code;
  type = EventType.NavigationSkipped;
  constructor(id, url, reason, code) {
    super(id, url);
    this.reason = reason;
    this.code = code;
  }
};
var NavigationError = class extends RouterEvent {
  error;
  target;
  type = EventType.NavigationError;
  constructor(id, url, error, target) {
    super(id, url);
    this.error = error;
    this.target = target;
  }
  /** @docsNotRequired */
  toString() {
    return `NavigationError(id: ${this.id}, url: '${this.url}', error: ${this.error})`;
  }
};
var RoutesRecognized = class extends RouterEvent {
  urlAfterRedirects;
  state;
  type = EventType.RoutesRecognized;
  constructor(id, url, urlAfterRedirects, state) {
    super(id, url);
    this.urlAfterRedirects = urlAfterRedirects;
    this.state = state;
  }
  /** @docsNotRequired */
  toString() {
    return `RoutesRecognized(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;
  }
};
var GuardsCheckStart = class extends RouterEvent {
  urlAfterRedirects;
  state;
  type = EventType.GuardsCheckStart;
  constructor(id, url, urlAfterRedirects, state) {
    super(id, url);
    this.urlAfterRedirects = urlAfterRedirects;
    this.state = state;
  }
  toString() {
    return `GuardsCheckStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;
  }
};
var GuardsCheckEnd = class extends RouterEvent {
  urlAfterRedirects;
  state;
  shouldActivate;
  type = EventType.GuardsCheckEnd;
  constructor(id, url, urlAfterRedirects, state, shouldActivate) {
    super(id, url);
    this.urlAfterRedirects = urlAfterRedirects;
    this.state = state;
    this.shouldActivate = shouldActivate;
  }
  toString() {
    return `GuardsCheckEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state}, shouldActivate: ${this.shouldActivate})`;
  }
};
var ResolveStart = class extends RouterEvent {
  urlAfterRedirects;
  state;
  type = EventType.ResolveStart;
  constructor(id, url, urlAfterRedirects, state) {
    super(id, url);
    this.urlAfterRedirects = urlAfterRedirects;
    this.state = state;
  }
  toString() {
    return `ResolveStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;
  }
};
var ResolveEnd = class extends RouterEvent {
  urlAfterRedirects;
  state;
  type = EventType.ResolveEnd;
  constructor(id, url, urlAfterRedirects, state) {
    super(id, url);
    this.urlAfterRedirects = urlAfterRedirects;
    this.state = state;
  }
  toString() {
    return `ResolveEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;
  }
};
var RouteConfigLoadStart = class {
  route;
  type = EventType.RouteConfigLoadStart;
  constructor(route) {
    this.route = route;
  }
  toString() {
    return `RouteConfigLoadStart(path: ${this.route.path})`;
  }
};
var RouteConfigLoadEnd = class {
  route;
  type = EventType.RouteConfigLoadEnd;
  constructor(route) {
    this.route = route;
  }
  toString() {
    return `RouteConfigLoadEnd(path: ${this.route.path})`;
  }
};
var ChildActivationStart = class {
  snapshot;
  type = EventType.ChildActivationStart;
  constructor(snapshot) {
    this.snapshot = snapshot;
  }
  toString() {
    const path2 = this.snapshot.routeConfig && this.snapshot.routeConfig.path || "";
    return `ChildActivationStart(path: '${path2}')`;
  }
};
var ChildActivationEnd = class {
  snapshot;
  type = EventType.ChildActivationEnd;
  constructor(snapshot) {
    this.snapshot = snapshot;
  }
  toString() {
    const path2 = this.snapshot.routeConfig && this.snapshot.routeConfig.path || "";
    return `ChildActivationEnd(path: '${path2}')`;
  }
};
var ActivationStart = class {
  snapshot;
  type = EventType.ActivationStart;
  constructor(snapshot) {
    this.snapshot = snapshot;
  }
  toString() {
    const path2 = this.snapshot.routeConfig && this.snapshot.routeConfig.path || "";
    return `ActivationStart(path: '${path2}')`;
  }
};
var ActivationEnd = class {
  snapshot;
  type = EventType.ActivationEnd;
  constructor(snapshot) {
    this.snapshot = snapshot;
  }
  toString() {
    const path2 = this.snapshot.routeConfig && this.snapshot.routeConfig.path || "";
    return `ActivationEnd(path: '${path2}')`;
  }
};
var Scroll = class {
  routerEvent;
  position;
  anchor;
  type = EventType.Scroll;
  constructor(routerEvent, position, anchor) {
    this.routerEvent = routerEvent;
    this.position = position;
    this.anchor = anchor;
  }
  toString() {
    const pos = this.position ? `${this.position[0]}, ${this.position[1]}` : null;
    return `Scroll(anchor: '${this.anchor}', position: '${pos}')`;
  }
};
var BeforeActivateRoutes = class {
};
var RedirectRequest = class {
  url;
  navigationBehaviorOptions;
  constructor(url, navigationBehaviorOptions) {
    this.url = url;
    this.navigationBehaviorOptions = navigationBehaviorOptions;
  }
};
function stringifyEvent(routerEvent) {
  switch (routerEvent.type) {
    case EventType.ActivationEnd:
      return `ActivationEnd(path: '${routerEvent.snapshot.routeConfig?.path || ""}')`;
    case EventType.ActivationStart:
      return `ActivationStart(path: '${routerEvent.snapshot.routeConfig?.path || ""}')`;
    case EventType.ChildActivationEnd:
      return `ChildActivationEnd(path: '${routerEvent.snapshot.routeConfig?.path || ""}')`;
    case EventType.ChildActivationStart:
      return `ChildActivationStart(path: '${routerEvent.snapshot.routeConfig?.path || ""}')`;
    case EventType.GuardsCheckEnd:
      return `GuardsCheckEnd(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}', state: ${routerEvent.state}, shouldActivate: ${routerEvent.shouldActivate})`;
    case EventType.GuardsCheckStart:
      return `GuardsCheckStart(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}', state: ${routerEvent.state})`;
    case EventType.NavigationCancel:
      return `NavigationCancel(id: ${routerEvent.id}, url: '${routerEvent.url}')`;
    case EventType.NavigationSkipped:
      return `NavigationSkipped(id: ${routerEvent.id}, url: '${routerEvent.url}')`;
    case EventType.NavigationEnd:
      return `NavigationEnd(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}')`;
    case EventType.NavigationError:
      return `NavigationError(id: ${routerEvent.id}, url: '${routerEvent.url}', error: ${routerEvent.error})`;
    case EventType.NavigationStart:
      return `NavigationStart(id: ${routerEvent.id}, url: '${routerEvent.url}')`;
    case EventType.ResolveEnd:
      return `ResolveEnd(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}', state: ${routerEvent.state})`;
    case EventType.ResolveStart:
      return `ResolveStart(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}', state: ${routerEvent.state})`;
    case EventType.RouteConfigLoadEnd:
      return `RouteConfigLoadEnd(path: ${routerEvent.route.path})`;
    case EventType.RouteConfigLoadStart:
      return `RouteConfigLoadStart(path: ${routerEvent.route.path})`;
    case EventType.RoutesRecognized:
      return `RoutesRecognized(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}', state: ${routerEvent.state})`;
    case EventType.Scroll:
      const pos = routerEvent.position ? `${routerEvent.position[0]}, ${routerEvent.position[1]}` : null;
      return `Scroll(anchor: '${routerEvent.anchor}', position: '${pos}')`;
  }
}
function getOrCreateRouteInjectorIfNeeded(route, currentInjector) {
  if (route.providers && !route._injector) {
    route._injector = createEnvironmentInjector(route.providers, currentInjector, `Route: ${route.path}`);
  }
  return route._injector ?? currentInjector;
}
function validateConfig(config, parentPath = "", requireStandaloneComponents = false) {
  for (let i = 0; i < config.length; i++) {
    const route = config[i];
    const fullPath = getFullPath(parentPath, route);
    validateNode(route, fullPath, requireStandaloneComponents);
  }
}
function assertStandalone(fullPath, component) {
  if (component && isNgModule(component)) {
    throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}'. You are using 'loadComponent' with a module, but it must be used with standalone components. Use 'loadChildren' instead.`);
  } else if (component && !isStandalone(component)) {
    throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}'. The component must be standalone.`);
  }
}
function validateNode(route, fullPath, requireStandaloneComponents) {
  if (typeof ngDevMode === "undefined" || ngDevMode) {
    if (!route) {
      throw new RuntimeError(4014, `
      Invalid configuration of route '${fullPath}': Encountered undefined route.
      The reason might be an extra comma.

      Example:
      const routes: Routes = [
        { path: '', redirectTo: '/dashboard', pathMatch: 'full' },
        { path: 'dashboard',  component: DashboardComponent },, << two commas
        { path: 'detail/:id', component: HeroDetailComponent }
      ];
    `);
    }
    if (Array.isArray(route)) {
      throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}': Array cannot be specified`);
    }
    if (!route.redirectTo && !route.component && !route.loadComponent && !route.children && !route.loadChildren && route.outlet && route.outlet !== PRIMARY_OUTLET) {
      throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}': a componentless route without children or loadChildren cannot have a named outlet set`);
    }
    if (route.redirectTo && route.children) {
      throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}': redirectTo and children cannot be used together`);
    }
    if (route.redirectTo && route.loadChildren) {
      throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}': redirectTo and loadChildren cannot be used together`);
    }
    if (route.children && route.loadChildren) {
      throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}': children and loadChildren cannot be used together`);
    }
    if (route.redirectTo && (route.component || route.loadComponent)) {
      throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}': redirectTo and component/loadComponent cannot be used together`);
    }
    if (route.component && route.loadComponent) {
      throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}': component and loadComponent cannot be used together`);
    }
    if (route.redirectTo && route.canActivate) {
      throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}': redirectTo and canActivate cannot be used together. Redirects happen before activation so canActivate will never be executed.`);
    }
    if (route.path && route.matcher) {
      throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}': path and matcher cannot be used together`);
    }
    if (route.redirectTo === void 0 && !route.component && !route.loadComponent && !route.children && !route.loadChildren) {
      throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}'. One of the following must be provided: component, loadComponent, redirectTo, children or loadChildren`);
    }
    if (route.path === void 0 && route.matcher === void 0) {
      throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}': routes must have either a path or a matcher specified`);
    }
    if (typeof route.path === "string" && route.path.charAt(0) === "/") {
      throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}': path cannot start with a slash`);
    }
    if (route.path === "" && route.redirectTo !== void 0 && route.pathMatch === void 0) {
      const exp = `The default value of 'pathMatch' is 'prefix', but often the intent is to use 'full'.`;
      throw new RuntimeError(4014, `Invalid configuration of route '{path: "${fullPath}", redirectTo: "${route.redirectTo}"}': please provide 'pathMatch'. ${exp}`);
    }
    if (requireStandaloneComponents) {
      assertStandalone(fullPath, route.component);
    }
  }
  if (route.children) {
    validateConfig(route.children, fullPath, requireStandaloneComponents);
  }
}
function getFullPath(parentPath, currentRoute) {
  if (!currentRoute) {
    return parentPath;
  }
  if (!parentPath && !currentRoute.path) {
    return "";
  } else if (parentPath && !currentRoute.path) {
    return `${parentPath}/`;
  } else if (!parentPath && currentRoute.path) {
    return currentRoute.path;
  } else {
    return `${parentPath}/${currentRoute.path}`;
  }
}
function getOutlet(route) {
  return route.outlet || PRIMARY_OUTLET;
}
function sortByMatchingOutlets(routes2, outletName) {
  const sortedConfig = routes2.filter((r) => getOutlet(r) === outletName);
  sortedConfig.push(...routes2.filter((r) => getOutlet(r) !== outletName));
  return sortedConfig;
}
function getClosestRouteInjector(snapshot) {
  if (!snapshot) return null;
  if (snapshot.routeConfig?._injector) {
    return snapshot.routeConfig._injector;
  }
  for (let s = snapshot.parent; s; s = s.parent) {
    const route = s.routeConfig;
    if (route?._loadedInjector) return route._loadedInjector;
    if (route?._injector) return route._injector;
  }
  return null;
}
var OutletContext = class {
  rootInjector;
  outlet = null;
  route = null;
  children;
  attachRef = null;
  get injector() {
    return getClosestRouteInjector(this.route?.snapshot) ?? this.rootInjector;
  }
  constructor(rootInjector) {
    this.rootInjector = rootInjector;
    this.children = new ChildrenOutletContexts(this.rootInjector);
  }
};
var ChildrenOutletContexts = class _ChildrenOutletContexts {
  rootInjector;
  // contexts for child outlets, by name.
  contexts = /* @__PURE__ */ new Map();
  /** @docs-private */
  constructor(rootInjector) {
    this.rootInjector = rootInjector;
  }
  /** Called when a `RouterOutlet` directive is instantiated */
  onChildOutletCreated(childName, outlet) {
    const context = this.getOrCreateContext(childName);
    context.outlet = outlet;
    this.contexts.set(childName, context);
  }
  /**
   * Called when a `RouterOutlet` directive is destroyed.
   * We need to keep the context as the outlet could be destroyed inside a NgIf and might be
   * re-created later.
   */
  onChildOutletDestroyed(childName) {
    const context = this.getContext(childName);
    if (context) {
      context.outlet = null;
      context.attachRef = null;
    }
  }
  /**
   * Called when the corresponding route is deactivated during navigation.
   * Because the component get destroyed, all children outlet are destroyed.
   */
  onOutletDeactivated() {
    const contexts = this.contexts;
    this.contexts = /* @__PURE__ */ new Map();
    return contexts;
  }
  onOutletReAttached(contexts) {
    this.contexts = contexts;
  }
  getOrCreateContext(childName) {
    let context = this.getContext(childName);
    if (!context) {
      context = new OutletContext(this.rootInjector);
      this.contexts.set(childName, context);
    }
    return context;
  }
  getContext(childName) {
    return this.contexts.get(childName) || null;
  }
  static \u0275fac = function ChildrenOutletContexts_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _ChildrenOutletContexts)(\u0275\u0275inject(EnvironmentInjector));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _ChildrenOutletContexts,
    factory: _ChildrenOutletContexts.\u0275fac,
    providedIn: "root"
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ChildrenOutletContexts, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: EnvironmentInjector
  }], null);
})();
var Tree = class {
  /** @internal */
  _root;
  constructor(root) {
    this._root = root;
  }
  get root() {
    return this._root.value;
  }
  /**
   * @internal
   */
  parent(t) {
    const p = this.pathFromRoot(t);
    return p.length > 1 ? p[p.length - 2] : null;
  }
  /**
   * @internal
   */
  children(t) {
    const n = findNode(t, this._root);
    return n ? n.children.map((t2) => t2.value) : [];
  }
  /**
   * @internal
   */
  firstChild(t) {
    const n = findNode(t, this._root);
    return n && n.children.length > 0 ? n.children[0].value : null;
  }
  /**
   * @internal
   */
  siblings(t) {
    const p = findPath(t, this._root);
    if (p.length < 2) return [];
    const c = p[p.length - 2].children.map((c2) => c2.value);
    return c.filter((cc) => cc !== t);
  }
  /**
   * @internal
   */
  pathFromRoot(t) {
    return findPath(t, this._root).map((s) => s.value);
  }
};
function findNode(value, node) {
  if (value === node.value) return node;
  for (const child of node.children) {
    const node2 = findNode(value, child);
    if (node2) return node2;
  }
  return null;
}
function findPath(value, node) {
  if (value === node.value) return [node];
  for (const child of node.children) {
    const path2 = findPath(value, child);
    if (path2.length) {
      path2.unshift(node);
      return path2;
    }
  }
  return [];
}
var TreeNode = class {
  value;
  children;
  constructor(value, children) {
    this.value = value;
    this.children = children;
  }
  toString() {
    return `TreeNode(${this.value})`;
  }
};
function nodeChildrenAsMap(node) {
  const map2 = {};
  if (node) {
    node.children.forEach((child) => map2[child.value.outlet] = child);
  }
  return map2;
}
var RouterState = class extends Tree {
  snapshot;
  /** @internal */
  constructor(root, snapshot) {
    super(root);
    this.snapshot = snapshot;
    setRouterState(this, root);
  }
  toString() {
    return this.snapshot.toString();
  }
};
function createEmptyState(rootComponent) {
  const snapshot = createEmptyStateSnapshot(rootComponent);
  const emptyUrl = new BehaviorSubject([new UrlSegment("", {})]);
  const emptyParams = new BehaviorSubject({});
  const emptyData = new BehaviorSubject({});
  const emptyQueryParams = new BehaviorSubject({});
  const fragment = new BehaviorSubject("");
  const activated = new ActivatedRoute(emptyUrl, emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, snapshot.root);
  activated.snapshot = snapshot.root;
  return new RouterState(new TreeNode(activated, []), snapshot);
}
function createEmptyStateSnapshot(rootComponent) {
  const emptyParams = {};
  const emptyData = {};
  const emptyQueryParams = {};
  const fragment = "";
  const activated = new ActivatedRouteSnapshot([], emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, null, {});
  return new RouterStateSnapshot("", new TreeNode(activated, []));
}
var ActivatedRoute = class {
  urlSubject;
  paramsSubject;
  queryParamsSubject;
  fragmentSubject;
  dataSubject;
  outlet;
  component;
  /** The current snapshot of this route */
  snapshot;
  /** @internal */
  _futureSnapshot;
  /** @internal */
  _routerState;
  /** @internal */
  _paramMap;
  /** @internal */
  _queryParamMap;
  /** An Observable of the resolved route title */
  title;
  /** An observable of the URL segments matched by this route. */
  url;
  /** An observable of the matrix parameters scoped to this route. */
  params;
  /** An observable of the query parameters shared by all the routes. */
  queryParams;
  /** An observable of the URL fragment shared by all the routes. */
  fragment;
  /** An observable of the static and resolved data of this route. */
  data;
  /** @internal */
  constructor(urlSubject, paramsSubject, queryParamsSubject, fragmentSubject, dataSubject, outlet, component, futureSnapshot) {
    this.urlSubject = urlSubject;
    this.paramsSubject = paramsSubject;
    this.queryParamsSubject = queryParamsSubject;
    this.fragmentSubject = fragmentSubject;
    this.dataSubject = dataSubject;
    this.outlet = outlet;
    this.component = component;
    this._futureSnapshot = futureSnapshot;
    this.title = this.dataSubject?.pipe(map((d) => d[RouteTitleKey])) ?? of(void 0);
    this.url = urlSubject;
    this.params = paramsSubject;
    this.queryParams = queryParamsSubject;
    this.fragment = fragmentSubject;
    this.data = dataSubject;
  }
  /** The configuration used to match this route. */
  get routeConfig() {
    return this._futureSnapshot.routeConfig;
  }
  /** The root of the router state. */
  get root() {
    return this._routerState.root;
  }
  /** The parent of this route in the router state tree. */
  get parent() {
    return this._routerState.parent(this);
  }
  /** The first child of this route in the router state tree. */
  get firstChild() {
    return this._routerState.firstChild(this);
  }
  /** The children of this route in the router state tree. */
  get children() {
    return this._routerState.children(this);
  }
  /** The path from the root of the router state tree to this route. */
  get pathFromRoot() {
    return this._routerState.pathFromRoot(this);
  }
  /**
   * An Observable that contains a map of the required and optional parameters
   * specific to the route.
   * The map supports retrieving single and multiple values from the same parameter.
   */
  get paramMap() {
    this._paramMap ??= this.params.pipe(map((p) => convertToParamMap(p)));
    return this._paramMap;
  }
  /**
   * An Observable that contains a map of the query parameters available to all routes.
   * The map supports retrieving single and multiple values from the query parameter.
   */
  get queryParamMap() {
    this._queryParamMap ??= this.queryParams.pipe(map((p) => convertToParamMap(p)));
    return this._queryParamMap;
  }
  toString() {
    return this.snapshot ? this.snapshot.toString() : `Future(${this._futureSnapshot})`;
  }
};
function getInherited(route, parent, paramsInheritanceStrategy = "emptyOnly") {
  let inherited;
  const {
    routeConfig
  } = route;
  if (parent !== null && (paramsInheritanceStrategy === "always" || // inherit parent data if route is empty path
  routeConfig?.path === "" || // inherit parent data if parent was componentless
  !parent.component && !parent.routeConfig?.loadComponent)) {
    inherited = {
      params: __spreadValues(__spreadValues({}, parent.params), route.params),
      data: __spreadValues(__spreadValues({}, parent.data), route.data),
      resolve: __spreadValues(__spreadValues(__spreadValues(__spreadValues({}, route.data), parent.data), routeConfig?.data), route._resolvedData)
    };
  } else {
    inherited = {
      params: __spreadValues({}, route.params),
      data: __spreadValues({}, route.data),
      resolve: __spreadValues(__spreadValues({}, route.data), route._resolvedData ?? {})
    };
  }
  if (routeConfig && hasStaticTitle(routeConfig)) {
    inherited.resolve[RouteTitleKey] = routeConfig.title;
  }
  return inherited;
}
var ActivatedRouteSnapshot = class {
  url;
  params;
  queryParams;
  fragment;
  data;
  outlet;
  component;
  /** The configuration used to match this route **/
  routeConfig;
  /** @internal */
  _resolve;
  /** @internal */
  _resolvedData;
  /** @internal */
  _routerState;
  /** @internal */
  _paramMap;
  /** @internal */
  _queryParamMap;
  /** The resolved route title */
  get title() {
    return this.data?.[RouteTitleKey];
  }
  /** @internal */
  constructor(url, params, queryParams, fragment, data, outlet, component, routeConfig, resolve) {
    this.url = url;
    this.params = params;
    this.queryParams = queryParams;
    this.fragment = fragment;
    this.data = data;
    this.outlet = outlet;
    this.component = component;
    this.routeConfig = routeConfig;
    this._resolve = resolve;
  }
  /** The root of the router state */
  get root() {
    return this._routerState.root;
  }
  /** The parent of this route in the router state tree */
  get parent() {
    return this._routerState.parent(this);
  }
  /** The first child of this route in the router state tree */
  get firstChild() {
    return this._routerState.firstChild(this);
  }
  /** The children of this route in the router state tree */
  get children() {
    return this._routerState.children(this);
  }
  /** The path from the root of the router state tree to this route */
  get pathFromRoot() {
    return this._routerState.pathFromRoot(this);
  }
  get paramMap() {
    this._paramMap ??= convertToParamMap(this.params);
    return this._paramMap;
  }
  get queryParamMap() {
    this._queryParamMap ??= convertToParamMap(this.queryParams);
    return this._queryParamMap;
  }
  toString() {
    const url = this.url.map((segment) => segment.toString()).join("/");
    const matched = this.routeConfig ? this.routeConfig.path : "";
    return `Route(url:'${url}', path:'${matched}')`;
  }
};
var RouterStateSnapshot = class extends Tree {
  url;
  /** @internal */
  constructor(url, root) {
    super(root);
    this.url = url;
    setRouterState(this, root);
  }
  toString() {
    return serializeNode(this._root);
  }
};
function setRouterState(state, node) {
  node.value._routerState = state;
  node.children.forEach((c) => setRouterState(state, c));
}
function serializeNode(node) {
  const c = node.children.length > 0 ? ` { ${node.children.map(serializeNode).join(", ")} } ` : "";
  return `${node.value}${c}`;
}
function advanceActivatedRoute(route) {
  if (route.snapshot) {
    const currentSnapshot = route.snapshot;
    const nextSnapshot = route._futureSnapshot;
    route.snapshot = nextSnapshot;
    if (!shallowEqual(currentSnapshot.queryParams, nextSnapshot.queryParams)) {
      route.queryParamsSubject.next(nextSnapshot.queryParams);
    }
    if (currentSnapshot.fragment !== nextSnapshot.fragment) {
      route.fragmentSubject.next(nextSnapshot.fragment);
    }
    if (!shallowEqual(currentSnapshot.params, nextSnapshot.params)) {
      route.paramsSubject.next(nextSnapshot.params);
    }
    if (!shallowEqualArrays(currentSnapshot.url, nextSnapshot.url)) {
      route.urlSubject.next(nextSnapshot.url);
    }
    if (!shallowEqual(currentSnapshot.data, nextSnapshot.data)) {
      route.dataSubject.next(nextSnapshot.data);
    }
  } else {
    route.snapshot = route._futureSnapshot;
    route.dataSubject.next(route._futureSnapshot.data);
  }
}
function equalParamsAndUrlSegments(a, b) {
  const equalUrlParams = shallowEqual(a.params, b.params) && equalSegments(a.url, b.url);
  const parentsMismatch = !a.parent !== !b.parent;
  return equalUrlParams && !parentsMismatch && (!a.parent || equalParamsAndUrlSegments(a.parent, b.parent));
}
function hasStaticTitle(config) {
  return typeof config.title === "string" || config.title === null;
}
var ROUTER_OUTLET_DATA = new InjectionToken(ngDevMode ? "RouterOutlet data" : "");
var RouterOutlet = class _RouterOutlet {
  activated = null;
  /** @internal */
  get activatedComponentRef() {
    return this.activated;
  }
  _activatedRoute = null;
  /**
   * The name of the outlet
   *
   */
  name = PRIMARY_OUTLET;
  activateEvents = new EventEmitter();
  deactivateEvents = new EventEmitter();
  /**
   * Emits an attached component instance when the `RouteReuseStrategy` instructs to re-attach a
   * previously detached subtree.
   **/
  attachEvents = new EventEmitter();
  /**
   * Emits a detached component instance when the `RouteReuseStrategy` instructs to detach the
   * subtree.
   */
  detachEvents = new EventEmitter();
  /**
   * Data that will be provided to the child injector through the `ROUTER_OUTLET_DATA` token.
   *
   * When unset, the value of the token is `undefined` by default.
   */
  routerOutletData = input(void 0);
  parentContexts = inject(ChildrenOutletContexts);
  location = inject(ViewContainerRef);
  changeDetector = inject(ChangeDetectorRef);
  inputBinder = inject(INPUT_BINDER, {
    optional: true
  });
  /** @docs-private */
  supportsBindingToComponentInputs = true;
  /** @docs-private */
  ngOnChanges(changes) {
    if (changes["name"]) {
      const {
        firstChange,
        previousValue
      } = changes["name"];
      if (firstChange) {
        return;
      }
      if (this.isTrackedInParentContexts(previousValue)) {
        this.deactivate();
        this.parentContexts.onChildOutletDestroyed(previousValue);
      }
      this.initializeOutletWithName();
    }
  }
  /** @docs-private */
  ngOnDestroy() {
    if (this.isTrackedInParentContexts(this.name)) {
      this.parentContexts.onChildOutletDestroyed(this.name);
    }
    this.inputBinder?.unsubscribeFromRouteData(this);
  }
  isTrackedInParentContexts(outletName) {
    return this.parentContexts.getContext(outletName)?.outlet === this;
  }
  /** @docs-private */
  ngOnInit() {
    this.initializeOutletWithName();
  }
  initializeOutletWithName() {
    this.parentContexts.onChildOutletCreated(this.name, this);
    if (this.activated) {
      return;
    }
    const context = this.parentContexts.getContext(this.name);
    if (context?.route) {
      if (context.attachRef) {
        this.attach(context.attachRef, context.route);
      } else {
        this.activateWith(context.route, context.injector);
      }
    }
  }
  get isActivated() {
    return !!this.activated;
  }
  /**
   * @returns The currently activated component instance.
   * @throws An error if the outlet is not activated.
   */
  get component() {
    if (!this.activated) throw new RuntimeError(4012, (typeof ngDevMode === "undefined" || ngDevMode) && "Outlet is not activated");
    return this.activated.instance;
  }
  get activatedRoute() {
    if (!this.activated) throw new RuntimeError(4012, (typeof ngDevMode === "undefined" || ngDevMode) && "Outlet is not activated");
    return this._activatedRoute;
  }
  get activatedRouteData() {
    if (this._activatedRoute) {
      return this._activatedRoute.snapshot.data;
    }
    return {};
  }
  /**
   * Called when the `RouteReuseStrategy` instructs to detach the subtree
   */
  detach() {
    if (!this.activated) throw new RuntimeError(4012, (typeof ngDevMode === "undefined" || ngDevMode) && "Outlet is not activated");
    this.location.detach();
    const cmp = this.activated;
    this.activated = null;
    this._activatedRoute = null;
    this.detachEvents.emit(cmp.instance);
    return cmp;
  }
  /**
   * Called when the `RouteReuseStrategy` instructs to re-attach a previously detached subtree
   */
  attach(ref, activatedRoute) {
    this.activated = ref;
    this._activatedRoute = activatedRoute;
    this.location.insert(ref.hostView);
    this.inputBinder?.bindActivatedRouteToOutletComponent(this);
    this.attachEvents.emit(ref.instance);
  }
  deactivate() {
    if (this.activated) {
      const c = this.component;
      this.activated.destroy();
      this.activated = null;
      this._activatedRoute = null;
      this.deactivateEvents.emit(c);
    }
  }
  activateWith(activatedRoute, environmentInjector) {
    if (this.isActivated) {
      throw new RuntimeError(4013, (typeof ngDevMode === "undefined" || ngDevMode) && "Cannot activate an already activated outlet");
    }
    this._activatedRoute = activatedRoute;
    const location2 = this.location;
    const snapshot = activatedRoute.snapshot;
    const component = snapshot.component;
    const childContexts = this.parentContexts.getOrCreateContext(this.name).children;
    const injector = new OutletInjector(activatedRoute, childContexts, location2.injector, this.routerOutletData);
    this.activated = location2.createComponent(component, {
      index: location2.length,
      injector,
      environmentInjector
    });
    this.changeDetector.markForCheck();
    this.inputBinder?.bindActivatedRouteToOutletComponent(this);
    this.activateEvents.emit(this.activated.instance);
  }
  static \u0275fac = function RouterOutlet_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _RouterOutlet)();
  };
  static \u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
    type: _RouterOutlet,
    selectors: [["router-outlet"]],
    inputs: {
      name: "name",
      routerOutletData: [1, "routerOutletData"]
    },
    outputs: {
      activateEvents: "activate",
      deactivateEvents: "deactivate",
      attachEvents: "attach",
      detachEvents: "detach"
    },
    exportAs: ["outlet"],
    features: [\u0275\u0275NgOnChangesFeature]
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(RouterOutlet, [{
    type: Directive,
    args: [{
      selector: "router-outlet",
      exportAs: "outlet"
    }]
  }], null, {
    name: [{
      type: Input
    }],
    activateEvents: [{
      type: Output,
      args: ["activate"]
    }],
    deactivateEvents: [{
      type: Output,
      args: ["deactivate"]
    }],
    attachEvents: [{
      type: Output,
      args: ["attach"]
    }],
    detachEvents: [{
      type: Output,
      args: ["detach"]
    }]
  });
})();
var OutletInjector = class {
  route;
  childContexts;
  parent;
  outletData;
  constructor(route, childContexts, parent, outletData) {
    this.route = route;
    this.childContexts = childContexts;
    this.parent = parent;
    this.outletData = outletData;
  }
  get(token, notFoundValue) {
    if (token === ActivatedRoute) {
      return this.route;
    }
    if (token === ChildrenOutletContexts) {
      return this.childContexts;
    }
    if (token === ROUTER_OUTLET_DATA) {
      return this.outletData;
    }
    return this.parent.get(token, notFoundValue);
  }
};
var INPUT_BINDER = new InjectionToken("");
var RoutedComponentInputBinder = class _RoutedComponentInputBinder {
  outletDataSubscriptions = /* @__PURE__ */ new Map();
  bindActivatedRouteToOutletComponent(outlet) {
    this.unsubscribeFromRouteData(outlet);
    this.subscribeToRouteData(outlet);
  }
  unsubscribeFromRouteData(outlet) {
    this.outletDataSubscriptions.get(outlet)?.unsubscribe();
    this.outletDataSubscriptions.delete(outlet);
  }
  subscribeToRouteData(outlet) {
    const {
      activatedRoute
    } = outlet;
    const dataSubscription = combineLatest([activatedRoute.queryParams, activatedRoute.params, activatedRoute.data]).pipe(switchMap(([queryParams, params, data], index) => {
      data = __spreadValues(__spreadValues(__spreadValues({}, queryParams), params), data);
      if (index === 0) {
        return of(data);
      }
      return Promise.resolve(data);
    })).subscribe((data) => {
      if (!outlet.isActivated || !outlet.activatedComponentRef || outlet.activatedRoute !== activatedRoute || activatedRoute.component === null) {
        this.unsubscribeFromRouteData(outlet);
        return;
      }
      const mirror = reflectComponentType(activatedRoute.component);
      if (!mirror) {
        this.unsubscribeFromRouteData(outlet);
        return;
      }
      for (const {
        templateName
      } of mirror.inputs) {
        outlet.activatedComponentRef.setInput(templateName, data[templateName]);
      }
    });
    this.outletDataSubscriptions.set(outlet, dataSubscription);
  }
  static \u0275fac = function RoutedComponentInputBinder_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _RoutedComponentInputBinder)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _RoutedComponentInputBinder,
    factory: _RoutedComponentInputBinder.\u0275fac
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(RoutedComponentInputBinder, [{
    type: Injectable
  }], null, null);
})();
var \u0275EmptyOutletComponent = class _\u0275EmptyOutletComponent {
  static \u0275fac = function \u0275EmptyOutletComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _\u0275EmptyOutletComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
    type: _\u0275EmptyOutletComponent,
    selectors: [["ng-component"]],
    exportAs: ["emptyRouterOutlet"],
    decls: 1,
    vars: 0,
    template: function _EmptyOutletComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275element(0, "router-outlet");
      }
    },
    dependencies: [RouterOutlet],
    encapsulation: 2
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(\u0275EmptyOutletComponent, [{
    type: Component,
    args: [{
      template: `<router-outlet/>`,
      imports: [RouterOutlet],
      // Used to avoid component ID collisions with user code.
      exportAs: "emptyRouterOutlet"
    }]
  }], null, null);
})();
function standardizeConfig(r) {
  const children = r.children && r.children.map(standardizeConfig);
  const c = children ? __spreadProps(__spreadValues({}, r), {
    children
  }) : __spreadValues({}, r);
  if (!c.component && !c.loadComponent && (children || c.loadChildren) && c.outlet && c.outlet !== PRIMARY_OUTLET) {
    c.component = \u0275EmptyOutletComponent;
  }
  return c;
}
function createRouterState(routeReuseStrategy, curr, prevState) {
  const root = createNode(routeReuseStrategy, curr._root, prevState ? prevState._root : void 0);
  return new RouterState(root, curr);
}
function createNode(routeReuseStrategy, curr, prevState) {
  if (prevState && routeReuseStrategy.shouldReuseRoute(curr.value, prevState.value.snapshot)) {
    const value = prevState.value;
    value._futureSnapshot = curr.value;
    const children = createOrReuseChildren(routeReuseStrategy, curr, prevState);
    return new TreeNode(value, children);
  } else {
    if (routeReuseStrategy.shouldAttach(curr.value)) {
      const detachedRouteHandle = routeReuseStrategy.retrieve(curr.value);
      if (detachedRouteHandle !== null) {
        const tree2 = detachedRouteHandle.route;
        tree2.value._futureSnapshot = curr.value;
        tree2.children = curr.children.map((c) => createNode(routeReuseStrategy, c));
        return tree2;
      }
    }
    const value = createActivatedRoute(curr.value);
    const children = curr.children.map((c) => createNode(routeReuseStrategy, c));
    return new TreeNode(value, children);
  }
}
function createOrReuseChildren(routeReuseStrategy, curr, prevState) {
  return curr.children.map((child) => {
    for (const p of prevState.children) {
      if (routeReuseStrategy.shouldReuseRoute(child.value, p.value.snapshot)) {
        return createNode(routeReuseStrategy, child, p);
      }
    }
    return createNode(routeReuseStrategy, child);
  });
}
function createActivatedRoute(c) {
  return new ActivatedRoute(new BehaviorSubject(c.url), new BehaviorSubject(c.params), new BehaviorSubject(c.queryParams), new BehaviorSubject(c.fragment), new BehaviorSubject(c.data), c.outlet, c.component, c);
}
var RedirectCommand = class {
  redirectTo;
  navigationBehaviorOptions;
  constructor(redirectTo, navigationBehaviorOptions) {
    this.redirectTo = redirectTo;
    this.navigationBehaviorOptions = navigationBehaviorOptions;
  }
};
var NAVIGATION_CANCELING_ERROR = "ngNavigationCancelingError";
function redirectingNavigationError(urlSerializer, redirect) {
  const {
    redirectTo,
    navigationBehaviorOptions
  } = isUrlTree(redirect) ? {
    redirectTo: redirect,
    navigationBehaviorOptions: void 0
  } : redirect;
  const error = navigationCancelingError(ngDevMode && `Redirecting to "${urlSerializer.serialize(redirectTo)}"`, NavigationCancellationCode.Redirect);
  error.url = redirectTo;
  error.navigationBehaviorOptions = navigationBehaviorOptions;
  return error;
}
function navigationCancelingError(message, code) {
  const error = new Error(`NavigationCancelingError: ${message || ""}`);
  error[NAVIGATION_CANCELING_ERROR] = true;
  error.cancellationCode = code;
  return error;
}
function isRedirectingNavigationCancelingError(error) {
  return isNavigationCancelingError(error) && isUrlTree(error.url);
}
function isNavigationCancelingError(error) {
  return !!error && error[NAVIGATION_CANCELING_ERROR];
}
var warnedAboutUnsupportedInputBinding = false;
var activateRoutes = (rootContexts, routeReuseStrategy, forwardEvent, inputBindingEnabled) => map((t) => {
  new ActivateRoutes(routeReuseStrategy, t.targetRouterState, t.currentRouterState, forwardEvent, inputBindingEnabled).activate(rootContexts);
  return t;
});
var ActivateRoutes = class {
  routeReuseStrategy;
  futureState;
  currState;
  forwardEvent;
  inputBindingEnabled;
  constructor(routeReuseStrategy, futureState, currState, forwardEvent, inputBindingEnabled) {
    this.routeReuseStrategy = routeReuseStrategy;
    this.futureState = futureState;
    this.currState = currState;
    this.forwardEvent = forwardEvent;
    this.inputBindingEnabled = inputBindingEnabled;
  }
  activate(parentContexts) {
    const futureRoot = this.futureState._root;
    const currRoot = this.currState ? this.currState._root : null;
    this.deactivateChildRoutes(futureRoot, currRoot, parentContexts);
    advanceActivatedRoute(this.futureState.root);
    this.activateChildRoutes(futureRoot, currRoot, parentContexts);
  }
  // De-activate the child route that are not re-used for the future state
  deactivateChildRoutes(futureNode, currNode, contexts) {
    const children = nodeChildrenAsMap(currNode);
    futureNode.children.forEach((futureChild) => {
      const childOutletName = futureChild.value.outlet;
      this.deactivateRoutes(futureChild, children[childOutletName], contexts);
      delete children[childOutletName];
    });
    Object.values(children).forEach((v) => {
      this.deactivateRouteAndItsChildren(v, contexts);
    });
  }
  deactivateRoutes(futureNode, currNode, parentContext) {
    const future = futureNode.value;
    const curr = currNode ? currNode.value : null;
    if (future === curr) {
      if (future.component) {
        const context = parentContext.getContext(future.outlet);
        if (context) {
          this.deactivateChildRoutes(futureNode, currNode, context.children);
        }
      } else {
        this.deactivateChildRoutes(futureNode, currNode, parentContext);
      }
    } else {
      if (curr) {
        this.deactivateRouteAndItsChildren(currNode, parentContext);
      }
    }
  }
  deactivateRouteAndItsChildren(route, parentContexts) {
    if (route.value.component && this.routeReuseStrategy.shouldDetach(route.value.snapshot)) {
      this.detachAndStoreRouteSubtree(route, parentContexts);
    } else {
      this.deactivateRouteAndOutlet(route, parentContexts);
    }
  }
  detachAndStoreRouteSubtree(route, parentContexts) {
    const context = parentContexts.getContext(route.value.outlet);
    const contexts = context && route.value.component ? context.children : parentContexts;
    const children = nodeChildrenAsMap(route);
    for (const treeNode of Object.values(children)) {
      this.deactivateRouteAndItsChildren(treeNode, contexts);
    }
    if (context && context.outlet) {
      const componentRef = context.outlet.detach();
      const contexts2 = context.children.onOutletDeactivated();
      this.routeReuseStrategy.store(route.value.snapshot, {
        componentRef,
        route,
        contexts: contexts2
      });
    }
  }
  deactivateRouteAndOutlet(route, parentContexts) {
    const context = parentContexts.getContext(route.value.outlet);
    const contexts = context && route.value.component ? context.children : parentContexts;
    const children = nodeChildrenAsMap(route);
    for (const treeNode of Object.values(children)) {
      this.deactivateRouteAndItsChildren(treeNode, contexts);
    }
    if (context) {
      if (context.outlet) {
        context.outlet.deactivate();
        context.children.onOutletDeactivated();
      }
      context.attachRef = null;
      context.route = null;
    }
  }
  activateChildRoutes(futureNode, currNode, contexts) {
    const children = nodeChildrenAsMap(currNode);
    futureNode.children.forEach((c) => {
      this.activateRoutes(c, children[c.value.outlet], contexts);
      this.forwardEvent(new ActivationEnd(c.value.snapshot));
    });
    if (futureNode.children.length) {
      this.forwardEvent(new ChildActivationEnd(futureNode.value.snapshot));
    }
  }
  activateRoutes(futureNode, currNode, parentContexts) {
    const future = futureNode.value;
    const curr = currNode ? currNode.value : null;
    advanceActivatedRoute(future);
    if (future === curr) {
      if (future.component) {
        const context = parentContexts.getOrCreateContext(future.outlet);
        this.activateChildRoutes(futureNode, currNode, context.children);
      } else {
        this.activateChildRoutes(futureNode, currNode, parentContexts);
      }
    } else {
      if (future.component) {
        const context = parentContexts.getOrCreateContext(future.outlet);
        if (this.routeReuseStrategy.shouldAttach(future.snapshot)) {
          const stored = this.routeReuseStrategy.retrieve(future.snapshot);
          this.routeReuseStrategy.store(future.snapshot, null);
          context.children.onOutletReAttached(stored.contexts);
          context.attachRef = stored.componentRef;
          context.route = stored.route.value;
          if (context.outlet) {
            context.outlet.attach(stored.componentRef, stored.route.value);
          }
          advanceActivatedRoute(stored.route.value);
          this.activateChildRoutes(futureNode, null, context.children);
        } else {
          context.attachRef = null;
          context.route = future;
          if (context.outlet) {
            context.outlet.activateWith(future, context.injector);
          }
          this.activateChildRoutes(futureNode, null, context.children);
        }
      } else {
        this.activateChildRoutes(futureNode, null, parentContexts);
      }
    }
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      const context = parentContexts.getOrCreateContext(future.outlet);
      const outlet = context.outlet;
      if (outlet && this.inputBindingEnabled && !outlet.supportsBindingToComponentInputs && !warnedAboutUnsupportedInputBinding) {
        console.warn(`'withComponentInputBinding' feature is enabled but this application is using an outlet that may not support binding to component inputs.`);
        warnedAboutUnsupportedInputBinding = true;
      }
    }
  }
};
var CanActivate = class {
  path;
  route;
  constructor(path2) {
    this.path = path2;
    this.route = this.path[this.path.length - 1];
  }
};
var CanDeactivate = class {
  component;
  route;
  constructor(component, route) {
    this.component = component;
    this.route = route;
  }
};
function getAllRouteGuards(future, curr, parentContexts) {
  const futureRoot = future._root;
  const currRoot = curr ? curr._root : null;
  return getChildRouteGuards(futureRoot, currRoot, parentContexts, [futureRoot.value]);
}
function getCanActivateChild(p) {
  const canActivateChild = p.routeConfig ? p.routeConfig.canActivateChild : null;
  if (!canActivateChild || canActivateChild.length === 0) return null;
  return {
    node: p,
    guards: canActivateChild
  };
}
function getTokenOrFunctionIdentity(tokenOrFunction, injector) {
  const NOT_FOUND = Symbol();
  const result = injector.get(tokenOrFunction, NOT_FOUND);
  if (result === NOT_FOUND) {
    if (typeof tokenOrFunction === "function" && !isInjectable(tokenOrFunction)) {
      return tokenOrFunction;
    } else {
      return injector.get(tokenOrFunction);
    }
  }
  return result;
}
function getChildRouteGuards(futureNode, currNode, contexts, futurePath, checks = {
  canDeactivateChecks: [],
  canActivateChecks: []
}) {
  const prevChildren = nodeChildrenAsMap(currNode);
  futureNode.children.forEach((c) => {
    getRouteGuards(c, prevChildren[c.value.outlet], contexts, futurePath.concat([c.value]), checks);
    delete prevChildren[c.value.outlet];
  });
  Object.entries(prevChildren).forEach(([k, v]) => deactivateRouteAndItsChildren(v, contexts.getContext(k), checks));
  return checks;
}
function getRouteGuards(futureNode, currNode, parentContexts, futurePath, checks = {
  canDeactivateChecks: [],
  canActivateChecks: []
}) {
  const future = futureNode.value;
  const curr = currNode ? currNode.value : null;
  const context = parentContexts ? parentContexts.getContext(futureNode.value.outlet) : null;
  if (curr && future.routeConfig === curr.routeConfig) {
    const shouldRun = shouldRunGuardsAndResolvers(curr, future, future.routeConfig.runGuardsAndResolvers);
    if (shouldRun) {
      checks.canActivateChecks.push(new CanActivate(futurePath));
    } else {
      future.data = curr.data;
      future._resolvedData = curr._resolvedData;
    }
    if (future.component) {
      getChildRouteGuards(futureNode, currNode, context ? context.children : null, futurePath, checks);
    } else {
      getChildRouteGuards(futureNode, currNode, parentContexts, futurePath, checks);
    }
    if (shouldRun && context && context.outlet && context.outlet.isActivated) {
      checks.canDeactivateChecks.push(new CanDeactivate(context.outlet.component, curr));
    }
  } else {
    if (curr) {
      deactivateRouteAndItsChildren(currNode, context, checks);
    }
    checks.canActivateChecks.push(new CanActivate(futurePath));
    if (future.component) {
      getChildRouteGuards(futureNode, null, context ? context.children : null, futurePath, checks);
    } else {
      getChildRouteGuards(futureNode, null, parentContexts, futurePath, checks);
    }
  }
  return checks;
}
function shouldRunGuardsAndResolvers(curr, future, mode) {
  if (typeof mode === "function") {
    return mode(curr, future);
  }
  switch (mode) {
    case "pathParamsChange":
      return !equalPath(curr.url, future.url);
    case "pathParamsOrQueryParamsChange":
      return !equalPath(curr.url, future.url) || !shallowEqual(curr.queryParams, future.queryParams);
    case "always":
      return true;
    case "paramsOrQueryParamsChange":
      return !equalParamsAndUrlSegments(curr, future) || !shallowEqual(curr.queryParams, future.queryParams);
    case "paramsChange":
    default:
      return !equalParamsAndUrlSegments(curr, future);
  }
}
function deactivateRouteAndItsChildren(route, context, checks) {
  const children = nodeChildrenAsMap(route);
  const r = route.value;
  Object.entries(children).forEach(([childName, node]) => {
    if (!r.component) {
      deactivateRouteAndItsChildren(node, context, checks);
    } else if (context) {
      deactivateRouteAndItsChildren(node, context.children.getContext(childName), checks);
    } else {
      deactivateRouteAndItsChildren(node, null, checks);
    }
  });
  if (!r.component) {
    checks.canDeactivateChecks.push(new CanDeactivate(null, r));
  } else if (context && context.outlet && context.outlet.isActivated) {
    checks.canDeactivateChecks.push(new CanDeactivate(context.outlet.component, r));
  } else {
    checks.canDeactivateChecks.push(new CanDeactivate(null, r));
  }
}
function isFunction(v) {
  return typeof v === "function";
}
function isBoolean(v) {
  return typeof v === "boolean";
}
function isCanLoad(guard) {
  return guard && isFunction(guard.canLoad);
}
function isCanActivate(guard) {
  return guard && isFunction(guard.canActivate);
}
function isCanActivateChild(guard) {
  return guard && isFunction(guard.canActivateChild);
}
function isCanDeactivate(guard) {
  return guard && isFunction(guard.canDeactivate);
}
function isCanMatch(guard) {
  return guard && isFunction(guard.canMatch);
}
function isEmptyError(e) {
  return e instanceof EmptyError || e?.name === "EmptyError";
}
var INITIAL_VALUE = /* @__PURE__ */ Symbol("INITIAL_VALUE");
function prioritizedGuardValue() {
  return switchMap((obs) => {
    return combineLatest(obs.map((o) => o.pipe(take(1), startWith(INITIAL_VALUE)))).pipe(map((results) => {
      for (const result of results) {
        if (result === true) {
          continue;
        } else if (result === INITIAL_VALUE) {
          return INITIAL_VALUE;
        } else if (result === false || isRedirect(result)) {
          return result;
        }
      }
      return true;
    }), filter((item) => item !== INITIAL_VALUE), take(1));
  });
}
function isRedirect(val) {
  return isUrlTree(val) || val instanceof RedirectCommand;
}
function checkGuards(injector, forwardEvent) {
  return mergeMap((t) => {
    const {
      targetSnapshot,
      currentSnapshot,
      guards: {
        canActivateChecks,
        canDeactivateChecks
      }
    } = t;
    if (canDeactivateChecks.length === 0 && canActivateChecks.length === 0) {
      return of(__spreadProps(__spreadValues({}, t), {
        guardsResult: true
      }));
    }
    return runCanDeactivateChecks(canDeactivateChecks, targetSnapshot, currentSnapshot, injector).pipe(mergeMap((canDeactivate) => {
      return canDeactivate && isBoolean(canDeactivate) ? runCanActivateChecks(targetSnapshot, canActivateChecks, injector, forwardEvent) : of(canDeactivate);
    }), map((guardsResult) => __spreadProps(__spreadValues({}, t), {
      guardsResult
    })));
  });
}
function runCanDeactivateChecks(checks, futureRSS, currRSS, injector) {
  return from(checks).pipe(mergeMap((check) => runCanDeactivate(check.component, check.route, currRSS, futureRSS, injector)), first((result) => {
    return result !== true;
  }, true));
}
function runCanActivateChecks(futureSnapshot, checks, injector, forwardEvent) {
  return from(checks).pipe(concatMap((check) => {
    return concat(fireChildActivationStart(check.route.parent, forwardEvent), fireActivationStart(check.route, forwardEvent), runCanActivateChild(futureSnapshot, check.path, injector), runCanActivate(futureSnapshot, check.route, injector));
  }), first((result) => {
    return result !== true;
  }, true));
}
function fireActivationStart(snapshot, forwardEvent) {
  if (snapshot !== null && forwardEvent) {
    forwardEvent(new ActivationStart(snapshot));
  }
  return of(true);
}
function fireChildActivationStart(snapshot, forwardEvent) {
  if (snapshot !== null && forwardEvent) {
    forwardEvent(new ChildActivationStart(snapshot));
  }
  return of(true);
}
function runCanActivate(futureRSS, futureARS, injector) {
  const canActivate = futureARS.routeConfig ? futureARS.routeConfig.canActivate : null;
  if (!canActivate || canActivate.length === 0) return of(true);
  const canActivateObservables = canActivate.map((canActivate2) => {
    return defer(() => {
      const closestInjector = getClosestRouteInjector(futureARS) ?? injector;
      const guard = getTokenOrFunctionIdentity(canActivate2, closestInjector);
      const guardVal = isCanActivate(guard) ? guard.canActivate(futureARS, futureRSS) : runInInjectionContext(closestInjector, () => guard(futureARS, futureRSS));
      return wrapIntoObservable(guardVal).pipe(first());
    });
  });
  return of(canActivateObservables).pipe(prioritizedGuardValue());
}
function runCanActivateChild(futureRSS, path2, injector) {
  const futureARS = path2[path2.length - 1];
  const canActivateChildGuards = path2.slice(0, path2.length - 1).reverse().map((p) => getCanActivateChild(p)).filter((_) => _ !== null);
  const canActivateChildGuardsMapped = canActivateChildGuards.map((d) => {
    return defer(() => {
      const guardsMapped = d.guards.map((canActivateChild) => {
        const closestInjector = getClosestRouteInjector(d.node) ?? injector;
        const guard = getTokenOrFunctionIdentity(canActivateChild, closestInjector);
        const guardVal = isCanActivateChild(guard) ? guard.canActivateChild(futureARS, futureRSS) : runInInjectionContext(closestInjector, () => guard(futureARS, futureRSS));
        return wrapIntoObservable(guardVal).pipe(first());
      });
      return of(guardsMapped).pipe(prioritizedGuardValue());
    });
  });
  return of(canActivateChildGuardsMapped).pipe(prioritizedGuardValue());
}
function runCanDeactivate(component, currARS, currRSS, futureRSS, injector) {
  const canDeactivate = currARS && currARS.routeConfig ? currARS.routeConfig.canDeactivate : null;
  if (!canDeactivate || canDeactivate.length === 0) return of(true);
  const canDeactivateObservables = canDeactivate.map((c) => {
    const closestInjector = getClosestRouteInjector(currARS) ?? injector;
    const guard = getTokenOrFunctionIdentity(c, closestInjector);
    const guardVal = isCanDeactivate(guard) ? guard.canDeactivate(component, currARS, currRSS, futureRSS) : runInInjectionContext(closestInjector, () => guard(component, currARS, currRSS, futureRSS));
    return wrapIntoObservable(guardVal).pipe(first());
  });
  return of(canDeactivateObservables).pipe(prioritizedGuardValue());
}
function runCanLoadGuards(injector, route, segments, urlSerializer) {
  const canLoad = route.canLoad;
  if (canLoad === void 0 || canLoad.length === 0) {
    return of(true);
  }
  const canLoadObservables = canLoad.map((injectionToken) => {
    const guard = getTokenOrFunctionIdentity(injectionToken, injector);
    const guardVal = isCanLoad(guard) ? guard.canLoad(route, segments) : runInInjectionContext(injector, () => guard(route, segments));
    return wrapIntoObservable(guardVal);
  });
  return of(canLoadObservables).pipe(prioritizedGuardValue(), redirectIfUrlTree(urlSerializer));
}
function redirectIfUrlTree(urlSerializer) {
  return pipe(tap((result) => {
    if (typeof result === "boolean") return;
    throw redirectingNavigationError(urlSerializer, result);
  }), map((result) => result === true));
}
function runCanMatchGuards(injector, route, segments, urlSerializer) {
  const canMatch = route.canMatch;
  if (!canMatch || canMatch.length === 0) return of(true);
  const canMatchObservables = canMatch.map((injectionToken) => {
    const guard = getTokenOrFunctionIdentity(injectionToken, injector);
    const guardVal = isCanMatch(guard) ? guard.canMatch(route, segments) : runInInjectionContext(injector, () => guard(route, segments));
    return wrapIntoObservable(guardVal);
  });
  return of(canMatchObservables).pipe(prioritizedGuardValue(), redirectIfUrlTree(urlSerializer));
}
var NoMatch = class {
  segmentGroup;
  constructor(segmentGroup) {
    this.segmentGroup = segmentGroup || null;
  }
};
var AbsoluteRedirect = class extends Error {
  urlTree;
  constructor(urlTree) {
    super();
    this.urlTree = urlTree;
  }
};
function noMatch$1(segmentGroup) {
  return throwError(new NoMatch(segmentGroup));
}
function namedOutletsRedirect(redirectTo) {
  return throwError(new RuntimeError(4e3, (typeof ngDevMode === "undefined" || ngDevMode) && `Only absolute redirects can have named outlets. redirectTo: '${redirectTo}'`));
}
function canLoadFails(route) {
  return throwError(navigationCancelingError((typeof ngDevMode === "undefined" || ngDevMode) && `Cannot load children because the guard of the route "path: '${route.path}'" returned false`, NavigationCancellationCode.GuardRejected));
}
var ApplyRedirects = class {
  urlSerializer;
  urlTree;
  constructor(urlSerializer, urlTree) {
    this.urlSerializer = urlSerializer;
    this.urlTree = urlTree;
  }
  lineralizeSegments(route, urlTree) {
    let res = [];
    let c = urlTree.root;
    while (true) {
      res = res.concat(c.segments);
      if (c.numberOfChildren === 0) {
        return of(res);
      }
      if (c.numberOfChildren > 1 || !c.children[PRIMARY_OUTLET]) {
        return namedOutletsRedirect(`${route.redirectTo}`);
      }
      c = c.children[PRIMARY_OUTLET];
    }
  }
  applyRedirectCommands(segments, redirectTo, posParams, currentSnapshot, injector) {
    if (typeof redirectTo !== "string") {
      const redirectToFn = redirectTo;
      const {
        queryParams,
        fragment,
        routeConfig,
        url,
        outlet,
        params,
        data,
        title
      } = currentSnapshot;
      const newRedirect = runInInjectionContext(injector, () => redirectToFn({
        params,
        data,
        queryParams,
        fragment,
        routeConfig,
        url,
        outlet,
        title
      }));
      if (newRedirect instanceof UrlTree) {
        throw new AbsoluteRedirect(newRedirect);
      }
      redirectTo = newRedirect;
    }
    const newTree = this.applyRedirectCreateUrlTree(redirectTo, this.urlSerializer.parse(redirectTo), segments, posParams);
    if (redirectTo[0] === "/") {
      throw new AbsoluteRedirect(newTree);
    }
    return newTree;
  }
  applyRedirectCreateUrlTree(redirectTo, urlTree, segments, posParams) {
    const newRoot = this.createSegmentGroup(redirectTo, urlTree.root, segments, posParams);
    return new UrlTree(newRoot, this.createQueryParams(urlTree.queryParams, this.urlTree.queryParams), urlTree.fragment);
  }
  createQueryParams(redirectToParams, actualParams) {
    const res = {};
    Object.entries(redirectToParams).forEach(([k, v]) => {
      const copySourceValue = typeof v === "string" && v[0] === ":";
      if (copySourceValue) {
        const sourceName = v.substring(1);
        res[k] = actualParams[sourceName];
      } else {
        res[k] = v;
      }
    });
    return res;
  }
  createSegmentGroup(redirectTo, group, segments, posParams) {
    const updatedSegments = this.createSegments(redirectTo, group.segments, segments, posParams);
    let children = {};
    Object.entries(group.children).forEach(([name, child]) => {
      children[name] = this.createSegmentGroup(redirectTo, child, segments, posParams);
    });
    return new UrlSegmentGroup(updatedSegments, children);
  }
  createSegments(redirectTo, redirectToSegments, actualSegments, posParams) {
    return redirectToSegments.map((s) => s.path[0] === ":" ? this.findPosParam(redirectTo, s, posParams) : this.findOrReturn(s, actualSegments));
  }
  findPosParam(redirectTo, redirectToUrlSegment, posParams) {
    const pos = posParams[redirectToUrlSegment.path.substring(1)];
    if (!pos) throw new RuntimeError(4001, (typeof ngDevMode === "undefined" || ngDevMode) && `Cannot redirect to '${redirectTo}'. Cannot find '${redirectToUrlSegment.path}'.`);
    return pos;
  }
  findOrReturn(redirectToUrlSegment, actualSegments) {
    let idx = 0;
    for (const s of actualSegments) {
      if (s.path === redirectToUrlSegment.path) {
        actualSegments.splice(idx);
        return s;
      }
      idx++;
    }
    return redirectToUrlSegment;
  }
};
var noMatch = {
  matched: false,
  consumedSegments: [],
  remainingSegments: [],
  parameters: {},
  positionalParamSegments: {}
};
function matchWithChecks(segmentGroup, route, segments, injector, urlSerializer) {
  const result = match(segmentGroup, route, segments);
  if (!result.matched) {
    return of(result);
  }
  injector = getOrCreateRouteInjectorIfNeeded(route, injector);
  return runCanMatchGuards(injector, route, segments, urlSerializer).pipe(map((v) => v === true ? result : __spreadValues({}, noMatch)));
}
function match(segmentGroup, route, segments) {
  if (route.path === "**") {
    return createWildcardMatchResult(segments);
  }
  if (route.path === "") {
    if (route.pathMatch === "full" && (segmentGroup.hasChildren() || segments.length > 0)) {
      return __spreadValues({}, noMatch);
    }
    return {
      matched: true,
      consumedSegments: [],
      remainingSegments: segments,
      parameters: {},
      positionalParamSegments: {}
    };
  }
  const matcher = route.matcher || defaultUrlMatcher;
  const res = matcher(segments, segmentGroup, route);
  if (!res) return __spreadValues({}, noMatch);
  const posParams = {};
  Object.entries(res.posParams ?? {}).forEach(([k, v]) => {
    posParams[k] = v.path;
  });
  const parameters = res.consumed.length > 0 ? __spreadValues(__spreadValues({}, posParams), res.consumed[res.consumed.length - 1].parameters) : posParams;
  return {
    matched: true,
    consumedSegments: res.consumed,
    remainingSegments: segments.slice(res.consumed.length),
    // TODO(atscott): investigate combining parameters and positionalParamSegments
    parameters,
    positionalParamSegments: res.posParams ?? {}
  };
}
function createWildcardMatchResult(segments) {
  return {
    matched: true,
    parameters: segments.length > 0 ? last2(segments).parameters : {},
    consumedSegments: segments,
    remainingSegments: [],
    positionalParamSegments: {}
  };
}
function split(segmentGroup, consumedSegments, slicedSegments, config) {
  if (slicedSegments.length > 0 && containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, config)) {
    const s2 = new UrlSegmentGroup(consumedSegments, createChildrenForEmptyPaths(config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));
    return {
      segmentGroup: s2,
      slicedSegments: []
    };
  }
  if (slicedSegments.length === 0 && containsEmptyPathMatches(segmentGroup, slicedSegments, config)) {
    const s2 = new UrlSegmentGroup(segmentGroup.segments, addEmptyPathsToChildrenIfNeeded(segmentGroup, slicedSegments, config, segmentGroup.children));
    return {
      segmentGroup: s2,
      slicedSegments
    };
  }
  const s = new UrlSegmentGroup(segmentGroup.segments, segmentGroup.children);
  return {
    segmentGroup: s,
    slicedSegments
  };
}
function addEmptyPathsToChildrenIfNeeded(segmentGroup, slicedSegments, routes2, children) {
  const res = {};
  for (const r of routes2) {
    if (emptyPathMatch(segmentGroup, slicedSegments, r) && !children[getOutlet(r)]) {
      const s = new UrlSegmentGroup([], {});
      res[getOutlet(r)] = s;
    }
  }
  return __spreadValues(__spreadValues({}, children), res);
}
function createChildrenForEmptyPaths(routes2, primarySegment) {
  const res = {};
  res[PRIMARY_OUTLET] = primarySegment;
  for (const r of routes2) {
    if (r.path === "" && getOutlet(r) !== PRIMARY_OUTLET) {
      const s = new UrlSegmentGroup([], {});
      res[getOutlet(r)] = s;
    }
  }
  return res;
}
function containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, routes2) {
  return routes2.some((r) => emptyPathMatch(segmentGroup, slicedSegments, r) && getOutlet(r) !== PRIMARY_OUTLET);
}
function containsEmptyPathMatches(segmentGroup, slicedSegments, routes2) {
  return routes2.some((r) => emptyPathMatch(segmentGroup, slicedSegments, r));
}
function emptyPathMatch(segmentGroup, slicedSegments, r) {
  if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === "full") {
    return false;
  }
  return r.path === "";
}
function noLeftoversInUrl(segmentGroup, segments, outlet) {
  return segments.length === 0 && !segmentGroup.children[outlet];
}
var NoLeftoversInUrl = class {
};
function recognize$1(injector, configLoader, rootComponentType, config, urlTree, urlSerializer, paramsInheritanceStrategy = "emptyOnly") {
  return new Recognizer(injector, configLoader, rootComponentType, config, urlTree, paramsInheritanceStrategy, urlSerializer).recognize();
}
var MAX_ALLOWED_REDIRECTS = 31;
var Recognizer = class {
  injector;
  configLoader;
  rootComponentType;
  config;
  urlTree;
  paramsInheritanceStrategy;
  urlSerializer;
  applyRedirects;
  absoluteRedirectCount = 0;
  allowRedirects = true;
  constructor(injector, configLoader, rootComponentType, config, urlTree, paramsInheritanceStrategy, urlSerializer) {
    this.injector = injector;
    this.configLoader = configLoader;
    this.rootComponentType = rootComponentType;
    this.config = config;
    this.urlTree = urlTree;
    this.paramsInheritanceStrategy = paramsInheritanceStrategy;
    this.urlSerializer = urlSerializer;
    this.applyRedirects = new ApplyRedirects(this.urlSerializer, this.urlTree);
  }
  noMatchError(e) {
    return new RuntimeError(4002, typeof ngDevMode === "undefined" || ngDevMode ? `Cannot match any routes. URL Segment: '${e.segmentGroup}'` : `'${e.segmentGroup}'`);
  }
  recognize() {
    const rootSegmentGroup = split(this.urlTree.root, [], [], this.config).segmentGroup;
    return this.match(rootSegmentGroup).pipe(map(({
      children,
      rootSnapshot
    }) => {
      const rootNode = new TreeNode(rootSnapshot, children);
      const routeState = new RouterStateSnapshot("", rootNode);
      const tree2 = createUrlTreeFromSnapshot(rootSnapshot, [], this.urlTree.queryParams, this.urlTree.fragment);
      tree2.queryParams = this.urlTree.queryParams;
      routeState.url = this.urlSerializer.serialize(tree2);
      return {
        state: routeState,
        tree: tree2
      };
    }));
  }
  match(rootSegmentGroup) {
    const rootSnapshot = new ActivatedRouteSnapshot([], Object.freeze({}), Object.freeze(__spreadValues({}, this.urlTree.queryParams)), this.urlTree.fragment, Object.freeze({}), PRIMARY_OUTLET, this.rootComponentType, null, {});
    return this.processSegmentGroup(this.injector, this.config, rootSegmentGroup, PRIMARY_OUTLET, rootSnapshot).pipe(map((children) => {
      return {
        children,
        rootSnapshot
      };
    }), catchError((e) => {
      if (e instanceof AbsoluteRedirect) {
        this.urlTree = e.urlTree;
        return this.match(e.urlTree.root);
      }
      if (e instanceof NoMatch) {
        throw this.noMatchError(e);
      }
      throw e;
    }));
  }
  processSegmentGroup(injector, config, segmentGroup, outlet, parentRoute) {
    if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {
      return this.processChildren(injector, config, segmentGroup, parentRoute);
    }
    return this.processSegment(injector, config, segmentGroup, segmentGroup.segments, outlet, true, parentRoute).pipe(map((child) => child instanceof TreeNode ? [child] : []));
  }
  /**
   * Matches every child outlet in the `segmentGroup` to a `Route` in the config. Returns `null` if
   * we cannot find a match for _any_ of the children.
   *
   * @param config - The `Routes` to match against
   * @param segmentGroup - The `UrlSegmentGroup` whose children need to be matched against the
   *     config.
   */
  processChildren(injector, config, segmentGroup, parentRoute) {
    const childOutlets = [];
    for (const child of Object.keys(segmentGroup.children)) {
      if (child === "primary") {
        childOutlets.unshift(child);
      } else {
        childOutlets.push(child);
      }
    }
    return from(childOutlets).pipe(concatMap((childOutlet) => {
      const child = segmentGroup.children[childOutlet];
      const sortedConfig = sortByMatchingOutlets(config, childOutlet);
      return this.processSegmentGroup(injector, sortedConfig, child, childOutlet, parentRoute);
    }), scan((children, outletChildren) => {
      children.push(...outletChildren);
      return children;
    }), defaultIfEmpty(null), last(), mergeMap((children) => {
      if (children === null) return noMatch$1(segmentGroup);
      const mergedChildren = mergeEmptyPathMatches(children);
      if (typeof ngDevMode === "undefined" || ngDevMode) {
        checkOutletNameUniqueness(mergedChildren);
      }
      sortActivatedRouteSnapshots(mergedChildren);
      return of(mergedChildren);
    }));
  }
  processSegment(injector, routes2, segmentGroup, segments, outlet, allowRedirects, parentRoute) {
    return from(routes2).pipe(concatMap((r) => {
      return this.processSegmentAgainstRoute(r._injector ?? injector, routes2, r, segmentGroup, segments, outlet, allowRedirects, parentRoute).pipe(catchError((e) => {
        if (e instanceof NoMatch) {
          return of(null);
        }
        throw e;
      }));
    }), first((x) => !!x), catchError((e) => {
      if (isEmptyError(e)) {
        if (noLeftoversInUrl(segmentGroup, segments, outlet)) {
          return of(new NoLeftoversInUrl());
        }
        return noMatch$1(segmentGroup);
      }
      throw e;
    }));
  }
  processSegmentAgainstRoute(injector, routes2, route, rawSegment, segments, outlet, allowRedirects, parentRoute) {
    if (getOutlet(route) !== outlet && (outlet === PRIMARY_OUTLET || !emptyPathMatch(rawSegment, segments, route))) {
      return noMatch$1(rawSegment);
    }
    if (route.redirectTo === void 0) {
      return this.matchSegmentAgainstRoute(injector, rawSegment, route, segments, outlet, parentRoute);
    }
    if (this.allowRedirects && allowRedirects) {
      return this.expandSegmentAgainstRouteUsingRedirect(injector, rawSegment, routes2, route, segments, outlet, parentRoute);
    }
    return noMatch$1(rawSegment);
  }
  expandSegmentAgainstRouteUsingRedirect(injector, segmentGroup, routes2, route, segments, outlet, parentRoute) {
    const {
      matched,
      parameters,
      consumedSegments,
      positionalParamSegments,
      remainingSegments
    } = match(segmentGroup, route, segments);
    if (!matched) return noMatch$1(segmentGroup);
    if (typeof route.redirectTo === "string" && route.redirectTo[0] === "/") {
      this.absoluteRedirectCount++;
      if (this.absoluteRedirectCount > MAX_ALLOWED_REDIRECTS) {
        if (ngDevMode) {
          throw new RuntimeError(4016, `Detected possible infinite redirect when redirecting from '${this.urlTree}' to '${route.redirectTo}'.
This is currently a dev mode only error but will become a call stack size exceeded error in production in a future major version.`);
        }
        this.allowRedirects = false;
      }
    }
    const currentSnapshot = new ActivatedRouteSnapshot(segments, parameters, Object.freeze(__spreadValues({}, this.urlTree.queryParams)), this.urlTree.fragment, getData(route), getOutlet(route), route.component ?? route._loadedComponent ?? null, route, getResolve(route));
    const inherited = getInherited(currentSnapshot, parentRoute, this.paramsInheritanceStrategy);
    currentSnapshot.params = Object.freeze(inherited.params);
    currentSnapshot.data = Object.freeze(inherited.data);
    const newTree = this.applyRedirects.applyRedirectCommands(consumedSegments, route.redirectTo, positionalParamSegments, currentSnapshot, injector);
    return this.applyRedirects.lineralizeSegments(route, newTree).pipe(mergeMap((newSegments) => {
      return this.processSegment(injector, routes2, segmentGroup, newSegments.concat(remainingSegments), outlet, false, parentRoute);
    }));
  }
  matchSegmentAgainstRoute(injector, rawSegment, route, segments, outlet, parentRoute) {
    const matchResult = matchWithChecks(rawSegment, route, segments, injector, this.urlSerializer);
    if (route.path === "**") {
      rawSegment.children = {};
    }
    return matchResult.pipe(switchMap((result) => {
      if (!result.matched) {
        return noMatch$1(rawSegment);
      }
      injector = route._injector ?? injector;
      return this.getChildConfig(injector, route, segments).pipe(switchMap(({
        routes: childConfig
      }) => {
        const childInjector = route._loadedInjector ?? injector;
        const {
          parameters,
          consumedSegments,
          remainingSegments
        } = result;
        const snapshot = new ActivatedRouteSnapshot(consumedSegments, parameters, Object.freeze(__spreadValues({}, this.urlTree.queryParams)), this.urlTree.fragment, getData(route), getOutlet(route), route.component ?? route._loadedComponent ?? null, route, getResolve(route));
        const inherited = getInherited(snapshot, parentRoute, this.paramsInheritanceStrategy);
        snapshot.params = Object.freeze(inherited.params);
        snapshot.data = Object.freeze(inherited.data);
        const {
          segmentGroup,
          slicedSegments
        } = split(rawSegment, consumedSegments, remainingSegments, childConfig);
        if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {
          return this.processChildren(childInjector, childConfig, segmentGroup, snapshot).pipe(map((children) => {
            return new TreeNode(snapshot, children);
          }));
        }
        if (childConfig.length === 0 && slicedSegments.length === 0) {
          return of(new TreeNode(snapshot, []));
        }
        const matchedOnOutlet = getOutlet(route) === outlet;
        return this.processSegment(childInjector, childConfig, segmentGroup, slicedSegments, matchedOnOutlet ? PRIMARY_OUTLET : outlet, true, snapshot).pipe(map((child) => {
          return new TreeNode(snapshot, child instanceof TreeNode ? [child] : []);
        }));
      }));
    }));
  }
  getChildConfig(injector, route, segments) {
    if (route.children) {
      return of({
        routes: route.children,
        injector
      });
    }
    if (route.loadChildren) {
      if (route._loadedRoutes !== void 0) {
        return of({
          routes: route._loadedRoutes,
          injector: route._loadedInjector
        });
      }
      return runCanLoadGuards(injector, route, segments, this.urlSerializer).pipe(mergeMap((shouldLoadResult) => {
        if (shouldLoadResult) {
          return this.configLoader.loadChildren(injector, route).pipe(tap((cfg) => {
            route._loadedRoutes = cfg.routes;
            route._loadedInjector = cfg.injector;
          }));
        }
        return canLoadFails(route);
      }));
    }
    return of({
      routes: [],
      injector
    });
  }
};
function sortActivatedRouteSnapshots(nodes) {
  nodes.sort((a, b) => {
    if (a.value.outlet === PRIMARY_OUTLET) return -1;
    if (b.value.outlet === PRIMARY_OUTLET) return 1;
    return a.value.outlet.localeCompare(b.value.outlet);
  });
}
function hasEmptyPathConfig(node) {
  const config = node.value.routeConfig;
  return config && config.path === "";
}
function mergeEmptyPathMatches(nodes) {
  const result = [];
  const mergedNodes = /* @__PURE__ */ new Set();
  for (const node of nodes) {
    if (!hasEmptyPathConfig(node)) {
      result.push(node);
      continue;
    }
    const duplicateEmptyPathNode = result.find((resultNode) => node.value.routeConfig === resultNode.value.routeConfig);
    if (duplicateEmptyPathNode !== void 0) {
      duplicateEmptyPathNode.children.push(...node.children);
      mergedNodes.add(duplicateEmptyPathNode);
    } else {
      result.push(node);
    }
  }
  for (const mergedNode of mergedNodes) {
    const mergedChildren = mergeEmptyPathMatches(mergedNode.children);
    result.push(new TreeNode(mergedNode.value, mergedChildren));
  }
  return result.filter((n) => !mergedNodes.has(n));
}
function checkOutletNameUniqueness(nodes) {
  const names = {};
  nodes.forEach((n) => {
    const routeWithSameOutletName = names[n.value.outlet];
    if (routeWithSameOutletName) {
      const p = routeWithSameOutletName.url.map((s) => s.toString()).join("/");
      const c = n.value.url.map((s) => s.toString()).join("/");
      throw new RuntimeError(4006, (typeof ngDevMode === "undefined" || ngDevMode) && `Two segments cannot have the same outlet name: '${p}' and '${c}'.`);
    }
    names[n.value.outlet] = n.value;
  });
}
function getData(route) {
  return route.data || {};
}
function getResolve(route) {
  return route.resolve || {};
}
function recognize(injector, configLoader, rootComponentType, config, serializer2, paramsInheritanceStrategy) {
  return mergeMap((t) => recognize$1(injector, configLoader, rootComponentType, config, t.extractedUrl, serializer2, paramsInheritanceStrategy).pipe(map(({
    state: targetSnapshot,
    tree: urlAfterRedirects
  }) => {
    return __spreadProps(__spreadValues({}, t), {
      targetSnapshot,
      urlAfterRedirects
    });
  })));
}
function resolveData(paramsInheritanceStrategy, injector) {
  return mergeMap((t) => {
    const {
      targetSnapshot,
      guards: {
        canActivateChecks
      }
    } = t;
    if (!canActivateChecks.length) {
      return of(t);
    }
    const routesWithResolversToRun = new Set(canActivateChecks.map((check) => check.route));
    const routesNeedingDataUpdates = /* @__PURE__ */ new Set();
    for (const route of routesWithResolversToRun) {
      if (routesNeedingDataUpdates.has(route)) {
        continue;
      }
      for (const newRoute of flattenRouteTree(route)) {
        routesNeedingDataUpdates.add(newRoute);
      }
    }
    let routesProcessed = 0;
    return from(routesNeedingDataUpdates).pipe(concatMap((route) => {
      if (routesWithResolversToRun.has(route)) {
        return runResolve(route, targetSnapshot, paramsInheritanceStrategy, injector);
      } else {
        route.data = getInherited(route, route.parent, paramsInheritanceStrategy).resolve;
        return of(void 0);
      }
    }), tap(() => routesProcessed++), takeLast(1), mergeMap((_) => routesProcessed === routesNeedingDataUpdates.size ? of(t) : EMPTY));
  });
}
function flattenRouteTree(route) {
  const descendants = route.children.map((child) => flattenRouteTree(child)).flat();
  return [route, ...descendants];
}
function runResolve(futureARS, futureRSS, paramsInheritanceStrategy, injector) {
  const config = futureARS.routeConfig;
  const resolve = futureARS._resolve;
  if (config?.title !== void 0 && !hasStaticTitle(config)) {
    resolve[RouteTitleKey] = config.title;
  }
  return resolveNode(resolve, futureARS, futureRSS, injector).pipe(map((resolvedData) => {
    futureARS._resolvedData = resolvedData;
    futureARS.data = getInherited(futureARS, futureARS.parent, paramsInheritanceStrategy).resolve;
    return null;
  }));
}
function resolveNode(resolve, futureARS, futureRSS, injector) {
  const keys = getDataKeys(resolve);
  if (keys.length === 0) {
    return of({});
  }
  const data = {};
  return from(keys).pipe(mergeMap((key) => getResolver(resolve[key], futureARS, futureRSS, injector).pipe(first(), tap((value) => {
    if (value instanceof RedirectCommand) {
      throw redirectingNavigationError(new DefaultUrlSerializer(), value);
    }
    data[key] = value;
  }))), takeLast(1), map(() => data), catchError((e) => isEmptyError(e) ? EMPTY : throwError(e)));
}
function getResolver(injectionToken, futureARS, futureRSS, injector) {
  const closestInjector = getClosestRouteInjector(futureARS) ?? injector;
  const resolver = getTokenOrFunctionIdentity(injectionToken, closestInjector);
  const resolverValue = resolver.resolve ? resolver.resolve(futureARS, futureRSS) : runInInjectionContext(closestInjector, () => resolver(futureARS, futureRSS));
  return wrapIntoObservable(resolverValue);
}
function switchTap(next) {
  return switchMap((v) => {
    const nextResult = next(v);
    if (nextResult) {
      return from(nextResult).pipe(map(() => v));
    }
    return of(v);
  });
}
var TitleStrategy = class _TitleStrategy {
  /**
   * @returns The `title` of the deepest primary route.
   */
  buildTitle(snapshot) {
    let pageTitle;
    let route = snapshot.root;
    while (route !== void 0) {
      pageTitle = this.getResolvedTitleForRoute(route) ?? pageTitle;
      route = route.children.find((child) => child.outlet === PRIMARY_OUTLET);
    }
    return pageTitle;
  }
  /**
   * Given an `ActivatedRouteSnapshot`, returns the final value of the
   * `Route.title` property, which can either be a static string or a resolved value.
   */
  getResolvedTitleForRoute(snapshot) {
    return snapshot.data[RouteTitleKey];
  }
  static \u0275fac = function TitleStrategy_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _TitleStrategy)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _TitleStrategy,
    factory: () => (() => inject(DefaultTitleStrategy))(),
    providedIn: "root"
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TitleStrategy, [{
    type: Injectable,
    args: [{
      providedIn: "root",
      useFactory: () => inject(DefaultTitleStrategy)
    }]
  }], null, null);
})();
var DefaultTitleStrategy = class _DefaultTitleStrategy extends TitleStrategy {
  title;
  constructor(title) {
    super();
    this.title = title;
  }
  /**
   * Sets the title of the browser to the given value.
   *
   * @param title The `pageTitle` from the deepest primary route.
   */
  updateTitle(snapshot) {
    const title = this.buildTitle(snapshot);
    if (title !== void 0) {
      this.title.setTitle(title);
    }
  }
  static \u0275fac = function DefaultTitleStrategy_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DefaultTitleStrategy)(\u0275\u0275inject(Title));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _DefaultTitleStrategy,
    factory: _DefaultTitleStrategy.\u0275fac,
    providedIn: "root"
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DefaultTitleStrategy, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: Title
  }], null);
})();
var ROUTER_CONFIGURATION = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "router config" : "", {
  providedIn: "root",
  factory: () => ({})
});
var ROUTES = new InjectionToken(ngDevMode ? "ROUTES" : "");
var RouterConfigLoader = class _RouterConfigLoader {
  componentLoaders = /* @__PURE__ */ new WeakMap();
  childrenLoaders = /* @__PURE__ */ new WeakMap();
  onLoadStartListener;
  onLoadEndListener;
  compiler = inject(Compiler);
  loadComponent(route) {
    if (this.componentLoaders.get(route)) {
      return this.componentLoaders.get(route);
    } else if (route._loadedComponent) {
      return of(route._loadedComponent);
    }
    if (this.onLoadStartListener) {
      this.onLoadStartListener(route);
    }
    const loadRunner = wrapIntoObservable(route.loadComponent()).pipe(map(maybeUnwrapDefaultExport), tap((component) => {
      if (this.onLoadEndListener) {
        this.onLoadEndListener(route);
      }
      (typeof ngDevMode === "undefined" || ngDevMode) && assertStandalone(route.path ?? "", component);
      route._loadedComponent = component;
    }), finalize(() => {
      this.componentLoaders.delete(route);
    }));
    const loader = new ConnectableObservable(loadRunner, () => new Subject()).pipe(refCount());
    this.componentLoaders.set(route, loader);
    return loader;
  }
  loadChildren(parentInjector, route) {
    if (this.childrenLoaders.get(route)) {
      return this.childrenLoaders.get(route);
    } else if (route._loadedRoutes) {
      return of({
        routes: route._loadedRoutes,
        injector: route._loadedInjector
      });
    }
    if (this.onLoadStartListener) {
      this.onLoadStartListener(route);
    }
    const moduleFactoryOrRoutes$ = loadChildren(route, this.compiler, parentInjector, this.onLoadEndListener);
    const loadRunner = moduleFactoryOrRoutes$.pipe(finalize(() => {
      this.childrenLoaders.delete(route);
    }));
    const loader = new ConnectableObservable(loadRunner, () => new Subject()).pipe(refCount());
    this.childrenLoaders.set(route, loader);
    return loader;
  }
  static \u0275fac = function RouterConfigLoader_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _RouterConfigLoader)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _RouterConfigLoader,
    factory: _RouterConfigLoader.\u0275fac,
    providedIn: "root"
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(RouterConfigLoader, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();
function loadChildren(route, compiler, parentInjector, onLoadEndListener) {
  return wrapIntoObservable(route.loadChildren()).pipe(map(maybeUnwrapDefaultExport), mergeMap((t) => {
    if (t instanceof NgModuleFactory$1 || Array.isArray(t)) {
      return of(t);
    } else {
      return from(compiler.compileModuleAsync(t));
    }
  }), map((factoryOrRoutes) => {
    if (onLoadEndListener) {
      onLoadEndListener(route);
    }
    let injector;
    let rawRoutes;
    let requireStandaloneComponents = false;
    if (Array.isArray(factoryOrRoutes)) {
      rawRoutes = factoryOrRoutes;
      requireStandaloneComponents = true;
    } else {
      injector = factoryOrRoutes.create(parentInjector).injector;
      rawRoutes = injector.get(ROUTES, [], {
        optional: true,
        self: true
      }).flat();
    }
    const routes2 = rawRoutes.map(standardizeConfig);
    (typeof ngDevMode === "undefined" || ngDevMode) && validateConfig(routes2, route.path, requireStandaloneComponents);
    return {
      routes: routes2,
      injector
    };
  }));
}
function isWrappedDefaultExport(value) {
  return value && typeof value === "object" && "default" in value;
}
function maybeUnwrapDefaultExport(input2) {
  return isWrappedDefaultExport(input2) ? input2["default"] : input2;
}
var UrlHandlingStrategy = class _UrlHandlingStrategy {
  static \u0275fac = function UrlHandlingStrategy_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _UrlHandlingStrategy)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _UrlHandlingStrategy,
    factory: () => (() => inject(DefaultUrlHandlingStrategy))(),
    providedIn: "root"
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(UrlHandlingStrategy, [{
    type: Injectable,
    args: [{
      providedIn: "root",
      useFactory: () => inject(DefaultUrlHandlingStrategy)
    }]
  }], null, null);
})();
var DefaultUrlHandlingStrategy = class _DefaultUrlHandlingStrategy {
  shouldProcessUrl(url) {
    return true;
  }
  extract(url) {
    return url;
  }
  merge(newUrlPart, wholeUrl) {
    return newUrlPart;
  }
  static \u0275fac = function DefaultUrlHandlingStrategy_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _DefaultUrlHandlingStrategy)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _DefaultUrlHandlingStrategy,
    factory: _DefaultUrlHandlingStrategy.\u0275fac,
    providedIn: "root"
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DefaultUrlHandlingStrategy, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();
var CREATE_VIEW_TRANSITION = new InjectionToken(ngDevMode ? "view transition helper" : "");
var VIEW_TRANSITION_OPTIONS = new InjectionToken(ngDevMode ? "view transition options" : "");
function createViewTransition(injector, from2, to) {
  const transitionOptions = injector.get(VIEW_TRANSITION_OPTIONS);
  const document2 = injector.get(DOCUMENT);
  return injector.get(NgZone).runOutsideAngular(() => {
    if (!document2.startViewTransition || transitionOptions.skipNextTransition) {
      transitionOptions.skipNextTransition = false;
      return new Promise((resolve) => setTimeout(resolve));
    }
    let resolveViewTransitionStarted;
    const viewTransitionStarted = new Promise((resolve) => {
      resolveViewTransitionStarted = resolve;
    });
    const transition = document2.startViewTransition(() => {
      resolveViewTransitionStarted();
      return createRenderPromise(injector);
    });
    const {
      onViewTransitionCreated
    } = transitionOptions;
    if (onViewTransitionCreated) {
      runInInjectionContext(injector, () => onViewTransitionCreated({
        transition,
        from: from2,
        to
      }));
    }
    return viewTransitionStarted;
  });
}
function createRenderPromise(injector) {
  return new Promise((resolve) => {
    afterNextRender({
      read: () => setTimeout(resolve)
    }, {
      injector
    });
  });
}
var NAVIGATION_ERROR_HANDLER = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "navigation error handler" : "");
var NavigationTransitions = class _NavigationTransitions {
  currentNavigation = null;
  currentTransition = null;
  lastSuccessfulNavigation = null;
  /**
   * These events are used to communicate back to the Router about the state of the transition. The
   * Router wants to respond to these events in various ways. Because the `NavigationTransition`
   * class is not public, this event subject is not publicly exposed.
   */
  events = new Subject();
  /**
   * Used to abort the current transition with an error.
   */
  transitionAbortSubject = new Subject();
  configLoader = inject(RouterConfigLoader);
  environmentInjector = inject(EnvironmentInjector);
  destroyRef = inject(DestroyRef);
  urlSerializer = inject(UrlSerializer);
  rootContexts = inject(ChildrenOutletContexts);
  location = inject(Location);
  inputBindingEnabled = inject(INPUT_BINDER, {
    optional: true
  }) !== null;
  titleStrategy = inject(TitleStrategy);
  options = inject(ROUTER_CONFIGURATION, {
    optional: true
  }) || {};
  paramsInheritanceStrategy = this.options.paramsInheritanceStrategy || "emptyOnly";
  urlHandlingStrategy = inject(UrlHandlingStrategy);
  createViewTransition = inject(CREATE_VIEW_TRANSITION, {
    optional: true
  });
  navigationErrorHandler = inject(NAVIGATION_ERROR_HANDLER, {
    optional: true
  });
  navigationId = 0;
  get hasRequestedNavigation() {
    return this.navigationId !== 0;
  }
  transitions;
  /**
   * Hook that enables you to pause navigation after the preactivation phase.
   * Used by `RouterModule`.
   *
   * @internal
   */
  afterPreactivation = () => of(void 0);
  /** @internal */
  rootComponentType = null;
  destroyed = false;
  constructor() {
    const onLoadStart = (r) => this.events.next(new RouteConfigLoadStart(r));
    const onLoadEnd = (r) => this.events.next(new RouteConfigLoadEnd(r));
    this.configLoader.onLoadEndListener = onLoadEnd;
    this.configLoader.onLoadStartListener = onLoadStart;
    this.destroyRef.onDestroy(() => {
      this.destroyed = true;
    });
  }
  complete() {
    this.transitions?.complete();
  }
  handleNavigationRequest(request) {
    const id = ++this.navigationId;
    this.transitions?.next(__spreadProps(__spreadValues({}, request), {
      extractedUrl: this.urlHandlingStrategy.extract(request.rawUrl),
      targetSnapshot: null,
      targetRouterState: null,
      guards: {
        canActivateChecks: [],
        canDeactivateChecks: []
      },
      guardsResult: null,
      id
    }));
  }
  setupNavigations(router) {
    this.transitions = new BehaviorSubject(null);
    return this.transitions.pipe(
      filter((t) => t !== null),
      // Using switchMap so we cancel executing navigations when a new one comes in
      switchMap((overallTransitionState) => {
        let completed = false;
        let errored = false;
        return of(overallTransitionState).pipe(
          switchMap((t) => {
            if (this.navigationId > overallTransitionState.id) {
              const cancellationReason = typeof ngDevMode === "undefined" || ngDevMode ? `Navigation ID ${overallTransitionState.id} is not equal to the current navigation id ${this.navigationId}` : "";
              this.cancelNavigationTransition(overallTransitionState, cancellationReason, NavigationCancellationCode.SupersededByNewNavigation);
              return EMPTY;
            }
            this.currentTransition = overallTransitionState;
            this.currentNavigation = {
              id: t.id,
              initialUrl: t.rawUrl,
              extractedUrl: t.extractedUrl,
              targetBrowserUrl: typeof t.extras.browserUrl === "string" ? this.urlSerializer.parse(t.extras.browserUrl) : t.extras.browserUrl,
              trigger: t.source,
              extras: t.extras,
              previousNavigation: !this.lastSuccessfulNavigation ? null : __spreadProps(__spreadValues({}, this.lastSuccessfulNavigation), {
                previousNavigation: null
              })
            };
            const urlTransition = !router.navigated || this.isUpdatingInternalState() || this.isUpdatedBrowserUrl();
            const onSameUrlNavigation = t.extras.onSameUrlNavigation ?? router.onSameUrlNavigation;
            if (!urlTransition && onSameUrlNavigation !== "reload") {
              const reason = typeof ngDevMode === "undefined" || ngDevMode ? `Navigation to ${t.rawUrl} was ignored because it is the same as the current Router URL.` : "";
              this.events.next(new NavigationSkipped(t.id, this.urlSerializer.serialize(t.rawUrl), reason, NavigationSkippedCode.IgnoredSameUrlNavigation));
              t.resolve(false);
              return EMPTY;
            }
            if (this.urlHandlingStrategy.shouldProcessUrl(t.rawUrl)) {
              return of(t).pipe(
                // Fire NavigationStart event
                switchMap((t2) => {
                  this.events.next(new NavigationStart(t2.id, this.urlSerializer.serialize(t2.extractedUrl), t2.source, t2.restoredState));
                  if (t2.id !== this.navigationId) {
                    return EMPTY;
                  }
                  return Promise.resolve(t2);
                }),
                // Recognize
                recognize(this.environmentInjector, this.configLoader, this.rootComponentType, router.config, this.urlSerializer, this.paramsInheritanceStrategy),
                // Update URL if in `eager` update mode
                tap((t2) => {
                  overallTransitionState.targetSnapshot = t2.targetSnapshot;
                  overallTransitionState.urlAfterRedirects = t2.urlAfterRedirects;
                  this.currentNavigation = __spreadProps(__spreadValues({}, this.currentNavigation), {
                    finalUrl: t2.urlAfterRedirects
                  });
                  const routesRecognized = new RoutesRecognized(t2.id, this.urlSerializer.serialize(t2.extractedUrl), this.urlSerializer.serialize(t2.urlAfterRedirects), t2.targetSnapshot);
                  this.events.next(routesRecognized);
                })
              );
            } else if (urlTransition && this.urlHandlingStrategy.shouldProcessUrl(t.currentRawUrl)) {
              const {
                id,
                extractedUrl,
                source,
                restoredState,
                extras
              } = t;
              const navStart = new NavigationStart(id, this.urlSerializer.serialize(extractedUrl), source, restoredState);
              this.events.next(navStart);
              const targetSnapshot = createEmptyState(this.rootComponentType).snapshot;
              this.currentTransition = overallTransitionState = __spreadProps(__spreadValues({}, t), {
                targetSnapshot,
                urlAfterRedirects: extractedUrl,
                extras: __spreadProps(__spreadValues({}, extras), {
                  skipLocationChange: false,
                  replaceUrl: false
                })
              });
              this.currentNavigation.finalUrl = extractedUrl;
              return of(overallTransitionState);
            } else {
              const reason = typeof ngDevMode === "undefined" || ngDevMode ? `Navigation was ignored because the UrlHandlingStrategy indicated neither the current URL ${t.currentRawUrl} nor target URL ${t.rawUrl} should be processed.` : "";
              this.events.next(new NavigationSkipped(t.id, this.urlSerializer.serialize(t.extractedUrl), reason, NavigationSkippedCode.IgnoredByUrlHandlingStrategy));
              t.resolve(false);
              return EMPTY;
            }
          }),
          // --- GUARDS ---
          tap((t) => {
            const guardsStart = new GuardsCheckStart(t.id, this.urlSerializer.serialize(t.extractedUrl), this.urlSerializer.serialize(t.urlAfterRedirects), t.targetSnapshot);
            this.events.next(guardsStart);
          }),
          map((t) => {
            this.currentTransition = overallTransitionState = __spreadProps(__spreadValues({}, t), {
              guards: getAllRouteGuards(t.targetSnapshot, t.currentSnapshot, this.rootContexts)
            });
            return overallTransitionState;
          }),
          checkGuards(this.environmentInjector, (evt) => this.events.next(evt)),
          tap((t) => {
            overallTransitionState.guardsResult = t.guardsResult;
            if (t.guardsResult && typeof t.guardsResult !== "boolean") {
              throw redirectingNavigationError(this.urlSerializer, t.guardsResult);
            }
            const guardsEnd = new GuardsCheckEnd(t.id, this.urlSerializer.serialize(t.extractedUrl), this.urlSerializer.serialize(t.urlAfterRedirects), t.targetSnapshot, !!t.guardsResult);
            this.events.next(guardsEnd);
          }),
          filter((t) => {
            if (!t.guardsResult) {
              this.cancelNavigationTransition(t, "", NavigationCancellationCode.GuardRejected);
              return false;
            }
            return true;
          }),
          // --- RESOLVE ---
          switchTap((t) => {
            if (t.guards.canActivateChecks.length === 0) {
              return void 0;
            }
            return of(t).pipe(tap((t2) => {
              const resolveStart = new ResolveStart(t2.id, this.urlSerializer.serialize(t2.extractedUrl), this.urlSerializer.serialize(t2.urlAfterRedirects), t2.targetSnapshot);
              this.events.next(resolveStart);
            }), switchMap((t2) => {
              let dataResolved = false;
              return of(t2).pipe(resolveData(this.paramsInheritanceStrategy, this.environmentInjector), tap({
                next: () => dataResolved = true,
                complete: () => {
                  if (!dataResolved) {
                    this.cancelNavigationTransition(t2, typeof ngDevMode === "undefined" || ngDevMode ? `At least one route resolver didn't emit any value.` : "", NavigationCancellationCode.NoDataFromResolver);
                  }
                }
              }));
            }), tap((t2) => {
              const resolveEnd = new ResolveEnd(t2.id, this.urlSerializer.serialize(t2.extractedUrl), this.urlSerializer.serialize(t2.urlAfterRedirects), t2.targetSnapshot);
              this.events.next(resolveEnd);
            }));
          }),
          // --- LOAD COMPONENTS ---
          switchTap((t) => {
            const loadComponents = (route) => {
              const loaders = [];
              if (route.routeConfig?.loadComponent && !route.routeConfig._loadedComponent) {
                loaders.push(this.configLoader.loadComponent(route.routeConfig).pipe(tap((loadedComponent) => {
                  route.component = loadedComponent;
                }), map(() => void 0)));
              }
              for (const child of route.children) {
                loaders.push(...loadComponents(child));
              }
              return loaders;
            };
            return combineLatest(loadComponents(t.targetSnapshot.root)).pipe(defaultIfEmpty(null), take(1));
          }),
          switchTap(() => this.afterPreactivation()),
          switchMap(() => {
            const {
              currentSnapshot,
              targetSnapshot
            } = overallTransitionState;
            const viewTransitionStarted = this.createViewTransition?.(this.environmentInjector, currentSnapshot.root, targetSnapshot.root);
            return viewTransitionStarted ? from(viewTransitionStarted).pipe(map(() => overallTransitionState)) : of(overallTransitionState);
          }),
          map((t) => {
            const targetRouterState = createRouterState(router.routeReuseStrategy, t.targetSnapshot, t.currentRouterState);
            this.currentTransition = overallTransitionState = __spreadProps(__spreadValues({}, t), {
              targetRouterState
            });
            this.currentNavigation.targetRouterState = targetRouterState;
            return overallTransitionState;
          }),
          tap(() => {
            this.events.next(new BeforeActivateRoutes());
          }),
          activateRoutes(this.rootContexts, router.routeReuseStrategy, (evt) => this.events.next(evt), this.inputBindingEnabled),
          // Ensure that if some observable used to drive the transition doesn't
          // complete, the navigation still finalizes This should never happen, but
          // this is done as a safety measure to avoid surfacing this error (#49567).
          take(1),
          tap({
            next: (t) => {
              completed = true;
              this.lastSuccessfulNavigation = this.currentNavigation;
              this.events.next(new NavigationEnd(t.id, this.urlSerializer.serialize(t.extractedUrl), this.urlSerializer.serialize(t.urlAfterRedirects)));
              this.titleStrategy?.updateTitle(t.targetRouterState.snapshot);
              t.resolve(true);
            },
            complete: () => {
              completed = true;
            }
          }),
          // There used to be a lot more logic happening directly within the
          // transition Observable. Some of this logic has been refactored out to
          // other places but there may still be errors that happen there. This gives
          // us a way to cancel the transition from the outside. This may also be
          // required in the future to support something like the abort signal of the
          // Navigation API where the navigation gets aborted from outside the
          // transition.
          takeUntil(this.transitionAbortSubject.pipe(tap((err) => {
            throw err;
          }))),
          finalize(() => {
            if (!completed && !errored) {
              const cancelationReason = typeof ngDevMode === "undefined" || ngDevMode ? `Navigation ID ${overallTransitionState.id} is not equal to the current navigation id ${this.navigationId}` : "";
              this.cancelNavigationTransition(overallTransitionState, cancelationReason, NavigationCancellationCode.SupersededByNewNavigation);
            }
            if (this.currentTransition?.id === overallTransitionState.id) {
              this.currentNavigation = null;
              this.currentTransition = null;
            }
          }),
          catchError((e) => {
            if (this.destroyed) {
              overallTransitionState.resolve(false);
              return EMPTY;
            }
            errored = true;
            if (isNavigationCancelingError(e)) {
              this.events.next(new NavigationCancel(overallTransitionState.id, this.urlSerializer.serialize(overallTransitionState.extractedUrl), e.message, e.cancellationCode));
              if (!isRedirectingNavigationCancelingError(e)) {
                overallTransitionState.resolve(false);
              } else {
                this.events.next(new RedirectRequest(e.url, e.navigationBehaviorOptions));
              }
            } else {
              const navigationError = new NavigationError(overallTransitionState.id, this.urlSerializer.serialize(overallTransitionState.extractedUrl), e, overallTransitionState.targetSnapshot ?? void 0);
              try {
                const navigationErrorHandlerResult = runInInjectionContext(this.environmentInjector, () => this.navigationErrorHandler?.(navigationError));
                if (navigationErrorHandlerResult instanceof RedirectCommand) {
                  const {
                    message,
                    cancellationCode
                  } = redirectingNavigationError(this.urlSerializer, navigationErrorHandlerResult);
                  this.events.next(new NavigationCancel(overallTransitionState.id, this.urlSerializer.serialize(overallTransitionState.extractedUrl), message, cancellationCode));
                  this.events.next(new RedirectRequest(navigationErrorHandlerResult.redirectTo, navigationErrorHandlerResult.navigationBehaviorOptions));
                } else {
                  this.events.next(navigationError);
                  throw e;
                }
              } catch (ee) {
                if (this.options.resolveNavigationPromiseOnError) {
                  overallTransitionState.resolve(false);
                } else {
                  overallTransitionState.reject(ee);
                }
              }
            }
            return EMPTY;
          })
        );
      })
    );
  }
  cancelNavigationTransition(t, reason, code) {
    const navCancel = new NavigationCancel(t.id, this.urlSerializer.serialize(t.extractedUrl), reason, code);
    this.events.next(navCancel);
    t.resolve(false);
  }
  /**
   * @returns Whether we're navigating to somewhere that is not what the Router is
   * currently set to.
   */
  isUpdatingInternalState() {
    return this.currentTransition?.extractedUrl.toString() !== this.currentTransition?.currentUrlTree.toString();
  }
  /**
   * @returns Whether we're updating the browser URL to something new (navigation is going
   * to somewhere not displayed in the URL bar and we will update the URL
   * bar if navigation succeeds).
   */
  isUpdatedBrowserUrl() {
    const currentBrowserUrl = this.urlHandlingStrategy.extract(this.urlSerializer.parse(this.location.path(true)));
    const targetBrowserUrl = this.currentNavigation?.targetBrowserUrl ?? this.currentNavigation?.extractedUrl;
    return currentBrowserUrl.toString() !== targetBrowserUrl?.toString() && !this.currentNavigation?.extras.skipLocationChange;
  }
  static \u0275fac = function NavigationTransitions_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _NavigationTransitions)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _NavigationTransitions,
    factory: _NavigationTransitions.\u0275fac,
    providedIn: "root"
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NavigationTransitions, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [], null);
})();
function isBrowserTriggeredNavigation(source) {
  return source !== IMPERATIVE_NAVIGATION;
}
var RouteReuseStrategy = class _RouteReuseStrategy {
  static \u0275fac = function RouteReuseStrategy_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _RouteReuseStrategy)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _RouteReuseStrategy,
    factory: () => (() => inject(DefaultRouteReuseStrategy))(),
    providedIn: "root"
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(RouteReuseStrategy, [{
    type: Injectable,
    args: [{
      providedIn: "root",
      useFactory: () => inject(DefaultRouteReuseStrategy)
    }]
  }], null, null);
})();
var BaseRouteReuseStrategy = class {
  /**
   * Whether the given route should detach for later reuse.
   * Always returns false for `BaseRouteReuseStrategy`.
   * */
  shouldDetach(route) {
    return false;
  }
  /**
   * A no-op; the route is never stored since this strategy never detaches routes for later re-use.
   */
  store(route, detachedTree) {
  }
  /** Returns `false`, meaning the route (and its subtree) is never reattached */
  shouldAttach(route) {
    return false;
  }
  /** Returns `null` because this strategy does not store routes for later re-use. */
  retrieve(route) {
    return null;
  }
  /**
   * Determines if a route should be reused.
   * This strategy returns `true` when the future route config and current route config are
   * identical.
   */
  shouldReuseRoute(future, curr) {
    return future.routeConfig === curr.routeConfig;
  }
};
var DefaultRouteReuseStrategy = class _DefaultRouteReuseStrategy extends BaseRouteReuseStrategy {
  static \u0275fac = /* @__PURE__ */ (() => {
    let \u0275DefaultRouteReuseStrategy_BaseFactory;
    return function DefaultRouteReuseStrategy_Factory(__ngFactoryType__) {
      return (\u0275DefaultRouteReuseStrategy_BaseFactory || (\u0275DefaultRouteReuseStrategy_BaseFactory = \u0275\u0275getInheritedFactory(_DefaultRouteReuseStrategy)))(__ngFactoryType__ || _DefaultRouteReuseStrategy);
    };
  })();
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _DefaultRouteReuseStrategy,
    factory: _DefaultRouteReuseStrategy.\u0275fac,
    providedIn: "root"
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DefaultRouteReuseStrategy, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();
var StateManager = class _StateManager {
  urlSerializer = inject(UrlSerializer);
  options = inject(ROUTER_CONFIGURATION, {
    optional: true
  }) || {};
  canceledNavigationResolution = this.options.canceledNavigationResolution || "replace";
  location = inject(Location);
  urlHandlingStrategy = inject(UrlHandlingStrategy);
  urlUpdateStrategy = this.options.urlUpdateStrategy || "deferred";
  currentUrlTree = new UrlTree();
  /**
   * Returns the currently activated `UrlTree`.
   *
   * This `UrlTree` shows only URLs that the `Router` is configured to handle (through
   * `UrlHandlingStrategy`).
   *
   * The value is set after finding the route config tree to activate but before activating the
   * route.
   */
  getCurrentUrlTree() {
    return this.currentUrlTree;
  }
  rawUrlTree = this.currentUrlTree;
  /**
   * Returns a `UrlTree` that is represents what the browser is actually showing.
   *
   * In the life of a navigation transition:
   * 1. When a navigation begins, the raw `UrlTree` is updated to the full URL that's being
   * navigated to.
   * 2. During a navigation, redirects are applied, which might only apply to _part_ of the URL (due
   * to `UrlHandlingStrategy`).
   * 3. Just before activation, the raw `UrlTree` is updated to include the redirects on top of the
   * original raw URL.
   *
   * Note that this is _only_ here to support `UrlHandlingStrategy.extract` and
   * `UrlHandlingStrategy.shouldProcessUrl`. Without those APIs, the current `UrlTree` would not
   * deviated from the raw `UrlTree`.
   *
   * For `extract`, a raw `UrlTree` is needed because `extract` may only return part
   * of the navigation URL. Thus, the current `UrlTree` may only represent _part_ of the browser
   * URL. When a navigation gets cancelled and the router needs to reset the URL or a new navigation
   * occurs, it needs to know the _whole_ browser URL, not just the part handled by
   * `UrlHandlingStrategy`.
   * For `shouldProcessUrl`, when the return is `false`, the router ignores the navigation but
   * still updates the raw `UrlTree` with the assumption that the navigation was caused by the
   * location change listener due to a URL update by the AngularJS router. In this case, the router
   * still need to know what the browser's URL is for future navigations.
   */
  getRawUrlTree() {
    return this.rawUrlTree;
  }
  createBrowserPath({
    finalUrl,
    initialUrl,
    targetBrowserUrl
  }) {
    const rawUrl = finalUrl !== void 0 ? this.urlHandlingStrategy.merge(finalUrl, initialUrl) : initialUrl;
    const url = targetBrowserUrl ?? rawUrl;
    const path2 = url instanceof UrlTree ? this.urlSerializer.serialize(url) : url;
    return path2;
  }
  commitTransition({
    targetRouterState,
    finalUrl,
    initialUrl
  }) {
    if (finalUrl && targetRouterState) {
      this.currentUrlTree = finalUrl;
      this.rawUrlTree = this.urlHandlingStrategy.merge(finalUrl, initialUrl);
      this.routerState = targetRouterState;
    } else {
      this.rawUrlTree = initialUrl;
    }
  }
  routerState = createEmptyState(null);
  /** Returns the current RouterState. */
  getRouterState() {
    return this.routerState;
  }
  stateMemento = this.createStateMemento();
  updateStateMemento() {
    this.stateMemento = this.createStateMemento();
  }
  createStateMemento() {
    return {
      rawUrlTree: this.rawUrlTree,
      currentUrlTree: this.currentUrlTree,
      routerState: this.routerState
    };
  }
  resetInternalState({
    finalUrl
  }) {
    this.routerState = this.stateMemento.routerState;
    this.currentUrlTree = this.stateMemento.currentUrlTree;
    this.rawUrlTree = this.urlHandlingStrategy.merge(this.currentUrlTree, finalUrl ?? this.rawUrlTree);
  }
  static \u0275fac = function StateManager_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _StateManager)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _StateManager,
    factory: () => (() => inject(HistoryStateManager))(),
    providedIn: "root"
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(StateManager, [{
    type: Injectable,
    args: [{
      providedIn: "root",
      useFactory: () => inject(HistoryStateManager)
    }]
  }], null, null);
})();
var HistoryStateManager = class _HistoryStateManager extends StateManager {
  /**
   * The id of the currently active page in the router.
   * Updated to the transition's target id on a successful navigation.
   *
   * This is used to track what page the router last activated. When an attempted navigation fails,
   * the router can then use this to compute how to restore the state back to the previously active
   * page.
   */
  currentPageId = 0;
  lastSuccessfulId = -1;
  restoredState() {
    return this.location.getState();
  }
  /**
   * The ɵrouterPageId of whatever page is currently active in the browser history. This is
   * important for computing the target page id for new navigations because we need to ensure each
   * page id in the browser history is 1 more than the previous entry.
   */
  get browserPageId() {
    if (this.canceledNavigationResolution !== "computed") {
      return this.currentPageId;
    }
    return this.restoredState()?.\u0275routerPageId ?? this.currentPageId;
  }
  registerNonRouterCurrentEntryChangeListener(listener2) {
    return this.location.subscribe((event) => {
      if (event["type"] === "popstate") {
        setTimeout(() => {
          listener2(event["url"], event.state, "popstate");
        });
      }
    });
  }
  handleRouterEvent(e, currentTransition) {
    if (e instanceof NavigationStart) {
      this.updateStateMemento();
    } else if (e instanceof NavigationSkipped) {
      this.commitTransition(currentTransition);
    } else if (e instanceof RoutesRecognized) {
      if (this.urlUpdateStrategy === "eager") {
        if (!currentTransition.extras.skipLocationChange) {
          this.setBrowserUrl(this.createBrowserPath(currentTransition), currentTransition);
        }
      }
    } else if (e instanceof BeforeActivateRoutes) {
      this.commitTransition(currentTransition);
      if (this.urlUpdateStrategy === "deferred" && !currentTransition.extras.skipLocationChange) {
        this.setBrowserUrl(this.createBrowserPath(currentTransition), currentTransition);
      }
    } else if (e instanceof NavigationCancel && (e.code === NavigationCancellationCode.GuardRejected || e.code === NavigationCancellationCode.NoDataFromResolver)) {
      this.restoreHistory(currentTransition);
    } else if (e instanceof NavigationError) {
      this.restoreHistory(currentTransition, true);
    } else if (e instanceof NavigationEnd) {
      this.lastSuccessfulId = e.id;
      this.currentPageId = this.browserPageId;
    }
  }
  setBrowserUrl(path2, {
    extras,
    id
  }) {
    const {
      replaceUrl,
      state
    } = extras;
    if (this.location.isCurrentPathEqualTo(path2) || !!replaceUrl) {
      const currentBrowserPageId = this.browserPageId;
      const newState = __spreadValues(__spreadValues({}, state), this.generateNgRouterState(id, currentBrowserPageId));
      this.location.replaceState(path2, "", newState);
    } else {
      const newState = __spreadValues(__spreadValues({}, state), this.generateNgRouterState(id, this.browserPageId + 1));
      this.location.go(path2, "", newState);
    }
  }
  /**
   * Performs the necessary rollback action to restore the browser URL to the
   * state before the transition.
   */
  restoreHistory(navigation, restoringFromCaughtError = false) {
    if (this.canceledNavigationResolution === "computed") {
      const currentBrowserPageId = this.browserPageId;
      const targetPagePosition = this.currentPageId - currentBrowserPageId;
      if (targetPagePosition !== 0) {
        this.location.historyGo(targetPagePosition);
      } else if (this.getCurrentUrlTree() === navigation.finalUrl && targetPagePosition === 0) {
        this.resetInternalState(navigation);
        this.resetUrlToCurrentUrlTree();
      } else ;
    } else if (this.canceledNavigationResolution === "replace") {
      if (restoringFromCaughtError) {
        this.resetInternalState(navigation);
      }
      this.resetUrlToCurrentUrlTree();
    }
  }
  resetUrlToCurrentUrlTree() {
    this.location.replaceState(this.urlSerializer.serialize(this.getRawUrlTree()), "", this.generateNgRouterState(this.lastSuccessfulId, this.currentPageId));
  }
  generateNgRouterState(navigationId, routerPageId) {
    if (this.canceledNavigationResolution === "computed") {
      return {
        navigationId,
        \u0275routerPageId: routerPageId
      };
    }
    return {
      navigationId
    };
  }
  static \u0275fac = /* @__PURE__ */ (() => {
    let \u0275HistoryStateManager_BaseFactory;
    return function HistoryStateManager_Factory(__ngFactoryType__) {
      return (\u0275HistoryStateManager_BaseFactory || (\u0275HistoryStateManager_BaseFactory = \u0275\u0275getInheritedFactory(_HistoryStateManager)))(__ngFactoryType__ || _HistoryStateManager);
    };
  })();
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _HistoryStateManager,
    factory: _HistoryStateManager.\u0275fac,
    providedIn: "root"
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(HistoryStateManager, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();
function afterNextNavigation(router, action) {
  router.events.pipe(filter((e) => e instanceof NavigationEnd || e instanceof NavigationCancel || e instanceof NavigationError || e instanceof NavigationSkipped), map((e) => {
    if (e instanceof NavigationEnd || e instanceof NavigationSkipped) {
      return 0;
    }
    const redirecting = e instanceof NavigationCancel ? e.code === NavigationCancellationCode.Redirect || e.code === NavigationCancellationCode.SupersededByNewNavigation : false;
    return redirecting ? 2 : 1;
  }), filter(
    (result) => result !== 2
    /* NavigationResult.REDIRECTING */
  ), take(1)).subscribe(() => {
    action();
  });
}
var exactMatchOptions = {
  paths: "exact",
  fragment: "ignored",
  matrixParams: "ignored",
  queryParams: "exact"
};
var subsetMatchOptions = {
  paths: "subset",
  fragment: "ignored",
  matrixParams: "ignored",
  queryParams: "subset"
};
var Router = class _Router {
  get currentUrlTree() {
    return this.stateManager.getCurrentUrlTree();
  }
  get rawUrlTree() {
    return this.stateManager.getRawUrlTree();
  }
  disposed = false;
  nonRouterCurrentEntryChangeSubscription;
  console = inject(Console);
  stateManager = inject(StateManager);
  options = inject(ROUTER_CONFIGURATION, {
    optional: true
  }) || {};
  pendingTasks = inject(PendingTasksInternal);
  urlUpdateStrategy = this.options.urlUpdateStrategy || "deferred";
  navigationTransitions = inject(NavigationTransitions);
  urlSerializer = inject(UrlSerializer);
  location = inject(Location);
  urlHandlingStrategy = inject(UrlHandlingStrategy);
  /**
   * The private `Subject` type for the public events exposed in the getter. This is used internally
   * to push events to. The separate field allows us to expose separate types in the public API
   * (i.e., an Observable rather than the Subject).
   */
  _events = new Subject();
  /**
   * An event stream for routing events.
   */
  get events() {
    return this._events;
  }
  /**
   * The current state of routing in this NgModule.
   */
  get routerState() {
    return this.stateManager.getRouterState();
  }
  /**
   * True if at least one navigation event has occurred,
   * false otherwise.
   */
  navigated = false;
  /**
   * A strategy for re-using routes.
   *
   * @deprecated Configure using `providers` instead:
   *   `{provide: RouteReuseStrategy, useClass: MyStrategy}`.
   */
  routeReuseStrategy = inject(RouteReuseStrategy);
  /**
   * How to handle a navigation request to the current URL.
   *
   *
   * @deprecated Configure this through `provideRouter` or `RouterModule.forRoot` instead.
   * @see {@link withRouterConfig}
   * @see {@link provideRouter}
   * @see {@link RouterModule}
   */
  onSameUrlNavigation = this.options.onSameUrlNavigation || "ignore";
  config = inject(ROUTES, {
    optional: true
  })?.flat() ?? [];
  /**
   * Indicates whether the application has opted in to binding Router data to component inputs.
   *
   * This option is enabled by the `withComponentInputBinding` feature of `provideRouter` or
   * `bindToComponentInputs` in the `ExtraOptions` of `RouterModule.forRoot`.
   */
  componentInputBindingEnabled = !!inject(INPUT_BINDER, {
    optional: true
  });
  constructor() {
    this.resetConfig(this.config);
    this.navigationTransitions.setupNavigations(this).subscribe({
      error: (e) => {
        this.console.warn(ngDevMode ? `Unhandled Navigation Error: ${e}` : e);
      }
    });
    this.subscribeToNavigationEvents();
  }
  eventsSubscription = new Subscription();
  subscribeToNavigationEvents() {
    const subscription = this.navigationTransitions.events.subscribe((e) => {
      try {
        const currentTransition = this.navigationTransitions.currentTransition;
        const currentNavigation = this.navigationTransitions.currentNavigation;
        if (currentTransition !== null && currentNavigation !== null) {
          this.stateManager.handleRouterEvent(e, currentNavigation);
          if (e instanceof NavigationCancel && e.code !== NavigationCancellationCode.Redirect && e.code !== NavigationCancellationCode.SupersededByNewNavigation) {
            this.navigated = true;
          } else if (e instanceof NavigationEnd) {
            this.navigated = true;
          } else if (e instanceof RedirectRequest) {
            const opts = e.navigationBehaviorOptions;
            const mergedTree = this.urlHandlingStrategy.merge(e.url, currentTransition.currentRawUrl);
            const extras = __spreadValues({
              browserUrl: currentTransition.extras.browserUrl,
              info: currentTransition.extras.info,
              skipLocationChange: currentTransition.extras.skipLocationChange,
              // The URL is already updated at this point if we have 'eager' URL
              // updates or if the navigation was triggered by the browser (back
              // button, URL bar, etc). We want to replace that item in history
              // if the navigation is rejected.
              replaceUrl: currentTransition.extras.replaceUrl || this.urlUpdateStrategy === "eager" || isBrowserTriggeredNavigation(currentTransition.source)
            }, opts);
            this.scheduleNavigation(mergedTree, IMPERATIVE_NAVIGATION, null, extras, {
              resolve: currentTransition.resolve,
              reject: currentTransition.reject,
              promise: currentTransition.promise
            });
          }
        }
        if (isPublicRouterEvent(e)) {
          this._events.next(e);
        }
      } catch (e2) {
        this.navigationTransitions.transitionAbortSubject.next(e2);
      }
    });
    this.eventsSubscription.add(subscription);
  }
  /** @internal */
  resetRootComponentType(rootComponentType) {
    this.routerState.root.component = rootComponentType;
    this.navigationTransitions.rootComponentType = rootComponentType;
  }
  /**
   * Sets up the location change listener and performs the initial navigation.
   */
  initialNavigation() {
    this.setUpLocationChangeListener();
    if (!this.navigationTransitions.hasRequestedNavigation) {
      this.navigateToSyncWithBrowser(this.location.path(true), IMPERATIVE_NAVIGATION, this.stateManager.restoredState());
    }
  }
  /**
   * Sets up the location change listener. This listener detects navigations triggered from outside
   * the Router (the browser back/forward buttons, for example) and schedules a corresponding Router
   * navigation so that the correct events, guards, etc. are triggered.
   */
  setUpLocationChangeListener() {
    this.nonRouterCurrentEntryChangeSubscription ??= this.stateManager.registerNonRouterCurrentEntryChangeListener((url, state, source) => {
      this.navigateToSyncWithBrowser(url, source, state);
    });
  }
  /**
   * Schedules a router navigation to synchronize Router state with the browser state.
   *
   * This is done as a response to a popstate event and the initial navigation. These
   * two scenarios represent times when the browser URL/state has been updated and
   * the Router needs to respond to ensure its internal state matches.
   */
  navigateToSyncWithBrowser(url, source, state) {
    const extras = {
      replaceUrl: true
    };
    const restoredState = state?.navigationId ? state : null;
    if (state) {
      const stateCopy = __spreadValues({}, state);
      delete stateCopy.navigationId;
      delete stateCopy.\u0275routerPageId;
      if (Object.keys(stateCopy).length !== 0) {
        extras.state = stateCopy;
      }
    }
    const urlTree = this.parseUrl(url);
    this.scheduleNavigation(urlTree, source, restoredState, extras);
  }
  /** The current URL. */
  get url() {
    return this.serializeUrl(this.currentUrlTree);
  }
  /**
   * Returns the current `Navigation` object when the router is navigating,
   * and `null` when idle.
   */
  getCurrentNavigation() {
    return this.navigationTransitions.currentNavigation;
  }
  /**
   * The `Navigation` object of the most recent navigation to succeed and `null` if there
   *     has not been a successful navigation yet.
   */
  get lastSuccessfulNavigation() {
    return this.navigationTransitions.lastSuccessfulNavigation;
  }
  /**
   * Resets the route configuration used for navigation and generating links.
   *
   * @param config The route array for the new configuration.
   *
   * @usageNotes
   *
   * ```ts
   * router.resetConfig([
   *  { path: 'team/:id', component: TeamCmp, children: [
   *    { path: 'simple', component: SimpleCmp },
   *    { path: 'user/:name', component: UserCmp }
   *  ]}
   * ]);
   * ```
   */
  resetConfig(config) {
    (typeof ngDevMode === "undefined" || ngDevMode) && validateConfig(config);
    this.config = config.map(standardizeConfig);
    this.navigated = false;
  }
  /** @docs-private */
  ngOnDestroy() {
    this.dispose();
  }
  /** Disposes of the router. */
  dispose() {
    this._events.unsubscribe();
    this.navigationTransitions.complete();
    if (this.nonRouterCurrentEntryChangeSubscription) {
      this.nonRouterCurrentEntryChangeSubscription.unsubscribe();
      this.nonRouterCurrentEntryChangeSubscription = void 0;
    }
    this.disposed = true;
    this.eventsSubscription.unsubscribe();
  }
  /**
   * Appends URL segments to the current URL tree to create a new URL tree.
   *
   * @param commands An array of URL fragments with which to construct the new URL tree.
   * If the path is static, can be the literal URL string. For a dynamic path, pass an array of path
   * segments, followed by the parameters for each segment.
   * The fragments are applied to the current URL tree or the one provided  in the `relativeTo`
   * property of the options object, if supplied.
   * @param navigationExtras Options that control the navigation strategy.
   * @returns The new URL tree.
   *
   * @usageNotes
   *
   * ```
   * // create /team/33/user/11
   * router.createUrlTree(['/team', 33, 'user', 11]);
   *
   * // create /team/33;expand=true/user/11
   * router.createUrlTree(['/team', 33, {expand: true}, 'user', 11]);
   *
   * // you can collapse static segments like this (this works only with the first passed-in value):
   * router.createUrlTree(['/team/33/user', userId]);
   *
   * // If the first segment can contain slashes, and you do not want the router to split it,
   * // you can do the following:
   * router.createUrlTree([{segmentPath: '/one/two'}]);
   *
   * // create /team/33/(user/11//right:chat)
   * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: 'chat'}}]);
   *
   * // remove the right secondary node
   * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: null}}]);
   *
   * // assuming the current url is `/team/33/user/11` and the route points to `user/11`
   *
   * // navigate to /team/33/user/11/details
   * router.createUrlTree(['details'], {relativeTo: route});
   *
   * // navigate to /team/33/user/22
   * router.createUrlTree(['../22'], {relativeTo: route});
   *
   * // navigate to /team/44/user/22
   * router.createUrlTree(['../../team/44/user/22'], {relativeTo: route});
   *
   * Note that a value of `null` or `undefined` for `relativeTo` indicates that the
   * tree should be created relative to the root.
   * ```
   */
  createUrlTree(commands, navigationExtras = {}) {
    const {
      relativeTo,
      queryParams,
      fragment,
      queryParamsHandling,
      preserveFragment
    } = navigationExtras;
    const f = preserveFragment ? this.currentUrlTree.fragment : fragment;
    let q = null;
    switch (queryParamsHandling ?? this.options.defaultQueryParamsHandling) {
      case "merge":
        q = __spreadValues(__spreadValues({}, this.currentUrlTree.queryParams), queryParams);
        break;
      case "preserve":
        q = this.currentUrlTree.queryParams;
        break;
      default:
        q = queryParams || null;
    }
    if (q !== null) {
      q = this.removeEmptyProps(q);
    }
    let relativeToUrlSegmentGroup;
    try {
      const relativeToSnapshot = relativeTo ? relativeTo.snapshot : this.routerState.snapshot.root;
      relativeToUrlSegmentGroup = createSegmentGroupFromRoute(relativeToSnapshot);
    } catch (e) {
      if (typeof commands[0] !== "string" || commands[0][0] !== "/") {
        commands = [];
      }
      relativeToUrlSegmentGroup = this.currentUrlTree.root;
    }
    return createUrlTreeFromSegmentGroup(relativeToUrlSegmentGroup, commands, q, f ?? null);
  }
  /**
   * Navigates to a view using an absolute route path.
   *
   * @param url An absolute path for a defined route. The function does not apply any delta to the
   *     current URL.
   * @param extras An object containing properties that modify the navigation strategy.
   *
   * @returns A Promise that resolves to 'true' when navigation succeeds,
   * to 'false' when navigation fails, or is rejected on error.
   *
   * @usageNotes
   *
   * The following calls request navigation to an absolute path.
   *
   * ```ts
   * router.navigateByUrl("/team/33/user/11");
   *
   * // Navigate without updating the URL
   * router.navigateByUrl("/team/33/user/11", { skipLocationChange: true });
   * ```
   *
   * @see [Routing and Navigation guide](guide/routing/common-router-tasks)
   *
   */
  navigateByUrl(url, extras = {
    skipLocationChange: false
  }) {
    const urlTree = isUrlTree(url) ? url : this.parseUrl(url);
    const mergedTree = this.urlHandlingStrategy.merge(urlTree, this.rawUrlTree);
    return this.scheduleNavigation(mergedTree, IMPERATIVE_NAVIGATION, null, extras);
  }
  /**
   * Navigate based on the provided array of commands and a starting point.
   * If no starting route is provided, the navigation is absolute.
   *
   * @param commands An array of URL fragments with which to construct the target URL.
   * If the path is static, can be the literal URL string. For a dynamic path, pass an array of path
   * segments, followed by the parameters for each segment.
   * The fragments are applied to the current URL or the one provided  in the `relativeTo` property
   * of the options object, if supplied.
   * @param extras An options object that determines how the URL should be constructed or
   *     interpreted.
   *
   * @returns A Promise that resolves to `true` when navigation succeeds, or `false` when navigation
   *     fails. The Promise is rejected when an error occurs if `resolveNavigationPromiseOnError` is
   * not `true`.
   *
   * @usageNotes
   *
   * The following calls request navigation to a dynamic route path relative to the current URL.
   *
   * ```ts
   * router.navigate(['team', 33, 'user', 11], {relativeTo: route});
   *
   * // Navigate without updating the URL, overriding the default behavior
   * router.navigate(['team', 33, 'user', 11], {relativeTo: route, skipLocationChange: true});
   * ```
   *
   * @see [Routing and Navigation guide](guide/routing/common-router-tasks)
   *
   */
  navigate(commands, extras = {
    skipLocationChange: false
  }) {
    validateCommands(commands);
    return this.navigateByUrl(this.createUrlTree(commands, extras), extras);
  }
  /** Serializes a `UrlTree` into a string */
  serializeUrl(url) {
    return this.urlSerializer.serialize(url);
  }
  /** Parses a string into a `UrlTree` */
  parseUrl(url) {
    try {
      return this.urlSerializer.parse(url);
    } catch {
      return this.urlSerializer.parse("/");
    }
  }
  isActive(url, matchOptions) {
    let options;
    if (matchOptions === true) {
      options = __spreadValues({}, exactMatchOptions);
    } else if (matchOptions === false) {
      options = __spreadValues({}, subsetMatchOptions);
    } else {
      options = matchOptions;
    }
    if (isUrlTree(url)) {
      return containsTree(this.currentUrlTree, url, options);
    }
    const urlTree = this.parseUrl(url);
    return containsTree(this.currentUrlTree, urlTree, options);
  }
  removeEmptyProps(params) {
    return Object.entries(params).reduce((result, [key, value]) => {
      if (value !== null && value !== void 0) {
        result[key] = value;
      }
      return result;
    }, {});
  }
  scheduleNavigation(rawUrl, source, restoredState, extras, priorPromise) {
    if (this.disposed) {
      return Promise.resolve(false);
    }
    let resolve;
    let reject;
    let promise;
    if (priorPromise) {
      resolve = priorPromise.resolve;
      reject = priorPromise.reject;
      promise = priorPromise.promise;
    } else {
      promise = new Promise((res, rej) => {
        resolve = res;
        reject = rej;
      });
    }
    const taskId = this.pendingTasks.add();
    afterNextNavigation(this, () => {
      queueMicrotask(() => this.pendingTasks.remove(taskId));
    });
    this.navigationTransitions.handleNavigationRequest({
      source,
      restoredState,
      currentUrlTree: this.currentUrlTree,
      currentRawUrl: this.currentUrlTree,
      rawUrl,
      extras,
      resolve,
      reject,
      promise,
      currentSnapshot: this.routerState.snapshot,
      currentRouterState: this.routerState
    });
    return promise.catch((e) => {
      return Promise.reject(e);
    });
  }
  static \u0275fac = function Router_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _Router)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _Router,
    factory: _Router.\u0275fac,
    providedIn: "root"
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(Router, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [], null);
})();
function validateCommands(commands) {
  for (let i = 0; i < commands.length; i++) {
    const cmd = commands[i];
    if (cmd == null) {
      throw new RuntimeError(4008, (typeof ngDevMode === "undefined" || ngDevMode) && `The requested path contains ${cmd} segment at index ${i}`);
    }
  }
}
function isPublicRouterEvent(e) {
  return !(e instanceof BeforeActivateRoutes) && !(e instanceof RedirectRequest);
}

// node_modules/@angular/router/fesm2022/router_module-DTJgGWLd.mjs
var RouterLink = class _RouterLink {
  router;
  route;
  tabIndexAttribute;
  renderer;
  el;
  locationStrategy;
  /**
   * Represents an `href` attribute value applied to a host element,
   * when a host element is `<a>`. For other tags, the value is `null`.
   */
  href = null;
  /**
   * Represents the `target` attribute on a host element.
   * This is only used when the host element is an `<a>` tag.
   */
  target;
  /**
   * Passed to {@link Router#createUrlTree} as part of the
   * `UrlCreationOptions`.
   * @see {@link UrlCreationOptions#queryParams}
   * @see {@link Router#createUrlTree}
   */
  queryParams;
  /**
   * Passed to {@link Router#createUrlTree} as part of the
   * `UrlCreationOptions`.
   * @see {@link UrlCreationOptions#fragment}
   * @see {@link Router#createUrlTree}
   */
  fragment;
  /**
   * Passed to {@link Router#createUrlTree} as part of the
   * `UrlCreationOptions`.
   * @see {@link UrlCreationOptions#queryParamsHandling}
   * @see {@link Router#createUrlTree}
   */
  queryParamsHandling;
  /**
   * Passed to {@link Router#navigateByUrl} as part of the
   * `NavigationBehaviorOptions`.
   * @see {@link NavigationBehaviorOptions#state}
   * @see {@link Router#navigateByUrl}
   */
  state;
  /**
   * Passed to {@link Router#navigateByUrl} as part of the
   * `NavigationBehaviorOptions`.
   * @see {@link NavigationBehaviorOptions#info}
   * @see {@link Router#navigateByUrl}
   */
  info;
  /**
   * Passed to {@link Router#createUrlTree} as part of the
   * `UrlCreationOptions`.
   * Specify a value here when you do not want to use the default value
   * for `routerLink`, which is the current activated route.
   * Note that a value of `undefined` here will use the `routerLink` default.
   * @see {@link UrlCreationOptions#relativeTo}
   * @see {@link Router#createUrlTree}
   */
  relativeTo;
  /** Whether a host element is an `<a>` tag. */
  isAnchorElement;
  subscription;
  /** @internal */
  onChanges = new Subject();
  constructor(router, route, tabIndexAttribute, renderer, el, locationStrategy) {
    this.router = router;
    this.route = route;
    this.tabIndexAttribute = tabIndexAttribute;
    this.renderer = renderer;
    this.el = el;
    this.locationStrategy = locationStrategy;
    const tagName = el.nativeElement.tagName?.toLowerCase();
    this.isAnchorElement = tagName === "a" || tagName === "area";
    if (this.isAnchorElement) {
      this.subscription = router.events.subscribe((s) => {
        if (s instanceof NavigationEnd) {
          this.updateHref();
        }
      });
    } else {
      this.setTabIndexIfNotOnNativeEl("0");
    }
  }
  /**
   * Passed to {@link Router#createUrlTree} as part of the
   * `UrlCreationOptions`.
   * @see {@link UrlCreationOptions#preserveFragment}
   * @see {@link Router#createUrlTree}
   */
  preserveFragment = false;
  /**
   * Passed to {@link Router#navigateByUrl} as part of the
   * `NavigationBehaviorOptions`.
   * @see {@link NavigationBehaviorOptions#skipLocationChange}
   * @see {@link Router#navigateByUrl}
   */
  skipLocationChange = false;
  /**
   * Passed to {@link Router#navigateByUrl} as part of the
   * `NavigationBehaviorOptions`.
   * @see {@link NavigationBehaviorOptions#replaceUrl}
   * @see {@link Router#navigateByUrl}
   */
  replaceUrl = false;
  /**
   * Modifies the tab index if there was not a tabindex attribute on the element during
   * instantiation.
   */
  setTabIndexIfNotOnNativeEl(newTabIndex) {
    if (this.tabIndexAttribute != null || this.isAnchorElement) {
      return;
    }
    this.applyAttributeValue("tabindex", newTabIndex);
  }
  /** @docs-private */
  // TODO(atscott): Remove changes parameter in major version as a breaking change.
  ngOnChanges(changes) {
    if (ngDevMode && isUrlTree(this.routerLinkInput) && (this.fragment !== void 0 || this.queryParams || this.queryParamsHandling || this.preserveFragment || this.relativeTo)) {
      throw new RuntimeError(4016, "Cannot configure queryParams or fragment when using a UrlTree as the routerLink input value.");
    }
    if (this.isAnchorElement) {
      this.updateHref();
    }
    this.onChanges.next(this);
  }
  routerLinkInput = null;
  /**
   * Commands to pass to {@link Router#createUrlTree} or a `UrlTree`.
   *   - **array**: commands to pass to {@link Router#createUrlTree}.
   *   - **string**: shorthand for array of commands with just the string, i.e. `['/route']`
   *   - **UrlTree**: a `UrlTree` for this link rather than creating one from the commands
   *     and other inputs that correspond to properties of `UrlCreationOptions`.
   *   - **null|undefined**: effectively disables the `routerLink`
   * @see {@link Router#createUrlTree}
   */
  set routerLink(commandsOrUrlTree) {
    if (commandsOrUrlTree == null) {
      this.routerLinkInput = null;
      this.setTabIndexIfNotOnNativeEl(null);
    } else {
      if (isUrlTree(commandsOrUrlTree)) {
        this.routerLinkInput = commandsOrUrlTree;
      } else {
        this.routerLinkInput = Array.isArray(commandsOrUrlTree) ? commandsOrUrlTree : [commandsOrUrlTree];
      }
      this.setTabIndexIfNotOnNativeEl("0");
    }
  }
  /** @docs-private */
  onClick(button, ctrlKey, shiftKey, altKey, metaKey) {
    const urlTree = this.urlTree;
    if (urlTree === null) {
      return true;
    }
    if (this.isAnchorElement) {
      if (button !== 0 || ctrlKey || shiftKey || altKey || metaKey) {
        return true;
      }
      if (typeof this.target === "string" && this.target != "_self") {
        return true;
      }
    }
    const extras = {
      skipLocationChange: this.skipLocationChange,
      replaceUrl: this.replaceUrl,
      state: this.state,
      info: this.info
    };
    this.router.navigateByUrl(urlTree, extras);
    return !this.isAnchorElement;
  }
  /** @docs-private */
  ngOnDestroy() {
    this.subscription?.unsubscribe();
  }
  updateHref() {
    const urlTree = this.urlTree;
    this.href = urlTree !== null && this.locationStrategy ? this.locationStrategy?.prepareExternalUrl(this.router.serializeUrl(urlTree)) : null;
    const sanitizedValue = this.href === null ? null : (
      // This class represents a directive that can be added to both `<a>` elements,
      // as well as other elements. As a result, we can't define security context at
      // compile time. So the security context is deferred to runtime.
      // The `ɵɵsanitizeUrlOrResourceUrl` selects the necessary sanitizer function
      // based on the tag and property names. The logic mimics the one from
      // `packages/compiler/src/schema/dom_security_schema.ts`, which is used at compile time.
      //
      // Note: we should investigate whether we can switch to using `@HostBinding('attr.href')`
      // instead of applying a value via a renderer, after a final merge of the
      // `RouterLinkWithHref` directive.
      \u0275\u0275sanitizeUrlOrResourceUrl(this.href, this.el.nativeElement.tagName.toLowerCase(), "href")
    );
    this.applyAttributeValue("href", sanitizedValue);
  }
  applyAttributeValue(attrName, attrValue) {
    const renderer = this.renderer;
    const nativeElement = this.el.nativeElement;
    if (attrValue !== null) {
      renderer.setAttribute(nativeElement, attrName, attrValue);
    } else {
      renderer.removeAttribute(nativeElement, attrName);
    }
  }
  get urlTree() {
    if (this.routerLinkInput === null) {
      return null;
    } else if (isUrlTree(this.routerLinkInput)) {
      return this.routerLinkInput;
    }
    return this.router.createUrlTree(this.routerLinkInput, {
      // If the `relativeTo` input is not defined, we want to use `this.route` by default.
      // Otherwise, we should use the value provided by the user in the input.
      relativeTo: this.relativeTo !== void 0 ? this.relativeTo : this.route,
      queryParams: this.queryParams,
      fragment: this.fragment,
      queryParamsHandling: this.queryParamsHandling,
      preserveFragment: this.preserveFragment
    });
  }
  static \u0275fac = function RouterLink_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _RouterLink)(\u0275\u0275directiveInject(Router), \u0275\u0275directiveInject(ActivatedRoute), \u0275\u0275injectAttribute("tabindex"), \u0275\u0275directiveInject(Renderer2), \u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(LocationStrategy));
  };
  static \u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
    type: _RouterLink,
    selectors: [["", "routerLink", ""]],
    hostVars: 1,
    hostBindings: function RouterLink_HostBindings(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275listener("click", function RouterLink_click_HostBindingHandler($event) {
          return ctx.onClick($event.button, $event.ctrlKey, $event.shiftKey, $event.altKey, $event.metaKey);
        });
      }
      if (rf & 2) {
        \u0275\u0275attribute("target", ctx.target);
      }
    },
    inputs: {
      target: "target",
      queryParams: "queryParams",
      fragment: "fragment",
      queryParamsHandling: "queryParamsHandling",
      state: "state",
      info: "info",
      relativeTo: "relativeTo",
      preserveFragment: [2, "preserveFragment", "preserveFragment", booleanAttribute],
      skipLocationChange: [2, "skipLocationChange", "skipLocationChange", booleanAttribute],
      replaceUrl: [2, "replaceUrl", "replaceUrl", booleanAttribute],
      routerLink: "routerLink"
    },
    features: [\u0275\u0275NgOnChangesFeature]
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(RouterLink, [{
    type: Directive,
    args: [{
      selector: "[routerLink]"
    }]
  }], () => [{
    type: Router
  }, {
    type: ActivatedRoute
  }, {
    type: void 0,
    decorators: [{
      type: Attribute,
      args: ["tabindex"]
    }]
  }, {
    type: Renderer2
  }, {
    type: ElementRef
  }, {
    type: LocationStrategy
  }], {
    target: [{
      type: HostBinding,
      args: ["attr.target"]
    }, {
      type: Input
    }],
    queryParams: [{
      type: Input
    }],
    fragment: [{
      type: Input
    }],
    queryParamsHandling: [{
      type: Input
    }],
    state: [{
      type: Input
    }],
    info: [{
      type: Input
    }],
    relativeTo: [{
      type: Input
    }],
    preserveFragment: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    skipLocationChange: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    replaceUrl: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    routerLink: [{
      type: Input
    }],
    onClick: [{
      type: HostListener,
      args: ["click", ["$event.button", "$event.ctrlKey", "$event.shiftKey", "$event.altKey", "$event.metaKey"]]
    }]
  });
})();
var RouterLinkActive = class _RouterLinkActive {
  router;
  element;
  renderer;
  cdr;
  link;
  links;
  classes = [];
  routerEventsSubscription;
  linkInputChangesSubscription;
  _isActive = false;
  get isActive() {
    return this._isActive;
  }
  /**
   * Options to configure how to determine if the router link is active.
   *
   * These options are passed to the `Router.isActive()` function.
   *
   * @see {@link Router#isActive}
   */
  routerLinkActiveOptions = {
    exact: false
  };
  /**
   * Aria-current attribute to apply when the router link is active.
   *
   * Possible values: `'page'` | `'step'` | `'location'` | `'date'` | `'time'` | `true` | `false`.
   *
   * @see {@link https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-current}
   */
  ariaCurrentWhenActive;
  /**
   *
   * You can use the output `isActiveChange` to get notified each time the link becomes
   * active or inactive.
   *
   * Emits:
   * true  -> Route is active
   * false -> Route is inactive
   *
   * ```html
   * <a
   *  routerLink="/user/bob"
   *  routerLinkActive="active-link"
   *  (isActiveChange)="this.onRouterLinkActive($event)">Bob</a>
   * ```
   */
  isActiveChange = new EventEmitter();
  constructor(router, element2, renderer, cdr, link) {
    this.router = router;
    this.element = element2;
    this.renderer = renderer;
    this.cdr = cdr;
    this.link = link;
    this.routerEventsSubscription = router.events.subscribe((s) => {
      if (s instanceof NavigationEnd) {
        this.update();
      }
    });
  }
  /** @docs-private */
  ngAfterContentInit() {
    of(this.links.changes, of(null)).pipe(mergeAll()).subscribe((_) => {
      this.update();
      this.subscribeToEachLinkOnChanges();
    });
  }
  subscribeToEachLinkOnChanges() {
    this.linkInputChangesSubscription?.unsubscribe();
    const allLinkChanges = [...this.links.toArray(), this.link].filter((link) => !!link).map((link) => link.onChanges);
    this.linkInputChangesSubscription = from(allLinkChanges).pipe(mergeAll()).subscribe((link) => {
      if (this._isActive !== this.isLinkActive(this.router)(link)) {
        this.update();
      }
    });
  }
  set routerLinkActive(data) {
    const classes = Array.isArray(data) ? data : data.split(" ");
    this.classes = classes.filter((c) => !!c);
  }
  /** @docs-private */
  ngOnChanges(changes) {
    this.update();
  }
  /** @docs-private */
  ngOnDestroy() {
    this.routerEventsSubscription.unsubscribe();
    this.linkInputChangesSubscription?.unsubscribe();
  }
  update() {
    if (!this.links || !this.router.navigated) return;
    queueMicrotask(() => {
      const hasActiveLinks = this.hasActiveLinks();
      this.classes.forEach((c) => {
        if (hasActiveLinks) {
          this.renderer.addClass(this.element.nativeElement, c);
        } else {
          this.renderer.removeClass(this.element.nativeElement, c);
        }
      });
      if (hasActiveLinks && this.ariaCurrentWhenActive !== void 0) {
        this.renderer.setAttribute(this.element.nativeElement, "aria-current", this.ariaCurrentWhenActive.toString());
      } else {
        this.renderer.removeAttribute(this.element.nativeElement, "aria-current");
      }
      if (this._isActive !== hasActiveLinks) {
        this._isActive = hasActiveLinks;
        this.cdr.markForCheck();
        this.isActiveChange.emit(hasActiveLinks);
      }
    });
  }
  isLinkActive(router) {
    const options = isActiveMatchOptions(this.routerLinkActiveOptions) ? this.routerLinkActiveOptions : (
      // While the types should disallow `undefined` here, it's possible without strict inputs
      this.routerLinkActiveOptions.exact || false
    );
    return (link) => {
      const urlTree = link.urlTree;
      return urlTree ? router.isActive(urlTree, options) : false;
    };
  }
  hasActiveLinks() {
    const isActiveCheckFn = this.isLinkActive(this.router);
    return this.link && isActiveCheckFn(this.link) || this.links.some(isActiveCheckFn);
  }
  static \u0275fac = function RouterLinkActive_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _RouterLinkActive)(\u0275\u0275directiveInject(Router), \u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(Renderer2), \u0275\u0275directiveInject(ChangeDetectorRef), \u0275\u0275directiveInject(RouterLink, 8));
  };
  static \u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
    type: _RouterLinkActive,
    selectors: [["", "routerLinkActive", ""]],
    contentQueries: function RouterLinkActive_ContentQueries(rf, ctx, dirIndex) {
      if (rf & 1) {
        \u0275\u0275contentQuery(dirIndex, RouterLink, 5);
      }
      if (rf & 2) {
        let _t;
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.links = _t);
      }
    },
    inputs: {
      routerLinkActiveOptions: "routerLinkActiveOptions",
      ariaCurrentWhenActive: "ariaCurrentWhenActive",
      routerLinkActive: "routerLinkActive"
    },
    outputs: {
      isActiveChange: "isActiveChange"
    },
    exportAs: ["routerLinkActive"],
    features: [\u0275\u0275NgOnChangesFeature]
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(RouterLinkActive, [{
    type: Directive,
    args: [{
      selector: "[routerLinkActive]",
      exportAs: "routerLinkActive"
    }]
  }], () => [{
    type: Router
  }, {
    type: ElementRef
  }, {
    type: Renderer2
  }, {
    type: ChangeDetectorRef
  }, {
    type: RouterLink,
    decorators: [{
      type: Optional
    }]
  }], {
    links: [{
      type: ContentChildren,
      args: [RouterLink, {
        descendants: true
      }]
    }],
    routerLinkActiveOptions: [{
      type: Input
    }],
    ariaCurrentWhenActive: [{
      type: Input
    }],
    isActiveChange: [{
      type: Output
    }],
    routerLinkActive: [{
      type: Input
    }]
  });
})();
function isActiveMatchOptions(options) {
  return !!options.paths;
}
var PreloadingStrategy = class {
};
var PreloadAllModules = class _PreloadAllModules {
  preload(route, fn2) {
    return fn2().pipe(catchError(() => of(null)));
  }
  static \u0275fac = function PreloadAllModules_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _PreloadAllModules)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _PreloadAllModules,
    factory: _PreloadAllModules.\u0275fac,
    providedIn: "root"
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(PreloadAllModules, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();
var NoPreloading = class _NoPreloading {
  preload(route, fn2) {
    return of(null);
  }
  static \u0275fac = function NoPreloading_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _NoPreloading)();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _NoPreloading,
    factory: _NoPreloading.\u0275fac,
    providedIn: "root"
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NoPreloading, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();
var RouterPreloader = class _RouterPreloader {
  router;
  injector;
  preloadingStrategy;
  loader;
  subscription;
  constructor(router, injector, preloadingStrategy, loader) {
    this.router = router;
    this.injector = injector;
    this.preloadingStrategy = preloadingStrategy;
    this.loader = loader;
  }
  setUpPreloading() {
    this.subscription = this.router.events.pipe(filter((e) => e instanceof NavigationEnd), concatMap(() => this.preload())).subscribe(() => {
    });
  }
  preload() {
    return this.processRoutes(this.injector, this.router.config);
  }
  /** @docs-private */
  ngOnDestroy() {
    if (this.subscription) {
      this.subscription.unsubscribe();
    }
  }
  processRoutes(injector, routes2) {
    const res = [];
    for (const route of routes2) {
      if (route.providers && !route._injector) {
        route._injector = createEnvironmentInjector(route.providers, injector, `Route: ${route.path}`);
      }
      const injectorForCurrentRoute = route._injector ?? injector;
      const injectorForChildren = route._loadedInjector ?? injectorForCurrentRoute;
      if (route.loadChildren && !route._loadedRoutes && route.canLoad === void 0 || route.loadComponent && !route._loadedComponent) {
        res.push(this.preloadConfig(injectorForCurrentRoute, route));
      }
      if (route.children || route._loadedRoutes) {
        res.push(this.processRoutes(injectorForChildren, route.children ?? route._loadedRoutes));
      }
    }
    return from(res).pipe(mergeAll());
  }
  preloadConfig(injector, route) {
    return this.preloadingStrategy.preload(route, () => {
      let loadedChildren$;
      if (route.loadChildren && route.canLoad === void 0) {
        loadedChildren$ = this.loader.loadChildren(injector, route);
      } else {
        loadedChildren$ = of(null);
      }
      const recursiveLoadChildren$ = loadedChildren$.pipe(mergeMap((config) => {
        if (config === null) {
          return of(void 0);
        }
        route._loadedRoutes = config.routes;
        route._loadedInjector = config.injector;
        return this.processRoutes(config.injector ?? injector, config.routes);
      }));
      if (route.loadComponent && !route._loadedComponent) {
        const loadComponent$ = this.loader.loadComponent(route);
        return from([recursiveLoadChildren$, loadComponent$]).pipe(mergeAll());
      } else {
        return recursiveLoadChildren$;
      }
    });
  }
  static \u0275fac = function RouterPreloader_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _RouterPreloader)(\u0275\u0275inject(Router), \u0275\u0275inject(EnvironmentInjector), \u0275\u0275inject(PreloadingStrategy), \u0275\u0275inject(RouterConfigLoader));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _RouterPreloader,
    factory: _RouterPreloader.\u0275fac,
    providedIn: "root"
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(RouterPreloader, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: Router
  }, {
    type: EnvironmentInjector
  }, {
    type: PreloadingStrategy
  }, {
    type: RouterConfigLoader
  }], null);
})();
var ROUTER_SCROLLER = new InjectionToken("");
var RouterScroller = class _RouterScroller {
  urlSerializer;
  transitions;
  viewportScroller;
  zone;
  options;
  routerEventsSubscription;
  scrollEventsSubscription;
  lastId = 0;
  lastSource = "imperative";
  restoredId = 0;
  store = {};
  /** @docs-private */
  constructor(urlSerializer, transitions, viewportScroller, zone, options = {}) {
    this.urlSerializer = urlSerializer;
    this.transitions = transitions;
    this.viewportScroller = viewportScroller;
    this.zone = zone;
    this.options = options;
    options.scrollPositionRestoration ||= "disabled";
    options.anchorScrolling ||= "disabled";
  }
  init() {
    if (this.options.scrollPositionRestoration !== "disabled") {
      this.viewportScroller.setHistoryScrollRestoration("manual");
    }
    this.routerEventsSubscription = this.createScrollEvents();
    this.scrollEventsSubscription = this.consumeScrollEvents();
  }
  createScrollEvents() {
    return this.transitions.events.subscribe((e) => {
      if (e instanceof NavigationStart) {
        this.store[this.lastId] = this.viewportScroller.getScrollPosition();
        this.lastSource = e.navigationTrigger;
        this.restoredId = e.restoredState ? e.restoredState.navigationId : 0;
      } else if (e instanceof NavigationEnd) {
        this.lastId = e.id;
        this.scheduleScrollEvent(e, this.urlSerializer.parse(e.urlAfterRedirects).fragment);
      } else if (e instanceof NavigationSkipped && e.code === NavigationSkippedCode.IgnoredSameUrlNavigation) {
        this.lastSource = void 0;
        this.restoredId = 0;
        this.scheduleScrollEvent(e, this.urlSerializer.parse(e.url).fragment);
      }
    });
  }
  consumeScrollEvents() {
    return this.transitions.events.subscribe((e) => {
      if (!(e instanceof Scroll)) return;
      if (e.position) {
        if (this.options.scrollPositionRestoration === "top") {
          this.viewportScroller.scrollToPosition([0, 0]);
        } else if (this.options.scrollPositionRestoration === "enabled") {
          this.viewportScroller.scrollToPosition(e.position);
        }
      } else {
        if (e.anchor && this.options.anchorScrolling === "enabled") {
          this.viewportScroller.scrollToAnchor(e.anchor);
        } else if (this.options.scrollPositionRestoration !== "disabled") {
          this.viewportScroller.scrollToPosition([0, 0]);
        }
      }
    });
  }
  scheduleScrollEvent(routerEvent, anchor) {
    this.zone.runOutsideAngular(() => {
      setTimeout(() => {
        this.zone.run(() => {
          this.transitions.events.next(new Scroll(routerEvent, this.lastSource === "popstate" ? this.store[this.restoredId] : null, anchor));
        });
      }, 0);
    });
  }
  /** @docs-private */
  ngOnDestroy() {
    this.routerEventsSubscription?.unsubscribe();
    this.scrollEventsSubscription?.unsubscribe();
  }
  static \u0275fac = function RouterScroller_Factory(__ngFactoryType__) {
    \u0275\u0275invalidFactory();
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
    token: _RouterScroller,
    factory: _RouterScroller.\u0275fac
  });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(RouterScroller, [{
    type: Injectable
  }], () => [{
    type: UrlSerializer
  }, {
    type: NavigationTransitions
  }, {
    type: ViewportScroller
  }, {
    type: NgZone
  }, {
    type: void 0
  }], null);
})();
function provideRouter(routes2, ...features) {
  return makeEnvironmentProviders([{
    provide: ROUTES,
    multi: true,
    useValue: routes2
  }, typeof ngDevMode === "undefined" || ngDevMode ? {
    provide: ROUTER_IS_PROVIDED,
    useValue: true
  } : [], {
    provide: ActivatedRoute,
    useFactory: rootRoute,
    deps: [Router]
  }, {
    provide: APP_BOOTSTRAP_LISTENER,
    multi: true,
    useFactory: getBootstrapListener
  }, features.map((feature) => feature.\u0275providers)]);
}
function rootRoute(router) {
  return router.routerState.root;
}
function routerFeature(kind, providers) {
  return {
    \u0275kind: kind,
    \u0275providers: providers
  };
}
var ROUTER_IS_PROVIDED = new InjectionToken("", {
  providedIn: "root",
  factory: () => false
});
function getBootstrapListener() {
  const injector = inject(Injector);
  return (bootstrappedComponentRef) => {
    const ref = injector.get(ApplicationRef);
    if (bootstrappedComponentRef !== ref.components[0]) {
      return;
    }
    const router = injector.get(Router);
    const bootstrapDone = injector.get(BOOTSTRAP_DONE);
    if (injector.get(INITIAL_NAVIGATION) === 1) {
      router.initialNavigation();
    }
    injector.get(ROUTER_PRELOADER, null, InjectFlags.Optional)?.setUpPreloading();
    injector.get(ROUTER_SCROLLER, null, InjectFlags.Optional)?.init();
    router.resetRootComponentType(ref.componentTypes[0]);
    if (!bootstrapDone.closed) {
      bootstrapDone.next();
      bootstrapDone.complete();
      bootstrapDone.unsubscribe();
    }
  };
}
var BOOTSTRAP_DONE = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "bootstrap done indicator" : "", {
  factory: () => {
    return new Subject();
  }
});
var INITIAL_NAVIGATION = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "initial navigation" : "", {
  providedIn: "root",
  factory: () => 1
  /* InitialNavigation.EnabledNonBlocking */
});
function withEnabledBlockingInitialNavigation() {
  const providers = [{
    provide: INITIAL_NAVIGATION,
    useValue: 0
    /* InitialNavigation.EnabledBlocking */
  }, provideAppInitializer(() => {
    const injector = inject(Injector);
    const locationInitialized = injector.get(LOCATION_INITIALIZED, Promise.resolve());
    return locationInitialized.then(() => {
      return new Promise((resolve) => {
        const router = injector.get(Router);
        const bootstrapDone = injector.get(BOOTSTRAP_DONE);
        afterNextNavigation(router, () => {
          resolve(true);
        });
        injector.get(NavigationTransitions).afterPreactivation = () => {
          resolve(true);
          return bootstrapDone.closed ? of(void 0) : bootstrapDone;
        };
        router.initialNavigation();
      });
    });
  })];
  return routerFeature(2, providers);
}
function withDisabledInitialNavigation() {
  const providers = [provideAppInitializer(() => {
    inject(Router).setUpLocationChangeListener();
  }), {
    provide: INITIAL_NAVIGATION,
    useValue: 2
    /* InitialNavigation.Disabled */
  }];
  return routerFeature(3, providers);
}
function withDebugTracing() {
  let providers = [];
  if (typeof ngDevMode === "undefined" || ngDevMode) {
    providers = [{
      provide: ENVIRONMENT_INITIALIZER,
      multi: true,
      useFactory: () => {
        const router = inject(Router);
        return () => router.events.subscribe((e) => {
          console.group?.(`Router Event: ${e.constructor.name}`);
          console.log(stringifyEvent(e));
          console.log(e);
          console.groupEnd?.();
        });
      }
    }];
  } else {
    providers = [];
  }
  return routerFeature(1, providers);
}
var ROUTER_PRELOADER = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "router preloader" : "");
function withPreloading(preloadingStrategy) {
  const providers = [{
    provide: ROUTER_PRELOADER,
    useExisting: RouterPreloader
  }, {
    provide: PreloadingStrategy,
    useExisting: preloadingStrategy
  }];
  return routerFeature(0, providers);
}
function withComponentInputBinding() {
  const providers = [RoutedComponentInputBinder, {
    provide: INPUT_BINDER,
    useExisting: RoutedComponentInputBinder
  }];
  return routerFeature(8, providers);
}
function withViewTransitions(options) {
  performanceMarkFeature("NgRouterViewTransitions");
  const providers = [{
    provide: CREATE_VIEW_TRANSITION,
    useValue: createViewTransition
  }, {
    provide: VIEW_TRANSITION_OPTIONS,
    useValue: __spreadValues({
      skipNextTransition: !!options?.skipInitialTransition
    }, options)
  }];
  return routerFeature(9, providers);
}
var ROUTER_DIRECTIVES = [RouterOutlet, RouterLink, RouterLinkActive, \u0275EmptyOutletComponent];
var ROUTER_FORROOT_GUARD = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "router duplicate forRoot guard" : "");
var ROUTER_PROVIDERS = [
  Location,
  {
    provide: UrlSerializer,
    useClass: DefaultUrlSerializer
  },
  Router,
  ChildrenOutletContexts,
  {
    provide: ActivatedRoute,
    useFactory: rootRoute,
    deps: [Router]
  },
  RouterConfigLoader,
  // Only used to warn when `provideRoutes` is used without `RouterModule` or `provideRouter`. Can
  // be removed when `provideRoutes` is removed.
  typeof ngDevMode === "undefined" || ngDevMode ? {
    provide: ROUTER_IS_PROVIDED,
    useValue: true
  } : []
];
var RouterModule = class _RouterModule {
  constructor() {
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      inject(ROUTER_FORROOT_GUARD, {
        optional: true
      });
    }
  }
  /**
   * Creates and configures a module with all the router providers and directives.
   * Optionally sets up an application listener to perform an initial navigation.
   *
   * When registering the NgModule at the root, import as follows:
   *
   * ```ts
   * @NgModule({
   *   imports: [RouterModule.forRoot(ROUTES)]
   * })
   * class MyNgModule {}
   * ```
   *
   * @param routes An array of `Route` objects that define the navigation paths for the application.
   * @param config An `ExtraOptions` configuration object that controls how navigation is performed.
   * @return The new `NgModule`.
   *
   */
  static forRoot(routes2, config) {
    return {
      ngModule: _RouterModule,
      providers: [ROUTER_PROVIDERS, typeof ngDevMode === "undefined" || ngDevMode ? config?.enableTracing ? withDebugTracing().\u0275providers : [] : [], {
        provide: ROUTES,
        multi: true,
        useValue: routes2
      }, typeof ngDevMode === "undefined" || ngDevMode ? {
        provide: ROUTER_FORROOT_GUARD,
        useFactory: provideForRootGuard,
        deps: [[Router, new Optional(), new SkipSelf()]]
      } : [], config?.errorHandler ? {
        provide: NAVIGATION_ERROR_HANDLER,
        useValue: config.errorHandler
      } : [], {
        provide: ROUTER_CONFIGURATION,
        useValue: config ? config : {}
      }, config?.useHash ? provideHashLocationStrategy() : providePathLocationStrategy(), provideRouterScroller(), config?.preloadingStrategy ? withPreloading(config.preloadingStrategy).\u0275providers : [], config?.initialNavigation ? provideInitialNavigation(config) : [], config?.bindToComponentInputs ? withComponentInputBinding().\u0275providers : [], config?.enableViewTransitions ? withViewTransitions().\u0275providers : [], provideRouterInitializer()]
    };
  }
  /**
   * Creates a module with all the router directives and a provider registering routes,
   * without creating a new Router service.
   * When registering for submodules and lazy-loaded submodules, create the NgModule as follows:
   *
   * ```ts
   * @NgModule({
   *   imports: [RouterModule.forChild(ROUTES)]
   * })
   * class MyNgModule {}
   * ```
   *
   * @param routes An array of `Route` objects that define the navigation paths for the submodule.
   * @return The new NgModule.
   *
   */
  static forChild(routes2) {
    return {
      ngModule: _RouterModule,
      providers: [{
        provide: ROUTES,
        multi: true,
        useValue: routes2
      }]
    };
  }
  static \u0275fac = function RouterModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _RouterModule)();
  };
  static \u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
    type: _RouterModule,
    imports: [RouterOutlet, RouterLink, RouterLinkActive, \u0275EmptyOutletComponent],
    exports: [RouterOutlet, RouterLink, RouterLinkActive, \u0275EmptyOutletComponent]
  });
  static \u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({});
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(RouterModule, [{
    type: NgModule,
    args: [{
      imports: ROUTER_DIRECTIVES,
      exports: ROUTER_DIRECTIVES
    }]
  }], () => [], null);
})();
function provideRouterScroller() {
  return {
    provide: ROUTER_SCROLLER,
    useFactory: () => {
      const viewportScroller = inject(ViewportScroller);
      const zone = inject(NgZone);
      const config = inject(ROUTER_CONFIGURATION);
      const transitions = inject(NavigationTransitions);
      const urlSerializer = inject(UrlSerializer);
      if (config.scrollOffset) {
        viewportScroller.setOffset(config.scrollOffset);
      }
      return new RouterScroller(urlSerializer, transitions, viewportScroller, zone, config);
    }
  };
}
function provideHashLocationStrategy() {
  return {
    provide: LocationStrategy,
    useClass: HashLocationStrategy
  };
}
function providePathLocationStrategy() {
  return {
    provide: LocationStrategy,
    useClass: PathLocationStrategy
  };
}
function provideForRootGuard(router) {
  if (router) {
    throw new RuntimeError(4007, `The Router was provided more than once. This can happen if 'forRoot' is used outside of the root injector. Lazy loaded modules should use RouterModule.forChild() instead.`);
  }
  return "guarded";
}
function provideInitialNavigation(config) {
  return [config.initialNavigation === "disabled" ? withDisabledInitialNavigation().\u0275providers : [], config.initialNavigation === "enabledBlocking" ? withEnabledBlockingInitialNavigation().\u0275providers : []];
}
var ROUTER_INITIALIZER = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "Router Initializer" : "");
function provideRouterInitializer() {
  return [
    // ROUTER_INITIALIZER token should be removed. It's public API but shouldn't be. We can just
    // have `getBootstrapListener` directly attached to APP_BOOTSTRAP_LISTENER.
    {
      provide: ROUTER_INITIALIZER,
      useFactory: getBootstrapListener
    },
    {
      provide: APP_BOOTSTRAP_LISTENER,
      multi: true,
      useExisting: ROUTER_INITIALIZER
    }
  ];
}

// node_modules/@angular/router/fesm2022/router.mjs
var VERSION3 = new Version("19.2.14");

// src/app/app.component.ts
function AppComponent_header_1_div_21_a_9_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "a", 50);
    \u0275\u0275listener("click", function AppComponent_header_1_div_21_a_9_Template_a_click_0_listener() {
      \u0275\u0275restoreView(_r4);
      const ctx_r1 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r1.closeDropdown());
    });
    \u0275\u0275text(1, " Review Questions ");
    \u0275\u0275elementEnd();
  }
}
function AppComponent_header_1_div_21_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 44)(1, "a", 45);
    \u0275\u0275listener("click", function AppComponent_header_1_div_21_Template_a_click_1_listener() {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.closeDropdown());
    });
    \u0275\u0275text(2, " View Questions ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "a", 46);
    \u0275\u0275listener("click", function AppComponent_header_1_div_21_Template_a_click_3_listener() {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.closeDropdown());
    });
    \u0275\u0275text(4, " Add Question ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(5, "a", 47);
    \u0275\u0275listener("click", function AppComponent_header_1_div_21_Template_a_click_5_listener() {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.closeDropdown());
    });
    \u0275\u0275text(6, " \u2728 Enhanced Editor ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(7, "a", 48);
    \u0275\u0275listener("click", function AppComponent_header_1_div_21_Template_a_click_7_listener() {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.closeDropdown());
    });
    \u0275\u0275text(8, " CSV Import ");
    \u0275\u0275elementEnd();
    \u0275\u0275template(9, AppComponent_header_1_div_21_a_9_Template, 2, 0, "a", 49);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(9);
    \u0275\u0275property("ngIf", ctx_r1.isSuperAdmin());
  }
}
function AppComponent_header_1_div_28_Template(rf, ctx) {
  if (rf & 1) {
    const _r5 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 44)(1, "a", 51);
    \u0275\u0275listener("click", function AppComponent_header_1_div_28_Template_a_click_1_listener() {
      \u0275\u0275restoreView(_r5);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.closeDropdown());
    });
    \u0275\u0275text(2, " View All ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "a", 52);
    \u0275\u0275listener("click", function AppComponent_header_1_div_28_Template_a_click_3_listener() {
      \u0275\u0275restoreView(_r5);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.closeDropdown());
    });
    \u0275\u0275text(4, " Create New ");
    \u0275\u0275elementEnd()();
  }
}
function AppComponent_header_1_div_35_Template(rf, ctx) {
  if (rf & 1) {
    const _r6 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 44)(1, "a", 53);
    \u0275\u0275listener("click", function AppComponent_header_1_div_35_Template_a_click_1_listener() {
      \u0275\u0275restoreView(_r6);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.closeDropdown());
    });
    \u0275\u0275text(2, " Branches ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "a", 54);
    \u0275\u0275listener("click", function AppComponent_header_1_div_35_Template_a_click_3_listener() {
      \u0275\u0275restoreView(_r6);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.closeDropdown());
    });
    \u0275\u0275text(4, " Subjects ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(5, "a", 55);
    \u0275\u0275listener("click", function AppComponent_header_1_div_35_Template_a_click_5_listener() {
      \u0275\u0275restoreView(_r6);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.closeDropdown());
    });
    \u0275\u0275text(6, " Topics ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(7, "a", 56);
    \u0275\u0275listener("click", function AppComponent_header_1_div_35_Template_a_click_7_listener() {
      \u0275\u0275restoreView(_r6);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.closeDropdown());
    });
    \u0275\u0275text(8, " Subtopics ");
    \u0275\u0275elementEnd()();
  }
}
function AppComponent_header_1_div_42_Template(rf, ctx) {
  if (rf & 1) {
    const _r7 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 44)(1, "a", 57);
    \u0275\u0275listener("click", function AppComponent_header_1_div_42_Template_a_click_1_listener() {
      \u0275\u0275restoreView(_r7);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.closeDropdown());
    });
    \u0275\u0275text(2, " Exam Families ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "a", 58);
    \u0275\u0275listener("click", function AppComponent_header_1_div_42_Template_a_click_3_listener() {
      \u0275\u0275restoreView(_r7);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.closeDropdown());
    });
    \u0275\u0275text(4, " Exam Streams ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(5, "a", 59);
    \u0275\u0275listener("click", function AppComponent_header_1_div_42_Template_a_click_5_listener() {
      \u0275\u0275restoreView(_r7);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.closeDropdown());
    });
    \u0275\u0275text(6, " Exam Papers ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(7, "a", 60);
    \u0275\u0275listener("click", function AppComponent_header_1_div_42_Template_a_click_7_listener() {
      \u0275\u0275restoreView(_r7);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.closeDropdown());
    });
    \u0275\u0275text(8, " Exam Shifts ");
    \u0275\u0275elementEnd()();
  }
}
function AppComponent_header_1_a_43_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "a", 61);
    \u0275\u0275element(1, "i", 62);
    \u0275\u0275elementStart(2, "span");
    \u0275\u0275text(3, "Users");
    \u0275\u0275elementEnd()();
  }
}
function AppComponent_header_1_a_44_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "a", 63);
    \u0275\u0275element(1, "i", 64);
    \u0275\u0275elementStart(2, "span");
    \u0275\u0275text(3, "Leaderboard");
    \u0275\u0275elementEnd()();
  }
}
function AppComponent_header_1__svg_svg_66_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(0, "svg", 65);
    \u0275\u0275element(1, "path", 66);
    \u0275\u0275elementEnd();
  }
}
function AppComponent_header_1__svg_svg_67_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(0, "svg", 65);
    \u0275\u0275element(1, "path", 67);
    \u0275\u0275elementEnd();
  }
}
function AppComponent_header_1_div_68_div_11_a_9_Template(rf, ctx) {
  if (rf & 1) {
    const _r10 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "a", 90);
    \u0275\u0275listener("click", function AppComponent_header_1_div_68_div_11_a_9_Template_a_click_0_listener() {
      \u0275\u0275restoreView(_r10);
      const ctx_r1 = \u0275\u0275nextContext(4);
      return \u0275\u0275resetView(ctx_r1.closeMobileMenu());
    });
    \u0275\u0275text(1, " Review Questions ");
    \u0275\u0275elementEnd();
  }
}
function AppComponent_header_1_div_68_div_11_Template(rf, ctx) {
  if (rf & 1) {
    const _r9 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 84)(1, "a", 85);
    \u0275\u0275listener("click", function AppComponent_header_1_div_68_div_11_Template_a_click_1_listener() {
      \u0275\u0275restoreView(_r9);
      const ctx_r1 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r1.closeMobileMenu());
    });
    \u0275\u0275text(2, " View Questions ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "a", 86);
    \u0275\u0275listener("click", function AppComponent_header_1_div_68_div_11_Template_a_click_3_listener() {
      \u0275\u0275restoreView(_r9);
      const ctx_r1 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r1.closeMobileMenu());
    });
    \u0275\u0275text(4, " Add Question ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(5, "a", 87);
    \u0275\u0275listener("click", function AppComponent_header_1_div_68_div_11_Template_a_click_5_listener() {
      \u0275\u0275restoreView(_r9);
      const ctx_r1 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r1.closeMobileMenu());
    });
    \u0275\u0275text(6, " \u2728 Enhanced Editor ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(7, "a", 88);
    \u0275\u0275listener("click", function AppComponent_header_1_div_68_div_11_Template_a_click_7_listener() {
      \u0275\u0275restoreView(_r9);
      const ctx_r1 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r1.closeMobileMenu());
    });
    \u0275\u0275text(8, " CSV Import ");
    \u0275\u0275elementEnd();
    \u0275\u0275template(9, AppComponent_header_1_div_68_div_11_a_9_Template, 2, 0, "a", 89);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(3);
    \u0275\u0275advance(9);
    \u0275\u0275property("ngIf", ctx_r1.isSuperAdmin());
  }
}
function AppComponent_header_1_div_68_div_18_Template(rf, ctx) {
  if (rf & 1) {
    const _r11 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 84)(1, "a", 91);
    \u0275\u0275listener("click", function AppComponent_header_1_div_68_div_18_Template_a_click_1_listener() {
      \u0275\u0275restoreView(_r11);
      const ctx_r1 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r1.closeMobileMenu());
    });
    \u0275\u0275text(2, " View All ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "a", 92);
    \u0275\u0275listener("click", function AppComponent_header_1_div_68_div_18_Template_a_click_3_listener() {
      \u0275\u0275restoreView(_r11);
      const ctx_r1 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r1.closeMobileMenu());
    });
    \u0275\u0275text(4, " Create New ");
    \u0275\u0275elementEnd()();
  }
}
function AppComponent_header_1_div_68_div_25_Template(rf, ctx) {
  if (rf & 1) {
    const _r12 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 84)(1, "a", 93);
    \u0275\u0275listener("click", function AppComponent_header_1_div_68_div_25_Template_a_click_1_listener() {
      \u0275\u0275restoreView(_r12);
      const ctx_r1 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r1.closeMobileMenu());
    });
    \u0275\u0275text(2, " Branches ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "a", 94);
    \u0275\u0275listener("click", function AppComponent_header_1_div_68_div_25_Template_a_click_3_listener() {
      \u0275\u0275restoreView(_r12);
      const ctx_r1 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r1.closeMobileMenu());
    });
    \u0275\u0275text(4, " Subjects ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(5, "a", 95);
    \u0275\u0275listener("click", function AppComponent_header_1_div_68_div_25_Template_a_click_5_listener() {
      \u0275\u0275restoreView(_r12);
      const ctx_r1 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r1.closeMobileMenu());
    });
    \u0275\u0275text(6, " Topics ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(7, "a", 96);
    \u0275\u0275listener("click", function AppComponent_header_1_div_68_div_25_Template_a_click_7_listener() {
      \u0275\u0275restoreView(_r12);
      const ctx_r1 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r1.closeMobileMenu());
    });
    \u0275\u0275text(8, " Subtopics ");
    \u0275\u0275elementEnd()();
  }
}
function AppComponent_header_1_div_68_div_32_Template(rf, ctx) {
  if (rf & 1) {
    const _r13 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 84)(1, "a", 97);
    \u0275\u0275listener("click", function AppComponent_header_1_div_68_div_32_Template_a_click_1_listener() {
      \u0275\u0275restoreView(_r13);
      const ctx_r1 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r1.closeMobileMenu());
    });
    \u0275\u0275text(2, " Exam Families ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "a", 98);
    \u0275\u0275listener("click", function AppComponent_header_1_div_68_div_32_Template_a_click_3_listener() {
      \u0275\u0275restoreView(_r13);
      const ctx_r1 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r1.closeMobileMenu());
    });
    \u0275\u0275text(4, " Exam Streams ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(5, "a", 99);
    \u0275\u0275listener("click", function AppComponent_header_1_div_68_div_32_Template_a_click_5_listener() {
      \u0275\u0275restoreView(_r13);
      const ctx_r1 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r1.closeMobileMenu());
    });
    \u0275\u0275text(6, " Exam Papers ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(7, "a", 100);
    \u0275\u0275listener("click", function AppComponent_header_1_div_68_div_32_Template_a_click_7_listener() {
      \u0275\u0275restoreView(_r13);
      const ctx_r1 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r1.closeMobileMenu());
    });
    \u0275\u0275text(8, " Exam Shifts ");
    \u0275\u0275elementEnd()();
  }
}
function AppComponent_header_1_div_68_a_33_Template(rf, ctx) {
  if (rf & 1) {
    const _r14 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "a", 101);
    \u0275\u0275listener("click", function AppComponent_header_1_div_68_a_33_Template_a_click_0_listener() {
      \u0275\u0275restoreView(_r14);
      const ctx_r1 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r1.closeMobileMenu());
    });
    \u0275\u0275element(1, "i", 102);
    \u0275\u0275text(2, " Users ");
    \u0275\u0275elementEnd();
  }
}
function AppComponent_header_1_div_68_a_34_Template(rf, ctx) {
  if (rf & 1) {
    const _r15 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "a", 103);
    \u0275\u0275listener("click", function AppComponent_header_1_div_68_a_34_Template_a_click_0_listener() {
      \u0275\u0275restoreView(_r15);
      const ctx_r1 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r1.closeMobileMenu());
    });
    \u0275\u0275element(1, "i", 104);
    \u0275\u0275text(2, " Leaderboard ");
    \u0275\u0275elementEnd();
  }
}
function AppComponent_header_1_div_68_Template(rf, ctx) {
  if (rf & 1) {
    const _r8 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 68)(1, "div", 69)(2, "a", 70);
    \u0275\u0275listener("click", function AppComponent_header_1_div_68_Template_a_click_2_listener() {
      \u0275\u0275restoreView(_r8);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.closeMobileMenu());
    });
    \u0275\u0275element(3, "i", 71);
    \u0275\u0275text(4, " Dashboard ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(5, "div", 69)(6, "button", 72);
    \u0275\u0275listener("click", function AppComponent_header_1_div_68_Template_button_click_6_listener($event) {
      \u0275\u0275restoreView(_r8);
      const ctx_r1 = \u0275\u0275nextContext(2);
      ctx_r1.toggleDropdown("questions");
      return \u0275\u0275resetView($event.stopPropagation());
    });
    \u0275\u0275elementStart(7, "div", 73);
    \u0275\u0275element(8, "i", 74);
    \u0275\u0275text(9, " Questions ");
    \u0275\u0275elementEnd();
    \u0275\u0275element(10, "i", 75);
    \u0275\u0275elementEnd();
    \u0275\u0275template(11, AppComponent_header_1_div_68_div_11_Template, 10, 1, "div", 76);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(12, "div", 69)(13, "button", 72);
    \u0275\u0275listener("click", function AppComponent_header_1_div_68_Template_button_click_13_listener($event) {
      \u0275\u0275restoreView(_r8);
      const ctx_r1 = \u0275\u0275nextContext(2);
      ctx_r1.toggleDropdown("test-series");
      return \u0275\u0275resetView($event.stopPropagation());
    });
    \u0275\u0275elementStart(14, "div", 73);
    \u0275\u0275element(15, "i", 77);
    \u0275\u0275text(16, " Tests ");
    \u0275\u0275elementEnd();
    \u0275\u0275element(17, "i", 75);
    \u0275\u0275elementEnd();
    \u0275\u0275template(18, AppComponent_header_1_div_68_div_18_Template, 5, 0, "div", 76);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(19, "div", 69)(20, "button", 72);
    \u0275\u0275listener("click", function AppComponent_header_1_div_68_Template_button_click_20_listener($event) {
      \u0275\u0275restoreView(_r8);
      const ctx_r1 = \u0275\u0275nextContext(2);
      ctx_r1.toggleDropdown("content");
      return \u0275\u0275resetView($event.stopPropagation());
    });
    \u0275\u0275elementStart(21, "div", 73);
    \u0275\u0275element(22, "i", 78);
    \u0275\u0275text(23, " Content ");
    \u0275\u0275elementEnd();
    \u0275\u0275element(24, "i", 75);
    \u0275\u0275elementEnd();
    \u0275\u0275template(25, AppComponent_header_1_div_68_div_25_Template, 9, 0, "div", 76);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(26, "div", 69)(27, "button", 72);
    \u0275\u0275listener("click", function AppComponent_header_1_div_68_Template_button_click_27_listener($event) {
      \u0275\u0275restoreView(_r8);
      const ctx_r1 = \u0275\u0275nextContext(2);
      ctx_r1.toggleDropdown("exam-structure");
      return \u0275\u0275resetView($event.stopPropagation());
    });
    \u0275\u0275elementStart(28, "div", 73);
    \u0275\u0275element(29, "i", 79);
    \u0275\u0275text(30, " Exams ");
    \u0275\u0275elementEnd();
    \u0275\u0275element(31, "i", 75);
    \u0275\u0275elementEnd();
    \u0275\u0275template(32, AppComponent_header_1_div_68_div_32_Template, 9, 0, "div", 76);
    \u0275\u0275elementEnd();
    \u0275\u0275template(33, AppComponent_header_1_div_68_a_33_Template, 3, 0, "a", 80)(34, AppComponent_header_1_div_68_a_34_Template, 3, 0, "a", 81);
    \u0275\u0275elementStart(35, "a", 82);
    \u0275\u0275listener("click", function AppComponent_header_1_div_68_Template_a_click_35_listener() {
      \u0275\u0275restoreView(_r8);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.closeMobileMenu());
    });
    \u0275\u0275element(36, "i", 83);
    \u0275\u0275text(37, " Analytics ");
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(10);
    \u0275\u0275classProp("rotate-180", ctx_r1.activeDropdown === "questions");
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r1.activeDropdown === "questions");
    \u0275\u0275advance(6);
    \u0275\u0275classProp("rotate-180", ctx_r1.activeDropdown === "test-series");
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r1.activeDropdown === "test-series");
    \u0275\u0275advance(6);
    \u0275\u0275classProp("rotate-180", ctx_r1.activeDropdown === "content");
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r1.activeDropdown === "content");
    \u0275\u0275advance(6);
    \u0275\u0275classProp("rotate-180", ctx_r1.activeDropdown === "exam-structure");
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r1.activeDropdown === "exam-structure");
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r1.authService.getRole() === "superadmin" || ctx_r1.authService.getRole() === "admin");
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r1.authService.getRole() === "superadmin" || ctx_r1.authService.getRole() === "admin");
  }
}
function AppComponent_header_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "header", 7)(1, "nav", 8)(2, "div", 9)(3, "div", 10)(4, "a", 11)(5, "div", 12)(6, "span", 13);
    \u0275\u0275text(7, "AP");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(8, "span", 14);
    \u0275\u0275text(9, "AdminPanel");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(10, "div", 15)(11, "a", 16);
    \u0275\u0275element(12, "i", 17);
    \u0275\u0275elementStart(13, "span");
    \u0275\u0275text(14, "Dashboard");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(15, "div", 18)(16, "button", 19);
    \u0275\u0275listener("click", function AppComponent_header_1_Template_button_click_16_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      ctx_r1.toggleDropdown("questions");
      return \u0275\u0275resetView($event.stopPropagation());
    });
    \u0275\u0275element(17, "i", 20);
    \u0275\u0275elementStart(18, "span");
    \u0275\u0275text(19, "Questions");
    \u0275\u0275elementEnd();
    \u0275\u0275element(20, "i", 21);
    \u0275\u0275elementEnd();
    \u0275\u0275template(21, AppComponent_header_1_div_21_Template, 10, 1, "div", 22);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(22, "div", 18)(23, "button", 19);
    \u0275\u0275listener("click", function AppComponent_header_1_Template_button_click_23_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      ctx_r1.toggleDropdown("test-series");
      return \u0275\u0275resetView($event.stopPropagation());
    });
    \u0275\u0275element(24, "i", 23);
    \u0275\u0275elementStart(25, "span");
    \u0275\u0275text(26, "Tests");
    \u0275\u0275elementEnd();
    \u0275\u0275element(27, "i", 21);
    \u0275\u0275elementEnd();
    \u0275\u0275template(28, AppComponent_header_1_div_28_Template, 5, 0, "div", 22);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(29, "div", 18)(30, "button", 19);
    \u0275\u0275listener("click", function AppComponent_header_1_Template_button_click_30_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      ctx_r1.toggleDropdown("content");
      return \u0275\u0275resetView($event.stopPropagation());
    });
    \u0275\u0275element(31, "i", 24);
    \u0275\u0275elementStart(32, "span");
    \u0275\u0275text(33, "Content");
    \u0275\u0275elementEnd();
    \u0275\u0275element(34, "i", 21);
    \u0275\u0275elementEnd();
    \u0275\u0275template(35, AppComponent_header_1_div_35_Template, 9, 0, "div", 22);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(36, "div", 18)(37, "button", 19);
    \u0275\u0275listener("click", function AppComponent_header_1_Template_button_click_37_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      ctx_r1.toggleDropdown("exam-structure");
      return \u0275\u0275resetView($event.stopPropagation());
    });
    \u0275\u0275element(38, "i", 25);
    \u0275\u0275elementStart(39, "span");
    \u0275\u0275text(40, "Exams");
    \u0275\u0275elementEnd();
    \u0275\u0275element(41, "i", 21);
    \u0275\u0275elementEnd();
    \u0275\u0275template(42, AppComponent_header_1_div_42_Template, 9, 0, "div", 22);
    \u0275\u0275elementEnd();
    \u0275\u0275template(43, AppComponent_header_1_a_43_Template, 4, 0, "a", 26)(44, AppComponent_header_1_a_44_Template, 4, 0, "a", 27);
    \u0275\u0275elementStart(45, "a", 28);
    \u0275\u0275element(46, "i", 29);
    \u0275\u0275elementStart(47, "span");
    \u0275\u0275text(48, "Analytics");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(49, "div", 30)(50, "div", 31)(51, "div", 32)(52, "div", 33);
    \u0275\u0275text(53);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(54, "div", 34)(55, "div", 35);
    \u0275\u0275text(56);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(57, "div", 36);
    \u0275\u0275text(58);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(59, "button", 37);
    \u0275\u0275listener("click", function AppComponent_header_1_Template_button_click_59_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.logout());
    });
    \u0275\u0275element(60, "i", 38);
    \u0275\u0275elementStart(61, "span", 39);
    \u0275\u0275text(62, "Logout");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(63, "button", 40);
    \u0275\u0275listener("click", function AppComponent_header_1_Template_button_click_63_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.toggleMobileMenu());
    });
    \u0275\u0275elementStart(64, "span", 41);
    \u0275\u0275text(65, "Open main menu");
    \u0275\u0275elementEnd();
    \u0275\u0275template(66, AppComponent_header_1__svg_svg_66_Template, 2, 0, "svg", 42)(67, AppComponent_header_1__svg_svg_67_Template, 2, 0, "svg", 42);
    \u0275\u0275elementEnd()()();
    \u0275\u0275template(68, AppComponent_header_1_div_68_Template, 38, 14, "div", 43);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    let tmp_15_0;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(15);
    \u0275\u0275classProp("bg-gray-100", ctx_r1.activeDropdown === "questions");
    \u0275\u0275advance(5);
    \u0275\u0275classProp("rotate-180", ctx_r1.activeDropdown === "questions");
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r1.activeDropdown === "questions");
    \u0275\u0275advance();
    \u0275\u0275classProp("bg-gray-100", ctx_r1.activeDropdown === "test-series");
    \u0275\u0275advance(5);
    \u0275\u0275classProp("rotate-180", ctx_r1.activeDropdown === "test-series");
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r1.activeDropdown === "test-series");
    \u0275\u0275advance();
    \u0275\u0275classProp("bg-gray-100", ctx_r1.activeDropdown === "content");
    \u0275\u0275advance(5);
    \u0275\u0275classProp("rotate-180", ctx_r1.activeDropdown === "content");
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r1.activeDropdown === "content");
    \u0275\u0275advance();
    \u0275\u0275classProp("bg-gray-100", ctx_r1.activeDropdown === "exam-structure");
    \u0275\u0275advance(5);
    \u0275\u0275classProp("rotate-180", ctx_r1.activeDropdown === "exam-structure");
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r1.activeDropdown === "exam-structure");
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r1.authService.getRole() === "superadmin" || ctx_r1.authService.getRole() === "admin");
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r1.authService.getRole() === "superadmin" || ctx_r1.authService.getRole() === "admin");
    \u0275\u0275advance(9);
    \u0275\u0275textInterpolate1(" ", (ctx_r1.userName == null ? null : (tmp_15_0 = ctx_r1.userName.charAt(0)) == null ? null : tmp_15_0.toUpperCase()) || "A", " ");
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate(ctx_r1.userName || "Admin");
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r1.authService.getRole() || "admin");
    \u0275\u0275advance(5);
    \u0275\u0275attribute("aria-expanded", ctx_r1.mobileMenuOpen);
    \u0275\u0275advance(3);
    \u0275\u0275property("ngIf", !ctx_r1.mobileMenuOpen);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r1.mobileMenuOpen);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r1.mobileMenuOpen);
  }
}
function AppComponent_div_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r16 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 105);
    \u0275\u0275listener("click", function AppComponent_div_2_Template_div_click_0_listener() {
      \u0275\u0275restoreView(_r16);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.closeMobileMenu());
    });
    \u0275\u0275elementEnd();
  }
}
function AppComponent_footer_7_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "footer", 106)(1, "div", 107)(2, "div", 108)(3, "p");
    \u0275\u0275text(4);
    \u0275\u0275elementEnd()()()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(4);
    \u0275\u0275textInterpolate1("\xA9 ", ctx_r1.currentYear, " NexPrepAI Admin Panel. All rights reserved.");
  }
}
var AppComponent = class _AppComponent {
  authService;
  router;
  title = "admin-panel";
  userName = null;
  currentYear = (/* @__PURE__ */ new Date()).getFullYear();
  mobileMenuOpen = false;
  activeDropdown = null;
  constructor(authService, router) {
    this.authService = authService;
    this.router = router;
  }
  ngOnInit() {
    this.authService.getUserNameObservable().subscribe((name) => {
      this.userName = name;
    });
    window.addEventListener("resize", () => {
      if (window.innerWidth > 1024 && this.mobileMenuOpen) {
        this.mobileMenuOpen = false;
        this.activeDropdown = null;
      }
    });
  }
  toggleMobileMenu() {
    this.mobileMenuOpen = !this.mobileMenuOpen;
    if (!this.mobileMenuOpen) {
      this.activeDropdown = null;
    }
  }
  closeMobileMenu() {
    this.mobileMenuOpen = false;
    this.activeDropdown = null;
  }
  isSuperAdmin() {
    return this.authService.getUserRole() === "superadmin";
  }
  toggleDropdown(dropdown) {
    if (this.activeDropdown === dropdown) {
      this.activeDropdown = null;
    } else {
      this.activeDropdown = dropdown;
    }
  }
  closeDropdown() {
    this.activeDropdown = null;
  }
  logout() {
    this.authService.logout();
    this.router.navigate(["/login"]);
  }
  // Close dropdowns when clicking outside
  onDocumentClick(event) {
    const target = event.target;
    if (target.closest(".dropdown") || target.closest(".user-dropdown")) {
      return;
    }
    this.activeDropdown = null;
  }
  // Close mobile menu on escape key
  onEscapeKey(event) {
    if (this.mobileMenuOpen) {
      this.closeMobileMenu();
    } else if (this.activeDropdown) {
      this.closeDropdown();
    }
  }
  // Handle keyboard navigation for accessibility
  onTabKey(event) {
  }
  static \u0275fac = function AppComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AppComponent)(\u0275\u0275directiveInject(AuthService), \u0275\u0275directiveInject(Router));
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _AppComponent, selectors: [["app-root"]], hostBindings: function AppComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275listener("click", function AppComponent_click_HostBindingHandler($event) {
        return ctx.onDocumentClick($event);
      }, false, \u0275\u0275resolveDocument)("keydown.escape", function AppComponent_keydown_escape_HostBindingHandler($event) {
        return ctx.onEscapeKey($event);
      }, false, \u0275\u0275resolveDocument)("keydown.tab", function AppComponent_keydown_tab_HostBindingHandler($event) {
        return ctx.onTabKey($event);
      }, false, \u0275\u0275resolveDocument);
    }
  }, decls: 8, vars: 3, consts: [[1, "min-h-screen", "bg-gray-50", "flex", "flex-col"], ["class", "bg-white shadow-soft border-b border-gray-200 sticky top-0 z-50", 4, "ngIf"], ["class", "lg:hidden fixed inset-0 z-40 bg-gray-900 bg-opacity-50", 3, "click", 4, "ngIf"], [1, "flex-1", "bg-gray-50"], [1, "mx-auto", "max-w-7xl", "px-4", "sm:px-6", "lg:px-8", "py-6"], [1, "min-h-full"], ["class", "bg-white border-t border-gray-200", 4, "ngIf"], [1, "bg-white", "shadow-soft", "border-b", "border-gray-200", "sticky", "top-0", "z-50"], [1, "mx-auto", "max-w-7xl", "px-4", "sm:px-6", "lg:px-8"], [1, "flex", "justify-between", "items-center", "h-16", "min-w-0"], [1, "flex-shrink-0", "flex", "items-center", "min-w-0", "mr-4"], ["routerLink", "/home", 1, "flex", "items-center", "space-x-2", "hover:opacity-80", "transition-opacity", "duration-200", "cursor-pointer"], [1, "h-8", "w-8", "bg-gradient-to-br", "from-primary-500", "to-primary-700", "rounded-lg", "flex", "items-center", "justify-center", "flex-shrink-0"], [1, "text-white", "font-bold", "text-sm"], [1, "hidden", "sm:block", "text-xl", "font-semibold", "text-gray-900", "truncate"], [1, "hidden", "lg:flex", "lg:items-center", "lg:space-x-2", "flex-1", "justify-start", "min-w-0", "mr-4"], ["routerLink", "/home", "routerLinkActive", "bg-primary-100 text-primary-700 border-primary-500", 1, "nav-item", "px-2", "py-2", "rounded-lg", "text-xs", "font-medium", "text-gray-700", "hover:bg-gray-100", "hover:text-gray-900", "transition-colors", "duration-200", "flex", "items-center", "space-x-1"], [1, "fas", "fa-tachometer-alt", "text-xs"], [1, "relative", "dropdown"], [1, "nav-item", "px-2", "py-2", "rounded-lg", "text-xs", "font-medium", "text-gray-700", "hover:bg-gray-100", "hover:text-gray-900", "transition-colors", "duration-200", "flex", "items-center", "space-x-1", 3, "click"], [1, "fas", "fa-question-circle", "text-xs"], [1, "fas", "fa-chevron-down", "text-xs", "transition-transform", "duration-200"], ["class", "absolute top-full left-0 mt-1 w-48 bg-white rounded-lg shadow-medium border border-gray-200 py-1 z-50", 4, "ngIf"], [1, "fas", "fa-clipboard-list", "text-xs"], [1, "fas", "fa-sitemap", "text-xs"], [1, "fas", "fa-graduation-cap", "text-xs"], ["routerLink", "/user-management", "routerLinkActive", "bg-primary-100 text-primary-700 border-primary-500", "class", "nav-item px-2 py-2 rounded-lg text-xs font-medium text-gray-700 hover:bg-gray-100 hover:text-gray-900 transition-colors duration-200 flex items-center space-x-1", 4, "ngIf"], ["routerLink", "/leaderboard", "routerLinkActive", "bg-primary-100 text-primary-700 border-primary-500", "class", "nav-item px-2 py-2 rounded-lg text-xs font-medium text-gray-700 hover:bg-gray-100 hover:text-gray-900 transition-colors duration-200 flex items-center space-x-1", 4, "ngIf"], ["routerLink", "/analytics", "routerLinkActive", "bg-primary-100 text-primary-700 border-primary-500", 1, "nav-item", "px-2", "py-2", "rounded-lg", "text-xs", "font-medium", "text-gray-700", "hover:bg-gray-100", "hover:text-gray-900", "transition-colors", "duration-200", "flex", "items-center", "space-x-1"], [1, "fas", "fa-chart-bar", "text-xs"], [1, "flex", "items-center", "space-x-2", "md:space-x-3", "flex-shrink-0", "min-w-0", "ml-4"], [1, "flex", "items-center", "space-x-2", "lg:space-x-3"], [1, "flex", "items-center", "space-x-2"], [1, "h-8", "w-8", "bg-gradient-to-br", "from-secondary-500", "to-secondary-700", "rounded-full", "flex", "items-center", "justify-center", "text-white", "font-medium", "text-sm", "flex-shrink-0"], [1, "hidden", "md:block", "lg:block"], [1, "text-sm", "font-medium", "text-gray-900", "truncate", "max-w-24", "lg:max-w-none"], [1, "text-xs", "text-gray-500", "truncate"], [1, "inline-flex", "items-center", "px-2", "py-2", "lg:px-3", "border", "border-gray-300", "rounded-lg", "text-sm", "font-medium", "text-gray-700", "bg-white", "hover:bg-gray-50", "hover:text-danger-600", "transition-colors", "duration-200", "flex-shrink-0", 3, "click"], [1, "fas", "fa-sign-out-alt", "text-sm", "lg:mr-2"], [1, "hidden", "lg:inline", "ml-1"], ["type", "button", 1, "lg:hidden", "inline-flex", "items-center", "justify-center", "p-2", "rounded-lg", "text-gray-700", "hover:bg-gray-100", "hover:text-gray-900", "transition-colors", "duration-200", "flex-shrink-0", "ml-1", 3, "click"], [1, "sr-only"], ["class", "h-6 w-6", "fill", "none", "viewBox", "0 0 24 24", "stroke", "currentColor", 4, "ngIf"], ["class", "lg:hidden border-t border-gray-200 pt-4 pb-3 bg-white", 4, "ngIf"], [1, "absolute", "top-full", "left-0", "mt-1", "w-48", "bg-white", "rounded-lg", "shadow-medium", "border", "border-gray-200", "py-1", "z-50"], ["routerLink", "/questions", "routerLinkActive", "bg-primary-50 text-primary-700", 1, "block", "px-4", "py-2", "text-sm", "text-gray-700", "hover:bg-gray-100", "transition-colors", "duration-200", 3, "click"], ["routerLink", "/add-question", "routerLinkActive", "bg-primary-50 text-primary-700", 1, "block", "px-4", "py-2", "text-sm", "text-gray-700", "hover:bg-gray-100", "transition-colors", "duration-200", 3, "click"], ["routerLink", "/question-editor", "routerLinkActive", "bg-primary-50 text-primary-700", 1, "block", "px-4", "py-2", "text-sm", "text-gray-700", "hover:bg-gray-100", "transition-colors", "duration-200", 3, "click"], ["routerLink", "/csv-import", "routerLinkActive", "bg-primary-50 text-primary-700", 1, "block", "px-4", "py-2", "text-sm", "text-gray-700", "hover:bg-gray-100", "transition-colors", "duration-200", 3, "click"], ["routerLink", "/questions/review", "routerLinkActive", "bg-primary-50 text-primary-700", "class", "block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors duration-200", 3, "click", 4, "ngIf"], ["routerLink", "/questions/review", "routerLinkActive", "bg-primary-50 text-primary-700", 1, "block", "px-4", "py-2", "text-sm", "text-gray-700", "hover:bg-gray-100", "transition-colors", "duration-200", 3, "click"], ["routerLink", "/test-series", "routerLinkActive", "bg-primary-50 text-primary-700", 1, "block", "px-4", "py-2", "text-sm", "text-gray-700", "hover:bg-gray-100", "transition-colors", "duration-200", 3, "click"], ["routerLink", "/test-series/create", "routerLinkActive", "bg-primary-50 text-primary-700", 1, "block", "px-4", "py-2", "text-sm", "text-gray-700", "hover:bg-gray-100", "transition-colors", "duration-200", 3, "click"], ["routerLink", "/branches", "routerLinkActive", "bg-primary-50 text-primary-700", 1, "block", "px-4", "py-2", "text-sm", "text-gray-700", "hover:bg-gray-100", "transition-colors", "duration-200", 3, "click"], ["routerLink", "/subjects", "routerLinkActive", "bg-primary-50 text-primary-700", 1, "block", "px-4", "py-2", "text-sm", "text-gray-700", "hover:bg-gray-100", "transition-colors", "duration-200", 3, "click"], ["routerLink", "/topics", "routerLinkActive", "bg-primary-50 text-primary-700", 1, "block", "px-4", "py-2", "text-sm", "text-gray-700", "hover:bg-gray-100", "transition-colors", "duration-200", 3, "click"], ["routerLink", "/subtopics", "routerLinkActive", "bg-primary-50 text-primary-700", 1, "block", "px-4", "py-2", "text-sm", "text-gray-700", "hover:bg-gray-100", "transition-colors", "duration-200", 3, "click"], ["routerLink", "/exam-families", "routerLinkActive", "bg-primary-50 text-primary-700", 1, "block", "px-4", "py-2", "text-sm", "text-gray-700", "hover:bg-gray-100", "transition-colors", "duration-200", 3, "click"], ["routerLink", "/exam-streams", "routerLinkActive", "bg-primary-50 text-primary-700", 1, "block", "px-4", "py-2", "text-sm", "text-gray-700", "hover:bg-gray-100", "transition-colors", "duration-200", 3, "click"], ["routerLink", "/exam-papers", "routerLinkActive", "bg-primary-50 text-primary-700", 1, "block", "px-4", "py-2", "text-sm", "text-gray-700", "hover:bg-gray-100", "transition-colors", "duration-200", 3, "click"], ["routerLink", "/exam-shifts", "routerLinkActive", "bg-primary-50 text-primary-700", 1, "block", "px-4", "py-2", "text-sm", "text-gray-700", "hover:bg-gray-100", "transition-colors", "duration-200", 3, "click"], ["routerLink", "/user-management", "routerLinkActive", "bg-primary-100 text-primary-700 border-primary-500", 1, "nav-item", "px-2", "py-2", "rounded-lg", "text-xs", "font-medium", "text-gray-700", "hover:bg-gray-100", "hover:text-gray-900", "transition-colors", "duration-200", "flex", "items-center", "space-x-1"], [1, "fas", "fa-users", "text-xs"], ["routerLink", "/leaderboard", "routerLinkActive", "bg-primary-100 text-primary-700 border-primary-500", 1, "nav-item", "px-2", "py-2", "rounded-lg", "text-xs", "font-medium", "text-gray-700", "hover:bg-gray-100", "hover:text-gray-900", "transition-colors", "duration-200", "flex", "items-center", "space-x-1"], [1, "fas", "fa-trophy", "text-xs"], ["fill", "none", "viewBox", "0 0 24 24", "stroke", "currentColor", 1, "h-6", "w-6"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M4 6h16M4 12h16M4 18h16"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M6 18L18 6M6 6l12 12"], [1, "lg:hidden", "border-t", "border-gray-200", "pt-4", "pb-3", "bg-white"], [1, "space-y-1"], ["routerLink", "/home", "routerLinkActive", "bg-primary-100 text-primary-700 border-l-4 border-primary-500", 1, "flex", "items-center", "px-4", "py-3", "text-base", "font-medium", "text-gray-700", "hover:bg-gray-100", "hover:text-gray-900", "transition-colors", "duration-200", 3, "click"], [1, "fas", "fa-tachometer-alt", "text-lg", "mr-3"], [1, "w-full", "flex", "items-center", "justify-between", "px-4", "py-3", "text-left", "text-base", "font-medium", "text-gray-700", "hover:bg-gray-100", "hover:text-gray-900", "transition-colors", "duration-200", 3, "click"], [1, "flex", "items-center"], [1, "fas", "fa-question-circle", "text-lg", "mr-3"], [1, "fas", "fa-chevron-down", "text-sm", "transition-transform", "duration-200"], ["class", "pl-10 space-y-1", 4, "ngIf"], [1, "fas", "fa-clipboard-list", "text-lg", "mr-3"], [1, "fas", "fa-sitemap", "text-lg", "mr-3"], [1, "fas", "fa-graduation-cap", "text-lg", "mr-3"], ["routerLink", "/user-management", "routerLinkActive", "bg-primary-100 text-primary-700 border-l-4 border-primary-500", "class", "flex items-center px-4 py-3 text-base font-medium text-gray-700 hover:bg-gray-100 hover:text-gray-900 transition-colors duration-200", 3, "click", 4, "ngIf"], ["routerLink", "/leaderboard", "routerLinkActive", "bg-primary-100 text-primary-700 border-l-4 border-primary-500", "class", "flex items-center px-4 py-3 text-base font-medium text-gray-700 hover:bg-gray-100 hover:text-gray-900 transition-colors duration-200", 3, "click", 4, "ngIf"], ["routerLink", "/analytics", "routerLinkActive", "bg-primary-100 text-primary-700 border-l-4 border-primary-500", 1, "flex", "items-center", "px-4", "py-3", "text-base", "font-medium", "text-gray-700", "hover:bg-gray-100", "hover:text-gray-900", "transition-colors", "duration-200", 3, "click"], [1, "fas", "fa-chart-bar", "text-lg", "mr-3"], [1, "pl-10", "space-y-1"], ["routerLink", "/questions", "routerLinkActive", "bg-primary-50 text-primary-700", 1, "block", "px-4", "py-2", "text-sm", "text-gray-600", "hover:bg-gray-100", "hover:text-gray-900", "transition-colors", "duration-200", 3, "click"], ["routerLink", "/add-question", "routerLinkActive", "bg-primary-50 text-primary-700", 1, "block", "px-4", "py-2", "text-sm", "text-gray-600", "hover:bg-gray-100", "hover:text-gray-900", "transition-colors", "duration-200", 3, "click"], ["routerLink", "/question-editor", "routerLinkActive", "bg-primary-50 text-primary-700", 1, "block", "px-4", "py-2", "text-sm", "text-gray-600", "hover:bg-gray-100", "hover:text-gray-900", "transition-colors", "duration-200", 3, "click"], ["routerLink", "/csv-import", "routerLinkActive", "bg-primary-50 text-primary-700", 1, "block", "px-4", "py-2", "text-sm", "text-gray-600", "hover:bg-gray-100", "hover:text-gray-900", "transition-colors", "duration-200", 3, "click"], ["routerLink", "/questions/review", "routerLinkActive", "bg-primary-50 text-primary-700", "class", "block px-4 py-2 text-sm text-gray-600 hover:bg-gray-100 hover:text-gray-900 transition-colors duration-200", 3, "click", 4, "ngIf"], ["routerLink", "/questions/review", "routerLinkActive", "bg-primary-50 text-primary-700", 1, "block", "px-4", "py-2", "text-sm", "text-gray-600", "hover:bg-gray-100", "hover:text-gray-900", "transition-colors", "duration-200", 3, "click"], ["routerLink", "/test-series", "routerLinkActive", "bg-primary-50 text-primary-700", 1, "block", "px-4", "py-2", "text-sm", "text-gray-600", "hover:bg-gray-100", "hover:text-gray-900", "transition-colors", "duration-200", 3, "click"], ["routerLink", "/test-series/create", "routerLinkActive", "bg-primary-50 text-primary-700", 1, "block", "px-4", "py-2", "text-sm", "text-gray-600", "hover:bg-gray-100", "hover:text-gray-900", "transition-colors", "duration-200", 3, "click"], ["routerLink", "/branches", "routerLinkActive", "bg-primary-50 text-primary-700", 1, "block", "px-4", "py-2", "text-sm", "text-gray-600", "hover:bg-gray-100", "hover:text-gray-900", "transition-colors", "duration-200", 3, "click"], ["routerLink", "/subjects", "routerLinkActive", "bg-primary-50 text-primary-700", 1, "block", "px-4", "py-2", "text-sm", "text-gray-600", "hover:bg-gray-100", "hover:text-gray-900", "transition-colors", "duration-200", 3, "click"], ["routerLink", "/topics", "routerLinkActive", "bg-primary-50 text-primary-700", 1, "block", "px-4", "py-2", "text-sm", "text-gray-600", "hover:bg-gray-100", "hover:text-gray-900", "transition-colors", "duration-200", 3, "click"], ["routerLink", "/subtopics", "routerLinkActive", "bg-primary-50 text-primary-700", 1, "block", "px-4", "py-2", "text-sm", "text-gray-600", "hover:bg-gray-100", "hover:text-gray-900", "transition-colors", "duration-200", 3, "click"], ["routerLink", "/exam-families", "routerLinkActive", "bg-primary-50 text-primary-700", 1, "block", "px-4", "py-2", "text-sm", "text-gray-600", "hover:bg-gray-100", "hover:text-gray-900", "transition-colors", "duration-200", 3, "click"], ["routerLink", "/exam-streams", "routerLinkActive", "bg-primary-50 text-primary-700", 1, "block", "px-4", "py-2", "text-sm", "text-gray-600", "hover:bg-gray-100", "hover:text-gray-900", "transition-colors", "duration-200", 3, "click"], ["routerLink", "/exam-papers", "routerLinkActive", "bg-primary-50 text-primary-700", 1, "block", "px-4", "py-2", "text-sm", "text-gray-600", "hover:bg-gray-100", "hover:text-gray-900", "transition-colors", "duration-200", 3, "click"], ["routerLink", "/exam-shifts", "routerLinkActive", "bg-primary-50 text-primary-700", 1, "block", "px-4", "py-2", "text-sm", "text-gray-600", "hover:bg-gray-100", "hover:text-gray-900", "transition-colors", "duration-200", 3, "click"], ["routerLink", "/user-management", "routerLinkActive", "bg-primary-100 text-primary-700 border-l-4 border-primary-500", 1, "flex", "items-center", "px-4", "py-3", "text-base", "font-medium", "text-gray-700", "hover:bg-gray-100", "hover:text-gray-900", "transition-colors", "duration-200", 3, "click"], [1, "fas", "fa-users", "text-lg", "mr-3"], ["routerLink", "/leaderboard", "routerLinkActive", "bg-primary-100 text-primary-700 border-l-4 border-primary-500", 1, "flex", "items-center", "px-4", "py-3", "text-base", "font-medium", "text-gray-700", "hover:bg-gray-100", "hover:text-gray-900", "transition-colors", "duration-200", 3, "click"], [1, "fas", "fa-trophy", "text-lg", "mr-3"], [1, "lg:hidden", "fixed", "inset-0", "z-40", "bg-gray-900", "bg-opacity-50", 3, "click"], [1, "bg-white", "border-t", "border-gray-200"], [1, "mx-auto", "max-w-7xl", "px-4", "sm:px-6", "lg:px-8", "py-4"], [1, "text-center", "text-sm", "text-gray-500"]], template: function AppComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0);
      \u0275\u0275template(1, AppComponent_header_1_Template, 69, 29, "header", 1)(2, AppComponent_div_2_Template, 1, 0, "div", 2);
      \u0275\u0275elementStart(3, "main", 3)(4, "div", 4)(5, "div", 5);
      \u0275\u0275element(6, "router-outlet");
      \u0275\u0275elementEnd()()();
      \u0275\u0275template(7, AppComponent_footer_7_Template, 5, 1, "footer", 6);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", ctx.authService.isLoggedIn());
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", ctx.mobileMenuOpen);
      \u0275\u0275advance(5);
      \u0275\u0275property("ngIf", ctx.authService.isLoggedIn());
    }
  }, dependencies: [RouterModule, RouterOutlet, RouterLink, RouterLinkActive, CommonModule, NgIf], styles: ["\n\n.rotate-180[_ngcontent-%COMP%] {\n  transform: rotate(180deg);\n}\n/*# sourceMappingURL=app.component.css.map */"] });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AppComponent, [{
    type: Component,
    args: [{ selector: "app-root", standalone: true, imports: [RouterModule, CommonModule], template: `<!-- Modern Tailwind CSS Admin Panel Layout -->\r
<div class="min-h-screen bg-gray-50 flex flex-col">\r
  <!-- Header Navigation - Responsive with mobile-first approach -->\r
  <header class="bg-white shadow-soft border-b border-gray-200 sticky top-0 z-50" *ngIf="authService.isLoggedIn()">\r
    <nav class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">      <div class="flex justify-between items-center h-16 min-w-0">        <!-- Logo Section - Left aligned on all screens -->\r
        <div class="flex-shrink-0 flex items-center min-w-0 mr-4">\r
          <a routerLink="/home" class="flex items-center space-x-2 hover:opacity-80 transition-opacity duration-200 cursor-pointer">\r
            <!-- Logo icon placeholder - can be replaced with actual logo -->\r
            <div class="h-8 w-8 bg-gradient-to-br from-primary-500 to-primary-700 rounded-lg flex items-center justify-center flex-shrink-0">\r
              <span class="text-white font-bold text-sm">AP</span>\r
            </div>\r
            <span class="hidden sm:block text-xl font-semibold text-gray-900 truncate">AdminPanel</span>\r
          </a>\r
        </div>\r
\r
        <!-- Desktop Navigation - Hidden on mobile, shown on lg screens and up -->\r
        <div class="hidden lg:flex lg:items-center lg:space-x-2 flex-1 justify-start min-w-0 mr-4">\r
          <!-- Dashboard Link -->\r
          <a routerLink="/home" \r
             routerLinkActive="bg-primary-100 text-primary-700 border-primary-500" \r
             class="nav-item px-2 py-2 rounded-lg text-xs font-medium text-gray-700 hover:bg-gray-100 hover:text-gray-900 transition-colors duration-200 flex items-center space-x-1">\r
            <i class="fas fa-tachometer-alt text-xs"></i>\r
            <span>Dashboard</span>\r
          </a>          <!-- Questions Dropdown -->\r
          <div class="relative dropdown" [class.bg-gray-100]="activeDropdown === 'questions'">\r
            <button (click)="toggleDropdown('questions'); $event.stopPropagation()"\r
                    class="nav-item px-2 py-2 rounded-lg text-xs font-medium text-gray-700 hover:bg-gray-100 hover:text-gray-900 transition-colors duration-200 flex items-center space-x-1">\r
              <i class="fas fa-question-circle text-xs"></i>\r
              <span>Questions</span>\r
              <i class="fas fa-chevron-down text-xs transition-transform duration-200" \r
                 [class.rotate-180]="activeDropdown === 'questions'"></i>\r
            </button>\r
            <!-- Questions Dropdown Menu -->\r
            <div *ngIf="activeDropdown === 'questions'" \r
                 class="absolute top-full left-0 mt-1 w-48 bg-white rounded-lg shadow-medium border border-gray-200 py-1 z-50">\r
              <a routerLink="/questions" \r
                 routerLinkActive="bg-primary-50 text-primary-700"\r
                 (click)="closeDropdown()"\r
                 class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors duration-200">\r
                View Questions\r
              </a>              <a routerLink="/add-question" \r
                 routerLinkActive="bg-primary-50 text-primary-700"\r
                 (click)="closeDropdown()"\r
                 class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors duration-200">\r
                Add Question\r
              </a>\r
              <a routerLink="/question-editor" \r
                 routerLinkActive="bg-primary-50 text-primary-700"\r
                 (click)="closeDropdown()"\r
                 class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors duration-200">\r
                \u2728 Enhanced Editor\r
              </a>\r
              <a routerLink="/csv-import" \r
                 routerLinkActive="bg-primary-50 text-primary-700"\r
                 (click)="closeDropdown()"\r
                 class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors duration-200">\r
                CSV Import\r
              </a>\r
              <a *ngIf="isSuperAdmin()" \r
                 routerLink="/questions/review" \r
                 routerLinkActive="bg-primary-50 text-primary-700"\r
                 (click)="closeDropdown()"\r
                 class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors duration-200">\r
                Review Questions\r
              </a>\r
            </div>\r
          </div>          <!-- Tests Dropdown -->\r
          <div class="relative dropdown" [class.bg-gray-100]="activeDropdown === 'test-series'">\r
            <button (click)="toggleDropdown('test-series'); $event.stopPropagation()"\r
                    class="nav-item px-2 py-2 rounded-lg text-xs font-medium text-gray-700 hover:bg-gray-100 hover:text-gray-900 transition-colors duration-200 flex items-center space-x-1">\r
              <i class="fas fa-clipboard-list text-xs"></i>\r
              <span>Tests</span>\r
              <i class="fas fa-chevron-down text-xs transition-transform duration-200" \r
                 [class.rotate-180]="activeDropdown === 'test-series'"></i>\r
            </button>\r
            <!-- Tests Dropdown Menu -->\r
            <div *ngIf="activeDropdown === 'test-series'" \r
                 class="absolute top-full left-0 mt-1 w-48 bg-white rounded-lg shadow-medium border border-gray-200 py-1 z-50">\r
              <a routerLink="/test-series" \r
                 routerLinkActive="bg-primary-50 text-primary-700"\r
                 (click)="closeDropdown()"\r
                 class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors duration-200">\r
                View All\r
              </a>\r
              <a routerLink="/test-series/create" \r
                 routerLinkActive="bg-primary-50 text-primary-700"\r
                 (click)="closeDropdown()"\r
                 class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors duration-200">\r
                Create New\r
              </a>\r
            </div>\r
          </div>          <!-- Content Dropdown -->\r
          <div class="relative dropdown" [class.bg-gray-100]="activeDropdown === 'content'">\r
            <button (click)="toggleDropdown('content'); $event.stopPropagation()"\r
                    class="nav-item px-2 py-2 rounded-lg text-xs font-medium text-gray-700 hover:bg-gray-100 hover:text-gray-900 transition-colors duration-200 flex items-center space-x-1">\r
              <i class="fas fa-sitemap text-xs"></i>\r
              <span>Content</span>\r
              <i class="fas fa-chevron-down text-xs transition-transform duration-200" \r
                 [class.rotate-180]="activeDropdown === 'content'"></i>\r
            </button>\r
            <!-- Content Dropdown Menu -->\r
            <div *ngIf="activeDropdown === 'content'" \r
                 class="absolute top-full left-0 mt-1 w-48 bg-white rounded-lg shadow-medium border border-gray-200 py-1 z-50">\r
              <a routerLink="/branches" \r
                 routerLinkActive="bg-primary-50 text-primary-700"\r
                 (click)="closeDropdown()"\r
                 class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors duration-200">\r
                Branches\r
              </a>\r
              <a routerLink="/subjects" \r
                 routerLinkActive="bg-primary-50 text-primary-700"\r
                 (click)="closeDropdown()"\r
                 class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors duration-200">\r
                Subjects\r
              </a>\r
              <a routerLink="/topics" \r
                 routerLinkActive="bg-primary-50 text-primary-700"\r
                 (click)="closeDropdown()"\r
                 class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors duration-200">\r
                Topics\r
              </a>\r
              <a routerLink="/subtopics" \r
                 routerLinkActive="bg-primary-50 text-primary-700"\r
                 (click)="closeDropdown()"\r
                 class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors duration-200">\r
                Subtopics\r
              </a>\r
            </div>\r
          </div>          <!-- Exams Dropdown -->\r
          <div class="relative dropdown" [class.bg-gray-100]="activeDropdown === 'exam-structure'">\r
            <button (click)="toggleDropdown('exam-structure'); $event.stopPropagation()"\r
                    class="nav-item px-2 py-2 rounded-lg text-xs font-medium text-gray-700 hover:bg-gray-100 hover:text-gray-900 transition-colors duration-200 flex items-center space-x-1">\r
              <i class="fas fa-graduation-cap text-xs"></i>\r
              <span>Exams</span>\r
              <i class="fas fa-chevron-down text-xs transition-transform duration-200" \r
                 [class.rotate-180]="activeDropdown === 'exam-structure'"></i>\r
            </button>\r
            <!-- Exams Dropdown Menu -->\r
            <div *ngIf="activeDropdown === 'exam-structure'" \r
                 class="absolute top-full left-0 mt-1 w-48 bg-white rounded-lg shadow-medium border border-gray-200 py-1 z-50">\r
              <a routerLink="/exam-families" \r
                 routerLinkActive="bg-primary-50 text-primary-700"\r
                 (click)="closeDropdown()"\r
                 class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors duration-200">\r
                Exam Families\r
              </a>\r
              <a routerLink="/exam-streams" \r
                 routerLinkActive="bg-primary-50 text-primary-700"\r
                 (click)="closeDropdown()"\r
                 class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors duration-200">\r
                Exam Streams\r
              </a>              <a routerLink="/exam-papers" \r
                 routerLinkActive="bg-primary-50 text-primary-700"\r
                 (click)="closeDropdown()"\r
                 class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors duration-200">\r
                Exam Papers\r
              </a>\r
              <a routerLink="/exam-shifts" \r
                 routerLinkActive="bg-primary-50 text-primary-700"\r
                 (click)="closeDropdown()"\r
                 class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors duration-200">\r
                Exam Shifts\r
              </a>\r
            </div>\r
          </div>\r
\r
          <!-- Users Link -->\r
          <a *ngIf="authService.getRole() === 'superadmin' || authService.getRole() === 'admin'"\r
             routerLink="/user-management" \r
             routerLinkActive="bg-primary-100 text-primary-700 border-primary-500"\r
             class="nav-item px-2 py-2 rounded-lg text-xs font-medium text-gray-700 hover:bg-gray-100 hover:text-gray-900 transition-colors duration-200 flex items-center space-x-1">\r
            <i class="fas fa-users text-xs"></i>\r
            <span>Users</span>\r
          </a>\r
\r
          <!-- Leaderboard Link -->\r
          <a *ngIf="authService.getRole() === 'superadmin' || authService.getRole() === 'admin'"\r
             routerLink="/leaderboard" \r
             routerLinkActive="bg-primary-100 text-primary-700 border-primary-500"\r
             class="nav-item px-2 py-2 rounded-lg text-xs font-medium text-gray-700 hover:bg-gray-100 hover:text-gray-900 transition-colors duration-200 flex items-center space-x-1">\r
            <i class="fas fa-trophy text-xs"></i>\r
            <span>Leaderboard</span>\r
          </a>\r
\r
          <!-- Analytics Link -->\r
          <a routerLink="/analytics" \r
             routerLinkActive="bg-primary-100 text-primary-700 border-primary-500"\r
             class="nav-item px-2 py-2 rounded-lg text-xs font-medium text-gray-700 hover:bg-gray-100 hover:text-gray-900 transition-colors duration-200 flex items-center space-x-1">\r
            <i class="fas fa-chart-bar text-xs"></i>\r
            <span>Analytics</span>\r
          </a>\r
        </div>        <!-- Right side - User menu and mobile toggle -->\r
        <div class="flex items-center space-x-2 md:space-x-3 flex-shrink-0 min-w-0 ml-4">\r
          <!-- User Profile Section - Responsive layout -->\r
          <div class="flex items-center space-x-2 lg:space-x-3">\r
            <!-- User Avatar and Info -->\r
            <div class="flex items-center space-x-2">\r
              <div class="h-8 w-8 bg-gradient-to-br from-secondary-500 to-secondary-700 rounded-full flex items-center justify-center text-white font-medium text-sm flex-shrink-0">\r
                {{ userName?.charAt(0)?.toUpperCase() || 'A' }}\r
              </div>\r
              <div class="hidden md:block lg:block">\r
                <div class="text-sm font-medium text-gray-900 truncate max-w-24 lg:max-w-none">{{ userName || 'Admin' }}</div>\r
                <div class="text-xs text-gray-500 truncate">{{ authService.getRole() || 'admin' }}</div>\r
              </div>\r
            </div>\r
            \r
            <!-- Logout Button - Responsive sizing -->\r
            <button (click)="logout()" \r
                    class="inline-flex items-center px-2 py-2 lg:px-3 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 hover:text-danger-600 transition-colors duration-200 flex-shrink-0">\r
              <i class="fas fa-sign-out-alt text-sm lg:mr-2"></i>\r
              <span class="hidden lg:inline ml-1">Logout</span>\r
            </button>\r
          </div>\r
\r
          <!-- Mobile menu toggle - Only visible on mobile -->\r
          <button type="button" \r
                  (click)="toggleMobileMenu()"\r
                  class="lg:hidden inline-flex items-center justify-center p-2 rounded-lg text-gray-700 hover:bg-gray-100 hover:text-gray-900 transition-colors duration-200 flex-shrink-0 ml-1"\r
                  [attr.aria-expanded]="mobileMenuOpen">\r
            <span class="sr-only">Open main menu</span>\r
            <!-- Hamburger icon when menu is closed -->\r
            <svg *ngIf="!mobileMenuOpen" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">\r
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />\r
            </svg>\r
            <!-- X icon when menu is open -->\r
            <svg *ngIf="mobileMenuOpen" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">\r
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />\r
            </svg>\r
          </button>\r
        </div>\r
      </div>\r
\r
      <!-- Mobile Navigation Menu - Only visible when mobileMenuOpen is true -->\r
      <div *ngIf="mobileMenuOpen" class="lg:hidden border-t border-gray-200 pt-4 pb-3 bg-white">\r
        <div class="space-y-1">\r
          <!-- Mobile Dashboard Link -->\r
          <a routerLink="/home" \r
             routerLinkActive="bg-primary-100 text-primary-700 border-l-4 border-primary-500"\r
             (click)="closeMobileMenu()"\r
             class="flex items-center px-4 py-3 text-base font-medium text-gray-700 hover:bg-gray-100 hover:text-gray-900 transition-colors duration-200">\r
            <i class="fas fa-tachometer-alt text-lg mr-3"></i>\r
            Dashboard\r
          </a>          <!-- Mobile Questions Section -->\r
          <div class="space-y-1">\r
            <button (click)="toggleDropdown('questions'); $event.stopPropagation()"\r
                    class="w-full flex items-center justify-between px-4 py-3 text-left text-base font-medium text-gray-700 hover:bg-gray-100 hover:text-gray-900 transition-colors duration-200">\r
              <div class="flex items-center">\r
                <i class="fas fa-question-circle text-lg mr-3"></i>\r
                Questions\r
              </div>\r
              <i class="fas fa-chevron-down text-sm transition-transform duration-200" \r
                 [class.rotate-180]="activeDropdown === 'questions'"></i>\r
            </button>\r
            <div *ngIf="activeDropdown === 'questions'" class="pl-10 space-y-1">\r
              <a routerLink="/questions" \r
                 routerLinkActive="bg-primary-50 text-primary-700"\r
                 (click)="closeMobileMenu()"\r
                 class="block px-4 py-2 text-sm text-gray-600 hover:bg-gray-100 hover:text-gray-900 transition-colors duration-200">\r
                View Questions\r
              </a>              <a routerLink="/add-question" \r
                 routerLinkActive="bg-primary-50 text-primary-700"\r
                 (click)="closeMobileMenu()"\r
                 class="block px-4 py-2 text-sm text-gray-600 hover:bg-gray-100 hover:text-gray-900 transition-colors duration-200">\r
                Add Question\r
              </a>\r
              <a routerLink="/question-editor" \r
                 routerLinkActive="bg-primary-50 text-primary-700"\r
                 (click)="closeMobileMenu()"\r
                 class="block px-4 py-2 text-sm text-gray-600 hover:bg-gray-100 hover:text-gray-900 transition-colors duration-200">\r
                \u2728 Enhanced Editor\r
              </a>\r
              <a routerLink="/csv-import" \r
                 routerLinkActive="bg-primary-50 text-primary-700"\r
                 (click)="closeMobileMenu()"\r
                 class="block px-4 py-2 text-sm text-gray-600 hover:bg-gray-100 hover:text-gray-900 transition-colors duration-200">\r
                CSV Import\r
              </a>\r
              <a *ngIf="isSuperAdmin()" \r
                 routerLink="/questions/review" \r
                 routerLinkActive="bg-primary-50 text-primary-700"\r
                 (click)="closeMobileMenu()"\r
                 class="block px-4 py-2 text-sm text-gray-600 hover:bg-gray-100 hover:text-gray-900 transition-colors duration-200">\r
                Review Questions\r
              </a>\r
            </div>\r
          </div>          <!-- Mobile Tests Section -->\r
          <div class="space-y-1">\r
            <button (click)="toggleDropdown('test-series'); $event.stopPropagation()"\r
                    class="w-full flex items-center justify-between px-4 py-3 text-left text-base font-medium text-gray-700 hover:bg-gray-100 hover:text-gray-900 transition-colors duration-200">\r
              <div class="flex items-center">\r
                <i class="fas fa-clipboard-list text-lg mr-3"></i>\r
                Tests\r
              </div>\r
              <i class="fas fa-chevron-down text-sm transition-transform duration-200" \r
                 [class.rotate-180]="activeDropdown === 'test-series'"></i>\r
            </button>\r
            <div *ngIf="activeDropdown === 'test-series'" class="pl-10 space-y-1">\r
              <a routerLink="/test-series" \r
                 routerLinkActive="bg-primary-50 text-primary-700"\r
                 (click)="closeMobileMenu()"\r
                 class="block px-4 py-2 text-sm text-gray-600 hover:bg-gray-100 hover:text-gray-900 transition-colors duration-200">\r
                View All\r
              </a>\r
              <a routerLink="/test-series/create" \r
                 routerLinkActive="bg-primary-50 text-primary-700"\r
                 (click)="closeMobileMenu()"\r
                 class="block px-4 py-2 text-sm text-gray-600 hover:bg-gray-100 hover:text-gray-900 transition-colors duration-200">\r
                Create New\r
              </a>\r
            </div>\r
          </div>          <!-- Mobile Content Section -->\r
          <div class="space-y-1">\r
            <button (click)="toggleDropdown('content'); $event.stopPropagation()"\r
                    class="w-full flex items-center justify-between px-4 py-3 text-left text-base font-medium text-gray-700 hover:bg-gray-100 hover:text-gray-900 transition-colors duration-200">\r
              <div class="flex items-center">\r
                <i class="fas fa-sitemap text-lg mr-3"></i>\r
                Content\r
              </div>\r
              <i class="fas fa-chevron-down text-sm transition-transform duration-200" \r
                 [class.rotate-180]="activeDropdown === 'content'"></i>\r
            </button>\r
            <div *ngIf="activeDropdown === 'content'" class="pl-10 space-y-1">\r
              <a routerLink="/branches" \r
                 routerLinkActive="bg-primary-50 text-primary-700"\r
                 (click)="closeMobileMenu()"\r
                 class="block px-4 py-2 text-sm text-gray-600 hover:bg-gray-100 hover:text-gray-900 transition-colors duration-200">\r
                Branches\r
              </a>\r
              <a routerLink="/subjects" \r
                 routerLinkActive="bg-primary-50 text-primary-700"\r
                 (click)="closeMobileMenu()"\r
                 class="block px-4 py-2 text-sm text-gray-600 hover:bg-gray-100 hover:text-gray-900 transition-colors duration-200">\r
                Subjects\r
              </a>\r
              <a routerLink="/topics" \r
                 routerLinkActive="bg-primary-50 text-primary-700"\r
                 (click)="closeMobileMenu()"\r
                 class="block px-4 py-2 text-sm text-gray-600 hover:bg-gray-100 hover:text-gray-900 transition-colors duration-200">\r
                Topics\r
              </a>\r
              <a routerLink="/subtopics" \r
                 routerLinkActive="bg-primary-50 text-primary-700"\r
                 (click)="closeMobileMenu()"\r
                 class="block px-4 py-2 text-sm text-gray-600 hover:bg-gray-100 hover:text-gray-900 transition-colors duration-200">\r
                Subtopics\r
              </a>\r
            </div>\r
          </div>          <!-- Mobile Exams Section -->\r
          <div class="space-y-1">\r
            <button (click)="toggleDropdown('exam-structure'); $event.stopPropagation()"\r
                    class="w-full flex items-center justify-between px-4 py-3 text-left text-base font-medium text-gray-700 hover:bg-gray-100 hover:text-gray-900 transition-colors duration-200">\r
              <div class="flex items-center">\r
                <i class="fas fa-graduation-cap text-lg mr-3"></i>\r
                Exams\r
              </div>\r
              <i class="fas fa-chevron-down text-sm transition-transform duration-200" \r
                 [class.rotate-180]="activeDropdown === 'exam-structure'"></i>\r
            </button>\r
            <div *ngIf="activeDropdown === 'exam-structure'" class="pl-10 space-y-1">\r
              <a routerLink="/exam-families" \r
                 routerLinkActive="bg-primary-50 text-primary-700"\r
                 (click)="closeMobileMenu()"\r
                 class="block px-4 py-2 text-sm text-gray-600 hover:bg-gray-100 hover:text-gray-900 transition-colors duration-200">\r
                Exam Families\r
              </a>\r
              <a routerLink="/exam-streams" \r
                 routerLinkActive="bg-primary-50 text-primary-700"\r
                 (click)="closeMobileMenu()"\r
                 class="block px-4 py-2 text-sm text-gray-600 hover:bg-gray-100 hover:text-gray-900 transition-colors duration-200">\r
                Exam Streams\r
              </a>\r
              <a routerLink="/exam-papers" \r
                 routerLinkActive="bg-primary-50 text-primary-700"\r
                 (click)="closeMobileMenu()"\r
                 class="block px-4 py-2 text-sm text-gray-600 hover:bg-gray-100 hover:text-gray-900 transition-colors duration-200">\r
                Exam Papers\r
              </a>\r
              <a routerLink="/exam-shifts" \r
                 routerLinkActive="bg-primary-50 text-primary-700"\r
                 (click)="closeMobileMenu()"\r
                 class="block px-4 py-2 text-sm text-gray-600 hover:bg-gray-100 hover:text-gray-900 transition-colors duration-200">\r
                Exam Shifts\r
              </a>\r
            </div>\r
          </div>\r
\r
          <!-- Mobile Users Link -->\r
          <a *ngIf="authService.getRole() === 'superadmin' || authService.getRole() === 'admin'"\r
             routerLink="/user-management" \r
             routerLinkActive="bg-primary-100 text-primary-700 border-l-4 border-primary-500"\r
             (click)="closeMobileMenu()"\r
             class="flex items-center px-4 py-3 text-base font-medium text-gray-700 hover:bg-gray-100 hover:text-gray-900 transition-colors duration-200">\r
            <i class="fas fa-users text-lg mr-3"></i>\r
            Users\r
          </a>\r
\r
          <!-- Mobile Leaderboard Link -->\r
          <a *ngIf="authService.getRole() === 'superadmin' || authService.getRole() === 'admin'"\r
             routerLink="/leaderboard" \r
             routerLinkActive="bg-primary-100 text-primary-700 border-l-4 border-primary-500"\r
             (click)="closeMobileMenu()"\r
             class="flex items-center px-4 py-3 text-base font-medium text-gray-700 hover:bg-gray-100 hover:text-gray-900 transition-colors duration-200">\r
            <i class="fas fa-trophy text-lg mr-3"></i>\r
            Leaderboard\r
          </a>\r
\r
          <!-- Mobile Analytics Link -->\r
          <a routerLink="/analytics" \r
             routerLinkActive="bg-primary-100 text-primary-700 border-l-4 border-primary-500"\r
             (click)="closeMobileMenu()"\r
             class="flex items-center px-4 py-3 text-base font-medium text-gray-700 hover:bg-gray-100 hover:text-gray-900 transition-colors duration-200">\r
            <i class="fas fa-chart-bar text-lg mr-3"></i>\r
            Analytics\r
          </a>\r
        </div>\r
      </div>\r
    </nav>\r
  </header>\r
\r
  <!-- Mobile Overlay - Closes mobile menu when clicked -->\r
  <div *ngIf="mobileMenuOpen" \r
       class="lg:hidden fixed inset-0 z-40 bg-gray-900 bg-opacity-50" \r
       (click)="closeMobileMenu()"></div>\r
\r
  <!-- Main Content Area - Flexible and responsive -->\r
  <main class="flex-1 bg-gray-50">\r
    <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 py-6">\r
      <!-- Router outlet with proper spacing and responsive layout -->\r
      <div class="min-h-full">\r
        <router-outlet></router-outlet>\r
      </div>\r
    </div>\r
  </main>\r
\r
  <!-- Footer - Modern and clean -->\r
  <footer class="bg-white border-t border-gray-200" *ngIf="authService.isLoggedIn()">\r
    <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 py-4">\r
      <div class="text-center text-sm text-gray-500">\r
        <p>&copy; {{ currentYear }} NexPrepAI Admin Panel. All rights reserved.</p>\r
      </div>\r
    </div>\r
  </footer>\r
</div>\r
`, styles: ["/* src/app/app.component.scss */\n.rotate-180 {\n  transform: rotate(180deg);\n}\n/*# sourceMappingURL=app.component.css.map */\n"] }]
  }], () => [{ type: AuthService }, { type: Router }], { onDocumentClick: [{
    type: HostListener,
    args: ["document:click", ["$event"]]
  }], onEscapeKey: [{
    type: HostListener,
    args: ["document:keydown.escape", ["$event"]]
  }], onTabKey: [{
    type: HostListener,
    args: ["document:keydown.tab", ["$event"]]
  }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(AppComponent, { className: "AppComponent", filePath: "src/app/app.component.ts", lineNumber: 14 });
})();

// src/app/components/login/login.component.ts
var _c0 = (a0, a1) => ({ "form-input": true, "border-red-300 focus:border-red-500 focus:ring-red-500": a0, "border-gray-300 focus:border-primary-500 focus:ring-primary-500": a1 });
var _c1 = (a0, a1) => ({ "btn-primary w-full py-3 text-base": true, "opacity-50 cursor-not-allowed": a0, "hover:shadow-medium": a1 });
function LoginComponent_div_19_span_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275text(1, "Email address is required");
    \u0275\u0275elementEnd();
  }
}
function LoginComponent_div_19_span_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275text(1, "Please enter a valid email address");
    \u0275\u0275elementEnd();
  }
}
function LoginComponent_div_19_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 32);
    \u0275\u0275element(1, "i", 33);
    \u0275\u0275template(2, LoginComponent_div_19_span_2_Template, 2, 0, "span", 34)(3, LoginComponent_div_19_span_3_Template, 2, 0, "span", 34);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    let tmp_1_0;
    let tmp_2_0;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275property("ngIf", (tmp_1_0 = ctx_r0.form.get("email")) == null ? null : tmp_1_0.errors == null ? null : tmp_1_0.errors["required"]);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", (tmp_2_0 = ctx_r0.form.get("email")) == null ? null : tmp_2_0.errors == null ? null : tmp_2_0.errors["email"]);
  }
}
function LoginComponent_div_27_span_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275text(1, "Password is required");
    \u0275\u0275elementEnd();
  }
}
function LoginComponent_div_27_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 32);
    \u0275\u0275element(1, "i", 33);
    \u0275\u0275template(2, LoginComponent_div_27_span_2_Template, 2, 0, "span", 34);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    let tmp_1_0;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275property("ngIf", (tmp_1_0 = ctx_r0.form.get("password")) == null ? null : tmp_1_0.errors == null ? null : tmp_1_0.errors["required"]);
  }
}
function LoginComponent_span_38_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 35);
    \u0275\u0275element(1, "i", 36);
    \u0275\u0275text(2, " Sign In ");
    \u0275\u0275elementEnd();
  }
}
function LoginComponent_span_39_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 35);
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(1, "svg", 37);
    \u0275\u0275element(2, "circle", 38)(3, "path", 39);
    \u0275\u0275elementEnd();
    \u0275\u0275text(4, " Signing in... ");
    \u0275\u0275elementEnd();
  }
}
var LoginComponent = class _LoginComponent {
  fb;
  auth;
  router;
  form;
  // Initialize in ngOnInit
  isLoading = false;
  // Loading state for the submit button
  constructor(fb, auth, router) {
    this.fb = fb;
    this.auth = auth;
    this.router = router;
  }
  ngOnInit() {
    this.form = this.fb.group({
      email: ["", [Validators.required, Validators.email]],
      password: ["", Validators.required]
    });
    if (this.auth.isLoggedIn()) {
      this.router.navigate(["/home"]);
    }
  }
  onSubmit() {
    if (this.form.invalid)
      return;
    this.isLoading = true;
    const { email, password } = this.form.value;
    this.auth.login(email, password).subscribe({
      next: (res) => {
        if (res.role !== "admin" && res.role !== "superadmin") {
          this.auth.logout();
          alert("Access denied: Only administrators or super administrators can access this panel. Please login with appropriate credentials.");
          this.isLoading = false;
          return;
        }
        this.router.navigate(["/home"]);
      },
      error: (err) => {
        this.isLoading = false;
        const msg = err.error?.message || "Login failed. Please check your credentials and try again.";
        alert(msg);
      }
    });
  }
  static \u0275fac = function LoginComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _LoginComponent)(\u0275\u0275directiveInject(FormBuilder), \u0275\u0275directiveInject(AuthService), \u0275\u0275directiveInject(Router));
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _LoginComponent, selectors: [["app-login"]], decls: 49, vars: 18, consts: [[1, "min-h-screen", "bg-gradient-to-br", "from-primary-50", "via-white", "to-secondary-50", "flex", "items-center", "justify-center", "py-12", "px-4", "sm:px-6", "lg:px-8"], [1, "max-w-md", "w-full", "space-y-8"], [1, "text-center"], [1, "mx-auto", "h-20", "w-20", "bg-gradient-to-br", "from-primary-500", "to-primary-700", "rounded-3xl", "flex", "items-center", "justify-center", "shadow-xl", "mb-8", "transform", "hover:scale-105", "transition-transform", "duration-200"], [1, "text-white", "font-bold", "text-2xl"], [1, "text-4xl", "font-bold", "text-gray-900", "mb-3"], [1, "text-gray-600", "text-lg"], [1, "bg-white", "rounded-3xl", "shadow-2xl", "border", "border-gray-100", "p-10", "backdrop-blur-sm"], [1, "space-y-8", 3, "ngSubmit", "formGroup"], [1, "form-group"], ["for", "email", 1, "form-label", "text-base"], [1, "relative"], [1, "absolute", "inset-y-0", "left-0", "pl-4", "flex", "items-center", "pointer-events-none"], [1, "fas", "fa-envelope", "text-gray-400", "text-lg"], ["id", "email", "formControlName", "email", "type", "email", "placeholder", "Enter your email address", 1, "form-input", "pl-12", "text-base", "py-4", 3, "ngClass"], ["class", "form-error text-sm", 4, "ngIf"], ["for", "password", 1, "form-label", "text-base"], [1, "fas", "fa-lock", "text-gray-400", "text-lg"], ["id", "password", "formControlName", "password", "type", "password", "placeholder", "Enter your password", 1, "form-input", "pl-12", "text-base", "py-4", 3, "ngClass"], [1, "flex", "items-center", "justify-between"], [1, "flex", "items-center"], ["id", "remember-me", "name", "remember-me", "type", "checkbox", 1, "h-5", "w-5", "text-primary-600", "focus:ring-primary-500", "focus:ring-2", "border-gray-300", "rounded", "transition-colors", "duration-200", "cursor-pointer"], ["for", "remember-me", 1, "ml-3", "block", "text-base", "text-gray-700", "cursor-pointer", "select-none"], [1, "text-sm"], ["href", "#", 1, "text-primary-600", "hover:text-primary-500", "font-medium", "transition-colors", "duration-200"], ["type", "submit", 1, "btn-primary", "w-full", "py-3", "text-base", "relative", 3, "disabled", "ngClass"], ["class", "flex items-center justify-center", 4, "ngIf"], [1, "text-center", "pt-4", "border-t", "border-gray-100"], [1, "text-sm", "text-gray-500"], [1, "fas", "fa-shield-alt", "text-primary-500", "mr-1"], [1, "text-xs", "text-gray-400", "mt-1"], [1, "text-xs", "text-gray-500"], [1, "form-error", "text-sm"], [1, "fas", "fa-exclamation-circle", "mr-2"], [4, "ngIf"], [1, "flex", "items-center", "justify-center"], [1, "fas", "fa-sign-in-alt", "mr-2"], ["xmlns", "http://www.w3.org/2000/svg", "fill", "none", "viewBox", "0 0 24 24", 1, "animate-spin", "-ml-1", "mr-3", "h-5", "w-5", "text-white"], ["cx", "12", "cy", "12", "r", "10", "stroke", "currentColor", "stroke-width", "4", 1, "opacity-25"], ["fill", "currentColor", "d", "M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z", 1, "opacity-75"]], template: function LoginComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1)(2, "div", 2)(3, "div", 3)(4, "span", 4);
      \u0275\u0275text(5, "NP");
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(6, "h2", 5);
      \u0275\u0275text(7, " Admin Login ");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "p", 6);
      \u0275\u0275text(9, " Sign in to access the NexPrepAI Administration Panel ");
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(10, "div", 7)(11, "form", 8);
      \u0275\u0275listener("ngSubmit", function LoginComponent_Template_form_ngSubmit_11_listener() {
        return ctx.onSubmit();
      });
      \u0275\u0275elementStart(12, "div", 9)(13, "label", 10);
      \u0275\u0275text(14, " Email Address ");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(15, "div", 11)(16, "div", 12);
      \u0275\u0275element(17, "i", 13);
      \u0275\u0275elementEnd();
      \u0275\u0275element(18, "input", 14);
      \u0275\u0275elementEnd();
      \u0275\u0275template(19, LoginComponent_div_19_Template, 4, 2, "div", 15);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(20, "div", 9)(21, "label", 16);
      \u0275\u0275text(22, " Password ");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(23, "div", 11)(24, "div", 12);
      \u0275\u0275element(25, "i", 17);
      \u0275\u0275elementEnd();
      \u0275\u0275element(26, "input", 18);
      \u0275\u0275elementEnd();
      \u0275\u0275template(27, LoginComponent_div_27_Template, 3, 1, "div", 15);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(28, "div", 19)(29, "div", 20);
      \u0275\u0275element(30, "input", 21);
      \u0275\u0275elementStart(31, "label", 22);
      \u0275\u0275text(32, " Remember me ");
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(33, "div", 23)(34, "a", 24);
      \u0275\u0275text(35, " Forgot password? ");
      \u0275\u0275elementEnd()()();
      \u0275\u0275elementStart(36, "div")(37, "button", 25);
      \u0275\u0275template(38, LoginComponent_span_38_Template, 3, 0, "span", 26)(39, LoginComponent_span_39_Template, 5, 0, "span", 26);
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(40, "div", 27)(41, "p", 28);
      \u0275\u0275element(42, "i", 29);
      \u0275\u0275text(43, " NexPrepAI Administration Panel ");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(44, "p", 30);
      \u0275\u0275text(45, " Secure access for authorized personnel only ");
      \u0275\u0275elementEnd()()()();
      \u0275\u0275elementStart(46, "div", 2)(47, "p", 31);
      \u0275\u0275text(48, " Protected by enterprise-grade security measures ");
      \u0275\u0275elementEnd()()()();
    }
    if (rf & 2) {
      let tmp_1_0;
      let tmp_2_0;
      let tmp_3_0;
      let tmp_4_0;
      \u0275\u0275advance(11);
      \u0275\u0275property("formGroup", ctx.form);
      \u0275\u0275advance(7);
      \u0275\u0275property("ngClass", \u0275\u0275pureFunction2(9, _c0, ((tmp_1_0 = ctx.form.get("email")) == null ? null : tmp_1_0.invalid) && ((tmp_1_0 = ctx.form.get("email")) == null ? null : tmp_1_0.touched), !(((tmp_1_0 = ctx.form.get("email")) == null ? null : tmp_1_0.invalid) && ((tmp_1_0 = ctx.form.get("email")) == null ? null : tmp_1_0.touched))));
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", ((tmp_2_0 = ctx.form.get("email")) == null ? null : tmp_2_0.invalid) && ((tmp_2_0 = ctx.form.get("email")) == null ? null : tmp_2_0.touched));
      \u0275\u0275advance(7);
      \u0275\u0275property("ngClass", \u0275\u0275pureFunction2(12, _c0, ((tmp_3_0 = ctx.form.get("password")) == null ? null : tmp_3_0.invalid) && ((tmp_3_0 = ctx.form.get("password")) == null ? null : tmp_3_0.touched), !(((tmp_3_0 = ctx.form.get("password")) == null ? null : tmp_3_0.invalid) && ((tmp_3_0 = ctx.form.get("password")) == null ? null : tmp_3_0.touched))));
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", ((tmp_4_0 = ctx.form.get("password")) == null ? null : tmp_4_0.invalid) && ((tmp_4_0 = ctx.form.get("password")) == null ? null : tmp_4_0.touched));
      \u0275\u0275advance(10);
      \u0275\u0275property("disabled", ctx.form.invalid)("ngClass", \u0275\u0275pureFunction2(15, _c1, ctx.form.invalid, !ctx.form.invalid));
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", !ctx.isLoading);
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", ctx.isLoading);
    }
  }, dependencies: [CommonModule, NgClass, NgIf, ReactiveFormsModule, \u0275NgNoValidate, DefaultValueAccessor, NgControlStatus, NgControlStatusGroup, FormGroupDirective, FormControlName], styles: ["\n\n.form-input[_ngcontent-%COMP%]:focus {\n  box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);\n}\n.btn-primary[_ngcontent-%COMP%]:hover {\n  transform: translateY(-1px);\n  box-shadow: 0 10px 25px rgba(99, 102, 241, 0.3);\n}\n@keyframes _ngcontent-%COMP%_spin {\n  to {\n    transform: rotate(360deg);\n  }\n}\n.animate-spin[_ngcontent-%COMP%] {\n  animation: _ngcontent-%COMP%_spin 1s linear infinite;\n}\n/*# sourceMappingURL=login.component.css.map */"] });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(LoginComponent, [{
    type: Component,
    args: [{ selector: "app-login", standalone: true, imports: [CommonModule, ReactiveFormsModule], template: `<!-- Modern Tailwind CSS Login Form -->\r
<div class="min-h-screen bg-gradient-to-br from-primary-50 via-white to-secondary-50 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">\r
  <div class="max-w-md w-full space-y-8">\r
    <!-- Login Header with Logo and Title -->\r
    <div class="text-center">\r
      <!-- Logo Container -->\r
      <div class="mx-auto h-20 w-20 bg-gradient-to-br from-primary-500 to-primary-700 rounded-3xl flex items-center justify-center shadow-xl mb-8 transform hover:scale-105 transition-transform duration-200">\r
        <span class="text-white font-bold text-2xl">NP</span>\r
      </div>\r
      \r
      <!-- Title and Subtitle -->\r
      <h2 class="text-4xl font-bold text-gray-900 mb-3">\r
        Admin Login\r
      </h2>\r
      <p class="text-gray-600 text-lg">\r
        Sign in to access the NexPrepAI Administration Panel\r
      </p>\r
    </div>\r
\r
    <!-- Login Form Card -->\r
    <div class="bg-white rounded-3xl shadow-2xl border border-gray-100 p-10 backdrop-blur-sm">\r
      <form [formGroup]="form" (ngSubmit)="onSubmit()" class="space-y-8">        <!-- Email Field -->\r
        <div class="form-group">\r
          <label for="email" class="form-label text-base">\r
            Email Address\r
          </label>\r
          <div class="relative">\r
            <!-- Email Icon -->\r
            <div class="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">\r
              <i class="fas fa-envelope text-gray-400 text-lg"></i>\r
            </div>\r
              <!-- Email Input -->\r
            <input \r
              id="email"\r
              formControlName="email" \r
              type="email" \r
              placeholder="Enter your email address"\r
              [ngClass]="{\r
                'form-input': true,\r
                'border-red-300 focus:border-red-500 focus:ring-red-500': form.get('email')?.invalid && form.get('email')?.touched,\r
                'border-gray-300 focus:border-primary-500 focus:ring-primary-500': !(form.get('email')?.invalid && form.get('email')?.touched)\r
              }"\r
              class="form-input pl-12 text-base py-4"\r
            />\r
          </div>\r
          \r
          <!-- Email Error Messages -->\r
          <div *ngIf="form.get('email')?.invalid && form.get('email')?.touched" class="form-error text-sm">\r
            <i class="fas fa-exclamation-circle mr-2"></i>\r
            <span *ngIf="form.get('email')?.errors?.['required']">Email address is required</span>\r
            <span *ngIf="form.get('email')?.errors?.['email']">Please enter a valid email address</span>\r
          </div>\r
        </div>\r
\r
        <!-- Password Field -->\r
        <div class="form-group">\r
          <label for="password" class="form-label text-base">\r
            Password\r
          </label>\r
          <div class="relative">\r
            <!-- Password Icon -->\r
            <div class="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">\r
              <i class="fas fa-lock text-gray-400 text-lg"></i>\r
            </div>\r
              <!-- Password Input -->\r
            <input \r
              id="password"\r
              formControlName="password" \r
              type="password" \r
              placeholder="Enter your password"\r
              [ngClass]="{\r
                'form-input': true,\r
                'border-red-300 focus:border-red-500 focus:ring-red-500': form.get('password')?.invalid && form.get('password')?.touched,\r
                'border-gray-300 focus:border-primary-500 focus:ring-primary-500': !(form.get('password')?.invalid && form.get('password')?.touched)\r
              }"\r
              class="form-input pl-12 text-base py-4"\r
            />\r
          </div>\r
          \r
          <!-- Password Error Messages -->\r
          <div *ngIf="form.get('password')?.invalid && form.get('password')?.touched" class="form-error text-sm">\r
            <i class="fas fa-exclamation-circle mr-2"></i>\r
            <span *ngIf="form.get('password')?.errors?.['required']">Password is required</span>\r
          </div>\r
        </div>        <!-- Remember Me Checkbox (Optional) -->\r
        <div class="flex items-center justify-between">\r
          <div class="flex items-center">\r
            <input \r
              id="remember-me" \r
              name="remember-me" \r
              type="checkbox" \r
              class="h-5 w-5 text-primary-600 focus:ring-primary-500 focus:ring-2 border-gray-300 rounded transition-colors duration-200 cursor-pointer"\r
            >\r
            <label for="remember-me" class="ml-3 block text-base text-gray-700 cursor-pointer select-none">\r
              Remember me\r
            </label>\r
          </div>\r
\r
          <div class="text-sm">\r
            <a href="#" class="text-primary-600 hover:text-primary-500 font-medium transition-colors duration-200">\r
              Forgot password?\r
            </a>\r
          </div>\r
        </div>\r
\r
        <!-- Submit Button -->\r
        <div>\r
          <button \r
            type="submit" \r
            [disabled]="form.invalid"\r
            [ngClass]="{\r
              'btn-primary w-full py-3 text-base': true,\r
              'opacity-50 cursor-not-allowed': form.invalid,\r
              'hover:shadow-medium': !form.invalid\r
            }"\r
            class="btn-primary w-full py-3 text-base relative">\r
            \r
            <!-- Loading Spinner (if needed) -->\r
            <span *ngIf="!isLoading" class="flex items-center justify-center">\r
              <i class="fas fa-sign-in-alt mr-2"></i>\r
              Sign In\r
            </span>\r
            \r
            <span *ngIf="isLoading" class="flex items-center justify-center">\r
              <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">\r
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>\r
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>\r
              </svg>\r
              Signing in...\r
            </span>\r
          </button>\r
        </div>\r
\r
        <!-- Form Footer -->\r
        <div class="text-center pt-4 border-t border-gray-100">\r
          <p class="text-sm text-gray-500">\r
            <i class="fas fa-shield-alt text-primary-500 mr-1"></i>\r
            NexPrepAI Administration Panel\r
          </p>\r
          <p class="text-xs text-gray-400 mt-1">\r
            Secure access for authorized personnel only\r
          </p>\r
        </div>\r
      </form>\r
    </div>\r
\r
    <!-- Additional Security Notice -->\r
    <div class="text-center">\r
      <p class="text-xs text-gray-500">\r
        Protected by enterprise-grade security measures\r
      </p>\r
    </div>\r
  </div>\r
</div>`, styles: ["/* src/app/components/login/login.component.scss */\n.form-input:focus {\n  box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);\n}\n.btn-primary:hover {\n  transform: translateY(-1px);\n  box-shadow: 0 10px 25px rgba(99, 102, 241, 0.3);\n}\n@keyframes spin {\n  to {\n    transform: rotate(360deg);\n  }\n}\n.animate-spin {\n  animation: spin 1s linear infinite;\n}\n/*# sourceMappingURL=login.component.css.map */\n"] }]
  }], () => [{ type: FormBuilder }, { type: AuthService }, { type: Router }], null);
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(LoginComponent, { className: "LoginComponent", filePath: "src/app/components/login/login.component.ts", lineNumber: 14 });
})();

// src/app/components/register/register.component.ts
function RegisterComponent_div_15_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 27);
    \u0275\u0275element(1, "i", 28);
    \u0275\u0275text(2, " Username is required ");
    \u0275\u0275elementEnd();
  }
}
function RegisterComponent_div_21_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 27);
    \u0275\u0275element(1, "i", 28);
    \u0275\u0275text(2, " Valid email is required ");
    \u0275\u0275elementEnd();
  }
}
function RegisterComponent_div_27_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 27);
    \u0275\u0275element(1, "i", 28);
    \u0275\u0275text(2, " Password is required ");
    \u0275\u0275elementEnd();
  }
}
var RegisterComponent = class _RegisterComponent {
  fb;
  auth;
  router;
  form;
  // tell TS we’ll initialize in ngOnInit
  constructor(fb, auth, router) {
    this.fb = fb;
    this.auth = auth;
    this.router = router;
  }
  ngOnInit() {
    this.form = this.fb.group({
      username: ["", Validators.required],
      email: ["", [Validators.required, Validators.email]],
      password: ["", Validators.required]
    });
  }
  onSubmit() {
    if (this.form.invalid)
      return;
    const { username, email, password } = this.form.value;
    this.auth.register({ username, email, password }).subscribe({
      next: () => {
        alert("Registration successful! You can now log in.");
        this.router.navigate(["/login"]);
      },
      error: (err) => {
        const msg = err.error?.message || "Registration failed";
        alert(msg);
      }
    });
  }
  static \u0275fac = function RegisterComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _RegisterComponent)(\u0275\u0275directiveInject(FormBuilder), \u0275\u0275directiveInject(AuthService), \u0275\u0275directiveInject(Router));
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _RegisterComponent, selectors: [["app-register"]], decls: 41, vars: 29, consts: [[1, "min-h-screen", "bg-gradient-to-br", "from-blue-50", "via-indigo-50", "to-purple-50", "flex", "items-center", "justify-center", "p-4"], [1, "max-w-md", "w-full"], [1, "bg-white", "rounded-2xl", "shadow-2xl", "overflow-hidden", "border", "border-gray-100"], [1, "bg-gradient-to-r", "from-blue-600", "to-indigo-600", "px-8", "py-6"], [1, "text-3xl", "font-bold", "text-white", "text-center"], [1, "text-blue-100", "text-center", "mt-2"], [1, "p-8"], [1, "space-y-6", 3, "ngSubmit", "formGroup"], ["for", "username", 1, "block", "text-sm", "font-semibold", "text-gray-700", "mb-2"], [1, "fas", "fa-user", "mr-2", "text-blue-500"], ["id", "username", "formControlName", "username", "type", "text", "placeholder", "Enter your username", 1, "w-full", "px-4", "py-3", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-blue-500", "focus:border-blue-500", "transition-colors", "duration-200", "placeholder-gray-400"], ["class", "mt-1 text-sm text-red-600", 4, "ngIf"], ["for", "email", 1, "block", "text-sm", "font-semibold", "text-gray-700", "mb-2"], [1, "fas", "fa-envelope", "mr-2", "text-blue-500"], ["id", "email", "formControlName", "email", "type", "email", "placeholder", "Enter your email address", 1, "w-full", "px-4", "py-3", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-blue-500", "focus:border-blue-500", "transition-colors", "duration-200", "placeholder-gray-400"], ["for", "password", 1, "block", "text-sm", "font-semibold", "text-gray-700", "mb-2"], [1, "fas", "fa-lock", "mr-2", "text-blue-500"], ["id", "password", "formControlName", "password", "type", "password", "placeholder", "Enter your password", 1, "w-full", "px-4", "py-3", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-blue-500", "focus:border-blue-500", "transition-colors", "duration-200", "placeholder-gray-400"], [1, "pt-4"], ["type", "submit", 1, "w-full", "bg-gradient-to-r", "from-blue-600", "to-indigo-600", "text-white", "font-semibold", "py-3", "px-6", "rounded-lg", "hover:from-blue-700", "hover:to-indigo-700", "focus:outline-none", "focus:ring-2", "focus:ring-offset-2", "focus:ring-blue-500", "transition-all", "duration-200", "transform", "hover:scale-[1.02]", "disabled:opacity-50", "disabled:cursor-not-allowed", "disabled:transform-none", 3, "disabled"], [1, "fas", "fa-user-plus", "mr-2"], [1, "text-center", "pt-4"], [1, "text-sm", "text-gray-600"], ["href", "/login", 1, "text-blue-600", "hover:text-blue-800", "font-medium", "transition-colors", "duration-200"], [1, "text-center", "mt-8"], [1, "text-gray-500", "text-sm"], [1, "fas", "fa-shield-alt", "mr-1"], [1, "mt-1", "text-sm", "text-red-600"], [1, "fas", "fa-exclamation-circle", "mr-1"]], template: function RegisterComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1)(2, "div", 2)(3, "div", 3)(4, "h2", 4);
      \u0275\u0275text(5, "Admin Sign Up");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(6, "p", 5);
      \u0275\u0275text(7, "Create your administrator account");
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(8, "div", 6)(9, "form", 7);
      \u0275\u0275listener("ngSubmit", function RegisterComponent_Template_form_ngSubmit_9_listener() {
        return ctx.onSubmit();
      });
      \u0275\u0275elementStart(10, "div")(11, "label", 8);
      \u0275\u0275element(12, "i", 9);
      \u0275\u0275text(13, " Username ");
      \u0275\u0275elementEnd();
      \u0275\u0275element(14, "input", 10);
      \u0275\u0275template(15, RegisterComponent_div_15_Template, 3, 0, "div", 11);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(16, "div")(17, "label", 12);
      \u0275\u0275element(18, "i", 13);
      \u0275\u0275text(19, " Email Address ");
      \u0275\u0275elementEnd();
      \u0275\u0275element(20, "input", 14);
      \u0275\u0275template(21, RegisterComponent_div_21_Template, 3, 0, "div", 11);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(22, "div")(23, "label", 15);
      \u0275\u0275element(24, "i", 16);
      \u0275\u0275text(25, " Password ");
      \u0275\u0275elementEnd();
      \u0275\u0275element(26, "input", 17);
      \u0275\u0275template(27, RegisterComponent_div_27_Template, 3, 0, "div", 11);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(28, "div", 18)(29, "button", 19);
      \u0275\u0275element(30, "i", 20);
      \u0275\u0275text(31, " Create Account ");
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(32, "div", 21)(33, "p", 22);
      \u0275\u0275text(34, " Already have an account? ");
      \u0275\u0275elementStart(35, "a", 23);
      \u0275\u0275text(36, " Sign in here ");
      \u0275\u0275elementEnd()()()()()();
      \u0275\u0275elementStart(37, "div", 24)(38, "p", 25);
      \u0275\u0275element(39, "i", 26);
      \u0275\u0275text(40, " Secure admin registration powered by NexPrepAI ");
      \u0275\u0275elementEnd()()()();
    }
    if (rf & 2) {
      let tmp_1_0;
      let tmp_2_0;
      let tmp_3_0;
      let tmp_4_0;
      let tmp_5_0;
      let tmp_6_0;
      let tmp_7_0;
      let tmp_8_0;
      let tmp_9_0;
      let tmp_10_0;
      let tmp_11_0;
      let tmp_12_0;
      let tmp_13_0;
      let tmp_14_0;
      let tmp_15_0;
      \u0275\u0275advance(9);
      \u0275\u0275property("formGroup", ctx.form);
      \u0275\u0275advance(5);
      \u0275\u0275classProp("border-red-500", ((tmp_1_0 = ctx.form.get("username")) == null ? null : tmp_1_0.invalid) && ((tmp_1_0 = ctx.form.get("username")) == null ? null : tmp_1_0.touched))("focus:ring-red-500", ((tmp_2_0 = ctx.form.get("username")) == null ? null : tmp_2_0.invalid) && ((tmp_2_0 = ctx.form.get("username")) == null ? null : tmp_2_0.touched))("border-green-500", ((tmp_3_0 = ctx.form.get("username")) == null ? null : tmp_3_0.valid) && ((tmp_3_0 = ctx.form.get("username")) == null ? null : tmp_3_0.touched))("focus:ring-green-500", ((tmp_4_0 = ctx.form.get("username")) == null ? null : tmp_4_0.valid) && ((tmp_4_0 = ctx.form.get("username")) == null ? null : tmp_4_0.touched));
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", ((tmp_5_0 = ctx.form.get("username")) == null ? null : tmp_5_0.invalid) && ((tmp_5_0 = ctx.form.get("username")) == null ? null : tmp_5_0.touched));
      \u0275\u0275advance(5);
      \u0275\u0275classProp("border-red-500", ((tmp_6_0 = ctx.form.get("email")) == null ? null : tmp_6_0.invalid) && ((tmp_6_0 = ctx.form.get("email")) == null ? null : tmp_6_0.touched))("focus:ring-red-500", ((tmp_7_0 = ctx.form.get("email")) == null ? null : tmp_7_0.invalid) && ((tmp_7_0 = ctx.form.get("email")) == null ? null : tmp_7_0.touched))("border-green-500", ((tmp_8_0 = ctx.form.get("email")) == null ? null : tmp_8_0.valid) && ((tmp_8_0 = ctx.form.get("email")) == null ? null : tmp_8_0.touched))("focus:ring-green-500", ((tmp_9_0 = ctx.form.get("email")) == null ? null : tmp_9_0.valid) && ((tmp_9_0 = ctx.form.get("email")) == null ? null : tmp_9_0.touched));
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", ((tmp_10_0 = ctx.form.get("email")) == null ? null : tmp_10_0.invalid) && ((tmp_10_0 = ctx.form.get("email")) == null ? null : tmp_10_0.touched));
      \u0275\u0275advance(5);
      \u0275\u0275classProp("border-red-500", ((tmp_11_0 = ctx.form.get("password")) == null ? null : tmp_11_0.invalid) && ((tmp_11_0 = ctx.form.get("password")) == null ? null : tmp_11_0.touched))("focus:ring-red-500", ((tmp_12_0 = ctx.form.get("password")) == null ? null : tmp_12_0.invalid) && ((tmp_12_0 = ctx.form.get("password")) == null ? null : tmp_12_0.touched))("border-green-500", ((tmp_13_0 = ctx.form.get("password")) == null ? null : tmp_13_0.valid) && ((tmp_13_0 = ctx.form.get("password")) == null ? null : tmp_13_0.touched))("focus:ring-green-500", ((tmp_14_0 = ctx.form.get("password")) == null ? null : tmp_14_0.valid) && ((tmp_14_0 = ctx.form.get("password")) == null ? null : tmp_14_0.touched));
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", ((tmp_15_0 = ctx.form.get("password")) == null ? null : tmp_15_0.invalid) && ((tmp_15_0 = ctx.form.get("password")) == null ? null : tmp_15_0.touched));
      \u0275\u0275advance(2);
      \u0275\u0275property("disabled", ctx.form.invalid);
    }
  }, dependencies: [CommonModule, NgIf, ReactiveFormsModule, \u0275NgNoValidate, DefaultValueAccessor, NgControlStatus, NgControlStatusGroup, FormGroupDirective, FormControlName], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(RegisterComponent, [{
    type: Component,
    args: [{ selector: "app-register", standalone: true, imports: [CommonModule, ReactiveFormsModule], template: `<div class="min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 flex items-center justify-center p-4">\r
  <div class="max-w-md w-full">\r
    <!-- Registration Card -->\r
    <div class="bg-white rounded-2xl shadow-2xl overflow-hidden border border-gray-100">\r
      <!-- Header -->\r
      <div class="bg-gradient-to-r from-blue-600 to-indigo-600 px-8 py-6">\r
        <h2 class="text-3xl font-bold text-white text-center">Admin Sign Up</h2>\r
        <p class="text-blue-100 text-center mt-2">Create your administrator account</p>\r
      </div>\r
\r
      <!-- Form -->\r
      <div class="p-8">\r
        <form [formGroup]="form" (ngSubmit)="onSubmit()" class="space-y-6">\r
          <!-- Username Field -->\r
          <div>\r
            <label for="username" class="block text-sm font-semibold text-gray-700 mb-2">\r
              <i class="fas fa-user mr-2 text-blue-500"></i>\r
              Username\r
            </label>\r
            <input \r
              id="username"\r
              formControlName="username" \r
              type="text"\r
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors duration-200 placeholder-gray-400"\r
              placeholder="Enter your username"\r
              [class.border-red-500]="form.get('username')?.invalid && form.get('username')?.touched"\r
              [class.focus:ring-red-500]="form.get('username')?.invalid && form.get('username')?.touched"\r
              [class.border-green-500]="form.get('username')?.valid && form.get('username')?.touched"\r
              [class.focus:ring-green-500]="form.get('username')?.valid && form.get('username')?.touched"\r
            />\r
            <div *ngIf="form.get('username')?.invalid && form.get('username')?.touched" class="mt-1 text-sm text-red-600">\r
              <i class="fas fa-exclamation-circle mr-1"></i>\r
              Username is required\r
            </div>\r
          </div>\r
\r
          <!-- Email Field -->\r
          <div>\r
            <label for="email" class="block text-sm font-semibold text-gray-700 mb-2">\r
              <i class="fas fa-envelope mr-2 text-blue-500"></i>\r
              Email Address\r
            </label>\r
            <input \r
              id="email"\r
              formControlName="email" \r
              type="email"\r
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors duration-200 placeholder-gray-400"\r
              placeholder="Enter your email address"\r
              [class.border-red-500]="form.get('email')?.invalid && form.get('email')?.touched"\r
              [class.focus:ring-red-500]="form.get('email')?.invalid && form.get('email')?.touched"\r
              [class.border-green-500]="form.get('email')?.valid && form.get('email')?.touched"\r
              [class.focus:ring-green-500]="form.get('email')?.valid && form.get('email')?.touched"\r
            />\r
            <div *ngIf="form.get('email')?.invalid && form.get('email')?.touched" class="mt-1 text-sm text-red-600">\r
              <i class="fas fa-exclamation-circle mr-1"></i>\r
              Valid email is required\r
            </div>\r
          </div>\r
\r
          <!-- Password Field -->\r
          <div>\r
            <label for="password" class="block text-sm font-semibold text-gray-700 mb-2">\r
              <i class="fas fa-lock mr-2 text-blue-500"></i>\r
              Password\r
            </label>\r
            <input \r
              id="password"\r
              formControlName="password" \r
              type="password"\r
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors duration-200 placeholder-gray-400"\r
              placeholder="Enter your password"\r
              [class.border-red-500]="form.get('password')?.invalid && form.get('password')?.touched"\r
              [class.focus:ring-red-500]="form.get('password')?.invalid && form.get('password')?.touched"\r
              [class.border-green-500]="form.get('password')?.valid && form.get('password')?.touched"\r
              [class.focus:ring-green-500]="form.get('password')?.valid && form.get('password')?.touched"\r
            />\r
            <div *ngIf="form.get('password')?.invalid && form.get('password')?.touched" class="mt-1 text-sm text-red-600">\r
              <i class="fas fa-exclamation-circle mr-1"></i>\r
              Password is required\r
            </div>\r
          </div>\r
\r
          <!-- Submit Button -->\r
          <div class="pt-4">\r
            <button \r
              type="submit" \r
              [disabled]="form.invalid"\r
              class="w-full bg-gradient-to-r from-blue-600 to-indigo-600 text-white font-semibold py-3 px-6 rounded-lg hover:from-blue-700 hover:to-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-all duration-200 transform hover:scale-[1.02] disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none"\r
            >\r
              <i class="fas fa-user-plus mr-2"></i>\r
              Create Account\r
            </button>\r
          </div>\r
\r
          <!-- Additional Links -->\r
          <div class="text-center pt-4">\r
            <p class="text-sm text-gray-600">\r
              Already have an account? \r
              <a href="/login" class="text-blue-600 hover:text-blue-800 font-medium transition-colors duration-200">\r
                Sign in here\r
              </a>\r
            </p>\r
          </div>\r
        </form>\r
      </div>\r
    </div>\r
\r
    <!-- Footer -->\r
    <div class="text-center mt-8">\r
      <p class="text-gray-500 text-sm">\r
        <i class="fas fa-shield-alt mr-1"></i>\r
        Secure admin registration powered by NexPrepAI\r
      </p>\r
    </div>\r
  </div>\r
</div>\r
` }]
  }], () => [{ type: FormBuilder }, { type: AuthService }, { type: Router }], null);
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(RegisterComponent, { className: "RegisterComponent", filePath: "src/app/components/register/register.component.ts", lineNumber: 13 });
})();

// src/app/components/logout/logout.component.ts
var LogoutComponent = class _LogoutComponent {
  auth;
  constructor(auth) {
    this.auth = auth;
  }
  ngOnInit() {
    this.auth.logout();
  }
  static \u0275fac = function LogoutComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _LogoutComponent)(\u0275\u0275directiveInject(AuthService));
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _LogoutComponent, selectors: [["app-logout"]], decls: 0, vars: 0, template: function LogoutComponent_Template(rf, ctx) {
  }, encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(LogoutComponent, [{
    type: Component,
    args: [{
      selector: "app-logout",
      template: ""
    }]
  }], () => [{ type: AuthService }], null);
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(LogoutComponent, { className: "LogoutComponent", filePath: "src/app/components/logout/logout.component.ts", lineNumber: 8 });
})();

// src/app/components/student-dashboard/student-dashboard.component.ts
var StudentDashboardComponent = class _StudentDashboardComponent {
  static \u0275fac = function StudentDashboardComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _StudentDashboardComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _StudentDashboardComponent, selectors: [["app-student-dashboard"]], decls: 2, vars: 0, template: function StudentDashboardComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "p");
      \u0275\u0275text(1, "student-dashboard works!");
      \u0275\u0275elementEnd();
    }
  }, encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(StudentDashboardComponent, [{
    type: Component,
    args: [{ selector: "app-student-dashboard", imports: [], template: "<p>student-dashboard works!</p>\r\n" }]
  }], null, null);
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(StudentDashboardComponent, { className: "StudentDashboardComponent", filePath: "src/app/components/student-dashboard/student-dashboard.component.ts", lineNumber: 9 });
})();

// src/app/components/home/home.component.ts
function HomeComponent_div_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 4)(1, "div", 5)(2, "div", 6)(3, "div")(4, "h1", 7);
    \u0275\u0275text(5);
    \u0275\u0275pipe(6, "titlecase");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(7, "p", 8);
    \u0275\u0275text(8);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(9, "button", 9);
    \u0275\u0275listener("click", function HomeComponent_div_1_Template_button_click_9_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.navigateToCreate());
    });
    \u0275\u0275element(10, "i", 10);
    \u0275\u0275text(11);
    \u0275\u0275pipe(12, "titlecase");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(13, "div", 11)(14, "div", 12)(15, "div", 13);
    \u0275\u0275element(16, "i", 14);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(17, "h3", 15);
    \u0275\u0275text(18, " Page Under Construction ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(19, "div", 16)(20, "p", 17);
    \u0275\u0275text(21);
    \u0275\u0275pipe(22, "titlecase");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(23, "p", 17);
    \u0275\u0275text(24);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(25, "div", 18)(26, "div", 19);
    \u0275\u0275element(27, "div", 20);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(28, "p", 21);
    \u0275\u0275text(29, "Development Progress: 75%");
    \u0275\u0275elementEnd()()()()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(5);
    \u0275\u0275textInterpolate1(" ", \u0275\u0275pipeBind1(6, 5, ctx_r1.hierarchySection), " Management ");
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate1(" Manage and organize your ", ctx_r1.hierarchySection, " efficiently ");
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate1(" Add New ", \u0275\u0275pipeBind1(12, 7, ctx_r1.hierarchySection), " ");
    \u0275\u0275advance(10);
    \u0275\u0275textInterpolate1(" The ", \u0275\u0275pipeBind1(22, 9, ctx_r1.hierarchySection), " listing page is currently being developed. ");
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate1(" In the meantime, you can add new ", ctx_r1.hierarchySection, " by clicking the button above. ");
  }
}
function HomeComponent_ng_template_2_div_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div")(1, "h1", 69);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" Welcome back, ", ctx_r1.userName, "! \u{1F44B} ");
  }
}
function HomeComponent_ng_template_2_ng_template_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "h1", 69);
    \u0275\u0275text(1, " Welcome to NexPrepAI Admin! \u{1F680} ");
    \u0275\u0275elementEnd();
  }
}
function HomeComponent_ng_template_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 22)(1, "div", 23)(2, "div", 24);
    \u0275\u0275template(3, HomeComponent_ng_template_2_div_3_Template, 3, 1, "div", 25)(4, HomeComponent_ng_template_2_ng_template_4_Template, 2, 0, "ng-template", null, 1, \u0275\u0275templateRefExtractor);
    \u0275\u0275elementStart(6, "p", 26);
    \u0275\u0275text(7, " Manage your educational content and monitor platform performance ");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(8, "div", 27)(9, "div", 28)(10, "div", 29)(11, "div")(12, "p", 30);
    \u0275\u0275text(13, "Total Questions");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(14, "p", 31);
    \u0275\u0275text(15, "1,247");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(16, "p", 32);
    \u0275\u0275element(17, "i", 33);
    \u0275\u0275text(18, " +12% from last month ");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(19, "div", 34);
    \u0275\u0275element(20, "i", 35);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(21, "div", 28)(22, "div", 29)(23, "div")(24, "p", 30);
    \u0275\u0275text(25, "Active Tests");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(26, "p", 31);
    \u0275\u0275text(27, "43");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(28, "p", 32);
    \u0275\u0275element(29, "i", 33);
    \u0275\u0275text(30, " +5% from last month ");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(31, "div", 36);
    \u0275\u0275element(32, "i", 37);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(33, "div", 28)(34, "div", 29)(35, "div")(36, "p", 30);
    \u0275\u0275text(37, "Total Users");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(38, "p", 31);
    \u0275\u0275text(39, "8,934");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(40, "p", 32);
    \u0275\u0275element(41, "i", 33);
    \u0275\u0275text(42, " +18% from last month ");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(43, "div", 38);
    \u0275\u0275element(44, "i", 39);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(45, "div", 28)(46, "div", 29)(47, "div")(48, "p", 30);
    \u0275\u0275text(49, "Completion Rate");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(50, "p", 31);
    \u0275\u0275text(51, "87%");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(52, "p", 40);
    \u0275\u0275element(53, "i", 41);
    \u0275\u0275text(54, " -2% from last month ");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(55, "div", 42);
    \u0275\u0275element(56, "i", 43);
    \u0275\u0275elementEnd()()()();
    \u0275\u0275elementStart(57, "div", 44)(58, "h2", 45);
    \u0275\u0275text(59, "Quick Actions");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(60, "div", 46)(61, "a", 47);
    \u0275\u0275listener("click", function HomeComponent_ng_template_2_Template_a_click_61_listener() {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.navigateToAddQuestion());
    });
    \u0275\u0275elementStart(62, "div", 48);
    \u0275\u0275element(63, "i", 49);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(64, "div")(65, "h3", 50);
    \u0275\u0275text(66, "Add Question");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(67, "p", 51);
    \u0275\u0275text(68, "Create new test questions");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(69, "a", 52)(70, "div", 53);
    \u0275\u0275element(71, "i", 54);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(72, "div")(73, "h3", 55);
    \u0275\u0275text(74, " \u2728 Enhanced Editor ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(75, "p", 56);
    \u0275\u0275text(76, "Math + Images + Rich Text");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(77, "a", 57);
    \u0275\u0275listener("click", function HomeComponent_ng_template_2_Template_a_click_77_listener() {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.navigateToCreateTest());
    });
    \u0275\u0275elementStart(78, "div", 58);
    \u0275\u0275element(79, "i", 59);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(80, "div")(81, "h3", 60);
    \u0275\u0275text(82, "Create Test");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(83, "p", 51);
    \u0275\u0275text(84, "Setup new test series");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(85, "a", 61);
    \u0275\u0275listener("click", function HomeComponent_ng_template_2_Template_a_click_85_listener() {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.navigateToAnalytics());
    });
    \u0275\u0275elementStart(86, "div", 62);
    \u0275\u0275element(87, "i", 63);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(88, "div")(89, "h3", 64);
    \u0275\u0275text(90, "View Analytics");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(91, "p", 51);
    \u0275\u0275text(92, "Monitor test series metrics");
    \u0275\u0275elementEnd()()()()();
    \u0275\u0275elementStart(93, "div", 65)(94, "h2", 15);
    \u0275\u0275text(95, "Getting Started");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(96, "p", 66);
    \u0275\u0275text(97, " Use the navigation menu above to access different sections of the admin panel. Here are some common tasks to get you started: ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(98, "ol", 67)(99, "li", 68)(100, "strong");
    \u0275\u0275text(101, "Manage Questions:");
    \u0275\u0275elementEnd();
    \u0275\u0275text(102, " Add, edit, or review questions in the Questions section ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(103, "li", 68)(104, "strong");
    \u0275\u0275text(105, "Create Test Series:");
    \u0275\u0275elementEnd();
    \u0275\u0275text(106, " Set up comprehensive test series for different exam types ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(107, "li", 68)(108, "strong");
    \u0275\u0275text(109, "Organize Content:");
    \u0275\u0275elementEnd();
    \u0275\u0275text(110, " Structure your content using Subjects, Topics, and Subtopics ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(111, "li", 68)(112, "strong");
    \u0275\u0275text(113, "Monitor Performance:");
    \u0275\u0275elementEnd();
    \u0275\u0275text(114, " Track user engagement and platform analytics ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(115, "li", 68)(116, "strong");
    \u0275\u0275text(117, "User Management:");
    \u0275\u0275elementEnd();
    \u0275\u0275text(118, " Manage user accounts and permissions (Admin/SuperAdmin only) ");
    \u0275\u0275elementEnd()()()();
  }
  if (rf & 2) {
    const genericWelcome_r4 = \u0275\u0275reference(5);
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(3);
    \u0275\u0275property("ngIf", ctx_r1.userName)("ngIfElse", genericWelcome_r4);
  }
}
var HomeComponent = class _HomeComponent {
  authService;
  router;
  route;
  userName = null;
  hierarchySection = null;
  constructor(authService, router, route) {
    this.authService = authService;
    this.router = router;
    this.route = route;
  }
  // Inject ActivatedRoute
  ngOnInit() {
    this.userName = this.authService.getUserName();
    this.route.data.subscribe((data) => {
      this.hierarchySection = data["hierarchySection"] || null;
    });
  }
  logout() {
    this.authService.logout();
    this.router.navigate(["/login"]);
  }
  navigateToCreate() {
    if (this.hierarchySection) {
      this.router.navigate([`/${this.hierarchySection}/new`]);
    }
  }
  navigateToAddQuestion() {
    this.router.navigate(["/add-question"]);
  }
  navigateToCreateTest() {
    this.router.navigate(["/test-series/create"]);
  }
  navigateToAnalytics() {
    this.router.navigate(["/test-series"]);
  }
  static \u0275fac = function HomeComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _HomeComponent)(\u0275\u0275directiveInject(AuthService), \u0275\u0275directiveInject(Router), \u0275\u0275directiveInject(ActivatedRoute));
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _HomeComponent, selectors: [["app-home"]], decls: 4, vars: 2, consts: [["defaultHome", ""], ["genericWelcome", ""], [1, "min-h-full"], ["class", "space-y-6", 4, "ngIf", "ngIfElse"], [1, "space-y-6"], [1, "bg-gradient-to-r", "from-primary-600", "to-primary-700", "rounded-xl", "shadow-medium", "p-6", "sm:p-8"], [1, "flex", "flex-col", "sm:flex-row", "sm:items-center", "sm:justify-between", "gap-4"], [1, "text-2xl", "sm:text-3xl", "font-bold", "text-white"], [1, "text-primary-100", "mt-2"], [1, "inline-flex", "items-center", "px-6", "py-3", "bg-white", "text-primary-700", "font-semibold", "rounded-lg", "shadow-soft", "hover:bg-gray-50", "hover:shadow-medium", "transition-all", "duration-200", "focus:outline-none", "focus:ring-2", "focus:ring-white", "focus:ring-offset-2", "focus:ring-offset-primary-600", 3, "click"], [1, "fas", "fa-plus", "text-sm", "mr-2"], [1, "bg-white", "rounded-xl", "shadow-soft", "border", "border-gray-100", "p-6", "sm:p-8"], [1, "text-center", "py-12"], [1, "mx-auto", "h-16", "w-16", "bg-warning-100", "rounded-full", "flex", "items-center", "justify-center", "mb-6"], [1, "fas", "fa-tools", "text-warning-600", "text-2xl"], [1, "text-xl", "font-semibold", "text-gray-900", "mb-4"], [1, "max-w-md", "mx-auto", "space-y-2"], [1, "text-gray-600"], [1, "mt-8", "max-w-xs", "mx-auto"], [1, "bg-gray-200", "rounded-full", "h-2"], [1, "bg-primary-600", "h-2", "rounded-full", "w-3/4", "transition-all", "duration-500"], [1, "text-sm", "text-gray-500", "mt-2"], [1, "space-y-8"], [1, "bg-gradient-to-r", "from-primary-600", "via-primary-700", "to-secondary-600", "rounded-xl", "shadow-medium", "p-6", "sm:p-8"], [1, "text-center"], [4, "ngIf", "ngIfElse"], [1, "text-primary-100", "text-lg"], [1, "grid", "grid-cols-1", "sm:grid-cols-2", "lg:grid-cols-4", "gap-6"], [1, "stat-card", "group", "hover:scale-105", "transition-transform", "duration-200"], [1, "flex", "items-center", "justify-between"], [1, "text-sm", "font-medium", "text-gray-600"], [1, "text-3xl", "font-bold", "text-gray-900"], [1, "text-sm", "text-success-600"], [1, "fas", "fa-arrow-up", "text-xs", "mr-1"], [1, "h-12", "w-12", "bg-primary-100", "rounded-lg", "flex", "items-center", "justify-center", "group-hover:bg-primary-200", "transition-colors", "duration-200"], [1, "fas", "fa-question-circle", "text-primary-600", "text-xl"], [1, "h-12", "w-12", "bg-secondary-100", "rounded-lg", "flex", "items-center", "justify-center", "group-hover:bg-secondary-200", "transition-colors", "duration-200"], [1, "fas", "fa-clipboard-list", "text-secondary-600", "text-xl"], [1, "h-12", "w-12", "bg-success-100", "rounded-lg", "flex", "items-center", "justify-center", "group-hover:bg-success-200", "transition-colors", "duration-200"], [1, "fas", "fa-users", "text-success-600", "text-xl"], [1, "text-sm", "text-warning-600"], [1, "fas", "fa-arrow-down", "text-xs", "mr-1"], [1, "h-12", "w-12", "bg-warning-100", "rounded-lg", "flex", "items-center", "justify-center", "group-hover:bg-warning-200", "transition-colors", "duration-200"], [1, "fas", "fa-chart-line", "text-warning-600", "text-xl"], [1, "bg-white", "rounded-xl", "shadow-soft", "border", "border-gray-100", "p-6"], [1, "text-xl", "font-semibold", "text-gray-900", "mb-6"], [1, "grid", "grid-cols-1", "sm:grid-cols-2", "lg:grid-cols-3", "gap-4"], ["routerLink", "/add-question", 1, "group", "flex", "items-center", "p-4", "bg-gray-50", "rounded-lg", "hover:bg-primary-50", "hover:border-primary-200", "border", "border-gray-200", "transition-all", "duration-200", "cursor-pointer", 3, "click"], [1, "h-10", "w-10", "bg-primary-100", "rounded-lg", "flex", "items-center", "justify-center", "group-hover:bg-primary-200", "transition-colors", "duration-200", "mr-3"], [1, "fas", "fa-plus", "text-primary-600"], [1, "font-medium", "text-gray-900", "group-hover:text-primary-700"], [1, "text-sm", "text-gray-500"], ["routerLink", "/question-editor", 1, "group", "flex", "items-center", "p-4", "bg-gradient-to-r", "from-purple-50", "to-blue-50", "rounded-lg", "hover:from-purple-100", "hover:to-blue-100", "border-2", "border-purple-200", "hover:border-purple-300", "transition-all", "duration-200", "cursor-pointer"], [1, "h-10", "w-10", "bg-gradient-to-r", "from-purple-500", "to-blue-500", "rounded-lg", "flex", "items-center", "justify-center", "group-hover:from-purple-600", "group-hover:to-blue-600", "transition-all", "duration-200", "mr-3"], [1, "fas", "fa-magic", "text-white"], [1, "font-medium", "text-gray-900", "group-hover:text-purple-700", "flex", "items-center", "gap-1"], [1, "text-sm", "text-purple-600"], ["routerLink", "/test-series/create", 1, "group", "flex", "items-center", "p-4", "bg-gray-50", "rounded-lg", "hover:bg-secondary-50", "hover:border-secondary-200", "border", "border-gray-200", "transition-all", "duration-200", "cursor-pointer", 3, "click"], [1, "h-10", "w-10", "bg-secondary-100", "rounded-lg", "flex", "items-center", "justify-center", "group-hover:bg-secondary-200", "transition-colors", "duration-200", "mr-3"], [1, "fas", "fa-clipboard-list", "text-secondary-600"], [1, "font-medium", "text-gray-900", "group-hover:text-secondary-700"], ["routerLink", "/test-series", 1, "group", "flex", "items-center", "p-4", "bg-gray-50", "rounded-lg", "hover:bg-success-50", "hover:border-success-200", "border", "border-gray-200", "transition-all", "duration-200", "cursor-pointer", 3, "click"], [1, "h-10", "w-10", "bg-success-100", "rounded-lg", "flex", "items-center", "justify-center", "group-hover:bg-success-200", "transition-colors", "duration-200", "mr-3"], [1, "fas", "fa-chart-bar", "text-success-600"], [1, "font-medium", "text-gray-900", "group-hover:text-success-700"], [1, "bg-gradient-to-br", "from-gray-50", "to-gray-100", "rounded-xl", "border", "border-gray-200", "p-6"], [1, "text-gray-600", "mb-6"], [1, "serial-list", "space-y-4"], [1, "text-gray-700"], [1, "text-3xl", "sm:text-4xl", "font-bold", "text-white", "mb-3"]], template: function HomeComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 2);
      \u0275\u0275template(1, HomeComponent_div_1_Template, 30, 11, "div", 3)(2, HomeComponent_ng_template_2_Template, 119, 2, "ng-template", null, 0, \u0275\u0275templateRefExtractor);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      const defaultHome_r5 = \u0275\u0275reference(3);
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", ctx.hierarchySection)("ngIfElse", defaultHome_r5);
    }
  }, dependencies: [CommonModule, NgIf, TitleCasePipe, RouterModule, RouterLink], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(HomeComponent, [{
    type: Component,
    args: [{ selector: "app-home", standalone: true, imports: [CommonModule, RouterModule], template: '<!-- Modern Tailwind CSS Home Dashboard -->\r\n<div class="min-h-full">\r\n  <!-- Hierarchy Section - Enhanced with modern design and responsive layout -->\r\n  <div *ngIf="hierarchySection; else defaultHome" class="space-y-6">\r\n    <!-- Section Header with gradient background and improved typography -->\r\n    <div class="bg-gradient-to-r from-primary-600 to-primary-700 rounded-xl shadow-medium p-6 sm:p-8">\r\n      <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">\r\n        <div>\r\n          <h1 class="text-2xl sm:text-3xl font-bold text-white">\r\n            {{ hierarchySection | titlecase }} Management\r\n          </h1>\r\n          <p class="text-primary-100 mt-2">\r\n            Manage and organize your {{ hierarchySection }} efficiently\r\n          </p>\r\n        </div>\r\n        <!-- Add button with enhanced styling -->\r\n        <button \r\n          (click)="navigateToCreate()"\r\n          class="inline-flex items-center px-6 py-3 bg-white text-primary-700 font-semibold rounded-lg shadow-soft hover:bg-gray-50 hover:shadow-medium transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-primary-600">\r\n          <i class="fas fa-plus text-sm mr-2"></i>\r\n          Add New {{ hierarchySection | titlecase }}\r\n        </button>\r\n      </div>\r\n    </div>\r\n    \r\n    <!-- Section Content with modern card design -->\r\n    <div class="bg-white rounded-xl shadow-soft border border-gray-100 p-6 sm:p-8">\r\n      <div class="text-center py-12">\r\n        <!-- Construction icon -->\r\n        <div class="mx-auto h-16 w-16 bg-warning-100 rounded-full flex items-center justify-center mb-6">\r\n          <i class="fas fa-tools text-warning-600 text-2xl"></i>\r\n        </div>\r\n        \r\n        <!-- Construction message with better typography -->\r\n        <h3 class="text-xl font-semibold text-gray-900 mb-4">\r\n          Page Under Construction\r\n        </h3>\r\n        <div class="max-w-md mx-auto space-y-2">\r\n          <p class="text-gray-600">\r\n            The {{ hierarchySection | titlecase }} listing page is currently being developed.\r\n          </p>\r\n          <p class="text-gray-600">\r\n            In the meantime, you can add new {{ hierarchySection }} by clicking the button above.\r\n          </p>\r\n        </div>\r\n        \r\n        <!-- Progress indicator -->\r\n        <div class="mt-8 max-w-xs mx-auto">\r\n          <div class="bg-gray-200 rounded-full h-2">\r\n            <div class="bg-primary-600 h-2 rounded-full w-3/4 transition-all duration-500"></div>\r\n          </div>\r\n          <p class="text-sm text-gray-500 mt-2">Development Progress: 75%</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  \r\n  <!-- Default Dashboard Home - Enhanced with modern layout and cards -->\r\n  <ng-template #defaultHome>\r\n    <div class="space-y-8">\r\n      <!-- Welcome Header with gradient background -->\r\n      <div class="bg-gradient-to-r from-primary-600 via-primary-700 to-secondary-600 rounded-xl shadow-medium p-6 sm:p-8">\r\n        <div class="text-center">\r\n          <div *ngIf="userName; else genericWelcome">\r\n            <h1 class="text-3xl sm:text-4xl font-bold text-white mb-3">\r\n              Welcome back, {{ userName }}! \u{1F44B}\r\n            </h1>\r\n          </div>\r\n          <ng-template #genericWelcome>\r\n            <h1 class="text-3xl sm:text-4xl font-bold text-white mb-3">\r\n              Welcome to NexPrepAI Admin! \u{1F680}\r\n            </h1>\r\n          </ng-template>\r\n          <p class="text-primary-100 text-lg">\r\n            Manage your educational content and monitor platform performance\r\n          </p>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Quick Stats Cards - Responsive grid layout -->\r\n      <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">\r\n        <!-- Total Questions Card -->\r\n        <div class="stat-card group hover:scale-105 transition-transform duration-200">\r\n          <div class="flex items-center justify-between">\r\n            <div>\r\n              <p class="text-sm font-medium text-gray-600">Total Questions</p>\r\n              <p class="text-3xl font-bold text-gray-900">1,247</p>\r\n              <p class="text-sm text-success-600">\r\n                <i class="fas fa-arrow-up text-xs mr-1"></i>\r\n                +12% from last month\r\n              </p>\r\n            </div>\r\n            <div class="h-12 w-12 bg-primary-100 rounded-lg flex items-center justify-center group-hover:bg-primary-200 transition-colors duration-200">\r\n              <i class="fas fa-question-circle text-primary-600 text-xl"></i>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Active Tests Card -->\r\n        <div class="stat-card group hover:scale-105 transition-transform duration-200">\r\n          <div class="flex items-center justify-between">\r\n            <div>\r\n              <p class="text-sm font-medium text-gray-600">Active Tests</p>\r\n              <p class="text-3xl font-bold text-gray-900">43</p>\r\n              <p class="text-sm text-success-600">\r\n                <i class="fas fa-arrow-up text-xs mr-1"></i>\r\n                +5% from last month\r\n              </p>\r\n            </div>\r\n            <div class="h-12 w-12 bg-secondary-100 rounded-lg flex items-center justify-center group-hover:bg-secondary-200 transition-colors duration-200">\r\n              <i class="fas fa-clipboard-list text-secondary-600 text-xl"></i>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Total Users Card -->\r\n        <div class="stat-card group hover:scale-105 transition-transform duration-200">\r\n          <div class="flex items-center justify-between">\r\n            <div>\r\n              <p class="text-sm font-medium text-gray-600">Total Users</p>\r\n              <p class="text-3xl font-bold text-gray-900">8,934</p>\r\n              <p class="text-sm text-success-600">\r\n                <i class="fas fa-arrow-up text-xs mr-1"></i>\r\n                +18% from last month\r\n              </p>\r\n            </div>\r\n            <div class="h-12 w-12 bg-success-100 rounded-lg flex items-center justify-center group-hover:bg-success-200 transition-colors duration-200">\r\n              <i class="fas fa-users text-success-600 text-xl"></i>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Completion Rate Card -->\r\n        <div class="stat-card group hover:scale-105 transition-transform duration-200">\r\n          <div class="flex items-center justify-between">\r\n            <div>\r\n              <p class="text-sm font-medium text-gray-600">Completion Rate</p>\r\n              <p class="text-3xl font-bold text-gray-900">87%</p>\r\n              <p class="text-sm text-warning-600">\r\n                <i class="fas fa-arrow-down text-xs mr-1"></i>\r\n                -2% from last month\r\n              </p>\r\n            </div>\r\n            <div class="h-12 w-12 bg-warning-100 rounded-lg flex items-center justify-center group-hover:bg-warning-200 transition-colors duration-200">\r\n              <i class="fas fa-chart-line text-warning-600 text-xl"></i>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Quick Actions Section -->\r\n      <div class="bg-white rounded-xl shadow-soft border border-gray-100 p-6">\r\n        <h2 class="text-xl font-semibold text-gray-900 mb-6">Quick Actions</h2>        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">          <!-- Add Question Action -->\r\n          <a routerLink="/add-question" \r\n             (click)="navigateToAddQuestion()"\r\n             class="group flex items-center p-4 bg-gray-50 rounded-lg hover:bg-primary-50 hover:border-primary-200 border border-gray-200 transition-all duration-200 cursor-pointer">\r\n            <div class="h-10 w-10 bg-primary-100 rounded-lg flex items-center justify-center group-hover:bg-primary-200 transition-colors duration-200 mr-3">\r\n              <i class="fas fa-plus text-primary-600"></i>\r\n            </div>\r\n            <div>\r\n              <h3 class="font-medium text-gray-900 group-hover:text-primary-700">Add Question</h3>\r\n              <p class="text-sm text-gray-500">Create new test questions</p>\r\n            </div>\r\n          </a>\r\n\r\n          <!-- Enhanced Question Editor Action -->\r\n          <a routerLink="/question-editor" \r\n             class="group flex items-center p-4 bg-gradient-to-r from-purple-50 to-blue-50 rounded-lg hover:from-purple-100 hover:to-blue-100 border-2 border-purple-200 hover:border-purple-300 transition-all duration-200 cursor-pointer">\r\n            <div class="h-10 w-10 bg-gradient-to-r from-purple-500 to-blue-500 rounded-lg flex items-center justify-center group-hover:from-purple-600 group-hover:to-blue-600 transition-all duration-200 mr-3">\r\n              <i class="fas fa-magic text-white"></i>\r\n            </div>\r\n            <div>\r\n              <h3 class="font-medium text-gray-900 group-hover:text-purple-700 flex items-center gap-1">\r\n                \u2728 Enhanced Editor\r\n              </h3>\r\n              <p class="text-sm text-purple-600">Math + Images + Rich Text</p>\r\n            </div>\r\n          </a>\r\n\r\n          <!-- Create Test Series Action -->\r\n          <a routerLink="/test-series/create" \r\n             (click)="navigateToCreateTest()"\r\n             class="group flex items-center p-4 bg-gray-50 rounded-lg hover:bg-secondary-50 hover:border-secondary-200 border border-gray-200 transition-all duration-200 cursor-pointer">\r\n            <div class="h-10 w-10 bg-secondary-100 rounded-lg flex items-center justify-center group-hover:bg-secondary-200 transition-colors duration-200 mr-3">\r\n              <i class="fas fa-clipboard-list text-secondary-600"></i>\r\n            </div>\r\n            <div>\r\n              <h3 class="font-medium text-gray-900 group-hover:text-secondary-700">Create Test</h3>\r\n              <p class="text-sm text-gray-500">Setup new test series</p>\r\n            </div>\r\n          </a>          <!-- View Analytics Action -->\r\n          <a routerLink="/test-series" \r\n             (click)="navigateToAnalytics()"\r\n             class="group flex items-center p-4 bg-gray-50 rounded-lg hover:bg-success-50 hover:border-success-200 border border-gray-200 transition-all duration-200 cursor-pointer">\r\n            <div class="h-10 w-10 bg-success-100 rounded-lg flex items-center justify-center group-hover:bg-success-200 transition-colors duration-200 mr-3">\r\n              <i class="fas fa-chart-bar text-success-600"></i>\r\n            </div>\r\n            <div>\r\n              <h3 class="font-medium text-gray-900 group-hover:text-success-700">View Analytics</h3>\r\n              <p class="text-sm text-gray-500">Monitor test series metrics</p>\r\n            </div>\r\n          </a>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Getting Started Guide -->\r\n      <div class="bg-gradient-to-br from-gray-50 to-gray-100 rounded-xl border border-gray-200 p-6">\r\n        <h2 class="text-xl font-semibold text-gray-900 mb-4">Getting Started</h2>\r\n        <p class="text-gray-600 mb-6">\r\n          Use the navigation menu above to access different sections of the admin panel. \r\n          Here are some common tasks to get you started:\r\n        </p>\r\n        \r\n        <!-- Step-by-step guide -->\r\n        <ol class="serial-list space-y-4">\r\n          <li class="text-gray-700">\r\n            <strong>Manage Questions:</strong> Add, edit, or review questions in the Questions section\r\n          </li>\r\n          <li class="text-gray-700">\r\n            <strong>Create Test Series:</strong> Set up comprehensive test series for different exam types\r\n          </li>\r\n          <li class="text-gray-700">\r\n            <strong>Organize Content:</strong> Structure your content using Subjects, Topics, and Subtopics\r\n          </li>\r\n          <li class="text-gray-700">\r\n            <strong>Monitor Performance:</strong> Track user engagement and platform analytics\r\n          </li>\r\n          <li class="text-gray-700">\r\n            <strong>User Management:</strong> Manage user accounts and permissions (Admin/SuperAdmin only)\r\n          </li>\r\n        </ol>\r\n      </div>\r\n    </div>\r\n  </ng-template>\r\n</div>\r\n' }]
  }], () => [{ type: AuthService }, { type: Router }, { type: ActivatedRoute }], null);
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(HomeComponent, { className: "HomeComponent", filePath: "src/app/components/home/home.component.ts", lineNumber: 14 });
})();

// src/app/services/test-series.service.ts
var TestSeriesService = class _TestSeriesService {
  http;
  base = `${environment.apiUrl}/testSeries`;
  /**
   * @constructor
   * @description Initializes the TestSeriesService with HTTP client dependency
   * @param {HttpClient} http - Angular HTTP client for API communication
   */
  constructor(http) {
    this.http = http;
  }
  /**
   * @method getSeries
   * @description Retrieves complete list of all test series with populated references
   * @returns {Observable<TestSeries[]>} Observable stream of test series array
   *
   * @example
   * ```typescript
   * // Load and display all test series
   * this.testSeriesService.getSeries().subscribe({
   *   next: (series) => {
   *     console.log(`Loaded ${series.length} test series`);
   *     this.seriesList = series;
   *     this.groupSeriesByFamily();
   *   },
   *   error: (error) => {
   *     console.error('Failed to load test series:', error);
   *     this.showErrorMessage('Unable to load test series');
   *   }
   * });
   * ```
   */
  getSeries() {
    return this.http.get(this.base);
  }
  /**
   * @method create
   * @description Creates a new test series with comprehensive configuration
   * @param {Partial<TestSeries>} payload - Test series configuration data
   * @returns {Observable<TestSeries>} Observable of created test series
   *
   * @example
   * ```typescript
   * // Create multi-section test with question pools
   * const testConfig: Partial<TestSeries> = {
   *   title: 'NEET Practice Test - Biology Focus',
   *   duration: 180,
   *   totalMarks: 720,
   *   mode: 'practice',
   *   maxAttempts: 5,
   *   randomizeSectionOrder: false,
   *   sections: [
   *     {
   *       title: 'Biology',
   *       order: 1,
   *       questions: [],
   *       questionPool: ['60f1b2c3d4e5f6789abcdef0', '60f1b2c3d4e5f6789abcdef1'],
   *       questionsToSelectFromPool: 45,
   *       randomizeQuestionOrderInSection: true
   *     },
   *     {
   *       title: 'Chemistry',
   *       order: 2,
   *       questions: [],
   *       questionPool: ['60f1b2c3d4e5f6789abcdef2', '60f1b2c3d4e5f6789abcdef3'],
   *       questionsToSelectFromPool: 45,
   *       randomizeQuestionOrderInSection: true
   *     }
   *   ]
   * };
   *
   * this.testSeriesService.create(testConfig).subscribe({
   *   next: (created) => {
   *     console.log('Test series created successfully:', created._id);
   *     this.router.navigate(['/admin/test-series', created._id]);
   *   },
   *   error: (error) => {
   *     console.error('Failed to create test series:', error);
   *     this.handleCreationError(error);
   *   }
   * });
   * ```
   */
  create(payload) {
    return this.http.post(`${this.base}/create`, payload);
  }
  /**
   * @method update
   * @description Updates an existing test series with new configuration
   * @param {string} id - Test series unique identifier
   * @param {Partial<TestSeries>} payload - Updated test series data
   * @returns {Observable<TestSeries>} Observable of updated test series
   *
   * @example
   * ```typescript
   * // Update test series timing and settings
   * const updates: Partial<TestSeries> = {
   *   startAt: new Date('2024-06-15T09:00:00Z'),
   *   endAt: new Date('2024-06-15T12:00:00Z'),
   *   maxAttempts: 2,
   *   mode: 'live'
   * };
   *
   * this.testSeriesService.update(seriesId, updates).subscribe({
   *   next: (updated) => {
   *     console.log('Test series updated:', updated.title);
   *     this.refreshSeriesData();
   *   },
   *   error: (error) => {
   *     console.error('Update failed:', error);
   *     this.showUpdateError(error);
   *   }
   * });
   *
   * // Add new section to existing test series
   * const newSection = {
   *   sections: [
   *     ...existingSeries.sections,
   *     {
   *       title: 'Mathematics',
   *       order: 3,
   *       questions: [],
   *       questionPool: mathQuestionIds,
   *       questionsToSelectFromPool: 30,
   *       randomizeQuestionOrderInSection: false
   *     }
   *   ]
   * };
   *
   * this.testSeriesService.update(seriesId, newSection).subscribe({
   *   next: (updated) => console.log('Section added successfully'),
   *   error: (error) => console.error('Failed to add section:', error)
   * });
   * ```
   */
  update(id, payload) {
    return this.http.put(`${this.base}/${id}`, payload);
  }
  static \u0275fac = function TestSeriesService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _TestSeriesService)(\u0275\u0275inject(HttpClient));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _TestSeriesService, factory: _TestSeriesService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TestSeriesService, [{
    type: Injectable,
    args: [{ providedIn: "root" }]
  }], () => [{ type: HttpClient }], null);
})();

// src/app/components/test-series-list/test-series-list.component.ts
function TestSeriesListComponent_div_7_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 7);
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(1, "svg", 8);
    \u0275\u0275element(2, "path", 9);
    \u0275\u0275elementEnd();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(3, "h3", 10);
    \u0275\u0275text(4, "No Test Series Found");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(5, "p", 11);
    \u0275\u0275text(6, "Get started by creating your first test series to organize your questions.");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(7, "button", 12);
    \u0275\u0275text(8, " Create Test Series ");
    \u0275\u0275elementEnd()();
  }
}
function TestSeriesListComponent_div_8_div_1_div_23_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 34)(1, "div", 35)(2, "div", 36)(3, "div", 37)(4, "h3", 38);
    \u0275\u0275text(5);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(6, "p", 39);
    \u0275\u0275text(7);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(8, "div", 40)(9, "div", 41);
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(10, "svg", 42);
    \u0275\u0275element(11, "path", 9);
    \u0275\u0275elementEnd()()()()();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(12, "div", 43)(13, "div", 44)(14, "div", 45)(15, "div", 46);
    \u0275\u0275text(16);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(17, "div", 47);
    \u0275\u0275text(18, "Minutes");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(19, "div", 45)(20, "div", 46);
    \u0275\u0275text(21);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(22, "div", 47);
    \u0275\u0275text(23, "Total Marks");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(24, "div", 48)(25, "div", 49)(26, "span", 50);
    \u0275\u0275text(27, "Mode:");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(28, "span", 51);
    \u0275\u0275text(29);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(30, "div", 49)(31, "span", 50);
    \u0275\u0275text(32, "Max Attempts:");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(33, "span", 52);
    \u0275\u0275text(34);
    \u0275\u0275elementEnd()()()();
    \u0275\u0275elementStart(35, "div", 53)(36, "div", 54)(37, "button", 55);
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(38, "svg", 56);
    \u0275\u0275element(39, "path", 57)(40, "path", 58);
    \u0275\u0275elementEnd();
    \u0275\u0275text(41, " View ");
    \u0275\u0275elementEnd();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(42, "button", 59);
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(43, "svg", 56);
    \u0275\u0275element(44, "path", 60);
    \u0275\u0275elementEnd();
    \u0275\u0275text(45, " Edit ");
    \u0275\u0275elementEnd()();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(46, "div", 61)(47, "button", 62);
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(48, "svg", 63);
    \u0275\u0275element(49, "path", 64);
    \u0275\u0275elementEnd()()()()();
  }
  if (rf & 2) {
    const s_r1 = ctx.$implicit;
    const i_r2 = ctx.index;
    \u0275\u0275advance(5);
    \u0275\u0275textInterpolate(s_r1.title);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1("Test Series ", i_r2 + 1, "");
    \u0275\u0275advance(9);
    \u0275\u0275textInterpolate(s_r1.duration);
    \u0275\u0275advance(5);
    \u0275\u0275textInterpolate(s_r1.totalMarks);
    \u0275\u0275advance(7);
    \u0275\u0275property("ngClass", s_r1.mode === "practice" ? "bg-blue-100 text-blue-800" : "bg-green-100 text-green-800");
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", s_r1.mode, " ");
    \u0275\u0275advance(5);
    \u0275\u0275textInterpolate(s_r1.maxAttempts);
  }
}
function TestSeriesListComponent_div_8_div_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 15)(1, "div", 16)(2, "div", 17)(3, "div", 18)(4, "div", 19)(5, "div", 20);
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(6, "svg", 21);
    \u0275\u0275element(7, "path", 22);
    \u0275\u0275elementEnd()()();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(8, "div", 23)(9, "h2", 24);
    \u0275\u0275text(10);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(11, "p", 25);
    \u0275\u0275text(12);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(13, "div", 26)(14, "button", 27);
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(15, "svg", 28);
    \u0275\u0275element(16, "path", 29);
    \u0275\u0275elementEnd();
    \u0275\u0275text(17, " Filter ");
    \u0275\u0275elementEnd();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(18, "button", 30);
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(19, "svg", 28);
    \u0275\u0275element(20, "path", 31);
    \u0275\u0275elementEnd();
    \u0275\u0275text(21, " Add Series ");
    \u0275\u0275elementEnd()()()();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(22, "div", 32);
    \u0275\u0275template(23, TestSeriesListComponent_div_8_div_1_div_23_Template, 50, 7, "div", 33);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const family_r3 = ctx.$implicit;
    const ctx_r3 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(10);
    \u0275\u0275textInterpolate(family_r3);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1("", ctx_r3.groupedSeries[family_r3].length, " test series available");
    \u0275\u0275advance(11);
    \u0275\u0275property("ngForOf", ctx_r3.groupedSeries[family_r3]);
  }
}
function TestSeriesListComponent_div_8_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 13);
    \u0275\u0275template(1, TestSeriesListComponent_div_8_div_1_Template, 24, 3, "div", 14);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("ngForOf", ctx_r3.familyGroups);
  }
}
var TestSeriesListComponent = class _TestSeriesListComponent {
  tsSvc;
  seriesList = [];
  groupedSeries = {};
  constructor(tsSvc) {
    this.tsSvc = tsSvc;
  }
  loadAllSeries() {
    this.tsSvc.getSeries().subscribe({
      next: (list) => {
        this.seriesList = list;
        this.groupSeriesByFamily();
      },
      error: (err) => console.error("Failed to load series", err)
    });
  }
  groupSeriesByFamily() {
    this.groupedSeries = this.seriesList.reduce((acc, series) => {
      const familyName = typeof series.family === "object" && series.family?.name ? series.family.name : "Uncategorized";
      if (!acc[familyName]) {
        acc[familyName] = [];
      }
      acc[familyName].push(series);
      return acc;
    }, {});
  }
  // Helper to get keys from groupedSeries for the template
  get familyGroups() {
    return Object.keys(this.groupedSeries);
  }
  ngOnInit() {
    this.loadAllSeries();
  }
  static \u0275fac = function TestSeriesListComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _TestSeriesListComponent)(\u0275\u0275directiveInject(TestSeriesService));
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _TestSeriesListComponent, selectors: [["app-test-series-list"]], decls: 9, vars: 2, consts: [[1, "min-h-screen", "bg-gray-50", "py-6", "px-4", "sm:px-6", "lg:px-8"], [1, "max-w-7xl", "mx-auto"], [1, "mb-8"], [1, "text-3xl", "font-bold", "text-gray-900", "mb-2"], [1, "text-gray-600"], ["class", "bg-white rounded-xl shadow-sm border border-gray-200 p-12 text-center", 4, "ngIf"], ["class", "space-y-8", 4, "ngIf"], [1, "bg-white", "rounded-xl", "shadow-sm", "border", "border-gray-200", "p-12", "text-center"], ["fill", "none", "stroke", "currentColor", "viewBox", "0 0 24 24", 1, "w-16", "h-16", "text-gray-300", "mx-auto", "mb-4"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"], [1, "text-lg", "font-semibold", "text-gray-900", "mb-2"], [1, "text-gray-600", "mb-6"], [1, "btn-primary", "px-6", "py-3", "bg-primary-600", "text-white", "rounded-lg", "font-semibold", "hover:bg-primary-700", "focus:outline-none", "focus:ring-2", "focus:ring-primary-500", "focus:ring-offset-2", "transition-colors"], [1, "space-y-8"], ["class", "family-group", 4, "ngFor", "ngForOf"], [1, "family-group"], [1, "mb-6"], [1, "flex", "items-center", "justify-between"], [1, "flex", "items-center"], [1, "flex-shrink-0"], [1, "w-10", "h-10", "bg-gradient-to-r", "from-primary-500", "to-secondary-500", "rounded-lg", "flex", "items-center", "justify-center"], ["fill", "none", "stroke", "currentColor", "viewBox", "0 0 24 24", 1, "w-6", "h-6", "text-white"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"], [1, "ml-4"], [1, "text-xl", "font-bold", "text-gray-900"], [1, "text-sm", "text-gray-600"], [1, "flex", "items-center", "space-x-3"], [1, "inline-flex", "items-center", "px-3", "py-2", "text-sm", "font-medium", "text-gray-700", "bg-white", "border", "border-gray-300", "rounded-md", "hover:bg-gray-50", "focus:outline-none", "focus:ring-2", "focus:ring-primary-500", "focus:ring-offset-2", "transition-colors"], ["fill", "none", "stroke", "currentColor", "viewBox", "0 0 24 24", 1, "w-4", "h-4", "mr-1"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4"], [1, "inline-flex", "items-center", "px-3", "py-2", "text-sm", "font-medium", "text-white", "bg-primary-600", "border", "border-transparent", "rounded-md", "hover:bg-primary-700", "focus:outline-none", "focus:ring-2", "focus:ring-primary-500", "focus:ring-offset-2", "transition-colors"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M12 6v6m0 0v6m0-6h6m-6 0H6"], [1, "grid", "grid-cols-1", "md:grid-cols-2", "lg:grid-cols-3", "xl:grid-cols-4", "gap-6"], ["class", "test-series-card bg-white rounded-xl shadow-sm border border-gray-200 hover:shadow-md hover:border-gray-300 transition-all duration-200 overflow-hidden group", 4, "ngFor", "ngForOf"], [1, "test-series-card", "bg-white", "rounded-xl", "shadow-sm", "border", "border-gray-200", "hover:shadow-md", "hover:border-gray-300", "transition-all", "duration-200", "overflow-hidden", "group"], [1, "p-6", "pb-4"], [1, "flex", "items-start", "justify-between", "mb-3"], [1, "flex-1"], [1, "text-lg", "font-semibold", "text-gray-900", "mb-1", "group-hover:text-primary-600", "transition-colors"], [1, "text-sm", "text-gray-500"], [1, "flex-shrink-0", "ml-3"], [1, "w-8", "h-8", "bg-primary-100", "rounded-lg", "flex", "items-center", "justify-center"], ["fill", "none", "stroke", "currentColor", "viewBox", "0 0 24 24", 1, "w-4", "h-4", "text-primary-600"], [1, "px-6", "pb-4"], [1, "grid", "grid-cols-2", "gap-3", "mb-4"], [1, "text-center", "p-3", "bg-gray-50", "rounded-lg"], [1, "text-lg", "font-semibold", "text-gray-900"], [1, "text-xs", "text-gray-500"], [1, "space-y-2", "mb-4"], [1, "flex", "items-center", "justify-between", "text-sm"], [1, "text-gray-500"], [1, "inline-flex", "items-center", "px-2.5", "py-0.5", "rounded-full", "text-xs", "font-medium", 3, "ngClass"], [1, "font-medium", "text-gray-900"], [1, "px-6", "py-4", "bg-gray-50", "border-t", "border-gray-100", "flex", "items-center", "justify-between"], [1, "flex", "items-center", "space-x-2"], [1, "inline-flex", "items-center", "px-3", "py-1.5", "text-xs", "font-medium", "text-blue-700", "bg-blue-100", "rounded-md", "hover:bg-blue-200", "transition-colors"], ["fill", "none", "stroke", "currentColor", "viewBox", "0 0 24 24", 1, "w-3", "h-3", "mr-1"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M15 12a3 3 0 11-6 0 3 3 0 016 0z"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"], [1, "inline-flex", "items-center", "px-3", "py-1.5", "text-xs", "font-medium", "text-green-700", "bg-green-100", "rounded-md", "hover:bg-green-200", "transition-colors"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"], [1, "relative"], [1, "inline-flex", "items-center", "p-1.5", "text-gray-400", "hover:text-gray-600", "focus:outline-none", "focus:ring-2", "focus:ring-primary-500", "focus:ring-offset-2", "rounded-md", "transition-colors"], ["fill", "none", "stroke", "currentColor", "viewBox", "0 0 24 24", 1, "w-4", "h-4"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z"]], template: function TestSeriesListComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1)(2, "div", 2)(3, "h1", 3);
      \u0275\u0275text(4, "Test Series Management");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(5, "p", 4);
      \u0275\u0275text(6, "Organize and manage your test series collection");
      \u0275\u0275elementEnd()();
      \u0275\u0275template(7, TestSeriesListComponent_div_7_Template, 9, 0, "div", 5)(8, TestSeriesListComponent_div_8_Template, 2, 1, "div", 6);
      \u0275\u0275elementEnd()();
    }
    if (rf & 2) {
      \u0275\u0275advance(7);
      \u0275\u0275property("ngIf", !ctx.seriesList.length);
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", ctx.seriesList.length);
    }
  }, dependencies: [CommonModule, NgClass, NgForOf, NgIf, RouterModule], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TestSeriesListComponent, [{
    type: Component,
    args: [{ standalone: true, selector: "app-test-series-list", imports: [CommonModule, RouterModule], template: `<!-- Modern Test Series List with Tailwind CSS -->\r
<div class="min-h-screen bg-gray-50 py-6 px-4 sm:px-6 lg:px-8">\r
  <div class="max-w-7xl mx-auto">\r
    \r
    <!-- Page Header -->\r
    <div class="mb-8">\r
      <h1 class="text-3xl font-bold text-gray-900 mb-2">Test Series Management</h1>\r
      <p class="text-gray-600">Organize and manage your test series collection</p>\r
    </div>\r
\r
    <!-- Empty State -->\r
    <div *ngIf="!seriesList.length" class="bg-white rounded-xl shadow-sm border border-gray-200 p-12 text-center">\r
      <svg class="w-16 h-16 text-gray-300 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>\r
      </svg>\r
      <h3 class="text-lg font-semibold text-gray-900 mb-2">No Test Series Found</h3>\r
      <p class="text-gray-600 mb-6">Get started by creating your first test series to organize your questions.</p>\r
      <button class="btn-primary px-6 py-3 bg-primary-600 text-white rounded-lg font-semibold hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 transition-colors">\r
        Create Test Series\r
      </button>\r
    </div>\r
\r
    <!-- Test Series Groups -->\r
    <div *ngIf="seriesList.length" class="space-y-8">\r
      <div *ngFor="let family of familyGroups" class="family-group">\r
        \r
        <!-- Family Header -->\r
        <div class="mb-6">\r
          <div class="flex items-center justify-between">\r
            <div class="flex items-center">\r
              <div class="flex-shrink-0">\r
                <div class="w-10 h-10 bg-gradient-to-r from-primary-500 to-secondary-500 rounded-lg flex items-center justify-center">\r
                  <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>\r
                  </svg>\r
                </div>\r
              </div>\r
              <div class="ml-4">\r
                <h2 class="text-xl font-bold text-gray-900">{{ family }}</h2>\r
                <p class="text-sm text-gray-600">{{ groupedSeries[family].length }} test series available</p>\r
              </div>\r
            </div>\r
            \r
            <!-- Family Actions -->\r
            <div class="flex items-center space-x-3">\r
              <button class="inline-flex items-center px-3 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 transition-colors">\r
                <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4"></path>\r
                </svg>\r
                Filter\r
              </button>\r
              <button class="inline-flex items-center px-3 py-2 text-sm font-medium text-white bg-primary-600 border border-transparent rounded-md hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 transition-colors">\r
                <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>\r
                </svg>\r
                Add Series\r
              </button>\r
            </div>\r
          </div>\r
        </div>\r
\r
        <!-- Test Series Grid -->\r
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">\r
          <div *ngFor="let s of groupedSeries[family]; let i = index" \r
               class="test-series-card bg-white rounded-xl shadow-sm border border-gray-200 hover:shadow-md hover:border-gray-300 transition-all duration-200 overflow-hidden group">\r
            \r
            <!-- Card Header -->\r
            <div class="p-6 pb-4">\r
              <div class="flex items-start justify-between mb-3">\r
                <div class="flex-1">\r
                  <h3 class="text-lg font-semibold text-gray-900 mb-1 group-hover:text-primary-600 transition-colors">{{ s.title }}</h3>\r
                  <p class="text-sm text-gray-500">Test Series {{ i + 1 }}</p>\r
                </div>\r
                <div class="flex-shrink-0 ml-3">\r
                  <div class="w-8 h-8 bg-primary-100 rounded-lg flex items-center justify-center">\r
                    <svg class="w-4 h-4 text-primary-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>\r
                    </svg>\r
                  </div>\r
                </div>\r
              </div>\r
            </div>\r
\r
            <!-- Card Content -->\r
            <div class="px-6 pb-4">\r
              <!-- Stats Grid -->\r
              <div class="grid grid-cols-2 gap-3 mb-4">\r
                <div class="text-center p-3 bg-gray-50 rounded-lg">\r
                  <div class="text-lg font-semibold text-gray-900">{{ s.duration }}</div>\r
                  <div class="text-xs text-gray-500">Minutes</div>\r
                </div>\r
                <div class="text-center p-3 bg-gray-50 rounded-lg">\r
                  <div class="text-lg font-semibold text-gray-900">{{ s.totalMarks }}</div>\r
                  <div class="text-xs text-gray-500">Total Marks</div>\r
                </div>\r
              </div>\r
\r
              <!-- Additional Info -->\r
              <div class="space-y-2 mb-4">\r
                <div class="flex items-center justify-between text-sm">\r
                  <span class="text-gray-500">Mode:</span>\r
                  <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium"\r
                        [ngClass]="s.mode === 'practice' ? 'bg-blue-100 text-blue-800' : 'bg-green-100 text-green-800'">\r
                    {{ s.mode }}\r
                  </span>\r
                </div>\r
                <div class="flex items-center justify-between text-sm">\r
                  <span class="text-gray-500">Max Attempts:</span>\r
                  <span class="font-medium text-gray-900">{{ s.maxAttempts }}</span>\r
                </div>\r
              </div>\r
            </div>\r
\r
            <!-- Card Actions -->\r
            <div class="px-6 py-4 bg-gray-50 border-t border-gray-100 flex items-center justify-between">\r
              <div class="flex items-center space-x-2">\r
                <button class="inline-flex items-center px-3 py-1.5 text-xs font-medium text-blue-700 bg-blue-100 rounded-md hover:bg-blue-200 transition-colors">\r
                  <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>\r
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>\r
                  </svg>\r
                  View\r
                </button>\r
                <button class="inline-flex items-center px-3 py-1.5 text-xs font-medium text-green-700 bg-green-100 rounded-md hover:bg-green-200 transition-colors">\r
                  <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>\r
                  </svg>\r
                  Edit\r
                </button>\r
              </div>\r
              \r
              <!-- Dropdown Menu -->\r
              <div class="relative">\r
                <button class="inline-flex items-center p-1.5 text-gray-400 hover:text-gray-600 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 rounded-md transition-colors">\r
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z"></path>\r
                  </svg>\r
                </button>\r
              </div>\r
            </div>\r
          </div>\r
        </div>\r
      </div>\r
    </div>\r
  </div>\r
</div>\r
` }]
  }], () => [{ type: TestSeriesService }], null);
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(TestSeriesListComponent, { className: "TestSeriesListComponent", filePath: "src/app/components/test-series-list/test-series-list.component.ts", lineNumber: 13 });
})();

// src/app/pipes/highlight.pipe.ts
var HighlightPipe = class _HighlightPipe {
  sanitizer;
  constructor(sanitizer) {
    this.sanitizer = sanitizer;
  }
  transform(value, args) {
    if (!args || args.trim() === "" || !value) {
      return value || "";
    }
    const searchTerm = String(args).trim();
    if (searchTerm === "") {
      return value;
    }
    const re = new RegExp(searchTerm.replace(/[.*+?^${}()|[\]\\]/g, "\\\\$&"), "gi");
    const match2 = value.match(re);
    if (!match2) {
      return value;
    }
    const highlightedText = value.replace(re, (matched) => `<strong class="search-highlight">${matched}</strong>`);
    return this.sanitizer.bypassSecurityTrustHtml(highlightedText);
  }
  static \u0275fac = function HighlightPipe_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _HighlightPipe)(\u0275\u0275directiveInject(DomSanitizer, 16));
  };
  static \u0275pipe = /* @__PURE__ */ \u0275\u0275definePipe({ name: "highlight", type: _HighlightPipe, pure: true });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(HighlightPipe, [{
    type: Pipe,
    args: [{
      name: "highlight",
      standalone: true
    }]
  }], () => [{ type: DomSanitizer }], null);
})();

// src/app/services/question.service.ts
var QuestionService = class _QuestionService {
  http;
  /** @private Base API URL from environment configuration */
  apiUrl = environment.apiUrl;
  // ✅ Correct key used
  /**
   * @constructor
   * @description Initializes the QuestionService with HTTP client dependency
   * @param {HttpClient} http - Angular HTTP client for API communication
   */
  constructor(http) {
    this.http = http;
  }
  /**
   * @method addQuestion
   * @description Creates a new question in the system
   * @param {any} questionData - Question data object containing all question details
   * @param {string} questionData.questionText - The question text
   * @param {string} questionData.difficulty - Question difficulty level (easy/medium/hard)
   * @param {string} questionData.type - Question type (MCQ/MSQ/Integer/True-False)
   * @param {string} questionData.branch - Branch ID
   * @param {string} questionData.subject - Subject ID
   * @param {string} questionData.topic - Topic ID
   * @param {string} questionData.subtopic - Subtopic ID
   * @param {Array} questionData.options - Array of answer options
   * @param {Array} questionData.correctOptions - Array of correct option indices
   * @param {string} [questionData.explanation] - Optional explanation for the answer
   * @returns {Observable<any>} Observable containing the created question response
   * @throws {HttpErrorResponse} When authentication fails or validation errors occur
   *
   * @example
   * ```typescript
   * const questionData = {
   *   questionText: "What is the capital of France?",
   *   difficulty: "easy",
   *   type: "MCQ",
   *   branch: "605c7b9f1a2b3c4d5e6f7890",
   *   subject: "605c7b9f1a2b3c4d5e6f7891",
   *   topic: "605c7b9f1a2b3c4d5e6f7892",
   *   subtopic: "605c7b9f1a2b3c4d5e6f7893",
   *   options: ["London", "Berlin", "Paris", "Madrid"],
   *   correctOptions: [2],
   *   explanation: "Paris is the capital and largest city of France."
   * };
   *
   * this.questionService.addQuestion(questionData).subscribe({
   *   next: (response) => console.log('Question created:', response),
   *   error: (error) => console.error('Creation failed:', error)
   * });
   * ```
   */
  addQuestion(questionData) {
    const token = localStorage.getItem("token");
    const headers = new HttpHeaders({ Authorization: `Bearer ${token}` });
    return this.http.post(`${this.apiUrl}/questions/add`, questionData, { headers });
  }
  /**
   * @method getBranches
   * @description Retrieves all available branches from the hierarchy
   * @returns {Observable<any>} Observable containing array of branch objects
   * @throws {HttpErrorResponse} When authentication fails or server error occurs
   *
   * @example
   * ```typescript
   * this.questionService.getBranches().subscribe({
   *   next: (branches) => {
   *     this.branches = branches;
   *     console.log('Available branches:', branches);
   *   },
   *   error: (error) => console.error('Failed to load branches:', error)
   * });
   * ```
   */
  getBranches() {
    const token = localStorage.getItem("token");
    const headers = new HttpHeaders({ Authorization: `Bearer ${token}` });
    return this.http.get(`${this.apiUrl}/hierarchy/branch`, { headers });
  }
  /**
   * @method getSubjects
   * @description Retrieves subjects for a specific branch
   * @param {string} branchId - The ID of the branch to get subjects for
   * @returns {Observable<any>} Observable containing array of subject objects
   * @throws {HttpErrorResponse} When authentication fails or branch not found
   *
   * @example
   * ```typescript
   * this.questionService.getSubjects('605c7b9f1a2b3c4d5e6f7890').subscribe({
   *   next: (subjects) => {
   *     this.subjects = subjects;
   *     console.log('Available subjects:', subjects);
   *   },
   *   error: (error) => console.error('Failed to load subjects:', error)
   * });
   * ```
   */
  getSubjects(branchId) {
    const token = localStorage.getItem("token");
    const headers = new HttpHeaders({ Authorization: `Bearer ${token}` });
    return this.http.get(`${this.apiUrl}/hierarchy/subject?branchId=${branchId}`, { headers });
  }
  /**
   * @method getTopics
   * @description Retrieves topics for a specific subject
   * @param {string} subjectId - The ID of the subject to get topics for
   * @returns {Observable<any>} Observable containing array of topic objects
   * @throws {HttpErrorResponse} When authentication fails or subject not found
   *
   * @example
   * ```typescript
   * this.questionService.getTopics('605c7b9f1a2b3c4d5e6f7891').subscribe({
   *   next: (topics) => {
   *     this.topics = topics;
   *     console.log('Available topics:', topics);
   *   },
   *   error: (error) => console.error('Failed to load topics:', error)
   * });
   * ```
   */
  getTopics(subjectId) {
    const token = localStorage.getItem("token");
    const headers = new HttpHeaders({ Authorization: `Bearer ${token}` });
    return this.http.get(`${this.apiUrl}/hierarchy/topic?subjectId=${subjectId}`, { headers });
  }
  /**
   * @method getSubtopics
   * @description Retrieves subtopics for a specific topic
   * @param {string} topicId - The ID of the topic to get subtopics for
   * @returns {Observable<any>} Observable containing array of subtopic objects
   * @throws {HttpErrorResponse} When authentication fails or topic not found
   *
   * @example
   * ```typescript
   * this.questionService.getSubtopics('605c7b9f1a2b3c4d5e6f7892').subscribe({
   *   next: (subtopics) => {
   *     this.subtopics = subtopics;
   *     console.log('Available subtopics:', subtopics);
   *   },
   *   error: (error) => console.error('Failed to load subtopics:', error)
   * });
   * ```
   */
  getSubtopics(topicId) {
    const token = localStorage.getItem("token");
    const headers = new HttpHeaders({ Authorization: `Bearer ${token}` });
    return this.http.get(`${this.apiUrl}/hierarchy/subtopic?topicId=${topicId}`, { headers });
  }
  /**
   * @method getQuestions
   * @description Retrieves all questions from the system without pagination
   * @returns {Observable<Question[]>} Observable containing array of all questions
   * @throws {HttpErrorResponse} When authentication fails or server error occurs
   *
   * @example
   * ```typescript
   * this.questionService.getQuestions().subscribe({
   *   next: (questions) => {
   *     this.allQuestions = questions;
   *     console.log(`Loaded ${questions.length} questions`);
   *   },
   *   error: (error) => console.error('Failed to load questions:', error)
   * });
   * ```
   */
  // New method to fetch all questions
  getQuestions() {
    const token = localStorage.getItem("token");
    const headers = new HttpHeaders({ Authorization: `Bearer ${token}` });
    return this.http.get(`${this.apiUrl}/questions/all`, { headers });
  }
  /**
   * @method deleteQuestion
   * @description Deletes a question by its unique identifier
   * @param {string} id - The unique identifier of the question to delete
   * @returns {Observable<any>} Observable containing deletion confirmation response
   * @throws {HttpErrorResponse} When authentication fails, question not found, or deletion restricted
   *
   * @example
   * ```typescript
   * this.questionService.deleteQuestion('605c7b9f1a2b3c4d5e6f7890').subscribe({
   *   next: (response) => {
   *     console.log('Question deleted successfully:', response);
   *     this.refreshQuestionList();
   *   },
   *   error: (error) => console.error('Failed to delete question:', error)
   * });
   * ```
   */
  /** Delete a question by its ID */
  deleteQuestion(id) {
    const token = localStorage.getItem("token");
    const headers = new HttpHeaders({ Authorization: `Bearer ${token}` });
    return this.http.delete(`${this.apiUrl}/questions/${id}`, { headers });
  }
  /**
   * @method updateQuestion
   * @description Updates an existing question with new data
   * @param {string} id - The unique identifier of the question to update
   * @param {any} questionData - Updated question data object
   * @param {string} [questionData.questionText] - Updated question text
   * @param {string} [questionData.difficulty] - Updated difficulty level
   * @param {string} [questionData.type] - Updated question type
   * @param {Array} [questionData.options] - Updated answer options
   * @param {Array} [questionData.correctOptions] - Updated correct option indices
   * @param {string} [questionData.explanation] - Updated explanation
   * @returns {Observable<any>} Observable containing updated question response
   * @throws {HttpErrorResponse} When authentication fails, question not found, or validation errors
   *
   * @example
   * ```typescript
   * const updatedData = {
   *   questionText: "What is the updated capital of France?",
   *   difficulty: "medium",
   *   explanation: "Updated explanation for the answer."
   * };
   *
   * this.questionService.updateQuestion('605c7b9f1a2b3c4d5e6f7890', updatedData).subscribe({
   *   next: (response) => console.log('Question updated:', response),
   *   error: (error) => console.error('Update failed:', error)
   * });
   * ```
   */
  /** Update a question */
  updateQuestion(id, questionData) {
    const token = localStorage.getItem("token");
    const headers = new HttpHeaders({ Authorization: `Bearer ${token}` });
    return this.http.put(`${this.apiUrl}/questions/${id}`, questionData, { headers });
  }
  /**
   * @method getQuestionById
   * @description Retrieves a single question by its unique identifier
   * @param {string} id - The unique identifier of the question to retrieve
   * @returns {Observable<Question>} Observable containing the question object
   * @throws {HttpErrorResponse} When authentication fails or question not found
   *
   * @example
   * ```typescript
   * this.questionService.getQuestionById('605c7b9f1a2b3c4d5e6f7890').subscribe({
   *   next: (question) => {
   *     this.currentQuestion = question;
   *     console.log('Question loaded:', question.questionText);
   *   },
   *   error: (error) => console.error('Question not found:', error)
   * });
   * ```
   */
  /** Fetch one question by ID */
  getQuestionById(id) {
    const token = localStorage.getItem("token");
    const headers = new HttpHeaders({ Authorization: `Bearer ${token}` });
    return this.http.get(`${this.apiUrl}/questions/${id}`, { headers });
  }
  /**
   * @method createSubject
   * @description Creates a new subject under a specific branch
   * @param {Object} data - Subject creation data
   * @param {string} data.name - Name of the new subject
   * @param {string|null} data.branchId - ID of the parent branch
   * @returns {Observable<any>} Observable containing created subject response
   * @throws {HttpErrorResponse} When authentication fails or validation errors occur
   *
   * @example
   * ```typescript
   * const subjectData = {
   *   name: "Mathematics",
   *   branchId: "605c7b9f1a2b3c4d5e6f7890"
   * };
   *
   * this.questionService.createSubject(subjectData).subscribe({
   *   next: (response) => console.log('Subject created:', response),
   *   error: (error) => console.error('Subject creation failed:', error)
   * });
   * ```
   */
  createSubject(data) {
    const token = localStorage.getItem("token");
    const headers = new HttpHeaders({ Authorization: `Bearer ${token}` });
    return this.http.post(`${this.apiUrl}/hierarchy/subject`, data, { headers });
  }
  /**
   * @method createTopic
   * @description Creates a new topic under a specific subject
   * @param {Object} data - Topic creation data
   * @param {string} data.name - Name of the new topic
   * @param {string|null} data.subjectId - ID of the parent subject
   * @returns {Observable<any>} Observable containing created topic response
   * @throws {HttpErrorResponse} When authentication fails or validation errors occur
   *
   * @example
   * ```typescript
   * const topicData = {
   *   name: "Algebra",
   *   subjectId: "605c7b9f1a2b3c4d5e6f7891"
   * };
   *
   * this.questionService.createTopic(topicData).subscribe({
   *   next: (response) => console.log('Topic created:', response),
   *   error: (error) => console.error('Topic creation failed:', error)
   * });
   * ```
   */
  createTopic(data) {
    const token = localStorage.getItem("token");
    const headers = new HttpHeaders({ Authorization: `Bearer ${token}` });
    return this.http.post(`${this.apiUrl}/hierarchy/topic`, data, { headers });
  }
  /**
   * @method createSubtopic
   * @description Creates a new subtopic under a specific topic
   * @param {Object} data - Subtopic creation data
   * @param {string} data.name - Name of the new subtopic
   * @param {string|null} data.topicId - ID of the parent topic
   * @returns {Observable<any>} Observable containing created subtopic response
   * @throws {HttpErrorResponse} When authentication fails or validation errors occur
   *
   * @example
   * ```typescript
   * const subtopicData = {
   *   name: "Linear Equations",
   *   topicId: "605c7b9f1a2b3c4d5e6f7892"
   * };
   *
   * this.questionService.createSubtopic(subtopicData).subscribe({
   *   next: (response) => console.log('Subtopic created:', response),
   *   error: (error) => console.error('Subtopic creation failed:', error)
   * });
   * ```
   */
  createSubtopic(data) {
    const token = localStorage.getItem("token");
    const headers = new HttpHeaders({ Authorization: `Bearer ${token}` });
    return this.http.post(`${this.apiUrl}/hierarchy/subtopic`, data, { headers });
  }
  /**
   * @method filterQuestions
   * @description Filters questions based on multiple criteria with pagination support
   * @param {Object} filters - Filter criteria object
   * @param {string} [filters.branch] - Branch filter (optional)
   * @param {string} [filters.subject] - Subject filter
   * @param {string} [filters.topic] - Topic filter
   * @param {string} [filters.subtopic] - Subtopic filter
   * @param {string} [filters.difficulty] - Difficulty level filter (easy/medium/hard)
   * @param {string} [filters.type] - Question type filter (MCQ/MSQ/Integer/True-False)
   * @param {string} [filters.status] - Question status filter (active/inactive)
   * @param {string} [filters.searchTerm] - Text search term for question content
   * @param {number} [filters.page] - Page number for pagination (1-based)
   * @param {number} [filters.limit] - Number of questions per page
   * @returns {Observable<PaginatedQuestionsResponse>} Observable containing paginated questions response
   * @throws {HttpErrorResponse} When authentication fails or invalid filter parameters
   *
   * @example
   * ```typescript
   * // Basic filtering with pagination
   * const filters = {
   *   branch: 'engineering',
   *   difficulty: 'medium',
   *   type: 'MCQ',
   *   page: 1,
   *   limit: 20
   * };
   *
   * this.questionService.filterQuestions(filters).subscribe({
   *   next: (response) => {
   *     this.questions = response.questions;
   *     this.totalPages = response.totalPages;
   *     this.currentPage = response.currentPage;
   *     console.log(`Loaded ${response.questions.length} of ${response.totalCount} questions`);
   *   },
   *   error: (error) => console.error('Filter failed:', error)
   * });
   *
   * // Search with text term
   * const searchFilters = {
   *   searchTerm: 'integration',
   *   subject: 'mathematics',
   *   page: 1,
   *   limit: 10
   * };
   *
   * this.questionService.filterQuestions(searchFilters).subscribe({
   *   next: (response) => {
   *     this.searchResults = response.questions;
   *   }
   * });
   * ```
   */
  // MODIFIED: Updated to handle pagination parameters and new response structure
  filterQuestions(filters) {
    const token = localStorage.getItem("token");
    const headers = new HttpHeaders({ Authorization: `Bearer ${token}` });
    let params = new HttpParams();
    if (filters.branch)
      params = params.append("branch", filters.branch);
    if (filters.subject)
      params = params.append("subject", filters.subject);
    if (filters.topic)
      params = params.append("topic", filters.topic);
    if (filters.subtopic)
      params = params.append("subtopic", filters.subtopic);
    if (filters.difficulty)
      params = params.append("difficulty", filters.difficulty);
    if (filters.type)
      params = params.append("type", filters.type);
    if (filters.status)
      params = params.append("status", filters.status);
    if (filters.searchTerm)
      params = params.append("searchTerm", filters.searchTerm);
    if (filters.page)
      params = params.append("page", filters.page.toString());
    if (filters.limit)
      params = params.append("limit", filters.limit.toString());
    return this.http.get(`${this.apiUrl}/questions/filter`, { headers, params });
  }
  /**
   * @method importQuestions
   * @description Imports multiple questions from CSV or bulk data
   * @param {any[]} qs - Array of question objects to import
   * @param {string} qs[].questionText - Question text
   * @param {string} qs[].difficulty - Difficulty level
   * @param {string} qs[].type - Question type
   * @param {string} qs[].branch - Branch identifier
   * @param {string} qs[].subject - Subject identifier
   * @param {string} qs[].topic - Topic identifier
   * @param {string} qs[].subtopic - Subtopic identifier
   * @param {Array} qs[].options - Answer options array
   * @param {Array} qs[].correctOptions - Correct option indices
   * @returns {Observable<any>} Observable containing import results and statistics
   * @throws {HttpErrorResponse} When authentication fails or import validation errors occur
   *
   * @example
   * ```typescript
   * const questionsToImport = [
   *   {
   *     questionText: "What is 2+2?",
   *     difficulty: "easy",
   *     type: "MCQ",
   *     branch: "mathematics",
   *     subject: "arithmetic",
   *     topic: "addition",
   *     subtopic: "basic_addition",
   *     options: ["3", "4", "5", "6"],
   *     correctOptions: [1]
   *   },
   *   // ... more questions
   * ];
   *
   * this.questionService.importQuestions(questionsToImport).subscribe({
   *   next: (result) => {
   *     console.log(`Import completed: ${result.successful} successful, ${result.failed} failed`);
   *     this.refreshQuestionList();
   *   },
   *   error: (error) => console.error('Import failed:', error)
   * });
   * ```
   */
  importQuestions(qs) {
    const token = localStorage.getItem("token");
    const headers = new HttpHeaders({ Authorization: `Bearer ${token}` });
    return this.http.post(`${this.apiUrl}/questions/import-csv`, qs, { headers });
  }
  /**
   * @method getAll
   * @description Alternative method to retrieve all questions (alias for getQuestions)
   * @returns {Observable<Question[]>} Observable containing array of all questions
   * @throws {HttpErrorResponse} When authentication fails or server error occurs
   *
   * @example
   * ```typescript
   * this.questionService.getAll().subscribe({
   *   next: (questions) => {
   *     this.allQuestions = questions;
   *     console.log(`Retrieved ${questions.length} total questions`);
   *   },
   *   error: (error) => console.error('Failed to retrieve questions:', error)
   * });
   * ```
   */
  getAll() {
    const token = localStorage.getItem("token");
    const headers = new HttpHeaders({ Authorization: `Bearer ${token}` });
    return this.http.get(`${this.apiUrl}/questions/all`, { headers });
  }
  /**
   * @method getExamTypes
   * @description Retrieves available exam types for question categorization
   * @returns {Observable<{_id: string; code: string; name: string}[]>} Observable containing exam types array
   * @throws {HttpErrorResponse} When authentication fails or server error occurs
   *
   * @example
   * ```typescript
   * this.questionService.getExamTypes().subscribe({
   *   next: (examTypes) => {
   *     this.examTypes = examTypes;
   *     console.log('Available exam types:', examTypes.map(et => et.name));
   *   },
   *   error: (error) => console.error('Failed to load exam types:', error)
   * });
   * ```
   */
  /** Fetch list of exam types for the dropdown */
  getExamTypes() {
    const token = localStorage.getItem("token");
    const headers = new HttpHeaders({ Authorization: `Bearer ${token}` });
    return this.http.get(`${this.apiUrl}/examTypes`, { headers });
  }
  /**
   * @method getQuestionsByStatus
   * @description Retrieves questions filtered by a specific status, with pagination.
   * @param {string} status - The status to filter questions by (e.g., 'Pending Review').
   * @param {number} [page] - Page number for pagination (1-based).
   * @param {number} [limit] - Number of questions per page.
   * @returns {Observable<PaginatedQuestionsResponse>} Observable containing paginated questions response.
   * @throws {HttpErrorResponse} When authentication fails or server error occurs.
   */
  getQuestionsByStatus(status, page, limit) {
    const token = localStorage.getItem("token");
    const headers = new HttpHeaders({ Authorization: `Bearer ${token}` });
    let params = new HttpParams().set("status", status);
    if (page) {
      params = params.set("page", page.toString());
    }
    if (limit) {
      params = params.set("limit", limit.toString());
    }
    return this.http.get(`${this.apiUrl}/questions/filter`, { headers, params });
  }
  /**
   * @method updateQuestionStatus
   * @description Updates the status of a specific question.
   * @param {string} questionId - The ID of the question to update.
   * @param {string} status - The new status to set for the question.
   * @returns {Observable<any>} Observable containing the backend's response.
   * @throws {HttpErrorResponse} When authentication fails, question not found, or update is not permitted.
   */
  updateQuestionStatus(questionId, status) {
    const token = localStorage.getItem("token");
    const headers = new HttpHeaders({ Authorization: `Bearer ${token}` });
    return this.http.put(`${this.apiUrl}/questions/${questionId}/status`, { status }, { headers });
  }
  static \u0275fac = function QuestionService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _QuestionService)(\u0275\u0275inject(HttpClient));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _QuestionService, factory: _QuestionService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(QuestionService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }], null);
})();

// src/app/services/exam-family.service.ts
var ExamFamilyService = class _ExamFamilyService {
  http;
  base = `${environment.apiUrl}/examFamilies`;
  constructor(http) {
    this.http = http;
  }
  /** Fetch all families */
  getAll() {
    return this.http.get(this.base);
  }
  /** Create a new family */
  create(family) {
    return this.http.post(this.base, family);
  }
  static \u0275fac = function ExamFamilyService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _ExamFamilyService)(\u0275\u0275inject(HttpClient));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _ExamFamilyService, factory: _ExamFamilyService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ExamFamilyService, [{
    type: Injectable,
    args: [{ providedIn: "root" }]
  }], () => [{ type: HttpClient }], null);
})();

// src/app/services/exam-stream.service.ts
var ExamStreamService = class _ExamStreamService {
  http;
  base = `${environment.apiUrl}/examStreams`;
  constructor(http) {
    this.http = http;
  }
  /** List all streams */
  getAll() {
    return this.http.get(this.base);
  }
  /** List streams filtered by family (optional) */
  getByFamily(familyId) {
    return this.http.get(this.base, { params: { family: familyId } });
  }
  /** Create a new stream */
  create(stream) {
    return this.http.post(this.base, stream);
  }
  static \u0275fac = function ExamStreamService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _ExamStreamService)(\u0275\u0275inject(HttpClient));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _ExamStreamService, factory: _ExamStreamService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ExamStreamService, [{
    type: Injectable,
    args: [{ providedIn: "root" }]
  }], () => [{ type: HttpClient }], null);
})();

// src/app/services/exam-paper.service.ts
var ExamPaperService = class _ExamPaperService {
  http;
  base = `${environment.apiUrl}/examPapers`;
  constructor(http) {
    this.http = http;
  }
  /** All papers */
  getAll() {
    return this.http.get(this.base);
  }
  /** Only papers for a given stream */
  getByStream(streamId) {
    return this.http.get(this.base, {
      params: { stream: streamId }
    });
  }
  /** Only papers for a given family - we need to add this API endpoint to the backend */
  getByFamily(familyId) {
    return this.http.get(this.base, {
      params: { family: familyId }
    });
  }
  /** Create new paper */
  create(paper) {
    return this.http.post(this.base, paper);
  }
  static \u0275fac = function ExamPaperService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _ExamPaperService)(\u0275\u0275inject(HttpClient));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _ExamPaperService, factory: _ExamPaperService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ExamPaperService, [{
    type: Injectable,
    args: [{ providedIn: "root" }]
  }], () => [{ type: HttpClient }], null);
})();

// src/app/services/exam-shift.service.ts
var ExamShiftService = class _ExamShiftService {
  http;
  base = `${environment.apiUrl}/examShifts`;
  constructor(http) {
    this.http = http;
  }
  /** All shifts */
  getAll() {
    return this.http.get(this.base);
  }
  /** Shifts for one paper */
  getByPaper(paperId) {
    return this.http.get(`${this.base}/by-paper`, {
      params: { paper: paperId }
    });
  }
  /** Create a shift */
  create(shift) {
    return this.http.post(this.base, shift);
  }
  /**
   * Get a shift for a paper, creating a default one if none exists
   * @param paperId The ID of the paper
   * @returns Observable with the shift to use
   */
  getOrCreateDefaultShift(paperId) {
    return this.getByPaper(paperId).pipe(switchMap((shifts) => {
      if (shifts && shifts.length > 0) {
        return of(shifts[0]);
      } else {
        const defaultShift = {
          paper: paperId,
          code: "main-shift",
          name: "Main Shift"
        };
        return this.create(defaultShift);
      }
    }), catchError((error) => {
      console.error("Error getting or creating default shift:", error);
      throw error;
    }));
  }
  static \u0275fac = function ExamShiftService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _ExamShiftService)(\u0275\u0275inject(HttpClient));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _ExamShiftService, factory: _ExamShiftService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ExamShiftService, [{
    type: Injectable,
    args: [{ providedIn: "root" }]
  }], () => [{ type: HttpClient }], null);
})();

// src/app/components/build-paper/build-paper.component.ts
var _c02 = () => ({ standalone: true });
function BuildPaperComponent_option_98_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "option", 96);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const f_r3 = ctx.$implicit;
    \u0275\u0275property("value", f_r3._id);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(f_r3.name);
  }
}
function BuildPaperComponent_p_99_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "p", 97);
    \u0275\u0275text(1, " Families not available or list is empty. ");
    \u0275\u0275elementEnd();
  }
}
function BuildPaperComponent_option_107_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "option", 96);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const s_r5 = ctx.$implicit;
    \u0275\u0275property("value", s_r5._id);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(s_r5.name);
  }
}
function BuildPaperComponent_p_108_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "p", 97);
    \u0275\u0275text(1, " Streams not available for the selected family or list is empty. ");
    \u0275\u0275elementEnd();
  }
}
function BuildPaperComponent_option_116_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275text(1);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const p_r7 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" (", p_r7.code, ")");
  }
}
function BuildPaperComponent_option_116_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "option", 96);
    \u0275\u0275text(1);
    \u0275\u0275template(2, BuildPaperComponent_option_116_ng_container_2_Template, 2, 1, "ng-container", 98);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const p_r7 = ctx.$implicit;
    \u0275\u0275property("value", p_r7._id);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", p_r7.name, "");
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", p_r7.code);
  }
}
function BuildPaperComponent_p_117_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "p", 97);
    \u0275\u0275text(1, " Papers not available for the selected stream or list is empty. ");
    \u0275\u0275elementEnd();
  }
}
function BuildPaperComponent_option_125_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "option", 96);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const v_r9 = ctx.$implicit;
    \u0275\u0275property("value", v_r9._id);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(v_r9.name);
  }
}
function BuildPaperComponent_p_126_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "p", 99);
    \u0275\u0275text(1, ' No shifts available for this paper. A default "Main Shift" will be created automatically. ');
    \u0275\u0275elementEnd();
  }
}
function BuildPaperComponent_div_135_div_37_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 47)(1, "div")(2, "label", 108);
    \u0275\u0275text(3, " Default Marks for Pooled Questions ");
    \u0275\u0275elementEnd();
    \u0275\u0275element(4, "input", 141);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(5, "div")(6, "label", 108);
    \u0275\u0275text(7, " Default Negative Marks ");
    \u0275\u0275elementEnd();
    \u0275\u0275element(8, "input", 142);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const i_r11 = \u0275\u0275nextContext().index;
    \u0275\u0275advance(2);
    \u0275\u0275propertyInterpolate1("for", "defaultMarksForPooledQuestion-", i_r11, "");
    \u0275\u0275advance(2);
    \u0275\u0275propertyInterpolate1("id", "defaultMarksForPooledQuestion-", i_r11, "");
    \u0275\u0275advance(2);
    \u0275\u0275propertyInterpolate1("for", "defaultNegativeMarksForPooledQuestion-", i_r11, "");
    \u0275\u0275advance(2);
    \u0275\u0275propertyInterpolate1("id", "defaultNegativeMarksForPooledQuestion-", i_r11, "");
  }
}
function BuildPaperComponent_div_135_div_49_div_4_Template(rf, ctx) {
  if (rf & 1) {
    const _r13 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 147);
    \u0275\u0275element(1, "span", 148);
    \u0275\u0275pipe(2, "highlight");
    \u0275\u0275elementStart(3, "button", 149);
    \u0275\u0275listener("click", function BuildPaperComponent_div_135_div_49_div_4_Template_button_click_3_listener() {
      const q_r14 = \u0275\u0275restoreView(_r13).$implicit;
      const i_r11 = \u0275\u0275nextContext(2).index;
      const ctx_r11 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r11.addQuestionFromSearchResults(i_r11, q_r14));
    });
    \u0275\u0275text(4, " Add ");
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const q_r14 = ctx.$implicit;
    const i_r11 = \u0275\u0275nextContext(2).index;
    const ctx_r11 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("innerHTML", \u0275\u0275pipeBind2(2, 1, q_r14.translations[0].questionText || q_r14.questionText || "Test Question Text Missing", ctx_r11.sectionSearchTerms[i_r11]), \u0275\u0275sanitizeHtml);
  }
}
function BuildPaperComponent_div_135_div_49_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 143)(1, "h6", 144);
    \u0275\u0275text(2, "Search Results:");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "div", 145);
    \u0275\u0275template(4, BuildPaperComponent_div_135_div_49_div_4_Template, 5, 4, "div", 146);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const i_r11 = \u0275\u0275nextContext().index;
    const ctx_r11 = \u0275\u0275nextContext();
    \u0275\u0275advance(4);
    \u0275\u0275property("ngForOf", ctx_r11.sectionSearchResults[i_r11]);
  }
}
function BuildPaperComponent_div_135_div_50_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 150);
    \u0275\u0275text(1, " No questions found matching your search. ");
    \u0275\u0275elementEnd();
  }
}
function BuildPaperComponent_div_135_div_52_div_19_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 169)(1, "p", 170);
    \u0275\u0275text(2, "Question Preview:");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "p", 171);
    \u0275\u0275text(4);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const j_r16 = \u0275\u0275nextContext().index;
    const i_r11 = \u0275\u0275nextContext().index;
    const ctx_r11 = \u0275\u0275nextContext();
    \u0275\u0275advance(4);
    \u0275\u0275textInterpolate((ctx_r11.previewedQuestions[i_r11][j_r16] == null ? null : ctx_r11.previewedQuestions[i_r11][j_r16].translations[0] == null ? null : ctx_r11.previewedQuestions[i_r11][j_r16].translations[0].questionText) || (ctx_r11.previewedQuestions[i_r11][j_r16] == null ? null : ctx_r11.previewedQuestions[i_r11][j_r16].questionText) || "Text not available");
  }
}
function BuildPaperComponent_div_135_div_52_Template(rf, ctx) {
  if (rf & 1) {
    const _r15 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 151)(1, "div", 152)(2, "h6", 153)(3, "span", 154);
    \u0275\u0275text(4);
    \u0275\u0275elementEnd();
    \u0275\u0275text(5);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(6, "button", 155);
    \u0275\u0275listener("click", function BuildPaperComponent_div_135_div_52_Template_button_click_6_listener() {
      const j_r16 = \u0275\u0275restoreView(_r15).index;
      const i_r11 = \u0275\u0275nextContext().index;
      const ctx_r11 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r11.removeQuestion(i_r11, j_r16));
    });
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(7, "svg", 156);
    \u0275\u0275element(8, "path", 157);
    \u0275\u0275elementEnd()()();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(9, "div", 158)(10, "label", 159);
    \u0275\u0275text(11, "Question ID");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(12, "div", 160);
    \u0275\u0275element(13, "input", 161);
    \u0275\u0275elementStart(14, "button", 162);
    \u0275\u0275listener("click", function BuildPaperComponent_div_135_div_52_Template_button_click_14_listener() {
      const j_r16 = \u0275\u0275restoreView(_r15).index;
      const i_r11 = \u0275\u0275nextContext().index;
      const ctx_r11 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r11.previewQuestion(i_r11, j_r16));
    });
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(15, "svg", 163);
    \u0275\u0275element(16, "path", 45)(17, "path", 164);
    \u0275\u0275elementEnd();
    \u0275\u0275text(18, " Preview ");
    \u0275\u0275elementEnd()()();
    \u0275\u0275template(19, BuildPaperComponent_div_135_div_52_div_19_Template, 5, 1, "div", 165);
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(20, "div", 166)(21, "div")(22, "label", 159);
    \u0275\u0275text(23, "Marks");
    \u0275\u0275elementEnd();
    \u0275\u0275element(24, "input", 167);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(25, "div")(26, "label", 159);
    \u0275\u0275text(27, "Negative Marks");
    \u0275\u0275elementEnd();
    \u0275\u0275element(28, "input", 168);
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const j_r16 = ctx.index;
    const i_r11 = \u0275\u0275nextContext().index;
    const ctx_r11 = \u0275\u0275nextContext();
    \u0275\u0275property("formGroupName", j_r16);
    \u0275\u0275advance(4);
    \u0275\u0275textInterpolate1(" ", j_r16 + 1, " ");
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" Question ", j_r16 + 1, " ");
    \u0275\u0275advance(5);
    \u0275\u0275propertyInterpolate2("for", "questionId-", i_r11, "-", j_r16, "");
    \u0275\u0275advance(3);
    \u0275\u0275propertyInterpolate2("id", "questionId-", i_r11, "-", j_r16, "");
    \u0275\u0275advance(6);
    \u0275\u0275property("ngIf", ctx_r11.previewedQuestions[i_r11] && ctx_r11.previewedQuestions[i_r11][j_r16]);
    \u0275\u0275advance(3);
    \u0275\u0275propertyInterpolate2("for", "marks-", i_r11, "-", j_r16, "");
    \u0275\u0275advance(2);
    \u0275\u0275propertyInterpolate2("id", "marks-", i_r11, "-", j_r16, "");
    \u0275\u0275advance(2);
    \u0275\u0275propertyInterpolate2("for", "negativeMarks-", i_r11, "-", j_r16, "");
    \u0275\u0275advance(2);
    \u0275\u0275propertyInterpolate2("id", "negativeMarks-", i_r11, "-", j_r16, "");
  }
}
function BuildPaperComponent_div_135_Template(rf, ctx) {
  if (rf & 1) {
    const _r10 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 100)(1, "div", 101)(2, "h3", 102)(3, "span", 103);
    \u0275\u0275text(4);
    \u0275\u0275elementEnd();
    \u0275\u0275text(5);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(6, "button", 104);
    \u0275\u0275listener("click", function BuildPaperComponent_div_135_Template_button_click_6_listener() {
      const i_r11 = \u0275\u0275restoreView(_r10).index;
      const ctx_r11 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r11.removeSection(i_r11));
    });
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(7, "svg", 105);
    \u0275\u0275element(8, "path", 106);
    \u0275\u0275elementEnd()()();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(9, "div", 107)(10, "div")(11, "label", 108);
    \u0275\u0275text(12, "Section Title");
    \u0275\u0275elementEnd();
    \u0275\u0275element(13, "input", 109);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(14, "div")(15, "label", 108);
    \u0275\u0275text(16, "Order");
    \u0275\u0275elementEnd();
    \u0275\u0275element(17, "input", 110);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(18, "div", 111)(19, "div", 112);
    \u0275\u0275element(20, "input", 113);
    \u0275\u0275elementStart(21, "label", 114);
    \u0275\u0275text(22, " Randomize Question Order in Section ");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(23, "div", 115)(24, "h4", 116);
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(25, "svg", 117);
    \u0275\u0275element(26, "path", 118);
    \u0275\u0275elementEnd();
    \u0275\u0275text(27, " Question Pool Configuration ");
    \u0275\u0275elementEnd();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(28, "div", 119)(29, "div")(30, "label", 108);
    \u0275\u0275text(31, " Questions to Select from Pool ");
    \u0275\u0275elementEnd();
    \u0275\u0275element(32, "input", 120);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(33, "div", 121)(34, "label", 108);
    \u0275\u0275text(35, " Question Pool (comma-separated IDs) ");
    \u0275\u0275elementEnd();
    \u0275\u0275element(36, "textarea", 122);
    \u0275\u0275elementEnd();
    \u0275\u0275template(37, BuildPaperComponent_div_135_div_37_Template, 9, 8, "div", 123);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(38, "div", 124)(39, "h4", 116);
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(40, "svg", 125);
    \u0275\u0275element(41, "path", 126);
    \u0275\u0275elementEnd();
    \u0275\u0275text(42, " Question Selection & Management ");
    \u0275\u0275elementEnd();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(43, "div", 127)(44, "h5", 128);
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(45, "svg", 129);
    \u0275\u0275element(46, "path", 130);
    \u0275\u0275elementEnd();
    \u0275\u0275text(47, " Search Questions by Text ");
    \u0275\u0275elementEnd();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(48, "input", 131);
    \u0275\u0275twoWayListener("ngModelChange", function BuildPaperComponent_div_135_Template_input_ngModelChange_48_listener($event) {
      const i_r11 = \u0275\u0275restoreView(_r10).index;
      const ctx_r11 = \u0275\u0275nextContext();
      \u0275\u0275twoWayBindingSet(ctx_r11.sectionSearchTerms[i_r11], $event) || (ctx_r11.sectionSearchTerms[i_r11] = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275listener("ngModelChange", function BuildPaperComponent_div_135_Template_input_ngModelChange_48_listener() {
      const i_r11 = \u0275\u0275restoreView(_r10).index;
      const ctx_r11 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r11.performSearch(i_r11));
    });
    \u0275\u0275elementEnd();
    \u0275\u0275template(49, BuildPaperComponent_div_135_div_49_Template, 5, 1, "div", 132)(50, BuildPaperComponent_div_135_div_50_Template, 2, 0, "div", 133);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(51, "div", 134);
    \u0275\u0275template(52, BuildPaperComponent_div_135_div_52_Template, 29, 22, "div", 135);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(53, "div", 136)(54, "div", 137)(55, "label", 138);
    \u0275\u0275text(56, "Import Questions from CSV:");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(57, "input", 139);
    \u0275\u0275listener("change", function BuildPaperComponent_div_135_Template_input_change_57_listener($event) {
      const i_r11 = \u0275\u0275restoreView(_r10).index;
      const ctx_r11 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r11.importCsv($event, i_r11));
    });
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(58, "button", 140);
    \u0275\u0275listener("click", function BuildPaperComponent_div_135_Template_button_click_58_listener() {
      const i_r11 = \u0275\u0275restoreView(_r10).index;
      const ctx_r11 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r11.addQuestion(i_r11));
    });
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(59, "svg", 75);
    \u0275\u0275element(60, "path", 76);
    \u0275\u0275elementEnd();
    \u0275\u0275text(61, " Add Question ");
    \u0275\u0275elementEnd()()()();
  }
  if (rf & 2) {
    let tmp_21_0;
    const secCtrl_r17 = ctx.$implicit;
    const i_r11 = ctx.index;
    const ctx_r11 = \u0275\u0275nextContext();
    \u0275\u0275property("formGroupName", i_r11);
    \u0275\u0275advance(4);
    \u0275\u0275textInterpolate1(" ", i_r11 + 1, " ");
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" Section ", i_r11 + 1, " ");
    \u0275\u0275advance();
    \u0275\u0275property("disabled", ctx_r11.sections.length <= 1);
    \u0275\u0275advance(5);
    \u0275\u0275propertyInterpolate1("for", "sectionTitle-", i_r11, "");
    \u0275\u0275advance(2);
    \u0275\u0275propertyInterpolate1("id", "sectionTitle-", i_r11, "");
    \u0275\u0275advance(2);
    \u0275\u0275propertyInterpolate1("for", "sectionOrder-", i_r11, "");
    \u0275\u0275advance(2);
    \u0275\u0275propertyInterpolate1("id", "sectionOrder-", i_r11, "");
    \u0275\u0275advance(3);
    \u0275\u0275propertyInterpolate1("id", "randomizeQuestionOrderInSection-", i_r11, "");
    \u0275\u0275advance();
    \u0275\u0275propertyInterpolate1("for", "randomizeQuestionOrderInSection-", i_r11, "");
    \u0275\u0275advance(9);
    \u0275\u0275propertyInterpolate1("for", "questionsToSelectFromPool-", i_r11, "");
    \u0275\u0275advance(2);
    \u0275\u0275propertyInterpolate1("id", "questionsToSelectFromPool-", i_r11, "");
    \u0275\u0275advance(2);
    \u0275\u0275propertyInterpolate1("for", "questionPool-", i_r11, "");
    \u0275\u0275advance(2);
    \u0275\u0275propertyInterpolate1("id", "questionPool-", i_r11, "");
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ((tmp_21_0 = secCtrl_r17.get("questionsToSelectFromPool")) == null ? null : tmp_21_0.value) > 0);
    \u0275\u0275advance(11);
    \u0275\u0275twoWayProperty("ngModel", ctx_r11.sectionSearchTerms[i_r11]);
    \u0275\u0275property("ngModelOptions", \u0275\u0275pureFunction0(34, _c02));
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r11.sectionSearchResults[i_r11] && ctx_r11.sectionSearchResults[i_r11].length > 0);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r11.sectionSearchTerms[i_r11] && ctx_r11.sectionSearchTerms[i_r11].length > 2 && (!ctx_r11.sectionSearchResults[i_r11] || ctx_r11.sectionSearchResults[i_r11].length === 0));
    \u0275\u0275advance(2);
    \u0275\u0275property("ngForOf", ctx_r11.getQuestions(i_r11).controls);
    \u0275\u0275advance(3);
    \u0275\u0275propertyInterpolate1("for", "csvImport-", i_r11, "");
    \u0275\u0275advance(2);
    \u0275\u0275propertyInterpolate1("id", "csvImport-", i_r11, "");
  }
}
var BuildPaperComponent = class _BuildPaperComponent {
  fb;
  tsService;
  qService;
  efService;
  streamService;
  paperService;
  shiftService;
  /** @property {FormGroup} Main reactive form for test series configuration */
  seriesForm;
  /** @property {Question[]} Complete list of available questions */
  questionsList = [];
  /** @property {ExamFamily[]} Available exam families (e.g., JEE, NEET, GATE) */
  families = [];
  /** @property {ExamStream[]} Available streams for selected family */
  streams = [];
  /** @property {ExamPaper[]} Available papers for selected stream */
  papers = [];
  /** @property {ExamShift[]} Available shifts for selected paper */
  shifts = [];
  /** @property {number} Current year for default date selection */
  currentYear = (/* @__PURE__ */ new Date()).getFullYear();
  /** @property {any[][]} Array of previewed questions for each section */
  previewedQuestions = [];
  /** @property {string[]} Search terms for each section's question search */
  sectionSearchTerms = [];
  /** @property {Question[][]} Search results for each section's question search */
  sectionSearchResults = [];
  /** @private {Subject<string>[]} RxJS subjects for debouncing search input per section */
  searchDebouncers = [];
  // MODIFIED: Changed Subject<number> to Subject<string>
  /** @private {Subscription[]} Subscriptions for search operations cleanup */
  searchSubscriptions = [];
  /** @private {Subscription[]} Subscriptions for section interaction cleanup */
  sectionInteractionSubscriptions = [];
  // ADDED
  /**
   * @constructor
   * @description Initializes the BuildPaperComponent with required services
   * @param {FormBuilder} fb - Angular FormBuilder for reactive forms
   * @param {TestSeriesService} tsService - Service for test series operations
   * @param {QuestionService} qService - Service for question management
   * @param {ExamFamilyService} efService - Service for exam family operations
   * @param {ExamStreamService} streamService - Service for exam stream operations
   * @param {ExamPaperService} paperService - Service for exam paper operations
   * @param {ExamShiftService} shiftService - Service for exam shift operations
   */
  constructor(fb, tsService, qService, efService, streamService, paperService, shiftService) {
    this.fb = fb;
    this.tsService = tsService;
    this.qService = qService;
    this.efService = efService;
    this.streamService = streamService;
    this.paperService = paperService;
    this.shiftService = shiftService;
  }
  /**
   * @method getQuestionIdString
   * @description Helper method to extract string ID from Question object or its _id part
   * @param {any} idValue - Question ID value that can be string or object with $oid
   * @returns {string} String representation of the question ID
   *
   * @example
   * ```typescript
   * // Handle different ID formats
   * const stringId = this.getQuestionIdString(question._id);
   * const objectId = this.getQuestionIdString({$oid: "507f1f77bcf86cd799439011"});
   * ```
   */
  // ADDED: Helper to get string ID from Question object or its _id part
  getQuestionIdString(idValue) {
    if (typeof idValue === "string") {
      return idValue;
    }
    if (idValue && typeof idValue === "object" && "$oid" in idValue) {
      return idValue.$oid;
    }
    console.warn("[getQuestionIdString] Unexpected ID format:", idValue);
    return String(idValue);
  }
  /**
  * @method ngOnInit
  * @description Angular lifecycle hook for component initialization.
  * Sets up the reactive form, loads initial data, and configures form change listeners
  * for hierarchical dropdown dependencies (family → stream → paper → shift).
  *
  * @returns {void}
  *
  * @example
  * ```typescript
  * // Component initialization flow:
  * // 1. Build reactive form with validation
  * // 2. Load exam families
  * // 3. Set up cascade listeners for dropdowns
  * // 4. Initialize search functionality
  * ```
  */
  ngOnInit() {
    this.seriesForm = this.fb.group({
      title: ["", Validators.required],
      duration: [60, Validators.required],
      type: ["Practice_Exam", Validators.required],
      // MODIFIED: Aligned with backend enum and set a default
      mode: ["practice", Validators.required],
      // ADDED: Mode selection
      maxAttempts: [5, [Validators.required, Validators.min(1)]],
      // ★ ADD
      year: [this.currentYear, Validators.required],
      startAt: [null],
      endAt: [null],
      family: ["", Validators.required],
      stream: [{ value: "", disabled: true }, Validators.required],
      paper: [{ value: "", disabled: true }, Validators.required],
      shift: [{ value: "", disabled: true }, Validators.required],
      randomizeSectionOrder: [false],
      // ADDED: For randomizing section order
      enablePublicLeaderboard: [false],
      // ADDED: For public leaderboard
      sections: this.fb.array([])
    });
    this.efService.getAll().subscribe((f) => {
      console.log("\u{1F5C2}\uFE0F Fetched families:", f);
      this.families = f;
    });
    this.seriesForm.get("family").valueChanges.subscribe((familyId) => {
      console.log("[BuildPaperComponent] Family selected. ID:", familyId);
      this.seriesForm.get("stream").setValue(null, { emitEvent: false });
      this.seriesForm.get("paper").setValue(null, { emitEvent: false });
      this.seriesForm.get("shift").setValue(null, { emitEvent: false });
      console.log("[BuildPaperComponent] Dependent form controls (stream, paper, shift) reset.");
      this.streams = [];
      this.papers = [];
      this.shifts = [];
      console.log("[BuildPaperComponent] Dependent data arrays (streams, papers, shifts) cleared.");
      this.seriesForm.get("paper")?.disable();
      this.seriesForm.get("shift")?.disable();
      if (familyId && String(familyId).trim() !== "") {
        console.log(`[BuildPaperComponent] Fetching streams for familyId: "${familyId}"`);
        this.streamService.getByFamily(familyId).subscribe({
          next: (streamsData) => {
            console.log("[BuildPaperComponent] Raw streams data received from service:", JSON.stringify(streamsData, null, 2));
            if (Array.isArray(streamsData)) {
              this.streams = streamsData;
              console.log(`[BuildPaperComponent] this.streams populated. Count: ${this.streams.length}. First item (if any):`, this.streams.length > 0 ? this.streams[0] : "empty");
              if (this.streams.length > 0) {
                this.seriesForm.get("stream")?.enable();
              }
            } else {
              console.error("[BuildPaperComponent] streamsData is not an array:", streamsData);
              this.streams = [];
            }
          },
          error: (err) => {
            console.error("[BuildPaperComponent] Error fetching streams:", err);
            this.streams = [];
          }
        });
      } else {
        console.log("[BuildPaperComponent] familyId is null or empty. Not fetching streams. Dependent dropdowns will be empty.");
      }
    });
    this.seriesForm.get("stream").valueChanges.subscribe((sid) => {
      this.seriesForm.get("paper").setValue(null, { emitEvent: false });
      this.seriesForm.get("shift").setValue(null, { emitEvent: false });
      this.papers = [];
      this.shifts = [];
      this.seriesForm.get("paper")?.disable();
      this.seriesForm.get("shift")?.disable();
      if (sid && String(sid).trim() !== "") {
        console.log(`[BuildPaperComponent] Fetching papers for streamId: "${sid}"`);
        this.paperService.getByStream(sid).subscribe({
          next: (papersData) => {
            if (Array.isArray(papersData)) {
              this.papers = papersData;
              console.log(`[BuildPaperComponent] Loaded ${this.papers.length} papers for stream ${sid}`);
              if (this.papers.length > 0) {
                this.seriesForm.get("paper")?.enable();
              }
            } else {
              console.error("[BuildPaperComponent] papersData is not an array:", papersData);
              this.papers = [];
            }
          },
          error: (err) => {
            console.error("[BuildPaperComponent] Error fetching papers:", err);
            this.papers = [];
          }
        });
      } else {
        console.log("[BuildPaperComponent] streamId is null or empty. Not fetching papers.");
      }
    });
    this.seriesForm.get("paper").valueChanges.subscribe((pid) => {
      this.seriesForm.get("shift").setValue(null, { emitEvent: false });
      this.shifts = [];
      this.seriesForm.get("shift")?.disable();
      if (pid && String(pid).trim() !== "") {
        console.log(`[BuildPaperComponent] Fetching shifts for paperId: "${pid}"`);
        this.shiftService.getByPaper(pid).subscribe({
          next: (shiftsData) => {
            if (Array.isArray(shiftsData)) {
              this.shifts = shiftsData;
              console.log(`[BuildPaperComponent] Loaded ${this.shifts.length} shifts for paper ${pid}`);
              if (this.shifts.length > 0) {
                this.seriesForm.get("shift")?.enable();
              }
            } else {
              console.error("[BuildPaperComponent] shiftsData is not an array:", shiftsData);
              this.shifts = [];
            }
          },
          error: (err) => {
            console.error("[BuildPaperComponent] Error fetching shifts:", err);
            this.shifts = [];
          }
        });
      } else {
        console.log("[BuildPaperComponent] paperId is null or empty. Not fetching shifts.");
      }
    });
    this.qService.getAll().subscribe((q) => this.questionsList = q);
  }
  /**
   * @method ngOnDestroy
   * @description Angular lifecycle hook for component cleanup.
   * Unsubscribes from all RxJS subscriptions and completes subjects to prevent memory leaks.
   *
   * @returns {void}
   *
   * @example
   * ```typescript
   * // Cleanup operations performed:
   * // 1. Unsubscribe search subscriptions
   * // 2. Complete search debouncer subjects
   * // 3. Unsubscribe section interaction listeners
   * ```
   */
  ngOnDestroy() {
    this.searchSubscriptions.forEach((sub2) => {
      if (sub2)
        sub2.unsubscribe();
    });
    this.searchSubscriptions = [];
    this.searchDebouncers.forEach((debouncer) => {
      if (debouncer)
        debouncer.complete();
    });
    this.searchDebouncers = [];
    this.sectionInteractionSubscriptions.forEach((sub2) => {
      if (sub2)
        sub2.unsubscribe();
    });
    this.sectionInteractionSubscriptions = [];
  }
  /**
   * @private
   * @method setupSearchDebouncer
   * @description Sets up debounced search functionality for a specific section.
   * Cleans up existing subscriptions and creates new RxJS subject with debounce for real-time search.
   *
   * @param {number} secIndex - Index of the section to set up search debouncing for
   * @returns {void}
   *
   * @example
   * ```typescript
   * // Called when new section is added
   * this.setupSearchDebouncer(2); // Set up search for section index 2
   *
   * // Creates debounced search with 350ms delay
   * // Triggers performSearch when user stops typing
   * ```
   */
  setupSearchDebouncer(secIndex) {
    if (this.searchSubscriptions[secIndex]) {
      this.searchSubscriptions[secIndex].unsubscribe();
    }
    if (this.searchDebouncers[secIndex]) {
      this.searchDebouncers[secIndex].complete();
    }
    this.searchDebouncers[secIndex] = new Subject();
    this.searchSubscriptions[secIndex] = this.searchDebouncers[secIndex].pipe(
      debounceTime(350),
      // Debounce time in ms
      distinctUntilChanged()
      // Only emit if value has changed
    ).subscribe(() => {
      this.performSearch(secIndex);
    });
  }
  /**
   * @private
   * @method setupSectionInteractionLogic
   * @description Sets up reactive form logic to handle mutual exclusivity between question pool mode
   * and manual question selection within a section. Ensures only one method can be active at a time.
   *
   * @param {number} secIndex - Index of the section to set up interaction logic for
   * @returns {void}
   *
   * @example
   * ```typescript
   * // Called when new section is added
   * this.setupSectionInteractionLogic(1);
   *
   * // Behavior:
   * // - When pool is active → disable manual questions
   * // - When manual questions added → disable pool controls
   * // - Prevents conflicts between selection methods
   * ```
   */
  setupSectionInteractionLogic(secIndex) {
    const sectionGroup = this.sections.at(secIndex);
    const poolCtrl = sectionGroup.get("questionPool");
    const numToSelectCtrl = sectionGroup.get("questionsToSelectFromPool");
    const manualQuestionsArr = sectionGroup.get("questions");
    const interactionSub = new Subscription();
    this.sectionInteractionSubscriptions[secIndex] = interactionSub;
    const poolActivity$ = combineLatest([
      poolCtrl.valueChanges.pipe(startWith(poolCtrl.value)),
      numToSelectCtrl.valueChanges.pipe(startWith(numToSelectCtrl.value))
    ]).pipe(map(([poolVal, numVal]) => typeof poolVal === "string" && poolVal.trim() !== "" || typeof numVal === "number" && numVal > 0));
    interactionSub.add(poolActivity$.subscribe((isPoolActive) => {
      if (isPoolActive) {
        if (manualQuestionsArr.enabled) {
          while (manualQuestionsArr.length > 0) {
            manualQuestionsArr.removeAt(0, { emitEvent: false });
          }
          manualQuestionsArr.disable({ emitEvent: false });
        }
      } else {
        if (manualQuestionsArr.disabled && manualQuestionsArr.length === 0) {
          manualQuestionsArr.enable({ emitEvent: false });
        }
      }
    }));
    interactionSub.add(manualQuestionsArr.valueChanges.pipe(
      startWith(manualQuestionsArr.value),
      // Check initial state
      map((questions) => questions.length > 0)
    ).subscribe((isManualActive) => {
      if (isManualActive) {
        if (poolCtrl.enabled || numToSelectCtrl.enabled) {
          poolCtrl.setValue("", { emitEvent: false });
          numToSelectCtrl.setValue(0, { emitEvent: false });
          poolCtrl.disable({ emitEvent: false });
          numToSelectCtrl.disable({ emitEvent: false });
        }
      } else {
        if (poolCtrl.disabled && poolCtrl.value.trim() === "" && numToSelectCtrl.disabled && numToSelectCtrl.value === 0) {
          poolCtrl.enable({ emitEvent: false });
          numToSelectCtrl.enable({ emitEvent: false });
        }
      }
    }));
    const initialPoolActive = typeof poolCtrl.value === "string" && poolCtrl.value.trim() !== "" || typeof numToSelectCtrl.value === "number" && numToSelectCtrl.value > 0;
    const initialManualActive = manualQuestionsArr.length > 0;
    if (initialPoolActive && !initialManualActive) {
      manualQuestionsArr.disable({ emitEvent: false });
    } else if (initialManualActive && !initialPoolActive) {
      poolCtrl.disable({ emitEvent: false });
      numToSelectCtrl.disable({ emitEvent: false });
    } else if (initialPoolActive && initialManualActive) {
      while (manualQuestionsArr.length > 0) {
        manualQuestionsArr.removeAt(0, { emitEvent: false });
      }
      manualQuestionsArr.disable({ emitEvent: false });
      poolCtrl.enable({ emitEvent: false });
      numToSelectCtrl.enable({ emitEvent: false });
    } else {
      manualQuestionsArr.enable({ emitEvent: false });
      poolCtrl.enable({ emitEvent: false });
      numToSelectCtrl.enable({ emitEvent: false });
    }
  }
  /**
   * @getter sections
   * @description Getter method to access the sections FormArray from the reactive form.
   * Provides type-safe access to the form array containing all test sections.
   *
   * @returns {FormArray} The sections FormArray containing all test paper sections
   *
   * @example
   * ```typescript
   * // Access sections programmatically
   * const sectionCount = this.sections.length;
   * const firstSection = this.sections.at(0);
   *
   * // Used in template
   * *ngFor="let section of sections.controls; let i = index"
   * ```
   */
  get sections() {
    return this.seriesForm.get("sections");
  }
  /**
   * @method addSection
   * @description Adds a new test section to the form with default configuration.
   * Creates reactive form controls for section properties, search functionality, and interaction logic.
   *
   * @returns {void}
   *
   * @example
   * ```typescript
   * // Add new section to test paper
   * this.addSection();
   *
   * // Creates section with:
   * // - Title and order fields
   * // - Question array for manual selection
   * // - Question pool for batch selection
   * // - Marks configuration
   * // - Search and interaction setup
   * ```
   */
  addSection() {
    const sectionForm = this.fb.group({
      title: ["", Validators.required],
      order: [this.sections.length + 1, Validators.required],
      questions: this.fb.array([]),
      questionPool: [""],
      // Initialize as empty string or appropriate default
      questionsToSelectFromPool: [0, Validators.min(0)],
      defaultMarksForPooledQuestion: [1, Validators.min(0)],
      // ADDED
      defaultNegativeMarksForPooledQuestion: [0, Validators.min(0)],
      // ADDED
      randomizeQuestionOrderInSection: [false]
    });
    this.sections.push(sectionForm);
    const newIndex = this.sections.length - 1;
    this.previewedQuestions[newIndex] = [];
    this.sectionSearchTerms[newIndex] = "";
    this.sectionSearchResults[newIndex] = [];
    this.setupSearchDebouncer(newIndex);
    this.setupSectionInteractionLogic(newIndex);
  }
  /**
   * @method removeSection
   * @description Removes a test section from the form and cleans up associated data structures.
   * Properly unsubscribes from observables and removes related arrays to prevent memory leaks.
   *
   * @param {number} i - Index of the section to remove
   * @returns {void}
   *
   * @example
   * ```typescript
   * // Remove section at index 1
   * this.removeSection(1);
   *
   * // Cleanup operations:
   * // - Remove from FormArray
   * // - Clear search data
   * // - Unsubscribe observables
   * // - Clean up preview data
   * ```
   */
  removeSection(i) {
    this.sections.removeAt(i);
    this.sectionSearchTerms.splice(i, 1);
    this.sectionSearchResults.splice(i, 1);
    this.previewedQuestions.splice(i, 1);
    if (this.searchSubscriptions[i]) {
      this.searchSubscriptions[i].unsubscribe();
    }
    this.searchSubscriptions.splice(i, 1);
    if (this.searchDebouncers[i]) {
      this.searchDebouncers[i].complete();
    }
    this.searchDebouncers.splice(i, 1);
    if (this.sectionInteractionSubscriptions[i]) {
      this.sectionInteractionSubscriptions[i].unsubscribe();
    }
    this.sectionInteractionSubscriptions.splice(i, 1);
  }
  /**
   * @method getQuestions
   * @description Retrieves the questions FormArray for a specific section.
   * Provides type-safe access to the questions array within a section.
   *
   * @param {number} secIndex - Index of the section to get questions from
   * @returns {FormArray} The FormArray containing questions for the specified section
   *
   * @example
   * ```typescript
   * // Get questions array for section 0
   * const questionsArray = this.getQuestions(0);
   * const questionCount = questionsArray.length;
   *
   * // Add new question to the array
   * questionsArray.push(this.fb.group({...}));
   * ```
   */
  getQuestions(secIndex) {
    return this.sections.at(secIndex).get("questions");
  }
  /**
   * @method addQuestion
   * @description Adds a new question to a specific section with default marks configuration.
   * Validates that manual question entry is enabled before adding.
   *
   * @param {number} secIndex - Index of the section to add the question to
   * @returns {void}
   *
   * @example
   * ```typescript
   * // Add new question to section 0
   * this.addQuestion(0);
   *
   * // Creates question form with:
   * // - Question ID field
   * // - Marks (default: 1)
   * // - Negative marks (default: 0)
   * // - Validation rules
   * ```
   */
  addQuestion(secIndex) {
    const sectionGroup = this.sections.at(secIndex);
    if (sectionGroup.get("questions")?.disabled) {
      alert("Cannot add manual question when question pool is active or manual entry is disabled for this section.");
      return;
    }
    const qArray = this.getQuestions(secIndex);
    const newIndex = qArray.length;
    qArray.push(this.fb.group({
      question: ["", Validators.required],
      marks: [1, [Validators.required, Validators.min(0)]],
      negativeMarks: [0, [Validators.required, Validators.min(0)]]
    }));
    this.previewedQuestions[secIndex] = this.previewedQuestions[secIndex] || [];
    this.previewedQuestions[secIndex][newIndex] = null;
  }
  /**
   * @method removeQuestion
   * @description Removes a question from a specific section and cleans up preview data.
   *
   * @param {number} secIndex - Index of the section containing the question
   * @param {number} qIndex - Index of the question to remove within the section
   * @returns {void}
   *
   * @example
   * ```typescript
   * // Remove question at index 2 from section 1
   * this.removeQuestion(1, 2);
   *
   * // Operations:
   * // - Remove from FormArray
   * // - Clean up preview data
   * // - Maintain array indices
   * ```
   */
  removeQuestion(secIndex, qIndex) {
    this.getQuestions(secIndex).removeAt(qIndex);
    if (this.previewedQuestions[secIndex]) {
      this.previewedQuestions[secIndex].splice(qIndex, 1);
    }
  }
  /**
   * @getter computedTotal
   * @description Calculates the total marks for the entire test by summing marks from all sections.
   * Dynamically computes the total based on current form values.
   *
   * @returns {number} Total marks for the complete test paper
   *
   * @example
   * ```typescript
   * // Get current total marks
   * const totalMarks = this.computedTotal; // e.g., 150
   *
   * // Used in template for display
   * <span>Total Marks: {{ computedTotal }}</span>
   *
   * // Automatically updates when questions change
   * ```
   */
  get computedTotal() {
    return this.sections.controls.reduce((secSum, secCtrl) => {
      const qArr = secCtrl.get("questions");
      return secSum + qArr.controls.reduce((qSum, qCtrl) => qSum + (qCtrl.get("marks").value || 0), 0);
    }, 0);
  }
  /**
   * @method importCsv
   * @description Imports question IDs from a CSV file and adds them to a specific section.
   * Validates file format and ensures manual question entry is enabled.
   *
   * @param {Event} event - File input change event containing the CSV file
   * @param {number} secIndex - Index of the section to import questions into
   * @returns {void}
   *
   * @example
   * ```typescript
   * // Handle CSV file import
   * <input type="file" (change)="importCsv($event, 0)" accept=".csv">
   *
   * // Expected CSV format:
   * // 507f1f77bcf86cd799439011
   * // 507f1f77bcf86cd799439012
   * // (One question ID per line, 24 characters each)
   * ```
   */
  importCsv(event, secIndex) {
    const sectionGroup = this.sections.at(secIndex);
    if (sectionGroup.get("questions")?.disabled) {
      alert("Cannot import CSV when question pool is active or manual entry is disabled for this section.");
      return;
    }
    const file = event.target.files?.[0];
    if (!file)
      return;
    const reader = new FileReader();
    reader.onload = () => {
      const lines = reader.result.split(/\r?\n/).map((l) => l.trim()).filter((l) => l && l.length === 24);
      lines.forEach((id) => {
        this.getQuestions(secIndex).push(this.fb.group({
          question: [id, Validators.required],
          marks: [1, [Validators.required, Validators.min(0)]],
          negativeMarks: [0, [Validators.required, Validators.min(0)]]
        }));
      });
    };
    reader.readAsText(file);
  }
  /**
   * @method previewQuestion
   * @description Fetches and displays question details for preview in the UI.
   * Validates question ID format and handles API errors gracefully.
   *
   * @param {number} secIndex - Index of the section containing the question
   * @param {number} qIndex - Index of the question within the section
   * @returns {void}
   *
   * @example
   * ```typescript
   * // Preview question at section 0, question 1
   * this.previewQuestion(0, 1);
   *
   * // Displays:
   * // - Question text
   * // - Answer options
   * // - Subject/topic information
   * // - Error message if not found
   * ```
   */
  previewQuestion(secIndex, qIndex) {
    const id = this.getQuestions(secIndex).at(qIndex).get("question")?.value;
    if (!id || String(id).length !== 24) {
      this.previewedQuestions[secIndex] = this.previewedQuestions[secIndex] || [];
      this.previewedQuestions[secIndex][qIndex] = { questionText: "Invalid ID format" };
      return;
    }
    this.qService.getQuestionById(id).subscribe({
      next: (question) => {
        this.previewedQuestions[secIndex] = this.previewedQuestions[secIndex] || [];
        this.previewedQuestions[secIndex][qIndex] = question;
      },
      error: () => {
        this.previewedQuestions[secIndex] = this.previewedQuestions[secIndex] || [];
        this.previewedQuestions[secIndex][qIndex] = { translations: [{ questionText: "Not found" }] };
      }
    });
  }
  /**
   * @method onSubmit
   * @description Handles form submission for test series creation.
   * Validates form data, ensures minimum question requirements, processes question pools,
   * and handles shift creation before submitting to the backend.
   *
   * @returns {void}
   *
   * @example
   * ```typescript
   * // Called from template
   * <form (ngSubmit)="onSubmit()">
   *
   * // Validation checks:
   * // - Form validity
   * // - Minimum 2 questions
   * // - Shift selection/creation
   * // - Question pool processing
   * ```
   */
  onSubmit() {
    if (this.seriesForm.invalid) {
      console.error("Form is invalid!", this.seriesForm.errors);
      return;
    }
    const hasEnoughQuestions = this.validateMinimumQuestions(2);
    if (!hasEnoughQuestions) {
      alert("Test series must have at least 2 questions. Please add more questions before submitting.");
      return;
    }
    const formValues = this.seriesForm.getRawValue();
    const paperId = formValues.paper;
    if (formValues.sections) {
      formValues.sections.forEach((section) => {
        if (typeof section.questionPool === "string") {
          section.questionPool = section.questionPool.split(",").map((id) => id.trim()).filter((id) => id && id.length > 0);
        } else if (section.questionPool === null || section.questionPool === void 0) {
          section.questionPool = [];
        }
      });
    }
    if (!formValues.shift && paperId) {
      console.log("No shift selected, trying to get or create a default one");
      this.shiftService.getOrCreateDefaultShift(paperId).subscribe({
        next: (shift) => {
          console.log("Using default shift:", shift);
          const valuesWithShift = __spreadProps(__spreadValues({}, formValues), { shift: shift._id });
          this.submitTestSeries(valuesWithShift);
        },
        error: (err) => {
          console.error("Failed to get or create default shift:", err);
          alert("Failed to create default shift. Please try again or manually select a shift.");
        }
      });
    } else {
      this.submitTestSeries(formValues);
    }
  }
  /**
   * @private
   * @method submitTestSeries
   * @description Helper method to submit the processed test series data to the backend.
   * Handles API response and provides user feedback.
   *
   * @param {any} formValues - Processed form values ready for backend submission
   * @returns {void}
   *
   * @example
   * ```typescript
   * // Internal usage after validation
   * this.submitTestSeries(processedFormData);
   *
   * // Handles:
   * // - API call to create test series
   * // - Success notification
   * // - Error handling and user feedback
   * ```
   */
  // Helper method to submit the test series to the backend
  submitTestSeries(formValues) {
    this.tsService.create(formValues).subscribe({
      next: (res) => {
        alert("Test Series created!");
      },
      error: (err) => {
        alert("Creation failed: " + (err.message || "Unknown error"));
      }
    });
  }
  /**
   * @method onFamilyChange
   * @description Handles exam family selection change event.
   * Resets dependent dropdown values and manages UI state for cascade functionality.
   *
   * @param {string} familyId - Selected exam family ID
   * @returns {void}
   *
   * @example
   * ```typescript
   * // Called from template dropdown
   * <select (change)="onFamilyChange($event.target.value)">
   *
   * // Cascade behavior:
   * // - Clear stream, paper, shift values
   * // - Reset dependent data arrays
   * // - Trigger stream loading
   * ```
   */
  onFamilyChange(familyId) {
    console.log(`Family changed to ${familyId}`);
    if (!familyId || familyId === "") {
      this.seriesForm.get("stream").setValue("", { emitEvent: true });
      this.seriesForm.get("paper").setValue("", { emitEvent: true });
      this.seriesForm.get("shift").setValue("", { emitEvent: true });
      this.streams = [];
      this.papers = [];
      this.shifts = [];
    } else {
      setTimeout(() => {
        if (this.streams.length === 0) {
          console.log("[BuildPaperComponent] No streams found for this family. Disabling dropdown.");
          this.seriesForm.get("stream")?.disable();
        }
      }, 500);
    }
  }
  /**
   * @method onStreamChange
   * @description Handles exam stream selection change event.
   * Resets paper and shift values as part of the hierarchical dropdown cascade.
   *
   * @param {string} streamId - Selected exam stream ID
   * @returns {void}
   *
   * @example
   * ```typescript
   * // Called from template dropdown
   * <select (change)="onStreamChange($event.target.value)">
   *
   * // Cascade behavior:
   * // - Clear paper and shift values
   * // - Reset dependent data arrays
   * // - Trigger paper loading
   * ```
   */
  onStreamChange(streamId) {
    console.log(`Stream changed to ${streamId}`);
    if (!streamId || streamId === "") {
      this.seriesForm.get("paper").setValue("", { emitEvent: true });
      this.seriesForm.get("shift").setValue("", { emitEvent: true });
      this.papers = [];
      this.shifts = [];
    }
  }
  /**
   * @method onPaperChange
   * @description Handles exam paper selection change event.
   * Resets shift value as part of the hierarchical dropdown cascade.
   *
   * @param {string} paperId - Selected exam paper ID
   * @returns {void}
   *
   * @example
   * ```typescript
   * // Called from template dropdown
   * <select (change)="onPaperChange($event.target.value)">
   *
   * // Cascade behavior:
   * // - Clear shift value
   * // - Reset shifts data array
   * // - Trigger shift loading
   * ```
   */
  onPaperChange(paperId) {
    console.log(`Paper changed to ${paperId}`);
    if (!paperId || paperId === "") {
      this.seriesForm.get("shift").setValue("", { emitEvent: true });
      this.shifts = [];
    }
  }
  /**
   * @method onShiftChange
   * @description Handles exam shift selection change event.
   * Provides extension point for additional logic when shift selection changes.
   *
   * @param {string} shiftId - Selected exam shift ID
   * @returns {void}
   *
   * @example
   * ```typescript
   * // Called from template dropdown
   * <select (change)="onShiftChange($event.target.value)">
   *
   * // Currently used for:
   * // - Logging shift selection
   * // - Future extension point for shift-specific logic
   * ```
   */
  onShiftChange(shiftId) {
    console.log(`Shift changed to ${shiftId}`);
  }
  /**
   * @method performSearch
   * @description Performs real-time search through the question bank for a specific section.
   * Filters questions based on search term matching in question text translations.
   *
   * @param {number} secIndex - Index of the section performing the search
   * @returns {void}
   *
   * @example
   * ```typescript
   * // Triggered by debounced search input
   * this.performSearch(0); // Search for section 0
   *
   * // Search criteria:
   * // - Minimum 3 characters required
   * // - Case-insensitive matching
   * // - Searches in all translation texts
   * // - Updates sectionSearchResults array
   * ```
   */
  performSearch(secIndex) {
    const currentSearchTerm = this.sectionSearchTerms[secIndex];
    if (!this.questionsList || this.questionsList.length === 0) {
      if (this.sectionSearchResults[secIndex]) {
        this.sectionSearchResults[secIndex] = [];
      }
      return;
    }
    if (!this.sectionSearchResults[secIndex]) {
      this.sectionSearchResults[secIndex] = [];
    }
    const processedTerm = currentSearchTerm ? currentSearchTerm.trim().toLowerCase() : "";
    if (processedTerm.length > 2) {
      this.sectionSearchResults[secIndex] = this.questionsList.filter((q) => {
        if (q.translations && Array.isArray(q.translations)) {
          return q.translations.some((translation) => {
            const text3 = translation.questionText;
            if (typeof text3 === "string") {
              return text3.toLowerCase().includes(processedTerm);
            }
            return false;
          });
        }
        return false;
      });
    } else {
      this.sectionSearchResults[secIndex] = [];
    }
  }
  /**
   * @method onSearchInputChanged
   * @description Handles search input change events with debouncing.
   * Validates that manual question entry is enabled before triggering search.
   *
   * @param {number} secIndex - Index of the section where search input changed
   * @returns {void}
   *
   * @example
   * ```typescript
   * // Called from template search input
   * <input (input)="onSearchInputChanged(0)" [(ngModel)]="sectionSearchTerms[0]">
   *
   * // Behavior:
   * // - Checks if manual questions are enabled
   * // - Triggers debounced search via subject
   * // - Prevents search when pool mode is active
   * ```
   */
  // Called from the template on search input change
  onSearchInputChanged(secIndex) {
    const sectionGroup = this.sections.at(secIndex);
    if (sectionGroup.get("questions")?.disabled) {
      return;
    }
    this.searchDebouncers[secIndex].next(this.sectionSearchTerms[secIndex]);
  }
  /**
   * @method addQuestionFromSearchResults
   * @description Adds a question from search results to a specific section.
   * Validates permissions, creates form controls, and clears search state.
   *
   * @param {number} secIndex - Index of the section to add the question to
   * @param {Question} questionToAdd - Question object from search results to add
   * @returns {void}
   *
   * @example
   * ```typescript
   * // Called from template search results
   * <button (click)="addQuestionFromSearchResults(0, question)">Add</button>
   *
   * // Operations:
   * // - Validates manual entry is enabled
   * // - Creates question form group
   * // - Adds to preview data
   * // - Clears search results
   * ```
   */
  addQuestionFromSearchResults(secIndex, questionToAdd) {
    const sectionGroup = this.sections.at(secIndex);
    if (sectionGroup.get("questions")?.disabled) {
      alert("Cannot add question from search results when question pool is active or manual entry is disabled for this section.");
      return;
    }
    const questionsArray = this.getQuestions(secIndex);
    const newIndex = questionsArray.length;
    questionsArray.push(this.fb.group({
      // MODIFIED: Use helper to ensure string ID is stored
      question: [this.getQuestionIdString(questionToAdd._id), Validators.required],
      marks: [1, [Validators.required, Validators.min(0)]],
      negativeMarks: [0, [Validators.required, Validators.min(0)]]
    }));
    this.previewedQuestions[secIndex] = this.previewedQuestions[secIndex] || [];
    this.previewedQuestions[secIndex][newIndex] = questionToAdd;
    this.sectionSearchTerms[secIndex] = "";
    this.sectionSearchResults[secIndex] = [];
    if (this.searchDebouncers[secIndex]) {
      this.searchDebouncers[secIndex].next("");
    }
  }
  /**
   * @private
   * @method validateMinimumQuestions
   * @description Validates that the test series meets minimum question requirements.
   * Counts questions from both manual selection and question pools across all sections.
   *
   * @param {number} minQuestions - Minimum number of questions required for the test
   * @returns {boolean} True if minimum requirement is met, false otherwise
   *
   * @example
   * ```typescript
   * // Validate before submission
   * const isValid = this.validateMinimumQuestions(2);
   * if (!isValid) {
   *   alert('Test must have at least 2 questions');
   *   return;
   * }
   *
   * // Counts from:
   * // - Manual questions in each section
   * // - Questions selected from pools
   * // - Considers section interaction states
   * ```
   */
  /**
   * Validates that the test series has at least the minimum required number of questions
   * @param minQuestions Minimum number of questions required
   * @returns boolean indicating if the requirement is met
   */
  validateMinimumQuestions(minQuestions) {
    let totalQuestions = 0;
    if (this.sections.length > 0) {
      for (let i = 0; i < this.sections.length; i++) {
        const sectionGroup = this.sections.at(i);
        const questionArray = sectionGroup.get("questions");
        if (!questionArray.disabled) {
          totalQuestions += questionArray.length;
        }
        const poolCtrl = sectionGroup.get("questionPool");
        const numToSelectCtrl = sectionGroup.get("questionsToSelectFromPool");
        if (poolCtrl && numToSelectCtrl && !poolCtrl.disabled && !numToSelectCtrl.disabled) {
          const poolValue = poolCtrl.value;
          const numToSelect = numToSelectCtrl.value;
          if (typeof poolValue === "string" && poolValue.trim() !== "" && typeof numToSelect === "number" && numToSelect > 0) {
            const questionIds = poolValue.split(",").map((id) => id.trim()).filter((id) => id && id.length > 0);
            totalQuestions += Math.min(numToSelect, questionIds.length);
          }
        }
      }
    }
    console.log(`Total questions in test series: ${totalQuestions}, minimum required: ${minQuestions}`);
    return totalQuestions >= minQuestions;
  }
  static \u0275fac = function BuildPaperComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _BuildPaperComponent)(\u0275\u0275directiveInject(FormBuilder), \u0275\u0275directiveInject(TestSeriesService), \u0275\u0275directiveInject(QuestionService), \u0275\u0275directiveInject(ExamFamilyService), \u0275\u0275directiveInject(ExamStreamService), \u0275\u0275directiveInject(ExamPaperService), \u0275\u0275directiveInject(ExamShiftService));
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _BuildPaperComponent, selectors: [["app-build-paper"]], decls: 171, vars: 13, consts: [["familySelect", ""], ["streamSelect", ""], ["paperSelect", ""], ["shiftSelect", ""], [1, "min-h-screen", "bg-gradient-to-br", "from-gray-50", "to-blue-50", "py-8", "px-4", "sm:px-6", "lg:px-8"], [1, "max-w-4xl", "mx-auto"], [1, "text-center", "mb-8"], [1, "text-4xl", "font-bold", "text-gray-900", "mb-2"], [1, "text-lg", "text-gray-600"], [1, "w-24", "h-1", "bg-gradient-to-r", "from-primary-500", "to-secondary-500", "mx-auto", "mt-4", "rounded-full"], [1, "space-y-8", 3, "ngSubmit", "formGroup"], [1, "bg-white", "rounded-2xl", "shadow-soft", "border", "border-gray-100", "overflow-hidden"], [1, "bg-gradient-to-r", "from-primary-50", "to-secondary-50", "px-6", "py-4", "border-b", "border-gray-100"], [1, "text-xl", "font-semibold", "text-gray-900", "flex", "items-center"], ["fill", "none", "stroke", "currentColor", "viewBox", "0 0 24 24", 1, "w-6", "h-6", "mr-2", "text-primary-600"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"], [1, "p-6", "space-y-6"], [1, "grid", "grid-cols-1", "md:grid-cols-2", "gap-6"], [1, "md:col-span-2"], ["for", "title", 1, "block", "text-sm", "font-medium", "text-gray-700", "mb-2"], ["id", "title", "formControlName", "title", "type", "text", "placeholder", "Enter test series title", 1, "w-full", "px-4", "py-3", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-primary-500", "focus:border-primary-500", "transition-all", "duration-200", "bg-white", "hover:border-gray-400"], ["for", "duration", 1, "block", "text-sm", "font-medium", "text-gray-700", "mb-2"], ["id", "duration", "formControlName", "duration", "type", "number", "min", "1", "placeholder", "Test duration", 1, "w-full", "px-4", "py-3", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-primary-500", "focus:border-primary-500", "transition-all", "duration-200", "bg-white", "hover:border-gray-400"], ["for", "maxAttempts", 1, "block", "text-sm", "font-medium", "text-gray-700", "mb-2"], ["id", "maxAttempts", "formControlName", "maxAttempts", "type", "number", "min", "1", "placeholder", "Maximum attempts allowed", 1, "w-full", "px-4", "py-3", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-primary-500", "focus:border-primary-500", "transition-all", "duration-200", "bg-white", "hover:border-gray-400"], ["for", "type", 1, "block", "text-sm", "font-medium", "text-gray-700", "mb-2"], ["id", "type", "formControlName", "type", 1, "w-full", "px-4", "py-3", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-primary-500", "focus:border-primary-500", "transition-all", "duration-200", "bg-white", "hover:border-gray-400"], ["value", ""], ["value", "Real_Exam"], ["value", "Practice_Exam"], ["value", "Live_Exam"], ["value", "Quiz_Exam"], ["for", "mode", 1, "block", "text-sm", "font-medium", "text-gray-700", "mb-2"], ["id", "mode", "formControlName", "mode", 1, "w-full", "px-4", "py-3", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-primary-500", "focus:border-primary-500", "transition-all", "duration-200", "bg-white", "hover:border-gray-400"], ["value", "practice"], ["value", "live"], ["for", "year", 1, "block", "text-sm", "font-medium", "text-gray-700", "mb-2"], ["id", "year", "formControlName", "year", "type", "number", "min", "1900", "placeholder", "Exam year", 1, "w-full", "px-4", "py-3", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-primary-500", "focus:border-primary-500", "transition-all", "duration-200", "bg-white", "hover:border-gray-400", 3, "max"], ["for", "startAt", 1, "block", "text-sm", "font-medium", "text-gray-700", "mb-2"], ["id", "startAt", "formControlName", "startAt", "type", "datetime-local", 1, "w-full", "px-4", "py-3", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-primary-500", "focus:border-primary-500", "transition-all", "duration-200", "bg-white", "hover:border-gray-400"], ["for", "endAt", 1, "block", "text-sm", "font-medium", "text-gray-700", "mb-2"], ["id", "endAt", "formControlName", "endAt", "type", "datetime-local", 1, "w-full", "px-4", "py-3", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-primary-500", "focus:border-primary-500", "transition-all", "duration-200", "bg-white", "hover:border-gray-400"], [1, "bg-gradient-to-r", "from-secondary-50", "to-primary-50", "px-6", "py-4", "border-b", "border-gray-100"], ["fill", "none", "stroke", "currentColor", "viewBox", "0 0 24 24", 1, "w-6", "h-6", "mr-2", "text-secondary-600"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M15 12a3 3 0 11-6 0 3 3 0 016 0z"], [1, "p-6", "space-y-4"], [1, "grid", "grid-cols-1", "md:grid-cols-2", "gap-4"], [1, "flex", "items-center", "p-4", "bg-gray-50", "rounded-lg", "border", "border-gray-200", "hover:border-primary-300", "transition-colors", "duration-200"], ["type", "checkbox", "id", "randomizeSectionOrder", "formControlName", "randomizeSectionOrder", 1, "h-4", "w-4", "text-primary-600", "focus:ring-primary-500", "border-gray-300", "rounded"], ["for", "randomizeSectionOrder", 1, "ml-3", "text-sm", "font-medium", "text-gray-700"], ["type", "checkbox", "id", "enablePublicLeaderboard", "formControlName", "enablePublicLeaderboard", 1, "h-4", "w-4", "text-primary-600", "focus:ring-primary-500", "border-gray-300", "rounded"], ["for", "enablePublicLeaderboard", 1, "ml-3", "text-sm", "font-medium", "text-gray-700"], [1, "bg-gradient-to-r", "from-warning-50", "to-success-50", "px-6", "py-4", "border-b", "border-gray-100"], ["fill", "none", "stroke", "currentColor", "viewBox", "0 0 24 24", 1, "w-6", "h-6", "mr-2", "text-warning-600"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"], ["for", "family", 1, "block", "text-sm", "font-medium", "text-gray-700", "mb-2"], ["id", "family", "formControlName", "family", 1, "w-full", "px-4", "py-3", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-primary-500", "focus:border-primary-500", "transition-all", "duration-200", "bg-white", "hover:border-gray-400", 3, "change"], [3, "value", 4, "ngFor", "ngForOf"], ["class", "mt-2 text-sm text-orange-600 bg-orange-50 p-3 rounded-lg", 4, "ngIf"], ["for", "stream", 1, "block", "text-sm", "font-medium", "text-gray-700", "mb-2"], ["id", "stream", "formControlName", "stream", 1, "w-full", "px-4", "py-3", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-primary-500", "focus:border-primary-500", "transition-all", "duration-200", "bg-white", "hover:border-gray-400", 3, "change"], ["for", "paper", 1, "block", "text-sm", "font-medium", "text-gray-700", "mb-2"], ["id", "paper", "formControlName", "paper", 1, "w-full", "px-4", "py-3", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-primary-500", "focus:border-primary-500", "transition-all", "duration-200", "bg-white", "hover:border-gray-400", 3, "change"], ["for", "shift", 1, "block", "text-sm", "font-medium", "text-gray-700", "mb-2"], ["id", "shift", "formControlName", "shift", 1, "w-full", "px-4", "py-3", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-primary-500", "focus:border-primary-500", "transition-all", "duration-200", "bg-white", "hover:border-gray-400", 3, "change"], ["class", "mt-2 text-sm text-blue-600 bg-blue-50 p-3 rounded-lg", 4, "ngIf"], [1, "bg-gradient-to-r", "from-success-50", "to-primary-50", "px-6", "py-4", "border-b", "border-gray-100"], ["fill", "none", "stroke", "currentColor", "viewBox", "0 0 24 24", 1, "w-6", "h-6", "mr-2", "text-success-600"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"], [1, "p-6"], ["formArrayName", "sections", 1, "space-y-6"], ["class", "bg-gray-50 rounded-xl p-6 border border-gray-200", 3, "formGroupName", 4, "ngFor", "ngForOf"], [1, "mt-8", "text-center"], ["type", "button", 1, "inline-flex", "items-center", "px-6", "py-3", "bg-primary-600", "text-white", "rounded-lg", "hover:bg-primary-700", "focus:ring-2", "focus:ring-primary-500", "transition-colors", "duration-200", 3, "click"], ["fill", "none", "stroke", "currentColor", "viewBox", "0 0 24 24", 1, "w-5", "h-5", "mr-2"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M12 6v6m0 0v6m0-6h6m-6 0H6"], [1, "bg-gradient-to-r", "from-purple-50", "to-primary-50", "px-6", "py-4", "border-b", "border-gray-100"], ["fill", "none", "stroke", "currentColor", "viewBox", "0 0 24 24", 1, "w-6", "h-6", "mr-2", "text-purple-600"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"], [1, "bg-gradient-to-r", "from-green-50", "to-blue-50", "rounded-xl", "p-6", "border", "border-green-200"], [1, "text-center"], [1, "text-2xl", "font-bold", "text-gray-900", "mb-2"], [1, "text-4xl", "font-bold", "text-green-600"], [1, "text-sm", "text-gray-600", "mt-2"], [1, "bg-orange-50", "border", "border-orange-200", "rounded-lg", "p-4"], [1, "flex", "items-start"], ["fill", "none", "stroke", "currentColor", "viewBox", "0 0 24 24", 1, "w-5", "h-5", "text-orange-600", "mt-0.5", "mr-3", "flex-shrink-0"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"], [1, "font-semibold", "text-orange-800"], [1, "text-sm", "text-orange-700", "mt-1"], [1, "pt-4"], ["type", "submit", 1, "w-full", "py-4", "px-6", "bg-gradient-to-r", "from-primary-600", "to-secondary-600", "text-white", "text-lg", "font-semibold", "rounded-xl", "hover:from-primary-700", "hover:to-secondary-700", "focus:ring-2", "focus:ring-primary-500", "disabled:opacity-50", "disabled:cursor-not-allowed", "transition-all", "duration-200", "shadow-lg", "hover:shadow-xl", 3, "disabled"], [1, "flex", "items-center", "justify-center"], ["fill", "none", "stroke", "currentColor", "viewBox", "0 0 24 24", 1, "w-6", "h-6", "mr-2"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M5 13l4 4L19 7"], [3, "value"], [1, "mt-2", "text-sm", "text-orange-600", "bg-orange-50", "p-3", "rounded-lg"], [4, "ngIf"], [1, "mt-2", "text-sm", "text-blue-600", "bg-blue-50", "p-3", "rounded-lg"], [1, "bg-gray-50", "rounded-xl", "p-6", "border", "border-gray-200", 3, "formGroupName"], [1, "flex", "items-center", "justify-between", "mb-4"], [1, "text-lg", "font-semibold", "text-gray-900", "flex", "items-center"], [1, "bg-primary-500", "text-white", "rounded-full", "w-8", "h-8", "flex", "items-center", "justify-center", "text-sm", "font-bold", "mr-3"], ["type", "button", 1, "text-red-600", "hover:text-red-800", "hover:bg-red-50", "rounded-lg", "p-2", "transition-colors", "duration-200", 3, "click", "disabled"], ["fill", "none", "stroke", "currentColor", "viewBox", "0 0 24 24", 1, "w-5", "h-5"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"], [1, "grid", "grid-cols-1", "md:grid-cols-2", "gap-4", "mb-6"], [1, "block", "text-sm", "font-medium", "text-gray-700", "mb-2", 3, "for"], ["formControlName", "title", "type", "text", "placeholder", "Enter section title", 1, "w-full", "px-3", "py-2", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-primary-500", "focus:border-primary-500", "transition-all", "duration-200", 3, "id"], ["formControlName", "order", "type", "number", "min", "1", "placeholder", "Section order", 1, "w-full", "px-3", "py-2", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-primary-500", "focus:border-primary-500", "transition-all", "duration-200", 3, "id"], [1, "mb-6"], [1, "flex", "items-center", "p-3", "bg-white", "rounded-lg", "border", "border-gray-200"], ["type", "checkbox", "formControlName", "randomizeQuestionOrderInSection", 1, "h-4", "w-4", "text-primary-600", "focus:ring-primary-500", "border-gray-300", "rounded", 3, "id"], [1, "ml-3", "text-sm", "font-medium", "text-gray-700", 3, "for"], [1, "bg-white", "rounded-lg", "p-4", "border", "border-gray-200", "mb-6"], [1, "text-md", "font-semibold", "text-gray-900", "mb-4", "flex", "items-center"], ["fill", "none", "stroke", "currentColor", "viewBox", "0 0 24 24", 1, "w-5", "h-5", "mr-2", "text-secondary-600"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"], [1, "grid", "grid-cols-1", "md:grid-cols-2", "gap-4", "mb-4"], ["type", "number", "formControlName", "questionsToSelectFromPool", "min", "0", "placeholder", "Number of questions to select", 1, "w-full", "px-3", "py-2", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-primary-500", "focus:border-primary-500", "transition-all", "duration-200", 3, "id"], [1, "mb-4"], ["formControlName", "questionPool", "rows", "3", "placeholder", "Enter question IDs, separated by commas", 1, "w-full", "px-3", "py-2", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-primary-500", "focus:border-primary-500", "transition-all", "duration-200", 3, "id"], ["class", "grid grid-cols-1 md:grid-cols-2 gap-4", 4, "ngIf"], ["formArrayName", "questions", 1, "bg-white", "rounded-lg", "p-4", "border", "border-gray-200"], ["fill", "none", "stroke", "currentColor", "viewBox", "0 0 24 24", 1, "w-5", "h-5", "mr-2", "text-primary-600"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"], [1, "mb-6", "p-4", "bg-blue-50", "border", "border-blue-200", "rounded-lg"], [1, "text-sm", "font-semibold", "text-blue-900", "mb-3", "flex", "items-center"], ["fill", "none", "stroke", "currentColor", "viewBox", "0 0 24 24", 1, "w-4", "h-4", "mr-2"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"], ["type", "text", "placeholder", "Type to search questions...", 1, "w-full", "px-4", "py-3", "border", "border-blue-300", "rounded-lg", "focus:ring-2", "focus:ring-blue-500", "focus:border-blue-500", "transition-all", "duration-200", "bg-white", 3, "ngModelChange", "ngModel", "ngModelOptions"], ["class", "mt-4", 4, "ngIf"], ["class", "mt-3 p-3 bg-orange-50 border border-orange-200 rounded-lg text-sm text-orange-700", 4, "ngIf"], [1, "space-y-4"], ["class", "bg-gray-50 border border-gray-200 rounded-lg p-4", 3, "formGroupName", 4, "ngFor", "ngForOf"], [1, "mt-6", "space-y-3"], [1, "flex", "items-center", "space-x-3"], [1, "block", "text-sm", "font-medium", "text-gray-700", 3, "for"], ["type", "file", "accept", ".csv", 1, "text-sm", "text-gray-500", "file:mr-4", "file:py-2", "file:px-4", "file:rounded-lg", "file:border-0", "file:text-sm", "file:font-medium", "file:bg-blue-50", "file:text-blue-700", "hover:file:bg-blue-100", "transition-colors", "duration-200", 3, "change", "id"], ["type", "button", 1, "w-full", "px-4", "py-3", "bg-green-600", "text-white", "rounded-lg", "hover:bg-green-700", "focus:ring-2", "focus:ring-green-500", "transition-colors", "duration-200", "flex", "items-center", "justify-center", 3, "click"], ["type", "number", "formControlName", "defaultMarksForPooledQuestion", "min", "0", "placeholder", "Default marks", 1, "w-full", "px-3", "py-2", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-primary-500", "focus:border-primary-500", "transition-all", "duration-200", 3, "id"], ["type", "number", "formControlName", "defaultNegativeMarksForPooledQuestion", "min", "0", "step", "0.25", "placeholder", "Default negative marks", 1, "w-full", "px-3", "py-2", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-primary-500", "focus:border-primary-500", "transition-all", "duration-200", 3, "id"], [1, "mt-4"], [1, "text-sm", "font-medium", "text-blue-900", "mb-2"], [1, "space-y-2", "max-h-64", "overflow-y-auto"], ["class", "flex items-center justify-between p-3 bg-white border border-blue-200 rounded-lg hover:border-blue-300 transition-colors", 4, "ngFor", "ngForOf"], [1, "flex", "items-center", "justify-between", "p-3", "bg-white", "border", "border-blue-200", "rounded-lg", "hover:border-blue-300", "transition-colors"], [1, "text-sm", "text-gray-700", "flex-1", "mr-3", 3, "innerHTML"], ["type", "button", 1, "px-3", "py-1", "text-sm", "bg-green-600", "text-white", "rounded-md", "hover:bg-green-700", "focus:ring-2", "focus:ring-green-500", "transition-colors", "duration-200", 3, "click"], [1, "mt-3", "p-3", "bg-orange-50", "border", "border-orange-200", "rounded-lg", "text-sm", "text-orange-700"], [1, "bg-gray-50", "border", "border-gray-200", "rounded-lg", "p-4", 3, "formGroupName"], [1, "flex", "items-start", "justify-between", "mb-3"], [1, "text-sm", "font-semibold", "text-gray-900", "flex", "items-center"], [1, "bg-primary-100", "text-primary-800", "rounded-full", "w-6", "h-6", "flex", "items-center", "justify-center", "text-xs", "font-bold", "mr-2"], ["type", "button", 1, "text-red-600", "hover:text-red-800", "hover:bg-red-50", "rounded-lg", "p-1", "transition-colors", "duration-200", 3, "click"], ["fill", "none", "stroke", "currentColor", "viewBox", "0 0 24 24", 1, "w-4", "h-4"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M6 18L18 6M6 6l12 12"], [1, "mb-3"], [1, "block", "text-sm", "font-medium", "text-gray-700", "mb-1", 3, "for"], [1, "flex", "space-x-2"], ["type", "text", "formControlName", "question", "placeholder", "Paste question _id", 1, "flex-1", "px-3", "py-2", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-primary-500", "focus:border-primary-500", "transition-all", "duration-200", 3, "id"], ["type", "button", 1, "px-4", "py-2", "bg-blue-600", "text-white", "rounded-lg", "hover:bg-blue-700", "focus:ring-2", "focus:ring-blue-500", "transition-colors", "duration-200", "flex", "items-center", 3, "click"], ["fill", "none", "stroke", "currentColor", "viewBox", "0 0 24 24", 1, "w-4", "h-4", "mr-1"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"], ["class", "mb-3 p-3 bg-blue-50 border border-blue-200 rounded-lg", 4, "ngIf"], [1, "grid", "grid-cols-1", "md:grid-cols-2", "gap-3"], ["formControlName", "marks", "type", "number", "min", "1", "required", "", "placeholder", "Marks", 1, "w-full", "px-3", "py-2", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-primary-500", "focus:border-primary-500", "transition-all", "duration-200", 3, "id"], ["formControlName", "negativeMarks", "type", "number", "min", "0", "step", "0.25", "placeholder", "Negative Marks", 1, "w-full", "px-3", "py-2", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-primary-500", "focus:border-primary-500", "transition-all", "duration-200", 3, "id"], [1, "mb-3", "p-3", "bg-blue-50", "border", "border-blue-200", "rounded-lg"], [1, "text-sm", "text-blue-900", "font-medium", "mb-1"], [1, "text-sm", "text-blue-800"]], template: function BuildPaperComponent_Template(rf, ctx) {
    if (rf & 1) {
      const _r1 = \u0275\u0275getCurrentView();
      \u0275\u0275elementStart(0, "div", 4)(1, "div", 5)(2, "div", 6)(3, "h1", 7);
      \u0275\u0275text(4, "Build Paper");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(5, "p", 8);
      \u0275\u0275text(6, "Create and configure your test series");
      \u0275\u0275elementEnd();
      \u0275\u0275element(7, "div", 9);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "form", 10);
      \u0275\u0275listener("ngSubmit", function BuildPaperComponent_Template_form_ngSubmit_8_listener() {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.onSubmit());
      });
      \u0275\u0275elementStart(9, "div", 11)(10, "div", 12)(11, "h2", 13);
      \u0275\u0275namespaceSVG();
      \u0275\u0275elementStart(12, "svg", 14);
      \u0275\u0275element(13, "path", 15);
      \u0275\u0275elementEnd();
      \u0275\u0275text(14, " Basic Information ");
      \u0275\u0275elementEnd()();
      \u0275\u0275namespaceHTML();
      \u0275\u0275elementStart(15, "div", 16)(16, "div", 17)(17, "div", 18)(18, "label", 19);
      \u0275\u0275text(19, "Title");
      \u0275\u0275elementEnd();
      \u0275\u0275element(20, "input", 20);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(21, "div")(22, "label", 21);
      \u0275\u0275text(23, "Duration (minutes)");
      \u0275\u0275elementEnd();
      \u0275\u0275element(24, "input", 22);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(25, "div")(26, "label", 23);
      \u0275\u0275text(27, "Max Attempts");
      \u0275\u0275elementEnd();
      \u0275\u0275element(28, "input", 24);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(29, "div")(30, "label", 25);
      \u0275\u0275text(31, "Test Type");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(32, "select", 26)(33, "option", 27);
      \u0275\u0275text(34, "Select test type");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(35, "option", 28);
      \u0275\u0275text(36, "Real Exam");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(37, "option", 29);
      \u0275\u0275text(38, "Practice Exam");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(39, "option", 30);
      \u0275\u0275text(40, "Live Exam");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(41, "option", 31);
      \u0275\u0275text(42, "Quiz Exam");
      \u0275\u0275elementEnd()()();
      \u0275\u0275elementStart(43, "div")(44, "label", 32);
      \u0275\u0275text(45, "Mode");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(46, "select", 33)(47, "option", 27);
      \u0275\u0275text(48, "Select mode");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(49, "option", 34);
      \u0275\u0275text(50, "Practice");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(51, "option", 35);
      \u0275\u0275text(52, "Live");
      \u0275\u0275elementEnd()()();
      \u0275\u0275elementStart(53, "div")(54, "label", 36);
      \u0275\u0275text(55, "Year");
      \u0275\u0275elementEnd();
      \u0275\u0275element(56, "input", 37);
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(57, "div", 17)(58, "div")(59, "label", 38);
      \u0275\u0275text(60, "Start Time");
      \u0275\u0275elementEnd();
      \u0275\u0275element(61, "input", 39);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(62, "div")(63, "label", 40);
      \u0275\u0275text(64, "End Time");
      \u0275\u0275elementEnd();
      \u0275\u0275element(65, "input", 41);
      \u0275\u0275elementEnd()()()();
      \u0275\u0275elementStart(66, "div", 11)(67, "div", 42)(68, "h2", 13);
      \u0275\u0275namespaceSVG();
      \u0275\u0275elementStart(69, "svg", 43);
      \u0275\u0275element(70, "path", 44)(71, "path", 45);
      \u0275\u0275elementEnd();
      \u0275\u0275text(72, " Configuration Options ");
      \u0275\u0275elementEnd()();
      \u0275\u0275namespaceHTML();
      \u0275\u0275elementStart(73, "div", 46)(74, "div", 47)(75, "div", 48);
      \u0275\u0275element(76, "input", 49);
      \u0275\u0275elementStart(77, "label", 50);
      \u0275\u0275text(78, " Randomize Section Order ");
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(79, "div", 48);
      \u0275\u0275element(80, "input", 51);
      \u0275\u0275elementStart(81, "label", 52);
      \u0275\u0275text(82, " Enable Public Leaderboard ");
      \u0275\u0275elementEnd()()()()();
      \u0275\u0275elementStart(83, "div", 11)(84, "div", 53)(85, "h2", 13);
      \u0275\u0275namespaceSVG();
      \u0275\u0275elementStart(86, "svg", 54);
      \u0275\u0275element(87, "path", 55);
      \u0275\u0275elementEnd();
      \u0275\u0275text(88, " Exam Hierarchy Selection ");
      \u0275\u0275elementEnd()();
      \u0275\u0275namespaceHTML();
      \u0275\u0275elementStart(89, "div", 16)(90, "div", 17)(91, "div")(92, "label", 56);
      \u0275\u0275text(93, "Exam Family");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(94, "select", 57, 0);
      \u0275\u0275listener("change", function BuildPaperComponent_Template_select_change_94_listener() {
        \u0275\u0275restoreView(_r1);
        const familySelect_r2 = \u0275\u0275reference(95);
        return \u0275\u0275resetView(ctx.onFamilyChange(familySelect_r2.value));
      });
      \u0275\u0275elementStart(96, "option", 27);
      \u0275\u0275text(97, "Select Family");
      \u0275\u0275elementEnd();
      \u0275\u0275template(98, BuildPaperComponent_option_98_Template, 2, 2, "option", 58);
      \u0275\u0275elementEnd();
      \u0275\u0275template(99, BuildPaperComponent_p_99_Template, 2, 0, "p", 59);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(100, "div")(101, "label", 60);
      \u0275\u0275text(102, "Exam Stream");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(103, "select", 61, 1);
      \u0275\u0275listener("change", function BuildPaperComponent_Template_select_change_103_listener() {
        \u0275\u0275restoreView(_r1);
        const streamSelect_r4 = \u0275\u0275reference(104);
        return \u0275\u0275resetView(ctx.onStreamChange(streamSelect_r4.value));
      });
      \u0275\u0275elementStart(105, "option", 27);
      \u0275\u0275text(106, "Select Stream");
      \u0275\u0275elementEnd();
      \u0275\u0275template(107, BuildPaperComponent_option_107_Template, 2, 2, "option", 58);
      \u0275\u0275elementEnd();
      \u0275\u0275template(108, BuildPaperComponent_p_108_Template, 2, 0, "p", 59);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(109, "div")(110, "label", 62);
      \u0275\u0275text(111, "Exam Paper");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(112, "select", 63, 2);
      \u0275\u0275listener("change", function BuildPaperComponent_Template_select_change_112_listener() {
        \u0275\u0275restoreView(_r1);
        const paperSelect_r6 = \u0275\u0275reference(113);
        return \u0275\u0275resetView(ctx.onPaperChange(paperSelect_r6.value));
      });
      \u0275\u0275elementStart(114, "option", 27);
      \u0275\u0275text(115, "Select Paper");
      \u0275\u0275elementEnd();
      \u0275\u0275template(116, BuildPaperComponent_option_116_Template, 3, 3, "option", 58);
      \u0275\u0275elementEnd();
      \u0275\u0275template(117, BuildPaperComponent_p_117_Template, 2, 0, "p", 59);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(118, "div")(119, "label", 64);
      \u0275\u0275text(120, "Exam Shift");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(121, "select", 65, 3);
      \u0275\u0275listener("change", function BuildPaperComponent_Template_select_change_121_listener() {
        \u0275\u0275restoreView(_r1);
        const shiftSelect_r8 = \u0275\u0275reference(122);
        return \u0275\u0275resetView(ctx.onShiftChange(shiftSelect_r8.value));
      });
      \u0275\u0275elementStart(123, "option", 27);
      \u0275\u0275text(124, "Select Shift");
      \u0275\u0275elementEnd();
      \u0275\u0275template(125, BuildPaperComponent_option_125_Template, 2, 2, "option", 58);
      \u0275\u0275elementEnd();
      \u0275\u0275template(126, BuildPaperComponent_p_126_Template, 2, 0, "p", 66);
      \u0275\u0275elementEnd()()()();
      \u0275\u0275elementStart(127, "div", 11)(128, "div", 67)(129, "h2", 13);
      \u0275\u0275namespaceSVG();
      \u0275\u0275elementStart(130, "svg", 68);
      \u0275\u0275element(131, "path", 69);
      \u0275\u0275elementEnd();
      \u0275\u0275text(132, " Test Sections Configuration ");
      \u0275\u0275elementEnd()();
      \u0275\u0275namespaceHTML();
      \u0275\u0275elementStart(133, "div", 70)(134, "div", 71);
      \u0275\u0275template(135, BuildPaperComponent_div_135_Template, 62, 35, "div", 72);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(136, "div", 73)(137, "button", 74);
      \u0275\u0275listener("click", function BuildPaperComponent_Template_button_click_137_listener() {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.addSection());
      });
      \u0275\u0275namespaceSVG();
      \u0275\u0275elementStart(138, "svg", 75);
      \u0275\u0275element(139, "path", 76);
      \u0275\u0275elementEnd();
      \u0275\u0275text(140, " Add Section ");
      \u0275\u0275elementEnd()()()();
      \u0275\u0275namespaceHTML();
      \u0275\u0275elementStart(141, "div", 11)(142, "div", 77)(143, "h2", 13);
      \u0275\u0275namespaceSVG();
      \u0275\u0275elementStart(144, "svg", 78);
      \u0275\u0275element(145, "path", 79);
      \u0275\u0275elementEnd();
      \u0275\u0275text(146, " Test Summary & Submission ");
      \u0275\u0275elementEnd()();
      \u0275\u0275namespaceHTML();
      \u0275\u0275elementStart(147, "div", 16)(148, "div", 80)(149, "div", 81)(150, "h3", 82);
      \u0275\u0275text(151, "Total Test Marks");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(152, "div", 83);
      \u0275\u0275text(153);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(154, "p", 84);
      \u0275\u0275text(155, "Calculated based on all sections and questions");
      \u0275\u0275elementEnd()()();
      \u0275\u0275elementStart(156, "div", 85)(157, "div", 86);
      \u0275\u0275namespaceSVG();
      \u0275\u0275elementStart(158, "svg", 87);
      \u0275\u0275element(159, "path", 88);
      \u0275\u0275elementEnd();
      \u0275\u0275namespaceHTML();
      \u0275\u0275elementStart(160, "div")(161, "h4", 89);
      \u0275\u0275text(162, "Important Requirements");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(163, "p", 90);
      \u0275\u0275text(164, "Test series must have at least 2 questions to be valid for submission.");
      \u0275\u0275elementEnd()()()();
      \u0275\u0275elementStart(165, "div", 91)(166, "button", 92)(167, "span", 93);
      \u0275\u0275namespaceSVG();
      \u0275\u0275elementStart(168, "svg", 94);
      \u0275\u0275element(169, "path", 95);
      \u0275\u0275elementEnd();
      \u0275\u0275text(170, " Create Test Series ");
      \u0275\u0275elementEnd()()()()()()()();
    }
    if (rf & 2) {
      let tmp_9_0;
      let tmp_11_0;
      let tmp_13_0;
      \u0275\u0275advance(8);
      \u0275\u0275property("formGroup", ctx.seriesForm);
      \u0275\u0275advance(48);
      \u0275\u0275propertyInterpolate("max", ctx.currentYear);
      \u0275\u0275advance(42);
      \u0275\u0275property("ngForOf", ctx.families);
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", !ctx.families.length);
      \u0275\u0275advance(8);
      \u0275\u0275property("ngForOf", ctx.streams);
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", ((tmp_9_0 = ctx.seriesForm.get("family")) == null ? null : tmp_9_0.value) && !ctx.streams.length);
      \u0275\u0275advance(8);
      \u0275\u0275property("ngForOf", ctx.papers);
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", ((tmp_11_0 = ctx.seriesForm.get("stream")) == null ? null : tmp_11_0.value) && !ctx.papers.length);
      \u0275\u0275advance(8);
      \u0275\u0275property("ngForOf", ctx.shifts);
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", ((tmp_13_0 = ctx.seriesForm.get("paper")) == null ? null : tmp_13_0.value) && !ctx.shifts.length);
      \u0275\u0275advance(9);
      \u0275\u0275property("ngForOf", ctx.sections.controls);
      \u0275\u0275advance(18);
      \u0275\u0275textInterpolate(ctx.computedTotal);
      \u0275\u0275advance(13);
      \u0275\u0275property("disabled", ctx.seriesForm.invalid);
    }
  }, dependencies: [
    CommonModule,
    NgForOf,
    NgIf,
    ReactiveFormsModule,
    \u0275NgNoValidate,
    NgSelectOption,
    \u0275NgSelectMultipleOption,
    DefaultValueAccessor,
    NumberValueAccessor,
    CheckboxControlValueAccessor,
    SelectControlValueAccessor,
    NgControlStatus,
    NgControlStatusGroup,
    RequiredValidator,
    MinValidator,
    MaxValidator,
    FormGroupDirective,
    FormControlName,
    FormGroupName,
    FormArrayName,
    FormsModule,
    NgModel,
    HighlightPipe
    // ADDED: HighlightPipe
  ], styles: ["\n\n@keyframes _ngcontent-%COMP%_fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n@keyframes _ngcontent-%COMP%_slideIn {\n  from {\n    opacity: 0;\n    transform: translateX(-20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateX(0);\n  }\n}\n.bg-white[_ngcontent-%COMP%] {\n  animation: _ngcontent-%COMP%_fadeIn 0.5s ease-out;\n}\n.transition-all[_ngcontent-%COMP%] {\n  transition: all 0.2s ease;\n}\n.shadow-soft[_ngcontent-%COMP%] {\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n}\ninput[_ngcontent-%COMP%]:focus, \nselect[_ngcontent-%COMP%]:focus, \ntextarea[_ngcontent-%COMP%]:focus {\n  --tw-ring-offset-width: 2px;\n  --tw-ring-color: rgb(99 102 241 / 0.5);\n}\n.overflow-y-auto[_ngcontent-%COMP%] {\n  scrollbar-width: thin;\n  scrollbar-color: rgba(156, 163, 175, 0.5) transparent;\n}\n.overflow-y-auto[_ngcontent-%COMP%]::-webkit-scrollbar {\n  width: 6px;\n}\n.overflow-y-auto[_ngcontent-%COMP%]::-webkit-scrollbar-track {\n  background: transparent;\n}\n.overflow-y-auto[_ngcontent-%COMP%]::-webkit-scrollbar-thumb {\n  background-color: rgba(156, 163, 175, 0.5);\n  border-radius: 3px;\n}\n.overflow-y-auto[_ngcontent-%COMP%]::-webkit-scrollbar-thumb:hover {\n  background-color: rgba(156, 163, 175, 0.7);\n}\nbutton[_ngcontent-%COMP%]:hover {\n  transform: translateY(-1px);\n}\nbutton[_ngcontent-%COMP%]:active {\n  transform: translateY(0);\n}\ninput[type=file][_ngcontent-%COMP%] {\n  cursor: pointer;\n}\ninput[type=file][_ngcontent-%COMP%]::-webkit-file-upload-button {\n  cursor: pointer;\n}\n/*# sourceMappingURL=build-paper.component.css.map */"] });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(BuildPaperComponent, [{
    type: Component,
    args: [{ selector: "app-build-paper", standalone: true, imports: [
      CommonModule,
      ReactiveFormsModule,
      FormsModule,
      HighlightPipe
      // ADDED: HighlightPipe
    ], template: `<!-- Build Paper Form - Modern Tailwind CSS Design -->\r
<div class="min-h-screen bg-gradient-to-br from-gray-50 to-blue-50 py-8 px-4 sm:px-6 lg:px-8">\r
  <div class="max-w-4xl mx-auto">\r
    <!-- Header Section -->\r
    <div class="text-center mb-8">\r
      <h1 class="text-4xl font-bold text-gray-900 mb-2">Build Paper</h1>\r
      <p class="text-lg text-gray-600">Create and configure your test series</p>\r
      <div class="w-24 h-1 bg-gradient-to-r from-primary-500 to-secondary-500 mx-auto mt-4 rounded-full"></div>\r
    </div>\r
\r
    <form [formGroup]="seriesForm" (ngSubmit)="onSubmit()" class="space-y-8">\r
      <!-- Basic Information Card -->\r
      <div class="bg-white rounded-2xl shadow-soft border border-gray-100 overflow-hidden">\r
        <div class="bg-gradient-to-r from-primary-50 to-secondary-50 px-6 py-4 border-b border-gray-100">\r
          <h2 class="text-xl font-semibold text-gray-900 flex items-center">\r
            <svg class="w-6 h-6 mr-2 text-primary-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>\r
            </svg>\r
            Basic Information\r
          </h2>\r
        </div>\r
        <div class="p-6 space-y-6">\r
          <!-- Form Grid Layout -->\r
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">\r
            <!-- Title -->\r
            <div class="md:col-span-2">\r
              <label for="title" class="block text-sm font-medium text-gray-700 mb-2">Title</label>\r
              <input \r
                id="title"\r
                formControlName="title" \r
                type="text" \r
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-all duration-200 bg-white hover:border-gray-400"\r
                placeholder="Enter test series title"\r
              />\r
            </div>\r
\r
            <!-- Duration -->\r
            <div>\r
              <label for="duration" class="block text-sm font-medium text-gray-700 mb-2">Duration (minutes)</label>\r
              <input \r
                id="duration"\r
                formControlName="duration" \r
                type="number" \r
                min="1"\r
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-all duration-200 bg-white hover:border-gray-400"\r
                placeholder="Test duration"\r
              />\r
            </div>\r
\r
            <!-- Max Attempts -->\r
            <div>\r
              <label for="maxAttempts" class="block text-sm font-medium text-gray-700 mb-2">Max Attempts</label>\r
              <input\r
                id="maxAttempts"\r
                formControlName="maxAttempts"\r
                type="number"\r
                min="1"\r
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-all duration-200 bg-white hover:border-gray-400"\r
                placeholder="Maximum attempts allowed"\r
              />\r
            </div>\r
\r
            <!-- Type -->\r
            <div>\r
              <label for="type" class="block text-sm font-medium text-gray-700 mb-2">Test Type</label>\r
              <select \r
                id="type"\r
                formControlName="type"\r
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-all duration-200 bg-white hover:border-gray-400"\r
              >\r
                <option value="">Select test type</option>\r
                <option value="Real_Exam">Real Exam</option>\r
                <option value="Practice_Exam">Practice Exam</option>\r
                <option value="Live_Exam">Live Exam</option>\r
                <option value="Quiz_Exam">Quiz Exam</option>\r
              </select>\r
            </div>\r
\r
            <!-- Mode -->\r
            <div>\r
              <label for="mode" class="block text-sm font-medium text-gray-700 mb-2">Mode</label>\r
              <select \r
                id="mode" \r
                formControlName="mode"\r
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-all duration-200 bg-white hover:border-gray-400"\r
              >\r
                <option value="">Select mode</option>\r
                <option value="practice">Practice</option>\r
                <option value="live">Live</option>\r
              </select>\r
            </div>\r
\r
            <!-- Year -->\r
            <div>\r
              <label for="year" class="block text-sm font-medium text-gray-700 mb-2">Year</label>\r
              <input \r
                id="year"\r
                formControlName="year" \r
                type="number" \r
                min="1900" \r
                max="{{ currentYear }}"\r
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-all duration-200 bg-white hover:border-gray-400"\r
                placeholder="Exam year"\r
              />\r
            </div>\r
          </div>\r
\r
          <!-- Date Time Row -->\r
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">\r
            <!-- Start Date Time -->\r
            <div>\r
              <label for="startAt" class="block text-sm font-medium text-gray-700 mb-2">Start Time</label>\r
              <input \r
                id="startAt"\r
                formControlName="startAt" \r
                type="datetime-local"\r
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-all duration-200 bg-white hover:border-gray-400"\r
              />\r
            </div>\r
\r
            <!-- End Date Time -->\r
            <div>\r
              <label for="endAt" class="block text-sm font-medium text-gray-700 mb-2">End Time</label>\r
              <input \r
                id="endAt"\r
                formControlName="endAt" \r
                type="datetime-local"\r
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-all duration-200 bg-white hover:border-gray-400"\r
              />\r
            </div>\r
          </div>\r
        </div>\r
      </div>\r
\r
      <!-- Configuration Options Card -->\r
      <div class="bg-white rounded-2xl shadow-soft border border-gray-100 overflow-hidden">\r
        <div class="bg-gradient-to-r from-secondary-50 to-primary-50 px-6 py-4 border-b border-gray-100">\r
          <h2 class="text-xl font-semibold text-gray-900 flex items-center">\r
            <svg class="w-6 h-6 mr-2 text-secondary-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>\r
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>\r
            </svg>\r
            Configuration Options\r
          </h2>\r
        </div>\r
        <div class="p-6 space-y-4">\r
          <!-- Configuration Checkboxes -->\r
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">\r
            <!-- Randomize Section Order -->\r
            <div class="flex items-center p-4 bg-gray-50 rounded-lg border border-gray-200 hover:border-primary-300 transition-colors duration-200">\r
              <input \r
                type="checkbox" \r
                id="randomizeSectionOrder" \r
                formControlName="randomizeSectionOrder"\r
                class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"\r
              >\r
              <label for="randomizeSectionOrder" class="ml-3 text-sm font-medium text-gray-700">\r
                Randomize Section Order\r
              </label>\r
            </div>\r
\r
            <!-- Enable Public Leaderboard -->\r
            <div class="flex items-center p-4 bg-gray-50 rounded-lg border border-gray-200 hover:border-primary-300 transition-colors duration-200">\r
              <input \r
                type="checkbox" \r
                id="enablePublicLeaderboard" \r
                formControlName="enablePublicLeaderboard"\r
                class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"\r
              >\r
              <label for="enablePublicLeaderboard" class="ml-3 text-sm font-medium text-gray-700">\r
                Enable Public Leaderboard\r
              </label>\r
            </div>\r
          </div>        </div>\r
      </div>\r
\r
      <!-- Hierarchy Selection Card -->\r
      <div class="bg-white rounded-2xl shadow-soft border border-gray-100 overflow-hidden">\r
        <div class="bg-gradient-to-r from-warning-50 to-success-50 px-6 py-4 border-b border-gray-100">\r
          <h2 class="text-xl font-semibold text-gray-900 flex items-center">\r
            <svg class="w-6 h-6 mr-2 text-warning-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"></path>\r
            </svg>\r
            Exam Hierarchy Selection\r
          </h2>\r
        </div>\r
        <div class="p-6 space-y-6">\r
          <!-- Hierarchy Grid -->\r
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">\r
            <!-- Family -->\r
            <div>\r
              <label for="family" class="block text-sm font-medium text-gray-700 mb-2">Exam Family</label>\r
              <select \r
                #familySelect \r
                id="family"\r
                formControlName="family" \r
                (change)="onFamilyChange(familySelect.value)"\r
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-all duration-200 bg-white hover:border-gray-400"\r
              >\r
                <option value="">Select Family</option>\r
                <option *ngFor="let f of families" [value]="f._id">{{ f.name }}</option>\r
              </select>\r
              <p *ngIf="!families.length" class="mt-2 text-sm text-orange-600 bg-orange-50 p-3 rounded-lg">\r
                Families not available or list is empty.\r
              </p>\r
            </div>\r
\r
            <!-- Stream -->\r
            <div>\r
              <label for="stream" class="block text-sm font-medium text-gray-700 mb-2">Exam Stream</label>\r
              <select \r
                #streamSelect \r
                id="stream"\r
                formControlName="stream" \r
                (change)="onStreamChange(streamSelect.value)"\r
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-all duration-200 bg-white hover:border-gray-400"\r
              >\r
                <option value="">Select Stream</option>\r
                <option *ngFor="let s of streams" [value]="s._id">{{ s.name }}</option>\r
              </select>\r
              <p *ngIf="seriesForm.get('family')?.value && !streams.length" class="mt-2 text-sm text-orange-600 bg-orange-50 p-3 rounded-lg">\r
                Streams not available for the selected family or list is empty.\r
              </p>\r
            </div>\r
\r
            <!-- Paper -->\r
            <div>\r
              <label for="paper" class="block text-sm font-medium text-gray-700 mb-2">Exam Paper</label>\r
              <select \r
                #paperSelect \r
                id="paper"\r
                formControlName="paper" \r
                (change)="onPaperChange(paperSelect.value)"\r
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-all duration-200 bg-white hover:border-gray-400"\r
              >\r
                <option value="">Select Paper</option>\r
                <option *ngFor="let p of papers" [value]="p._id">\r
                  {{ p.name }}<ng-container *ngIf="p.code"> ({{ p.code }})</ng-container>\r
                </option>\r
              </select>\r
              <p *ngIf="seriesForm.get('stream')?.value && !papers.length" class="mt-2 text-sm text-orange-600 bg-orange-50 p-3 rounded-lg">\r
                Papers not available for the selected stream or list is empty.\r
              </p>\r
            </div>\r
\r
            <!-- Shift/Variant -->\r
            <div>\r
              <label for="shift" class="block text-sm font-medium text-gray-700 mb-2">Exam Shift</label>\r
              <select \r
                #shiftSelect \r
                id="shift"\r
                formControlName="shift" \r
                (change)="onShiftChange(shiftSelect.value)"\r
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-all duration-200 bg-white hover:border-gray-400"\r
              >\r
                <option value="">Select Shift</option>\r
                <option *ngFor="let v of shifts" [value]="v._id">{{ v.name }}</option>\r
              </select>\r
              <p *ngIf="seriesForm.get('paper')?.value && !shifts.length" class="mt-2 text-sm text-blue-600 bg-blue-50 p-3 rounded-lg">\r
                No shifts available for this paper. A default "Main Shift" will be created automatically.\r
              </p>\r
            </div>\r
          </div>\r
        </div>\r
      </div>\r
\r
      <!-- Sections Configuration Card -->\r
      <div class="bg-white rounded-2xl shadow-soft border border-gray-100 overflow-hidden">\r
        <div class="bg-gradient-to-r from-success-50 to-primary-50 px-6 py-4 border-b border-gray-100">\r
          <h2 class="text-xl font-semibold text-gray-900 flex items-center">\r
            <svg class="w-6 h-6 mr-2 text-success-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"></path>\r
            </svg>\r
            Test Sections Configuration\r
          </h2>\r
        </div>\r
        <div class="p-6">\r
          <div formArrayName="sections" class="space-y-6">            <div *ngFor="let secCtrl of sections.controls; let i = index" [formGroupName]="i" class="bg-gray-50 rounded-xl p-6 border border-gray-200">\r
              <!-- Section Header -->\r
              <div class="flex items-center justify-between mb-4">\r
                <h3 class="text-lg font-semibold text-gray-900 flex items-center">\r
                  <span class="bg-primary-500 text-white rounded-full w-8 h-8 flex items-center justify-center text-sm font-bold mr-3">\r
                    {{ i + 1 }}\r
                  </span>\r
                  Section {{ i + 1 }}\r
                </h3>\r
                <button \r
                  type="button" \r
                  (click)="removeSection(i)"\r
                  class="text-red-600 hover:text-red-800 hover:bg-red-50 rounded-lg p-2 transition-colors duration-200"\r
                  [disabled]="sections.length <= 1"\r
                >\r
                  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>\r
                  </svg>\r
                </button>\r
              </div>\r
\r
              <!-- Section Configuration -->\r
              <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">\r
                <!-- Section Title -->\r
                <div>\r
                  <label for="sectionTitle-{{i}}" class="block text-sm font-medium text-gray-700 mb-2">Section Title</label>\r
                  <input \r
                    id="sectionTitle-{{i}}"\r
                    formControlName="title" \r
                    type="text"\r
                    class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-all duration-200"\r
                    placeholder="Enter section title"\r
                  />\r
                </div>\r
\r
                <!-- Section Order -->\r
                <div>\r
                  <label for="sectionOrder-{{i}}" class="block text-sm font-medium text-gray-700 mb-2">Order</label>\r
                  <input \r
                    id="sectionOrder-{{i}}"\r
                    formControlName="order" \r
                    type="number"\r
                    min="1"\r
                    class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-all duration-200"\r
                    placeholder="Section order"\r
                  />\r
                </div>\r
              </div>\r
\r
              <!-- Section Options -->\r
              <div class="mb-6">\r
                <div class="flex items-center p-3 bg-white rounded-lg border border-gray-200">\r
                  <input \r
                    type="checkbox" \r
                    id="randomizeQuestionOrderInSection-{{i}}" \r
                    formControlName="randomizeQuestionOrderInSection"\r
                    class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"\r
                  >\r
                  <label for="randomizeQuestionOrderInSection-{{i}}" class="ml-3 text-sm font-medium text-gray-700">\r
                    Randomize Question Order in Section\r
                  </label>\r
                </div>\r
              </div>\r
\r
              <!-- Question Pool Configuration -->\r
              <div class="bg-white rounded-lg p-4 border border-gray-200 mb-6">\r
                <h4 class="text-md font-semibold text-gray-900 mb-4 flex items-center">\r
                  <svg class="w-5 h-5 mr-2 text-secondary-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>\r
                  </svg>\r
                  Question Pool Configuration\r
                </h4>\r
                \r
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">\r
                  <!-- Questions to Select from Pool -->\r
                  <div>\r
                    <label for="questionsToSelectFromPool-{{i}}" class="block text-sm font-medium text-gray-700 mb-2">\r
                      Questions to Select from Pool\r
                    </label>\r
                    <input \r
                      type="number" \r
                      id="questionsToSelectFromPool-{{i}}" \r
                      formControlName="questionsToSelectFromPool" \r
                      min="0"\r
                      class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-all duration-200"\r
                      placeholder="Number of questions to select"\r
                    >\r
                  </div>\r
                </div>\r
\r
                <!-- Question Pool -->\r
                <div class="mb-4">\r
                  <label for="questionPool-{{i}}" class="block text-sm font-medium text-gray-700 mb-2">\r
                    Question Pool (comma-separated IDs)\r
                  </label>\r
                  <textarea \r
                    id="questionPool-{{i}}" \r
                    formControlName="questionPool" \r
                    rows="3"\r
                    class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-all duration-200"\r
                    placeholder="Enter question IDs, separated by commas"\r
                  ></textarea>\r
                </div>\r
\r
                <!-- Pool Question Marks (conditional) -->\r
                <div *ngIf="secCtrl.get('questionsToSelectFromPool')?.value > 0" class="grid grid-cols-1 md:grid-cols-2 gap-4">\r
                  <div>\r
                    <label for="defaultMarksForPooledQuestion-{{i}}" class="block text-sm font-medium text-gray-700 mb-2">\r
                      Default Marks for Pooled Questions\r
                    </label>\r
                    <input \r
                      type="number" \r
                      id="defaultMarksForPooledQuestion-{{i}}" \r
                      formControlName="defaultMarksForPooledQuestion" \r
                      min="0"\r
                      class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-all duration-200"\r
                      placeholder="Default marks"\r
                    >\r
                  </div>\r
\r
                  <div>\r
                    <label for="defaultNegativeMarksForPooledQuestion-{{i}}" class="block text-sm font-medium text-gray-700 mb-2">\r
                      Default Negative Marks\r
                    </label>\r
                    <input \r
                      type="number" \r
                      id="defaultNegativeMarksForPooledQuestion-{{i}}" \r
                      formControlName="defaultNegativeMarksForPooledQuestion" \r
                      min="0" \r
                      step="0.25"\r
                      class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-all duration-200"\r
                      placeholder="Default negative marks"\r
                    >\r
                  </div>\r
                </div>\r
              </div>              <!-- Question Management Section -->\r
              <div formArrayName="questions" class="bg-white rounded-lg p-4 border border-gray-200">\r
                <h4 class="text-md font-semibold text-gray-900 mb-4 flex items-center">\r
                  <svg class="w-5 h-5 mr-2 text-primary-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>\r
                  </svg>\r
                  Question Selection & Management\r
                </h4>\r
\r
                <!-- Question Search Section -->\r
                <div class="mb-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">\r
                  <h5 class="text-sm font-semibold text-blue-900 mb-3 flex items-center">\r
                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>\r
                    </svg>\r
                    Search Questions by Text\r
                  </h5>\r
                  <input\r
                    type="text"\r
                    [(ngModel)]="sectionSearchTerms[i]"\r
                    (ngModelChange)="performSearch(i)"\r
                    [ngModelOptions]="{standalone: true}"\r
                    placeholder="Type to search questions..."\r
                    class="w-full px-4 py-3 border border-blue-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200 bg-white"\r
                  />\r
                  \r
                  <!-- Search Results -->\r
                  <div *ngIf="sectionSearchResults[i] && sectionSearchResults[i].length > 0" class="mt-4">\r
                    <h6 class="text-sm font-medium text-blue-900 mb-2">Search Results:</h6>\r
                    <div class="space-y-2 max-h-64 overflow-y-auto">\r
                      <div *ngFor="let q of sectionSearchResults[i]" class="flex items-center justify-between p-3 bg-white border border-blue-200 rounded-lg hover:border-blue-300 transition-colors">\r
                        <span class="text-sm text-gray-700 flex-1 mr-3" [innerHTML]="(q.translations[0].questionText || q.questionText || 'Test Question Text Missing') | highlight:sectionSearchTerms[i]"></span>\r
                        <button type="button" \r
                                (click)="addQuestionFromSearchResults(i, q)"\r
                                class="px-3 py-1 text-sm bg-green-600 text-white rounded-md hover:bg-green-700 focus:ring-2 focus:ring-green-500 transition-colors duration-200">\r
                          Add\r
                        </button>\r
                      </div>\r
                    </div>\r
                  </div>\r
                  \r
                  <div *ngIf="sectionSearchTerms[i] && sectionSearchTerms[i].length > 2 && (!sectionSearchResults[i] || sectionSearchResults[i].length === 0)" class="mt-3 p-3 bg-orange-50 border border-orange-200 rounded-lg text-sm text-orange-700">\r
                    No questions found matching your search.\r
                  </div>\r
                </div>\r
\r
                <!-- Question List -->\r
                <div class="space-y-4">\r
                  <div *ngFor="let qCtrl of getQuestions(i).controls; let j = index" [formGroupName]="j" class="bg-gray-50 border border-gray-200 rounded-lg p-4">\r
                    <div class="flex items-start justify-between mb-3">\r
                      <h6 class="text-sm font-semibold text-gray-900 flex items-center">\r
                        <span class="bg-primary-100 text-primary-800 rounded-full w-6 h-6 flex items-center justify-center text-xs font-bold mr-2">\r
                          {{ j + 1 }}\r
                        </span>\r
                        Question {{ j + 1 }}\r
                      </h6>\r
                      <button type="button" \r
                              (click)="removeQuestion(i, j)"\r
                              class="text-red-600 hover:text-red-800 hover:bg-red-50 rounded-lg p-1 transition-colors duration-200">\r
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>\r
                        </svg>\r
                      </button>\r
                    </div>\r
\r
                    <!-- Question ID Input -->\r
                    <div class="mb-3">\r
                      <label for="questionId-{{i}}-{{j}}" class="block text-sm font-medium text-gray-700 mb-1">Question ID</label>\r
                      <div class="flex space-x-2">\r
                        <input\r
                          id="questionId-{{i}}-{{j}}"\r
                          type="text"\r
                          formControlName="question"\r
                          placeholder="Paste question _id"\r
                          class="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-all duration-200"\r
                        />\r
                        <button type="button" \r
                                (click)="previewQuestion(i, j)"\r
                                class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 transition-colors duration-200 flex items-center">\r
                          <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>\r
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>\r
                          </svg>\r
                          Preview\r
                        </button>\r
                      </div>\r
                    </div>\r
\r
                    <!-- Question Preview -->\r
                    <div *ngIf="previewedQuestions[i] && previewedQuestions[i][j]" class="mb-3 p-3 bg-blue-50 border border-blue-200 rounded-lg">\r
                      <p class="text-sm text-blue-900 font-medium mb-1">Question Preview:</p>\r
                      <p class="text-sm text-blue-800">{{ previewedQuestions[i][j]?.translations[0]?.questionText || previewedQuestions[i][j]?.questionText || 'Text not available' }}</p>\r
                    </div>\r
\r
                    <!-- Marks Configuration -->\r
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-3">\r
                      <div>\r
                        <label for="marks-{{i}}-{{j}}" class="block text-sm font-medium text-gray-700 mb-1">Marks</label>\r
                        <input \r
                          id="marks-{{i}}-{{j}}"\r
                          formControlName="marks" \r
                          type="number" \r
                          min="1" \r
                          required \r
                          placeholder="Marks"\r
                          class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-all duration-200"\r
                        />\r
                      </div>\r
                      <div>\r
                        <label for="negativeMarks-{{i}}-{{j}}" class="block text-sm font-medium text-gray-700 mb-1">Negative Marks</label>\r
                        <input\r
                          id="negativeMarks-{{i}}-{{j}}"\r
                          formControlName="negativeMarks"\r
                          type="number"\r
                          min="0"\r
                          step="0.25"\r
                          placeholder="Negative Marks"\r
                          class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-all duration-200"\r
                        />\r
                      </div>\r
                    </div>\r
                  </div>\r
                </div>\r
\r
                <!-- Action Buttons -->\r
                <div class="mt-6 space-y-3">\r
                  <!-- CSV Import -->\r
                  <div class="flex items-center space-x-3">\r
                    <label for="csvImport-{{i}}" class="block text-sm font-medium text-gray-700">Import Questions from CSV:</label>\r
                    <input\r
                      id="csvImport-{{i}}"\r
                      type="file"\r
                      (change)="importCsv($event, i)"\r
                      accept=".csv"\r
                      class="text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-lg file:border-0 file:text-sm file:font-medium file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100 transition-colors duration-200"\r
                    />\r
                  </div>\r
                  \r
                  <!-- Add Question Button -->\r
                  <button type="button" \r
                          (click)="addQuestion(i)"\r
                          class="w-full px-4 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 focus:ring-2 focus:ring-green-500 transition-colors duration-200 flex items-center justify-center">\r
                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>\r
                    </svg>\r
                    Add Question\r
                  </button>\r
                </div>\r
              </div>            </div>\r
          </div>\r
\r
          <!-- Add Section Button -->\r
          <div class="mt-8 text-center">\r
            <button type="button" \r
                    (click)="addSection()"\r
                    class="inline-flex items-center px-6 py-3 bg-primary-600 text-white rounded-lg hover:bg-primary-700 focus:ring-2 focus:ring-primary-500 transition-colors duration-200">\r
              <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>\r
              </svg>\r
              Add Section\r
            </button>\r
          </div>\r
        </div>\r
      </div>\r
\r
      <!-- Test Summary & Submission Card -->\r
      <div class="bg-white rounded-2xl shadow-soft border border-gray-100 overflow-hidden">\r
        <div class="bg-gradient-to-r from-purple-50 to-primary-50 px-6 py-4 border-b border-gray-100">\r
          <h2 class="text-xl font-semibold text-gray-900 flex items-center">\r
            <svg class="w-6 h-6 mr-2 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>\r
            </svg>\r
            Test Summary & Submission\r
          </h2>\r
        </div>\r
        <div class="p-6 space-y-6">\r
          <!-- Total Marks Display -->\r
          <div class="bg-gradient-to-r from-green-50 to-blue-50 rounded-xl p-6 border border-green-200">\r
            <div class="text-center">\r
              <h3 class="text-2xl font-bold text-gray-900 mb-2">Total Test Marks</h3>\r
              <div class="text-4xl font-bold text-green-600">{{ computedTotal }}</div>\r
              <p class="text-sm text-gray-600 mt-2">Calculated based on all sections and questions</p>\r
            </div>\r
          </div>\r
\r
          <!-- Validation Note -->\r
          <div class="bg-orange-50 border border-orange-200 rounded-lg p-4">\r
            <div class="flex items-start">\r
              <svg class="w-5 h-5 text-orange-600 mt-0.5 mr-3 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>\r
              </svg>\r
              <div>\r
                <h4 class="font-semibold text-orange-800">Important Requirements</h4>\r
                <p class="text-sm text-orange-700 mt-1">Test series must have at least 2 questions to be valid for submission.</p>\r
              </div>\r
            </div>\r
          </div>\r
\r
          <!-- Submit Button -->\r
          <div class="pt-4">\r
            <button type="submit" \r
                    [disabled]="seriesForm.invalid"\r
                    class="w-full py-4 px-6 bg-gradient-to-r from-primary-600 to-secondary-600 text-white text-lg font-semibold rounded-xl hover:from-primary-700 hover:to-secondary-700 focus:ring-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 shadow-lg hover:shadow-xl">\r
              <span class="flex items-center justify-center">\r
                <svg class="w-6 h-6 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>\r
                </svg>\r
                Create Test Series\r
              </span>\r
            </button>\r
          </div>\r
        </div>\r
      </div>\r
    </form>\r
  </div>\r
</div>\r
`, styles: ["/* src/app/components/build-paper/build-paper.component.scss */\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n@keyframes slideIn {\n  from {\n    opacity: 0;\n    transform: translateX(-20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateX(0);\n  }\n}\n.bg-white {\n  animation: fadeIn 0.5s ease-out;\n}\n.transition-all {\n  transition: all 0.2s ease;\n}\n.shadow-soft {\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n}\ninput:focus,\nselect:focus,\ntextarea:focus {\n  --tw-ring-offset-width: 2px;\n  --tw-ring-color: rgb(99 102 241 / 0.5);\n}\n.overflow-y-auto {\n  scrollbar-width: thin;\n  scrollbar-color: rgba(156, 163, 175, 0.5) transparent;\n}\n.overflow-y-auto::-webkit-scrollbar {\n  width: 6px;\n}\n.overflow-y-auto::-webkit-scrollbar-track {\n  background: transparent;\n}\n.overflow-y-auto::-webkit-scrollbar-thumb {\n  background-color: rgba(156, 163, 175, 0.5);\n  border-radius: 3px;\n}\n.overflow-y-auto::-webkit-scrollbar-thumb:hover {\n  background-color: rgba(156, 163, 175, 0.7);\n}\nbutton:hover {\n  transform: translateY(-1px);\n}\nbutton:active {\n  transform: translateY(0);\n}\ninput[type=file] {\n  cursor: pointer;\n}\ninput[type=file]::-webkit-file-upload-button {\n  cursor: pointer;\n}\n/*# sourceMappingURL=build-paper.component.css.map */\n"] }]
  }], () => [{ type: FormBuilder }, { type: TestSeriesService }, { type: QuestionService }, { type: ExamFamilyService }, { type: ExamStreamService }, { type: ExamPaperService }, { type: ExamShiftService }], null);
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(BuildPaperComponent, { className: "BuildPaperComponent", filePath: "src/app/components/build-paper/build-paper.component.ts", lineNumber: 90 });
})();

// src/app/components/series-analytics/series-analytics.component.ts
var import_file_saver = __toESM(require_FileSaver_min());
function SeriesAnalyticsComponent_div_43_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 31)(1, "div", 32);
    \u0275\u0275element(2, "i", 33);
    \u0275\u0275elementStart(3, "p", 34);
    \u0275\u0275text(4, "No submissions yet");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(5, "p", 35);
    \u0275\u0275text(6, "Chart will appear once students start taking the test");
    \u0275\u0275elementEnd()()();
  }
}
var SeriesAnalyticsComponent = class _SeriesAnalyticsComponent {
  route;
  http;
  seriesId = "";
  totalAttempts = 0;
  averageTimeMs = 0;
  // chart data & options
  barData = { labels: [], datasets: [] };
  barOpts = {
    responsive: true,
    plugins: { legend: { display: false } }
  };
  constructor(route, http) {
    this.route = route;
    this.http = http;
  }
  ngOnInit() {
    this.seriesId = this.route.snapshot.paramMap.get("seriesId") || "";
    this.http.get(`${environment.apiUrl}/analytics/series/${this.seriesId}`).subscribe({
      next: (data) => {
        this.totalAttempts = data.totalAttempts;
        this.averageTimeMs = data.averageTimeMs;
        this.barData = {
          labels: data.scoreDistribution.map((b) => b._id.toString()),
          datasets: [{
            data: data.scoreDistribution.map((b) => b.count)
          }]
        };
      },
      error: (err) => console.error("Failed analytics", err)
    });
  }
  get averageTimeMin() {
    return (this.averageTimeMs / 1e3 / 60).toFixed(1);
  }
  downloadCsv() {
    const url = `${environment.apiUrl}/analytics/series/${this.seriesId}/attempts.csv`;
    this.http.get(url, {
      responseType: "blob",
      headers: { Authorization: `Bearer ${localStorage.getItem("token") || ""}` }
    }).subscribe({
      next: (blob) => (0, import_file_saver.saveAs)(blob, `series-${this.seriesId}-attempts.csv`),
      error: (err) => alert(err.error?.message || "CSV export failed")
    });
  }
  static \u0275fac = function SeriesAnalyticsComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _SeriesAnalyticsComponent)(\u0275\u0275directiveInject(ActivatedRoute), \u0275\u0275directiveInject(HttpClient));
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _SeriesAnalyticsComponent, selectors: [["app-series-analytics"]], decls: 44, vars: 4, consts: [[1, "min-h-screen", "bg-gradient-to-br", "from-blue-50", "to-indigo-100", "p-6"], [1, "max-w-6xl", "mx-auto"], [1, "bg-gradient-to-r", "from-blue-600", "to-indigo-600", "rounded-t-2xl", "px-8", "py-6", "shadow-lg"], [1, "text-3xl", "font-bold", "text-white", "text-center", "flex", "items-center", "justify-center", "gap-3"], [1, "fas", "fa-chart-line"], [1, "bg-white", "bg-opacity-20", "px-3", "py-1", "rounded", "text-blue-100"], [1, "bg-white", "rounded-b-2xl", "shadow-xl", "overflow-hidden"], [1, "p-8"], [1, "grid", "grid-cols-1", "md:grid-cols-2", "gap-6", "mb-8"], [1, "bg-gradient-to-r", "from-blue-50", "to-blue-100", "rounded-xl", "p-6", "border", "border-blue-200"], [1, "flex", "items-center", "justify-between"], [1, "text-blue-600", "text-sm", "font-semibold", "uppercase", "tracking-wide"], [1, "text-3xl", "font-bold", "text-blue-900", "mt-2"], [1, "bg-blue-500", "p-3", "rounded-full"], [1, "fas", "fa-users", "text-white", "text-xl"], [1, "bg-gradient-to-r", "from-green-50", "to-green-100", "rounded-xl", "p-6", "border", "border-green-200"], [1, "text-green-600", "text-sm", "font-semibold", "uppercase", "tracking-wide"], [1, "text-3xl", "font-bold", "text-green-900", "mt-2"], [1, "text-lg", "text-green-700"], [1, "bg-green-500", "p-3", "rounded-full"], [1, "fas", "fa-clock", "text-white", "text-xl"], [1, "mb-8"], [1, "inline-flex", "items-center", "px-6", "py-3", "bg-gradient-to-r", "from-indigo-500", "to-purple-500", "text-white", "font-semibold", "rounded-lg", "hover:from-indigo-600", "hover:to-purple-600", "focus:outline-none", "focus:ring-2", "focus:ring-offset-2", "focus:ring-indigo-500", "transition-all", "duration-200", "transform", "hover:scale-105", "shadow-lg", 3, "click"], [1, "fas", "fa-download", "mr-2"], [1, "bg-gradient-to-r", "from-gray-50", "to-gray-100", "rounded-xl", "p-6", "border", "border-gray-200"], [1, "text-xl", "font-bold", "text-gray-800", "mb-6", "flex", "items-center"], [1, "fas", "fa-chart-bar", "mr-3", "text-blue-500"], [1, "max-w-4xl", "mx-auto"], [1, "bg-white", "rounded-lg", "p-6", "shadow-sm", "border", "border-gray-200"], [1, "text-center", "text-gray-500", "py-8"], ["class", "text-center py-12", 4, "ngIf"], [1, "text-center", "py-12"], [1, "bg-yellow-50", "border", "border-yellow-200", "rounded-lg", "p-8", "max-w-md", "mx-auto"], [1, "fas", "fa-chart-bar", "text-yellow-400", "text-4xl", "mb-4"], [1, "text-yellow-800", "text-lg", "font-medium"], [1, "text-yellow-600", "mt-2"]], template: function SeriesAnalyticsComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1)(2, "div", 2)(3, "h2", 3);
      \u0275\u0275element(4, "i", 4);
      \u0275\u0275text(5, " Analytics for Series ");
      \u0275\u0275elementStart(6, "code", 5);
      \u0275\u0275text(7);
      \u0275\u0275elementEnd()()();
      \u0275\u0275elementStart(8, "div", 6)(9, "div", 7)(10, "div", 8)(11, "div", 9)(12, "div", 10)(13, "div")(14, "p", 11);
      \u0275\u0275text(15, "Total Attempts");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(16, "p", 12);
      \u0275\u0275text(17);
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(18, "div", 13);
      \u0275\u0275element(19, "i", 14);
      \u0275\u0275elementEnd()()();
      \u0275\u0275elementStart(20, "div", 15)(21, "div", 10)(22, "div")(23, "p", 16);
      \u0275\u0275text(24, "Average Time");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(25, "p", 17);
      \u0275\u0275text(26);
      \u0275\u0275elementStart(27, "span", 18);
      \u0275\u0275text(28, "min");
      \u0275\u0275elementEnd()()();
      \u0275\u0275elementStart(29, "div", 19);
      \u0275\u0275element(30, "i", 20);
      \u0275\u0275elementEnd()()()();
      \u0275\u0275elementStart(31, "div", 21)(32, "button", 22);
      \u0275\u0275listener("click", function SeriesAnalyticsComponent_Template_button_click_32_listener() {
        return ctx.downloadCsv();
      });
      \u0275\u0275element(33, "i", 23);
      \u0275\u0275text(34, " Download Attempts CSV ");
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(35, "div", 24)(36, "h3", 25);
      \u0275\u0275element(37, "i", 26);
      \u0275\u0275text(38, " Score Distribution ");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(39, "div", 27)(40, "div", 28)(41, "div", 29);
      \u0275\u0275text(42, " Chart component temporarily disabled for build compatibility ");
      \u0275\u0275elementEnd()()();
      \u0275\u0275template(43, SeriesAnalyticsComponent_div_43_Template, 7, 0, "div", 30);
      \u0275\u0275elementEnd()()()()();
    }
    if (rf & 2) {
      \u0275\u0275advance(7);
      \u0275\u0275textInterpolate(ctx.seriesId);
      \u0275\u0275advance(10);
      \u0275\u0275textInterpolate(ctx.totalAttempts);
      \u0275\u0275advance(9);
      \u0275\u0275textInterpolate1("", ctx.averageTimeMin, " ");
      \u0275\u0275advance(17);
      \u0275\u0275property("ngIf", !(ctx.barData.labels == null ? null : ctx.barData.labels.length));
    }
  }, dependencies: [CommonModule, NgIf], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(SeriesAnalyticsComponent, [{
    type: Component,
    args: [{
      standalone: true,
      selector: "app-series-analytics",
      imports: [CommonModule],
      template: '<div class="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-6">\r\n  <div class="max-w-6xl mx-auto">\r\n    <!-- Header Section -->\r\n    <div class="bg-gradient-to-r from-blue-600 to-indigo-600 rounded-t-2xl px-8 py-6 shadow-lg">\r\n      <h2 class="text-3xl font-bold text-white text-center flex items-center justify-center gap-3">\r\n        <i class="fas fa-chart-line"></i>\r\n        Analytics for Series <code class="bg-white bg-opacity-20 px-3 py-1 rounded text-blue-100">{{ seriesId }}</code>\r\n      </h2>\r\n    </div>\r\n\r\n    <!-- Content Card -->\r\n    <div class="bg-white rounded-b-2xl shadow-xl overflow-hidden">\r\n      <div class="p-8">\r\n        <!-- Statistics Cards -->\r\n        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">\r\n          <div class="bg-gradient-to-r from-blue-50 to-blue-100 rounded-xl p-6 border border-blue-200">\r\n            <div class="flex items-center justify-between">\r\n              <div>\r\n                <p class="text-blue-600 text-sm font-semibold uppercase tracking-wide">Total Attempts</p>\r\n                <p class="text-3xl font-bold text-blue-900 mt-2">{{ totalAttempts }}</p>\r\n              </div>\r\n              <div class="bg-blue-500 p-3 rounded-full">\r\n                <i class="fas fa-users text-white text-xl"></i>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div class="bg-gradient-to-r from-green-50 to-green-100 rounded-xl p-6 border border-green-200">\r\n            <div class="flex items-center justify-between">\r\n              <div>\r\n                <p class="text-green-600 text-sm font-semibold uppercase tracking-wide">Average Time</p>\r\n                <p class="text-3xl font-bold text-green-900 mt-2">{{ averageTimeMin }} <span class="text-lg text-green-700">min</span></p>\r\n              </div>\r\n              <div class="bg-green-500 p-3 rounded-full">\r\n                <i class="fas fa-clock text-white text-xl"></i>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Download CSV Button -->\r\n        <div class="mb-8">\r\n          <button \r\n            (click)="downloadCsv()"\r\n            class="inline-flex items-center px-6 py-3 bg-gradient-to-r from-indigo-500 to-purple-500 text-white font-semibold rounded-lg hover:from-indigo-600 hover:to-purple-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-all duration-200 transform hover:scale-105 shadow-lg">\r\n            <i class="fas fa-download mr-2"></i>\r\n            Download Attempts CSV\r\n          </button>\r\n        </div>\r\n\r\n        <!-- Chart Section -->\r\n        <div class="bg-gradient-to-r from-gray-50 to-gray-100 rounded-xl p-6 border border-gray-200">\r\n          <h3 class="text-xl font-bold text-gray-800 mb-6 flex items-center">\r\n            <i class="fas fa-chart-bar mr-3 text-blue-500"></i>\r\n            Score Distribution\r\n          </h3>\r\n            <div class="max-w-4xl mx-auto">\r\n            <div class="bg-white rounded-lg p-6 shadow-sm border border-gray-200">\r\n              <!-- Chart temporarily disabled -->\r\n              <!-- <canvas baseChart\r\n                      [data]="barData"\r\n                      [options]="barOpts"\r\n                      chartType="bar"\r\n                      class="max-h-96">\r\n              </canvas> -->\r\n              <div class="text-center text-gray-500 py-8">\r\n                Chart component temporarily disabled for build compatibility\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- No Data Message -->\r\n          <div *ngIf="!barData.labels?.length" class="text-center py-12">\r\n            <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-8 max-w-md mx-auto">\r\n              <i class="fas fa-chart-bar text-yellow-400 text-4xl mb-4"></i>\r\n              <p class="text-yellow-800 text-lg font-medium">No submissions yet</p>\r\n              <p class="text-yellow-600 mt-2">Chart will appear once students start taking the test</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n'
    }]
  }], () => [{ type: ActivatedRoute }, { type: HttpClient }], null);
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(SeriesAnalyticsComponent, { className: "SeriesAnalyticsComponent", filePath: "src/app/components/series-analytics/series-analytics.component.ts", lineNumber: 25 });
})();

// src/app/components/question-list/question-list.component.ts
var _c03 = (a0, a1, a2) => ({ "bg-red-100 text-red-800": a0, "bg-yellow-100 text-yellow-800": a1, "bg-green-100 text-green-800": a2 });
function QuestionListComponent_option_29_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "option", 51);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const level_r2 = ctx.$implicit;
    \u0275\u0275property("value", level_r2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(level_r2);
  }
}
function QuestionListComponent_option_36_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "option", 51);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const type_r3 = ctx.$implicit;
    \u0275\u0275property("value", type_r3);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(type_r3);
  }
}
function QuestionListComponent_option_43_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "option", 51);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const status_r4 = ctx.$implicit;
    \u0275\u0275property("value", status_r4);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(status_r4);
  }
}
function QuestionListComponent_option_51_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "option", 51);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const branch_r5 = ctx.$implicit;
    const ctx_r5 = \u0275\u0275nextContext();
    \u0275\u0275property("value", ctx_r5.getIdValue(branch_r5._id));
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(branch_r5.name);
  }
}
function QuestionListComponent_option_58_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "option", 51);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const subject_r7 = ctx.$implicit;
    const ctx_r5 = \u0275\u0275nextContext();
    \u0275\u0275property("value", ctx_r5.getIdValue(subject_r7._id));
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(subject_r7.name);
  }
}
function QuestionListComponent_option_65_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "option", 51);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const topic_r8 = ctx.$implicit;
    const ctx_r5 = \u0275\u0275nextContext();
    \u0275\u0275property("value", ctx_r5.getIdValue(topic_r8._id));
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(topic_r8.name);
  }
}
function QuestionListComponent_option_72_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "option", 51);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const subtopic_r9 = ctx.$implicit;
    const ctx_r5 = \u0275\u0275nextContext();
    \u0275\u0275property("value", ctx_r5.getIdValue(subtopic_r9._id));
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(subtopic_r9.name);
  }
}
function QuestionListComponent_tr_109_Template(rf, ctx) {
  if (rf & 1) {
    const _r10 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "tr", 52)(1, "td", 53);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "td", 54)(4, "span", 55);
    \u0275\u0275text(5);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(6, "td", 56);
    \u0275\u0275text(7);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(8, "td", 54)(9, "span", 57);
    \u0275\u0275text(10);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(11, "td", 54)(12, "span", 58);
    \u0275\u0275text(13);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(14, "td", 54)(15, "span", 58);
    \u0275\u0275text(16);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(17, "td", 59);
    \u0275\u0275text(18);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(19, "td", 59);
    \u0275\u0275text(20);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(21, "td", 56);
    \u0275\u0275text(22);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(23, "td", 54)(24, "div", 60)(25, "button", 61);
    \u0275\u0275listener("click", function QuestionListComponent_tr_109_Template_button_click_25_listener() {
      const q_r11 = \u0275\u0275restoreView(_r10).$implicit;
      const ctx_r5 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r5.editQuestion(ctx_r5.getIdValue(q_r11._id)));
    });
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(26, "svg", 62);
    \u0275\u0275element(27, "path", 63);
    \u0275\u0275elementEnd();
    \u0275\u0275text(28, " Edit ");
    \u0275\u0275elementEnd();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(29, "button", 64);
    \u0275\u0275listener("click", function QuestionListComponent_tr_109_Template_button_click_29_listener() {
      const q_r11 = \u0275\u0275restoreView(_r10).$implicit;
      const ctx_r5 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r5.viewQuestionDetails(ctx_r5.getIdValue(q_r11._id)));
    });
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(30, "svg", 62);
    \u0275\u0275element(31, "path", 65)(32, "path", 66);
    \u0275\u0275elementEnd();
    \u0275\u0275text(33, " View ");
    \u0275\u0275elementEnd();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(34, "button", 67);
    \u0275\u0275listener("click", function QuestionListComponent_tr_109_Template_button_click_34_listener() {
      const q_r11 = \u0275\u0275restoreView(_r10).$implicit;
      const ctx_r5 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r5.deleteQuestion(ctx_r5.getIdValue(q_r11._id)));
    });
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(35, "svg", 62);
    \u0275\u0275element(36, "path", 68);
    \u0275\u0275elementEnd();
    \u0275\u0275text(37, " Delete ");
    \u0275\u0275elementEnd()()()();
  }
  if (rf & 2) {
    const q_r11 = ctx.$implicit;
    const ctx_r5 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(q_r11.displayQuestionText);
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate1(" ", ctx_r5.getLanguageIndicator(q_r11), " ");
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r5.getOptionsSummary(q_r11));
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate1(" ", q_r11.type, " ");
    \u0275\u0275advance(2);
    \u0275\u0275property("ngClass", q_r11.status === "active" ? "bg-green-100 text-green-800" : "bg-gray-100 text-gray-800");
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", q_r11.status, " ");
    \u0275\u0275advance(2);
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction3(11, _c03, q_r11.difficulty === "Hard", q_r11.difficulty === "Medium", q_r11.difficulty === "Easy"));
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", q_r11.difficulty, " ");
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r5.getPopulatedFieldName(q_r11.subject) || ctx_r5.getIdValue(q_r11.subject));
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r5.getPopulatedFieldName(q_r11.topic) || ctx_r5.getIdValue(q_r11.topic));
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r5.getPastHistorySummary(q_r11));
  }
}
function QuestionListComponent_tr_110_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "tr")(1, "td", 69)(2, "div", 70);
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(3, "svg", 71);
    \u0275\u0275element(4, "path", 42);
    \u0275\u0275elementEnd();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(5, "p", 72);
    \u0275\u0275text(6, "No questions found");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(7, "p", 73);
    \u0275\u0275text(8, "Try adjusting your filters or add some questions to get started.");
    \u0275\u0275elementEnd()()()();
  }
}
function QuestionListComponent_div_111_ng_container_11_Template(rf, ctx) {
  if (rf & 1) {
    const _r13 = \u0275\u0275getCurrentView();
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "button", 84);
    \u0275\u0275listener("click", function QuestionListComponent_div_111_ng_container_11_Template_button_click_1_listener() {
      const pageNum_r14 = \u0275\u0275restoreView(_r13).$implicit;
      const ctx_r5 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r5.handlePageClick(pageNum_r14));
    });
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const pageNum_r14 = ctx.$implicit;
    const ctx_r5 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("disabled", pageNum_r14 === "...")("ngClass", pageNum_r14 === ctx_r5.currentPage ? "bg-primary-600 text-white border-primary-600" : "text-gray-700 bg-white border-gray-300 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed");
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", pageNum_r14, " ");
  }
}
function QuestionListComponent_div_111_Template(rf, ctx) {
  if (rf & 1) {
    const _r12 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 74)(1, "div", 75)(2, "div", 76)(3, "span");
    \u0275\u0275text(4);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(5, "div", 60)(6, "button", 77);
    \u0275\u0275listener("click", function QuestionListComponent_div_111_Template_button_click_6_listener() {
      \u0275\u0275restoreView(_r12);
      const ctx_r5 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r5.previousPage());
    });
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(7, "svg", 78);
    \u0275\u0275element(8, "path", 79);
    \u0275\u0275elementEnd();
    \u0275\u0275text(9, " Previous ");
    \u0275\u0275elementEnd();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(10, "div", 80);
    \u0275\u0275template(11, QuestionListComponent_div_111_ng_container_11_Template, 3, 3, "ng-container", 81);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(12, "button", 77);
    \u0275\u0275listener("click", function QuestionListComponent_div_111_Template_button_click_12_listener() {
      \u0275\u0275restoreView(_r12);
      const ctx_r5 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r5.nextPage());
    });
    \u0275\u0275text(13, " Next ");
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(14, "svg", 82);
    \u0275\u0275element(15, "path", 83);
    \u0275\u0275elementEnd()()()()();
  }
  if (rf & 2) {
    const ctx_r5 = \u0275\u0275nextContext();
    \u0275\u0275advance(4);
    \u0275\u0275textInterpolate3("Page ", ctx_r5.currentPage, " of ", ctx_r5.totalPages, " (", ctx_r5.totalQuestions, " items)");
    \u0275\u0275advance(2);
    \u0275\u0275property("disabled", ctx_r5.currentPage === 1);
    \u0275\u0275advance(5);
    \u0275\u0275property("ngForOf", ctx_r5.getPageNumbers());
    \u0275\u0275advance();
    \u0275\u0275property("disabled", ctx_r5.currentPage === ctx_r5.totalPages);
  }
}
var QuestionListComponent = class _QuestionListComponent {
  questionService;
  router;
  /** @property {DisplayQuestion[]} Array of questions with computed display properties */
  questions = [];
  // MODIFIED: Use DisplayQuestion interface
  /** @property {any[]} Available branches for filtering */
  branches = [];
  /** @property {any[]} Available subjects based on selected branch */
  subjects = [];
  /** @property {any[]} Available topics based on selected subject */
  topics = [];
  /** @property {any[]} Available subtopics based on selected topic */
  subtopics = [];
  /** @property {string[]} Available question types for filtering */
  // Reverted to string arrays as enums are not in the model file as expected
  questionTypes = ["MCQ", "SA", "LA", "FITB", "Matrix"];
  /** @property {string[]} Available question statuses for filtering */
  questionStatuses = ["Draft", "Published", "Archived", "Pending Review"];
  /** @property {string[]} Available difficulty levels for filtering */
  difficultyLevels = ["Easy", "Medium", "Hard", "Very Hard"];
  /** @property {Object} Current filter criteria for questions */
  filters = {
    branch: "",
    subject: "",
    topic: "",
    subtopic: "",
    difficulty: "",
    type: "",
    status: "",
    searchTerm: ""
    // ADDED: For text search
  };
  /** @property {number} Current page number for pagination */
  // ADDED: Pagination properties
  currentPage = 1;
  /** @property {number} Number of items to display per page */
  itemsPerPage = 15;
  /** @property {number} Total number of questions matching current filters */
  totalQuestions = 0;
  /** @property {number} Total number of pages available */
  totalPages = 0;
  /**
   * @constructor
   * @description Initializes QuestionListComponent with required services for question management
   * and navigation functionality.
   *
   * @param {QuestionService} questionService - Service for question data operations
   * @param {Router} router - Angular router for navigation between components
   */
  constructor(questionService, router) {
    this.questionService = questionService;
    this.router = router;
  }
  /**
   * @method ngOnInit
   * @description Angular lifecycle hook that initializes the component by loading branches
   * and initial set of questions. Sets up the foundation for the question management interface.
   *
   * @example
   * ```typescript
   * // Automatically called by Angular framework
   * // Loads: branch hierarchy, initial question set with pagination
   * ```
   */
  ngOnInit() {
    this.loadBranches();
    this.loadQuestions();
  }
  /**
   * @method loadBranches
   * @description Loads available educational branches for the filtering hierarchy.
   * Branches form the top level of the educational taxonomy.
   *
   * @example
   * ```typescript
   * this.loadBranches();
   * // Populates branches array for filter dropdown
   * // Examples: Engineering, Medical, Commerce, etc.
   * ```
   */
  loadBranches() {
    this.questionService.getBranches().subscribe({
      next: (res) => {
        this.branches = res.branches || res;
      },
      error: (err) => {
        console.error("Failed to load branches:", err);
      }
    });
  }
  /**
   * @method onBranchChange
   * @description Handles branch selection change, loads corresponding subjects,
   * and resets dependent filter levels (subject, topic, subtopic).
   *
   * @example
   * ```typescript
   * // Called when user selects a branch from dropdown
   * // Triggers: subject loading, filter reset, question refresh
   * ```
   */
  onBranchChange() {
    this.subjects = [];
    this.topics = [];
    this.subtopics = [];
    this.filters.subject = "";
    this.filters.topic = "";
    this.filters.subtopic = "";
    if (this.filters.branch) {
      this.questionService.getSubjects(this.filters.branch).subscribe({
        next: (res) => {
          this.subjects = res.subjects || res;
        },
        error: (err) => {
          console.error("Failed to load subjects:", err);
        }
      });
    } else {
      this.applyFilters();
    }
  }
  /**
   * @method onSubjectChange
   * @description Handles subject selection change, loads corresponding topics,
   * and resets dependent filter levels (topic, subtopic).
   *
   * @example
   * ```typescript
   * // Called when user selects a subject from dropdown
   * // Triggers: topic loading, filter reset, question refresh
   * ```
   */
  onSubjectChange() {
    this.topics = [];
    this.subtopics = [];
    this.filters.topic = "";
    this.filters.subtopic = "";
    if (this.filters.subject) {
      this.questionService.getTopics(this.filters.subject).subscribe({
        next: (res) => {
          this.topics = res.topics || res;
        },
        error: (err) => {
          console.error("Failed to load topics:", err);
        }
      });
    } else {
      this.applyFilters();
    }
  }
  /**
   * @method onTopicChange
   * @description Handles topic selection change, loads corresponding subtopics,
   * and resets dependent filter level (subtopic).
   *
   * @example
   * ```typescript
   * // Called when user selects a topic from dropdown
   * // Triggers: subtopic loading, filter reset, question refresh
   * ```
   */
  onTopicChange() {
    this.subtopics = [];
    this.filters.subtopic = "";
    if (this.filters.topic) {
      this.questionService.getSubtopics(this.filters.topic).subscribe({
        next: (res) => {
          this.subtopics = res.subtopics || res;
        },
        error: (err) => {
          console.error("Failed to load subtopics:", err);
        }
      });
    } else {
      this.applyFilters();
    }
  }
  /**
   * @method onFilterChange
   * @description Handles changes in secondary filters (subtopic, difficulty, type, status).
   * Resets pagination to first page and applies current filter criteria.
   *
   * @example
   * ```typescript
   * // Called when user changes any secondary filter
   * // Triggers: pagination reset, filter application, question refresh
   * ```
   */
  // ADDED: Method to handle changes in subtopic, difficulty, type, or status filters
  onFilterChange() {
    this.currentPage = 1;
    this.applyFilters();
  }
  /**
   * @method applyFilters
   * @description Applies current filter criteria to question search with pagination support.
   * Sends comprehensive filter object to backend and updates question list with results.
   *
   * @example
   * ```typescript
   * this.applyFilters();
   * // Applies: all current filters, pagination parameters
   * // Updates: question list, pagination metadata, display properties
   * ```
   */
  applyFilters() {
    const effectiveFilters = __spreadProps(__spreadValues({}, this.filters), {
      page: this.currentPage,
      limit: this.itemsPerPage
    });
    this.questionService.filterQuestions(effectiveFilters).subscribe({
      next: (res) => {
        this.questions = res.questions.map((q) => __spreadProps(__spreadValues({}, q), {
          // displayQuestionText is still useful for the template
          displayQuestionText: this.getPrimaryTranslation(q)?.questionText || "N/A"
        }));
        this.totalQuestions = res.totalCount;
        this.totalPages = res.totalPages;
        this.currentPage = res.currentPage;
      },
      error: (err) => {
        console.error("Failed to fetch filtered questions:", err);
      }
    });
  }
  /**
   * @method resetFilters
   * @description Resets all filter criteria to default values and reloads unfiltered questions.
   * Clears hierarchical selections and search terms, returns to first page.
   *
   * @example
   * ```typescript
   * this.resetFilters();
   * // Clears: all filters, hierarchical selections, search terms
   * // Resets: pagination to page 1, loads all questions
   * ```
   */
  resetFilters() {
    this.filters = {
      branch: "",
      subject: "",
      topic: "",
      subtopic: "",
      difficulty: "",
      type: "",
      status: "",
      searchTerm: ""
      // ADDED: Reset search term
    };
    this.subjects = [];
    this.topics = [];
    this.subtopics = [];
    this.currentPage = 1;
    this.loadQuestions();
  }
  /**
   * @method loadQuestions
   * @description Loads questions with current filter criteria and pagination settings.
   * Main method for refreshing question list with or without filters applied.
   *
   * @example
   * ```typescript
   * this.loadQuestions();
   * // Loads: questions with current filters, pagination metadata
   * // Updates: question list, display properties, page information
   * ```
   */
  loadQuestions() {
    const effectiveFilters = __spreadProps(__spreadValues({}, this.filters), {
      // Include current filters if any (e.g. searchTerm)
      page: this.currentPage,
      limit: this.itemsPerPage
    });
    this.questionService.filterQuestions(effectiveFilters).subscribe({
      next: (res) => {
        this.questions = res.questions.map((q) => __spreadProps(__spreadValues({}, q), {
          displayQuestionText: this.getPrimaryTranslation(q)?.questionText || "N/A"
        }));
        this.totalQuestions = res.totalCount;
        this.totalPages = res.totalPages;
        this.currentPage = res.currentPage;
      },
      error: (err) => console.error("Error loading questions:", err)
    });
  }
  /**
   * @method getIdString
   * @description Safely extracts string ID from various ID formats (string, ObjectId, PopulatedField).
   * Handles complex nested ID structures and provides consistent string output.
   *
   * @param {string | { $oid: string } | PopulatedHierarchyField | undefined} idValue - ID value in various formats
   * @returns {string} Normalized string ID or empty string if extraction fails
   *
   * @example
   * ```typescript
   * const stringId = this.getIdString(question._id);
   * // Handles: "abc123", { $oid: "abc123" }, { _id: "abc123", name: "Question" }
   * // Returns: "abc123" in all cases
   * ```
   */
  // ADDED: Helper to get string ID
  getIdString(idValue) {
    if (idValue === void 0 || idValue === null) {
      return "";
    }
    if (typeof idValue === "string") {
      return idValue;
    }
    if (typeof idValue === "object") {
      if ("$oid" in idValue && typeof idValue.$oid === "string") {
        return idValue.$oid;
      }
      if ("_id" in idValue && idValue._id && "name" in idValue) {
        const nestedId = idValue._id;
        if (typeof nestedId === "string") {
          return nestedId;
        }
        if (nestedId && typeof nestedId === "object" && "$oid" in nestedId && typeof nestedId.$oid === "string") {
          return nestedId.$oid;
        }
      }
    }
    return "";
  }
  /**
   * @method getPopulatedFieldName
   * @description Extracts display name from populated hierarchy fields for UI display.
   *
   * @param {string | { $oid: string } | PopulatedHierarchyField | undefined} field - Populated field to extract name from
   * @returns {string | null} Display name or null if not a populated field
   *
   * @example
   * ```typescript
   * const branchName = this.getPopulatedFieldName(question.branch);
   * // Returns: "Engineering" for populated field, null for string ID
   * ```
   */
  // ADDED: Helper to get name from populated field
  getPopulatedFieldName(field) {
    if (field && typeof field === "object" && "_id" in field && "name" in field && typeof field.name === "string") {
      return field.name;
    }
    return null;
  }
  /**
   * @method editQuestion
   * @description Navigates to question edit page for the specified question ID.
   *
   * @param {string | { $oid: string }} id - Question ID to edit
   *
   * @example
   * ```typescript
   * this.editQuestion(question._id);
   * // Navigates to: /questions/edit/[questionId]
   * ```
   */
  // Renamed from onEdit to editQuestion to match HTML template call
  editQuestion(id) {
    this.router.navigate(["/questions", "edit", this.getIdString(id)]);
  }
  /**
   * @method deleteQuestion
   * @description Deletes a question after user confirmation and refreshes the question list.
   *
   * @param {string | { $oid: string }} id - Question ID to delete
   *
   * @example
   * ```typescript
   * this.deleteQuestion(question._id);
   * // Shows: confirmation dialog, performs deletion, refreshes list
   * ```
   */
  // Renamed from onDelete to deleteQuestion to match HTML template call
  deleteQuestion(id) {
    if (confirm("Are you sure you want to delete this question?")) {
      this.questionService.deleteQuestion(this.getIdString(id)).subscribe(() => {
        this.loadQuestions();
      });
    }
  }
  /**
   * @method viewQuestionDetails
   * @description Navigates to detailed view page for the specified question.
   *
   * @param {string | { $oid: string }} id - Question ID to view
   *
   * @example
   * ```typescript
   * this.viewQuestionDetails(question._id);
   * // Navigates to: /questions/[questionId]/view
   * ```
   */
  // ADDED: Method for "Full View" button
  viewQuestionDetails(id) {
    this.router.navigate(["/questions", this.getIdString(id), "view"]);
  }
  /**
   * @method goToPage
   * @description Navigates to a specific page number with bounds validation.
   *
   * @param {number} page - Target page number to navigate to
   *
   * @example
   * ```typescript
   * this.goToPage(5);
   * // Navigates to page 5 if within valid range (1 to totalPages)
   * ```
   */
  // ADDED: Pagination methods
  goToPage(page) {
    if (page >= 1 && page <= this.totalPages) {
      this.currentPage = page;
      this.loadQuestions();
    }
  }
  /**
   * @method handlePageClick
   * @description Handles page number clicks from pagination controls with type safety.
   *
   * @param {string | number} pageNum - Page number or ellipsis string from pagination
   *
   * @example
   * ```typescript
   * this.handlePageClick(3);     // Navigates to page 3
   * this.handlePageClick('...'); // Ignored (ellipsis)
   * ```
   */
  // ADDED: Method to handle page click from template, ensuring type safety
  handlePageClick(pageNum) {
    if (typeof pageNum === "number") {
      this.goToPage(pageNum);
    }
  }
  /**
   * @method nextPage
   * @description Navigates to the next page if available.
   *
   * @example
   * ```typescript
   * this.nextPage();
   * // Moves to next page if not at the last page
   * ```
   */
  nextPage() {
    if (this.currentPage < this.totalPages) {
      this.currentPage++;
      this.loadQuestions();
    }
  }
  /**
   * @method previousPage
   * @description Navigates to the previous page if available.
   *
   * @example
   * ```typescript
   * this.previousPage();
   * // Moves to previous page if not at the first page
   * ```
   */
  previousPage() {
    if (this.currentPage > 1) {
      this.currentPage--;
      this.loadQuestions();
    }
  }
  /**
   * @method getPageNumbers
   * @description Generates smart pagination control array with ellipsis for large page counts.
   * Implements intelligent pagination display logic for optimal user experience.
   *
   * @returns {(number | string)[]} Array of page numbers and ellipsis strings for pagination controls
   *
   * @example
   * ```typescript
   * const pageNumbers = this.getPageNumbers();
   * // Returns: [1, 2, 3, 4, 5] for small total
   * // Returns: [1, '...', 8, 9, 10, '...', 20] for large total with current page 9
   * ```
   */
  // Helper to generate page numbers for pagination controls
  getPageNumbers() {
    const pageNumbers = [];
    const totalPages = this.totalPages;
    const currentPage = this.currentPage;
    const maxPagesToShow = 5;
    const halfMaxPages = Math.floor(maxPagesToShow / 2);
    if (totalPages <= maxPagesToShow) {
      for (let i = 1; i <= totalPages; i++) {
        pageNumbers.push(i);
      }
    } else {
      let startPage;
      let endPage;
      if (currentPage <= halfMaxPages) {
        startPage = 1;
        endPage = maxPagesToShow - 1;
        for (let i = startPage; i <= endPage; i++) {
          pageNumbers.push(i);
        }
        pageNumbers.push("...");
        pageNumbers.push(totalPages);
      } else if (currentPage + halfMaxPages >= totalPages) {
        startPage = totalPages - (maxPagesToShow - 2);
        pageNumbers.push(1);
        pageNumbers.push("...");
        for (let i = startPage; i <= totalPages; i++) {
          pageNumbers.push(i);
        }
      } else {
        startPage = currentPage - (halfMaxPages - 1);
        endPage = currentPage + (halfMaxPages - 1);
        pageNumbers.push(1);
        pageNumbers.push("...");
        for (let i = startPage; i <= endPage; i++) {
          pageNumbers.push(i);
        }
        pageNumbers.push("...");
        pageNumbers.push(totalPages);
      }
    }
    return pageNumbers;
  }
  /**
   * @method getIdValue
   * @description Extracts ID value from MongoDB ObjectId format for display purposes.
   *
   * @param {any} id - ID in various MongoDB formats
   * @returns {string} String representation of the ID
   *
   * @example
   * ```typescript
   * const displayId = this.getIdValue(question._id);
   * // Handles: string IDs, { $oid: "..." } objects
   * ```
   */
  getIdValue(id) {
    if (typeof id === "string") {
      return id;
    }
    if (id && typeof id === "object" && "$oid" in id) {
      return id.$oid;
    }
    return "";
  }
  /**
   * @method getDisplayVersion
   * @description Converts question version from various formats to display string.
   *
   * @param {Question} question - Question object containing version information
   * @returns {string} Human-readable version string
   *
   * @example
   * ```typescript
   * const version = this.getDisplayVersion(question);
   * // Returns: "1", "2", "N/A" based on version format
   * ```
   */
  getDisplayVersion(question) {
    if (question.version === void 0 || question.version === null) {
      return "N/A";
    }
    if (typeof question.version === "number") {
      return question.version.toString();
    }
    if (typeof question.version === "object" && question.version.hasOwnProperty("$numberInt")) {
      return question.version.$numberInt;
    }
    return String(question.version);
  }
  /**
   * @method getPrimaryTranslation
   * @description Retrieves the primary translation for display purposes, prioritizing English then Hindi.
   *
   * @param {Question} question - Question object containing translations
   * @returns {Translation | undefined} Primary translation or undefined if none available
   *
   * @example
   * ```typescript
   * const primaryTranslation = this.getPrimaryTranslation(question);
   * const questionText = primaryTranslation?.questionText || 'No text available';
   * ```
   */
  // ADDED: Helper to get the primary translation
  getPrimaryTranslation(question) {
    if (!question.translations || question.translations.length === 0) {
      return void 0;
    }
    const preferredLangs = ["en", "hi"];
    for (const lang of preferredLangs) {
      const translation = question.translations.find((t) => t.lang === lang);
      if (translation)
        return translation;
    }
    return question.translations[0];
  }
  /**
   * @method getDisplayTranslation
   * @description Retrieves formatted display text for specific question fields from primary translation.
   *
   * @param {Question} question - Question object to extract translation from
   * @param {'questionText' | 'options' | 'explanations'} field - Field to extract
   * @returns {string} Formatted display text for the specified field
   *
   * @example
   * ```typescript
   * const questionText = this.getDisplayTranslation(question, 'questionText');
   * const optionsSummary = this.getDisplayTranslation(question, 'options');
   * const explanations = this.getDisplayTranslation(question, 'explanations');
   * ```
   */
  getDisplayTranslation(question, field) {
    const primaryTranslation = this.getPrimaryTranslation(question);
    if (!primaryTranslation) {
      return field === "options" || field === "explanations" ? "N/A (No translations)" : "No translation available";
    }
    switch (field) {
      case "questionText":
        return primaryTranslation.questionText || "N/A";
      case "options":
        return primaryTranslation.options && primaryTranslation.options.length > 0 ? primaryTranslation.options.map((o) => `${o.text} (${o.isCorrect ? "Correct" : "Incorrect"})`).join(", ") : "No options";
      case "explanations":
        return primaryTranslation.explanations && primaryTranslation.explanations.length > 0 ? primaryTranslation.explanations.map((e) => (e.label ? `${e.label}: ` : "") + (e.content || "N/A")).join("; ") : "No explanations";
      default:
        return "Invalid field";
    }
  }
  /**
   * @method getLanguageIndicator
   * @description Generates language indicator string showing available translations.
   *
   * @param {Question} question - Question object to check for translations
   * @returns {string} Comma-separated list of language codes (e.g., "EN, HI")
   *
   * @example
   * ```typescript
   * const languages = this.getLanguageIndicator(question);
   * // Returns: "EN, HI" or "EN" or "N/A" based on available translations
   * ```
   */
  // ADDED: Helper to get language indicators
  getLanguageIndicator(question) {
    if (!question.translations || question.translations.length === 0) {
      return "N/A";
    }
    return question.translations.map((t) => t.lang.toUpperCase()).join(", ");
  }
  /**
   * @method getOptionsSummary
   * @description Generates summary of correct options with their indices and text.
   *
   * @param {Question} question - Question object to analyze options
   * @returns {string} Formatted summary of correct options
   *
   * @example
   * ```typescript
   * const summary = this.getOptionsSummary(question);
   * // Returns: "Correct: 1. Option A, 3. Option C" for multiple correct
   * // Returns: "Correct: 2. Option B" for single correct
   * ```
   */
  // MODIFIED: Helper to get options summary, now shows correct option text and index
  getOptionsSummary(question) {
    const primaryTranslation = this.getPrimaryTranslation(question);
    if (!primaryTranslation || !primaryTranslation.options || primaryTranslation.options.length === 0) {
      return "No options available";
    }
    const correctOptions = primaryTranslation.options.map((option, index) => ({ text: option.text, isCorrect: option.isCorrect, originalIndex: index })).filter((option) => option.isCorrect);
    if (correctOptions.length === 0) {
      return "No correct option(s) marked";
    }
    return "Correct: " + correctOptions.map((opt) => `${opt.originalIndex + 1}. ${opt.text}`).join(", ");
  }
  /**
   * @method getPastHistorySummary
   * @description Generates summary of question's usage history in past examinations.
   *
   * @param {Question} question - Question object to check history
   * @returns {string} Summary of past usage or "No history" if unused
   *
   * @example
   * ```typescript
   * const history = this.getPastHistorySummary(question);
   * // Returns: "JEE Main 2023" (specific exam) or "Used in 3 exam(s)" (generic)
   * ```
   */
  // ADDED: Helper to get past history summary
  getPastHistorySummary(question) {
    if (!question.questionHistory || question.questionHistory.length === 0) {
      return "No history";
    }
    const firstHistoryEntry = question.questionHistory[0];
    if (firstHistoryEntry && firstHistoryEntry.title) {
      return firstHistoryEntry.title;
    }
    if (firstHistoryEntry && firstHistoryEntry.examName) {
      return firstHistoryEntry.examName;
    }
    return `Used in ${question.questionHistory.length} exam(s)`;
  }
  static \u0275fac = function QuestionListComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _QuestionListComponent)(\u0275\u0275directiveInject(QuestionService), \u0275\u0275directiveInject(Router));
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _QuestionListComponent, selectors: [["app-question-list"]], decls: 112, vars: 21, consts: [["filterForm", "ngForm"], [1, "min-h-screen", "bg-gray-50", "py-6", "px-4", "sm:px-6", "lg:px-8"], [1, "max-w-7xl", "mx-auto"], [1, "mb-8"], [1, "text-3xl", "font-bold", "text-gray-900", "mb-2"], [1, "text-gray-600"], [1, "bg-white", "rounded-xl", "shadow-sm", "border", "border-gray-200", "p-6", "mb-8"], [1, "text-xl", "font-semibold", "text-gray-900", "mb-4", "flex", "items-center"], ["fill", "none", "stroke", "currentColor", "viewBox", "0 0 24 24", 1, "w-5", "h-5", "mr-2", "text-primary-600"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z"], [1, "space-y-6", 3, "ngSubmit"], [1, "grid", "grid-cols-1", "md:grid-cols-2", "lg:grid-cols-4", "gap-4"], [1, "lg:col-span-1"], ["for", "search", 1, "block", "text-sm", "font-medium", "text-gray-700", "mb-2"], [1, "relative"], ["type", "text", "id", "search", "name", "searchTerm", "placeholder", "Enter search term...", 1, "form-input", "w-full", "pl-10", "pr-4", "py-2", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-primary-500", "focus:border-primary-500", 3, "ngModelChange", "ngModel"], [1, "absolute", "inset-y-0", "left-0", "pl-3", "flex", "items-center", "pointer-events-none"], ["fill", "none", "stroke", "currentColor", "viewBox", "0 0 24 24", 1, "h-5", "w-5", "text-gray-400"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"], ["for", "difficulty", 1, "block", "text-sm", "font-medium", "text-gray-700", "mb-2"], ["id", "difficulty", "name", "difficulty", 1, "form-select", "w-full", "px-3", "py-2", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-primary-500", "focus:border-primary-500", 3, "ngModelChange", "change", "ngModel"], ["value", ""], [3, "value", 4, "ngFor", "ngForOf"], ["for", "type", 1, "block", "text-sm", "font-medium", "text-gray-700", "mb-2"], ["id", "type", "name", "type", 1, "form-select", "w-full", "px-3", "py-2", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-primary-500", "focus:border-primary-500", 3, "ngModelChange", "change", "ngModel"], ["for", "status", 1, "block", "text-sm", "font-medium", "text-gray-700", "mb-2"], ["id", "status", "name", "status", 1, "form-select", "w-full", "px-3", "py-2", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-primary-500", "focus:border-primary-500", 3, "ngModelChange", "change", "ngModel"], ["for", "branch", 1, "block", "text-sm", "font-medium", "text-gray-700", "mb-2"], ["id", "branch", "name", "branch", 1, "form-select", "w-full", "px-3", "py-2", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-primary-500", "focus:border-primary-500", 3, "ngModelChange", "change", "ngModel"], ["for", "subject", 1, "block", "text-sm", "font-medium", "text-gray-700", "mb-2"], ["id", "subject", "name", "subject", 1, "form-select", "w-full", "px-3", "py-2", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-primary-500", "focus:border-primary-500", "disabled:bg-gray-100", "disabled:cursor-not-allowed", 3, "ngModelChange", "change", "ngModel", "disabled"], ["for", "topic", 1, "block", "text-sm", "font-medium", "text-gray-700", "mb-2"], ["id", "topic", "name", "topic", 1, "form-select", "w-full", "px-3", "py-2", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-primary-500", "focus:border-primary-500", "disabled:bg-gray-100", "disabled:cursor-not-allowed", 3, "ngModelChange", "change", "ngModel", "disabled"], ["for", "subtopic", 1, "block", "text-sm", "font-medium", "text-gray-700", "mb-2"], ["id", "subtopic", "name", "subtopic", 1, "form-select", "w-full", "px-3", "py-2", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-primary-500", "focus:border-primary-500", "disabled:bg-gray-100", "disabled:cursor-not-allowed", 3, "ngModelChange", "change", "ngModel", "disabled"], [1, "flex", "flex-wrap", "gap-3", "pt-4", "border-t", "border-gray-200"], ["type", "submit", 1, "btn-primary", "px-6", "py-2", "bg-primary-600", "text-white", "rounded-lg", "font-medium", "hover:bg-primary-700", "focus:outline-none", "focus:ring-2", "focus:ring-primary-500", "focus:ring-offset-2", "transition-colors"], ["type", "button", 1, "btn-secondary", "px-6", "py-2", "bg-gray-100", "text-gray-700", "rounded-lg", "font-medium", "hover:bg-gray-200", "focus:outline-none", "focus:ring-2", "focus:ring-gray-500", "focus:ring-offset-2", "transition-colors", 3, "click"], [1, "bg-white", "rounded-xl", "shadow-sm", "border", "border-gray-200", "overflow-hidden"], [1, "px-6", "py-4", "border-b", "border-gray-200"], [1, "text-xl", "font-semibold", "text-gray-900", "flex", "items-center"], ["fill", "none", "stroke", "currentColor", "viewBox", "0 0 24 24", 1, "w-5", "h-5", "mr-2", "text-secondary-600"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"], [1, "overflow-x-auto"], [1, "min-w-full", "divide-y", "divide-gray-200"], [1, "bg-gray-50"], [1, "px-6", "py-3", "text-left", "text-xs", "font-medium", "text-gray-500", "uppercase", "tracking-wider"], [1, "bg-white", "divide-y", "divide-gray-200"], ["class", "hover:bg-gray-50 transition-colors", 4, "ngFor", "ngForOf"], [4, "ngIf"], ["class", "bg-white px-4 py-3 border-t border-gray-200 sm:px-6", 4, "ngIf"], [3, "value"], [1, "hover:bg-gray-50", "transition-colors"], [1, "px-6", "py-4", "text-sm", "text-gray-900", "max-w-xs", "truncate"], [1, "px-6", "py-4", "text-sm"], [1, "inline-flex", "items-center", "px-2.5", "py-0.5", "rounded-full", "text-xs", "font-medium", "bg-blue-100", "text-blue-800"], [1, "px-6", "py-4", "text-sm", "text-gray-700", "max-w-xs", "truncate"], [1, "inline-flex", "items-center", "px-2.5", "py-0.5", "rounded-full", "text-xs", "font-medium", "bg-purple-100", "text-purple-800"], [1, "inline-flex", "items-center", "px-2.5", "py-0.5", "rounded-full", "text-xs", "font-medium", 3, "ngClass"], [1, "px-6", "py-4", "text-sm", "text-gray-700", "truncate"], [1, "flex", "items-center", "space-x-2"], [1, "inline-flex", "items-center", "px-3", "py-1", "rounded-md", "text-xs", "font-medium", "bg-blue-100", "text-blue-700", "hover:bg-blue-200", "transition-colors", 3, "click"], ["fill", "none", "stroke", "currentColor", "viewBox", "0 0 24 24", 1, "w-3", "h-3", "mr-1"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"], [1, "inline-flex", "items-center", "px-3", "py-1", "rounded-md", "text-xs", "font-medium", "bg-green-100", "text-green-700", "hover:bg-green-200", "transition-colors", 3, "click"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M15 12a3 3 0 11-6 0 3 3 0 016 0z"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"], [1, "inline-flex", "items-center", "px-3", "py-1", "rounded-md", "text-xs", "font-medium", "bg-red-100", "text-red-700", "hover:bg-red-200", "transition-colors", 3, "click"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"], ["colspan", "10", 1, "px-6", "py-12", "text-center", "text-gray-500"], [1, "flex", "flex-col", "items-center"], ["fill", "none", "stroke", "currentColor", "viewBox", "0 0 24 24", 1, "w-12", "h-12", "text-gray-300", "mb-4"], [1, "text-lg", "font-medium"], [1, "text-sm"], [1, "bg-white", "px-4", "py-3", "border-t", "border-gray-200", "sm:px-6"], [1, "flex", "items-center", "justify-between"], [1, "flex", "items-center", "text-sm", "text-gray-700"], [1, "relative", "inline-flex", "items-center", "px-4", "py-2", "text-sm", "font-medium", "text-gray-700", "bg-white", "border", "border-gray-300", "rounded-md", "hover:bg-gray-50", "disabled:opacity-50", "disabled:cursor-not-allowed", 3, "click", "disabled"], ["fill", "none", "stroke", "currentColor", "viewBox", "0 0 24 24", 1, "w-4", "h-4", "mr-1"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M15 19l-7-7 7-7"], [1, "hidden", "md:flex", "space-x-1"], [4, "ngFor", "ngForOf"], ["fill", "none", "stroke", "currentColor", "viewBox", "0 0 24 24", 1, "w-4", "h-4", "ml-1"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M9 5l7 7-7 7"], [1, "relative", "inline-flex", "items-center", "px-4", "py-2", "text-sm", "font-medium", "border", "rounded-md", "transition-colors", 3, "click", "disabled", "ngClass"]], template: function QuestionListComponent_Template(rf, ctx) {
    if (rf & 1) {
      const _r1 = \u0275\u0275getCurrentView();
      \u0275\u0275elementStart(0, "div", 1)(1, "div", 2)(2, "div", 3)(3, "h1", 4);
      \u0275\u0275text(4, "Question Management");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(5, "p", 5);
      \u0275\u0275text(6, "Filter and manage your question bank");
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(7, "div", 6)(8, "h2", 7);
      \u0275\u0275namespaceSVG();
      \u0275\u0275elementStart(9, "svg", 8);
      \u0275\u0275element(10, "path", 9);
      \u0275\u0275elementEnd();
      \u0275\u0275text(11, " Filter Questions ");
      \u0275\u0275elementEnd();
      \u0275\u0275namespaceHTML();
      \u0275\u0275elementStart(12, "form", 10, 0);
      \u0275\u0275listener("ngSubmit", function QuestionListComponent_Template_form_ngSubmit_12_listener() {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.applyFilters());
      });
      \u0275\u0275elementStart(14, "div", 11)(15, "div", 12)(16, "label", 13);
      \u0275\u0275text(17, "Search");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(18, "div", 14)(19, "input", 15);
      \u0275\u0275twoWayListener("ngModelChange", function QuestionListComponent_Template_input_ngModelChange_19_listener($event) {
        \u0275\u0275restoreView(_r1);
        \u0275\u0275twoWayBindingSet(ctx.filters.searchTerm, $event) || (ctx.filters.searchTerm = $event);
        return \u0275\u0275resetView($event);
      });
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(20, "div", 16);
      \u0275\u0275namespaceSVG();
      \u0275\u0275elementStart(21, "svg", 17);
      \u0275\u0275element(22, "path", 18);
      \u0275\u0275elementEnd()()()();
      \u0275\u0275namespaceHTML();
      \u0275\u0275elementStart(23, "div")(24, "label", 19);
      \u0275\u0275text(25, "Difficulty");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(26, "select", 20);
      \u0275\u0275twoWayListener("ngModelChange", function QuestionListComponent_Template_select_ngModelChange_26_listener($event) {
        \u0275\u0275restoreView(_r1);
        \u0275\u0275twoWayBindingSet(ctx.filters.difficulty, $event) || (ctx.filters.difficulty = $event);
        return \u0275\u0275resetView($event);
      });
      \u0275\u0275listener("change", function QuestionListComponent_Template_select_change_26_listener() {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.onFilterChange());
      });
      \u0275\u0275elementStart(27, "option", 21);
      \u0275\u0275text(28, "-- All Levels --");
      \u0275\u0275elementEnd();
      \u0275\u0275template(29, QuestionListComponent_option_29_Template, 2, 2, "option", 22);
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(30, "div")(31, "label", 23);
      \u0275\u0275text(32, "Question Type");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(33, "select", 24);
      \u0275\u0275twoWayListener("ngModelChange", function QuestionListComponent_Template_select_ngModelChange_33_listener($event) {
        \u0275\u0275restoreView(_r1);
        \u0275\u0275twoWayBindingSet(ctx.filters.type, $event) || (ctx.filters.type = $event);
        return \u0275\u0275resetView($event);
      });
      \u0275\u0275listener("change", function QuestionListComponent_Template_select_change_33_listener() {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.onFilterChange());
      });
      \u0275\u0275elementStart(34, "option", 21);
      \u0275\u0275text(35, "-- All Types --");
      \u0275\u0275elementEnd();
      \u0275\u0275template(36, QuestionListComponent_option_36_Template, 2, 2, "option", 22);
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(37, "div")(38, "label", 25);
      \u0275\u0275text(39, "Status");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(40, "select", 26);
      \u0275\u0275twoWayListener("ngModelChange", function QuestionListComponent_Template_select_ngModelChange_40_listener($event) {
        \u0275\u0275restoreView(_r1);
        \u0275\u0275twoWayBindingSet(ctx.filters.status, $event) || (ctx.filters.status = $event);
        return \u0275\u0275resetView($event);
      });
      \u0275\u0275listener("change", function QuestionListComponent_Template_select_change_40_listener() {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.onFilterChange());
      });
      \u0275\u0275elementStart(41, "option", 21);
      \u0275\u0275text(42, "-- All Status --");
      \u0275\u0275elementEnd();
      \u0275\u0275template(43, QuestionListComponent_option_43_Template, 2, 2, "option", 22);
      \u0275\u0275elementEnd()()();
      \u0275\u0275elementStart(44, "div", 11)(45, "div")(46, "label", 27);
      \u0275\u0275text(47, "Branch");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(48, "select", 28);
      \u0275\u0275twoWayListener("ngModelChange", function QuestionListComponent_Template_select_ngModelChange_48_listener($event) {
        \u0275\u0275restoreView(_r1);
        \u0275\u0275twoWayBindingSet(ctx.filters.branch, $event) || (ctx.filters.branch = $event);
        return \u0275\u0275resetView($event);
      });
      \u0275\u0275listener("change", function QuestionListComponent_Template_select_change_48_listener() {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.onBranchChange());
      });
      \u0275\u0275elementStart(49, "option", 21);
      \u0275\u0275text(50, "-- Select Branch --");
      \u0275\u0275elementEnd();
      \u0275\u0275template(51, QuestionListComponent_option_51_Template, 2, 2, "option", 22);
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(52, "div")(53, "label", 29);
      \u0275\u0275text(54, "Subject");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(55, "select", 30);
      \u0275\u0275twoWayListener("ngModelChange", function QuestionListComponent_Template_select_ngModelChange_55_listener($event) {
        \u0275\u0275restoreView(_r1);
        \u0275\u0275twoWayBindingSet(ctx.filters.subject, $event) || (ctx.filters.subject = $event);
        return \u0275\u0275resetView($event);
      });
      \u0275\u0275listener("change", function QuestionListComponent_Template_select_change_55_listener() {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.onSubjectChange());
      });
      \u0275\u0275elementStart(56, "option", 21);
      \u0275\u0275text(57, "-- Select Subject --");
      \u0275\u0275elementEnd();
      \u0275\u0275template(58, QuestionListComponent_option_58_Template, 2, 2, "option", 22);
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(59, "div")(60, "label", 31);
      \u0275\u0275text(61, "Topic");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(62, "select", 32);
      \u0275\u0275twoWayListener("ngModelChange", function QuestionListComponent_Template_select_ngModelChange_62_listener($event) {
        \u0275\u0275restoreView(_r1);
        \u0275\u0275twoWayBindingSet(ctx.filters.topic, $event) || (ctx.filters.topic = $event);
        return \u0275\u0275resetView($event);
      });
      \u0275\u0275listener("change", function QuestionListComponent_Template_select_change_62_listener() {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.onTopicChange());
      });
      \u0275\u0275elementStart(63, "option", 21);
      \u0275\u0275text(64, "-- Select Topic --");
      \u0275\u0275elementEnd();
      \u0275\u0275template(65, QuestionListComponent_option_65_Template, 2, 2, "option", 22);
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(66, "div")(67, "label", 33);
      \u0275\u0275text(68, "Subtopic");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(69, "select", 34);
      \u0275\u0275twoWayListener("ngModelChange", function QuestionListComponent_Template_select_ngModelChange_69_listener($event) {
        \u0275\u0275restoreView(_r1);
        \u0275\u0275twoWayBindingSet(ctx.filters.subtopic, $event) || (ctx.filters.subtopic = $event);
        return \u0275\u0275resetView($event);
      });
      \u0275\u0275listener("change", function QuestionListComponent_Template_select_change_69_listener() {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.onFilterChange());
      });
      \u0275\u0275elementStart(70, "option", 21);
      \u0275\u0275text(71, "-- Select Subtopic --");
      \u0275\u0275elementEnd();
      \u0275\u0275template(72, QuestionListComponent_option_72_Template, 2, 2, "option", 22);
      \u0275\u0275elementEnd()()();
      \u0275\u0275elementStart(73, "div", 35)(74, "button", 36);
      \u0275\u0275text(75, " Apply Filters ");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(76, "button", 37);
      \u0275\u0275listener("click", function QuestionListComponent_Template_button_click_76_listener() {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.resetFilters());
      });
      \u0275\u0275text(77, " Reset Filters ");
      \u0275\u0275elementEnd()()()();
      \u0275\u0275elementStart(78, "div", 38)(79, "div", 39)(80, "h2", 40);
      \u0275\u0275namespaceSVG();
      \u0275\u0275elementStart(81, "svg", 41);
      \u0275\u0275element(82, "path", 42);
      \u0275\u0275elementEnd();
      \u0275\u0275text(83, " Question List ");
      \u0275\u0275elementEnd()();
      \u0275\u0275namespaceHTML();
      \u0275\u0275elementStart(84, "div", 43)(85, "table", 44)(86, "thead", 45)(87, "tr")(88, "th", 46);
      \u0275\u0275text(89, "Question Text");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(90, "th", 46);
      \u0275\u0275text(91, "Languages");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(92, "th", 46);
      \u0275\u0275text(93, "Options");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(94, "th", 46);
      \u0275\u0275text(95, "Type");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(96, "th", 46);
      \u0275\u0275text(97, "Status");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(98, "th", 46);
      \u0275\u0275text(99, "Difficulty");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(100, "th", 46);
      \u0275\u0275text(101, "Subject");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(102, "th", 46);
      \u0275\u0275text(103, "Topic");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(104, "th", 46);
      \u0275\u0275text(105, "Past History");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(106, "th", 46);
      \u0275\u0275text(107, "Actions");
      \u0275\u0275elementEnd()()();
      \u0275\u0275elementStart(108, "tbody", 47);
      \u0275\u0275template(109, QuestionListComponent_tr_109_Template, 38, 15, "tr", 48)(110, QuestionListComponent_tr_110_Template, 9, 0, "tr", 49);
      \u0275\u0275elementEnd()()();
      \u0275\u0275template(111, QuestionListComponent_div_111_Template, 16, 6, "div", 50);
      \u0275\u0275elementEnd()()();
    }
    if (rf & 2) {
      \u0275\u0275advance(19);
      \u0275\u0275twoWayProperty("ngModel", ctx.filters.searchTerm);
      \u0275\u0275advance(7);
      \u0275\u0275twoWayProperty("ngModel", ctx.filters.difficulty);
      \u0275\u0275advance(3);
      \u0275\u0275property("ngForOf", ctx.difficultyLevels);
      \u0275\u0275advance(4);
      \u0275\u0275twoWayProperty("ngModel", ctx.filters.type);
      \u0275\u0275advance(3);
      \u0275\u0275property("ngForOf", ctx.questionTypes);
      \u0275\u0275advance(4);
      \u0275\u0275twoWayProperty("ngModel", ctx.filters.status);
      \u0275\u0275advance(3);
      \u0275\u0275property("ngForOf", ctx.questionStatuses);
      \u0275\u0275advance(5);
      \u0275\u0275twoWayProperty("ngModel", ctx.filters.branch);
      \u0275\u0275advance(3);
      \u0275\u0275property("ngForOf", ctx.branches);
      \u0275\u0275advance(4);
      \u0275\u0275twoWayProperty("ngModel", ctx.filters.subject);
      \u0275\u0275property("disabled", !ctx.filters.branch);
      \u0275\u0275advance(3);
      \u0275\u0275property("ngForOf", ctx.subjects);
      \u0275\u0275advance(4);
      \u0275\u0275twoWayProperty("ngModel", ctx.filters.topic);
      \u0275\u0275property("disabled", !ctx.filters.subject);
      \u0275\u0275advance(3);
      \u0275\u0275property("ngForOf", ctx.topics);
      \u0275\u0275advance(4);
      \u0275\u0275twoWayProperty("ngModel", ctx.filters.subtopic);
      \u0275\u0275property("disabled", !ctx.filters.topic);
      \u0275\u0275advance(3);
      \u0275\u0275property("ngForOf", ctx.subtopics);
      \u0275\u0275advance(37);
      \u0275\u0275property("ngForOf", ctx.questions);
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", ctx.questions.length === 0);
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", ctx.totalPages > 0);
    }
  }, dependencies: [CommonModule, NgClass, NgForOf, NgIf, RouterModule, FormsModule, \u0275NgNoValidate, NgSelectOption, \u0275NgSelectMultipleOption, DefaultValueAccessor, SelectControlValueAccessor, NgControlStatus, NgControlStatusGroup, NgModel, NgForm], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(QuestionListComponent, [{
    type: Component,
    args: [{ selector: "app-question-list", standalone: true, imports: [CommonModule, RouterModule, FormsModule], template: `<!-- Modern Question List with Tailwind CSS -->\r
<div class="min-h-screen bg-gray-50 py-6 px-4 sm:px-6 lg:px-8">\r
  <div class="max-w-7xl mx-auto">\r
    \r
    <!-- Page Header -->\r
    <div class="mb-8">\r
      <h1 class="text-3xl font-bold text-gray-900 mb-2">Question Management</h1>\r
      <p class="text-gray-600">Filter and manage your question bank</p>\r
    </div>\r
\r
    <!-- Filter Section -->\r
    <div class="bg-white rounded-xl shadow-sm border border-gray-200 p-6 mb-8">\r
      <h2 class="text-xl font-semibold text-gray-900 mb-4 flex items-center">\r
        <svg class="w-5 h-5 mr-2 text-primary-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z"></path>\r
        </svg>\r
        Filter Questions\r
      </h2>\r
      \r
      <form (ngSubmit)="applyFilters()" #filterForm="ngForm" class="space-y-6">\r
        <!-- Search and Quick Filters Row -->\r
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">\r
          <!-- Search Input -->\r
          <div class="lg:col-span-1">\r
            <label for="search" class="block text-sm font-medium text-gray-700 mb-2">Search</label>\r
            <div class="relative">\r
              <input \r
                type="text" \r
                id="search"\r
                [(ngModel)]="filters.searchTerm" \r
                name="searchTerm" \r
                placeholder="Enter search term..."\r
                class="form-input w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"\r
              >\r
              <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">\r
                <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>\r
                </svg>\r
              </div>\r
            </div>\r
          </div>\r
\r
          <!-- Difficulty Filter -->\r
          <div>\r
            <label for="difficulty" class="block text-sm font-medium text-gray-700 mb-2">Difficulty</label>\r
            <select \r
              id="difficulty"\r
              [(ngModel)]="filters.difficulty" \r
              name="difficulty" \r
              (change)="onFilterChange()"\r
              class="form-select w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"\r
            >\r
              <option value="">-- All Levels --</option>\r
              <option *ngFor="let level of difficultyLevels" [value]="level">{{ level }}</option>\r
            </select>\r
          </div>\r
\r
          <!-- Type Filter -->\r
          <div>\r
            <label for="type" class="block text-sm font-medium text-gray-700 mb-2">Question Type</label>\r
            <select \r
              id="type"\r
              [(ngModel)]="filters.type" \r
              name="type" \r
              (change)="onFilterChange()"\r
              class="form-select w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"\r
            >\r
              <option value="">-- All Types --</option>\r
              <option *ngFor="let type of questionTypes" [value]="type">{{ type }}</option>\r
            </select>\r
          </div>\r
\r
          <!-- Status Filter -->\r
          <div>\r
            <label for="status" class="block text-sm font-medium text-gray-700 mb-2">Status</label>\r
            <select \r
              id="status"\r
              [(ngModel)]="filters.status" \r
              name="status" \r
              (change)="onFilterChange()"\r
              class="form-select w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"\r
            >\r
              <option value="">-- All Status --</option>\r
              <option *ngFor="let status of questionStatuses" [value]="status">{{ status }}</option>\r
            </select>\r
          </div>\r
        </div>\r
\r
        <!-- Hierarchy Filters Row -->\r
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">\r
          <!-- Branch Filter -->\r
          <div>\r
            <label for="branch" class="block text-sm font-medium text-gray-700 mb-2">Branch</label>\r
            <select \r
              id="branch"\r
              [(ngModel)]="filters.branch" \r
              name="branch" \r
              (change)="onBranchChange()"\r
              class="form-select w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"\r
            >\r
              <option value="">-- Select Branch --</option>\r
              <option *ngFor="let branch of branches" [value]="getIdValue(branch._id)">{{ branch.name }}</option>\r
            </select>\r
          </div>\r
\r
          <!-- Subject Filter -->\r
          <div>\r
            <label for="subject" class="block text-sm font-medium text-gray-700 mb-2">Subject</label>\r
            <select \r
              id="subject"\r
              [(ngModel)]="filters.subject" \r
              name="subject" \r
              (change)="onSubjectChange()" \r
              [disabled]="!filters.branch"\r
              class="form-select w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 disabled:bg-gray-100 disabled:cursor-not-allowed"\r
            >\r
              <option value="">-- Select Subject --</option>\r
              <option *ngFor="let subject of subjects" [value]="getIdValue(subject._id)">{{ subject.name }}</option>\r
            </select>\r
          </div>\r
\r
          <!-- Topic Filter -->\r
          <div>\r
            <label for="topic" class="block text-sm font-medium text-gray-700 mb-2">Topic</label>\r
            <select \r
              id="topic"\r
              [(ngModel)]="filters.topic" \r
              name="topic" \r
              (change)="onTopicChange()" \r
              [disabled]="!filters.subject"\r
              class="form-select w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 disabled:bg-gray-100 disabled:cursor-not-allowed"\r
            >\r
              <option value="">-- Select Topic --</option>\r
              <option *ngFor="let topic of topics" [value]="getIdValue(topic._id)">{{ topic.name }}</option>\r
            </select>\r
          </div>\r
\r
          <!-- Subtopic Filter -->\r
          <div>\r
            <label for="subtopic" class="block text-sm font-medium text-gray-700 mb-2">Subtopic</label>\r
            <select \r
              id="subtopic"\r
              [(ngModel)]="filters.subtopic" \r
              name="subtopic" \r
              (change)="onFilterChange()" \r
              [disabled]="!filters.topic"\r
              class="form-select w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 disabled:bg-gray-100 disabled:cursor-not-allowed"\r
            >\r
              <option value="">-- Select Subtopic --</option>\r
              <option *ngFor="let subtopic of subtopics" [value]="getIdValue(subtopic._id)">{{ subtopic.name }}</option>\r
            </select>\r
          </div>\r
        </div>\r
\r
        <!-- Action Buttons -->\r
        <div class="flex flex-wrap gap-3 pt-4 border-t border-gray-200">\r
          <button \r
            type="submit"\r
            class="btn-primary px-6 py-2 bg-primary-600 text-white rounded-lg font-medium hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 transition-colors"\r
          >\r
            Apply Filters\r
          </button>\r
          <button \r
            type="button" \r
            (click)="resetFilters()"\r
            class="btn-secondary px-6 py-2 bg-gray-100 text-gray-700 rounded-lg font-medium hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 transition-colors"\r
          >\r
            Reset Filters\r
          </button>\r
        </div>\r
      </form>\r
    </div>\r
\r
    <!-- Questions Table -->\r
    <div class="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">\r
      <div class="px-6 py-4 border-b border-gray-200">\r
        <h2 class="text-xl font-semibold text-gray-900 flex items-center">\r
          <svg class="w-5 h-5 mr-2 text-secondary-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>\r
          </svg>\r
          Question List\r
        </h2>\r
      </div>\r
\r
      <div class="overflow-x-auto">\r
        <table class="min-w-full divide-y divide-gray-200">\r
          <thead class="bg-gray-50">\r
            <tr>\r
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Question Text</th>\r
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Languages</th>\r
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Options</th>\r
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>\r
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>\r
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Difficulty</th>\r
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Subject</th>\r
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Topic</th>\r
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Past History</th>\r
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>\r
            </tr>\r
          </thead>\r
          <tbody class="bg-white divide-y divide-gray-200">\r
            <tr *ngFor="let q of questions; let i = index" class="hover:bg-gray-50 transition-colors">\r
              <td class="px-6 py-4 text-sm text-gray-900 max-w-xs truncate">{{ q.displayQuestionText }}</td>\r
              <td class="px-6 py-4 text-sm">\r
                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">\r
                  {{ getLanguageIndicator(q) }}\r
                </span>\r
              </td>\r
              <td class="px-6 py-4 text-sm text-gray-700 max-w-xs truncate">{{ getOptionsSummary(q) }}</td>\r
              <td class="px-6 py-4 text-sm">\r
                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-purple-100 text-purple-800">\r
                  {{ q.type }}\r
                </span>\r
              </td>\r
              <td class="px-6 py-4 text-sm">\r
                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium" \r
                      [ngClass]="q.status === 'active' ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'">\r
                  {{ q.status }}\r
                </span>\r
              </td>\r
              <td class="px-6 py-4 text-sm">\r
                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium"\r
                      [ngClass]="{\r
                        'bg-red-100 text-red-800': q.difficulty === 'Hard',\r
                        'bg-yellow-100 text-yellow-800': q.difficulty === 'Medium',\r
                        'bg-green-100 text-green-800': q.difficulty === 'Easy'\r
                      }">\r
                  {{ q.difficulty }}\r
                </span>\r
              </td>\r
              <td class="px-6 py-4 text-sm text-gray-700 truncate">{{ getPopulatedFieldName(q.subject) || getIdValue(q.subject) }}</td>\r
              <td class="px-6 py-4 text-sm text-gray-700 truncate">{{ getPopulatedFieldName(q.topic) || getIdValue(q.topic) }}</td>\r
              <td class="px-6 py-4 text-sm text-gray-700 max-w-xs truncate">{{ getPastHistorySummary(q) }}</td>\r
              <td class="px-6 py-4 text-sm">\r
                <div class="flex items-center space-x-2">\r
                  <button \r
                    (click)="editQuestion(getIdValue(q._id))"\r
                    class="inline-flex items-center px-3 py-1 rounded-md text-xs font-medium bg-blue-100 text-blue-700 hover:bg-blue-200 transition-colors"\r
                  >\r
                    <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>\r
                    </svg>\r
                    Edit\r
                  </button>\r
                  <button \r
                    (click)="viewQuestionDetails(getIdValue(q._id))"\r
                    class="inline-flex items-center px-3 py-1 rounded-md text-xs font-medium bg-green-100 text-green-700 hover:bg-green-200 transition-colors"\r
                  >\r
                    <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>\r
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>\r
                    </svg>\r
                    View\r
                  </button>\r
                  <button \r
                    (click)="deleteQuestion(getIdValue(q._id))"\r
                    class="inline-flex items-center px-3 py-1 rounded-md text-xs font-medium bg-red-100 text-red-700 hover:bg-red-200 transition-colors"\r
                  >\r
                    <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>\r
                    </svg>\r
                    Delete\r
                  </button>\r
                </div>\r
              </td>\r
            </tr>\r
            <tr *ngIf="questions.length === 0">\r
              <td colspan="10" class="px-6 py-12 text-center text-gray-500">\r
                <div class="flex flex-col items-center">\r
                  <svg class="w-12 h-12 text-gray-300 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>\r
                  </svg>\r
                  <p class="text-lg font-medium">No questions found</p>\r
                  <p class="text-sm">Try adjusting your filters or add some questions to get started.</p>\r
                </div>\r
              </td>\r
            </tr>\r
          </tbody>\r
        </table>\r
      </div>\r
\r
      <!-- Pagination Controls -->\r
      <div *ngIf="totalPages > 0" class="bg-white px-4 py-3 border-t border-gray-200 sm:px-6">\r
        <div class="flex items-center justify-between">\r
          <div class="flex items-center text-sm text-gray-700">\r
            <span>Page {{ currentPage }} of {{ totalPages }} ({{ totalQuestions }} items)</span>\r
          </div>\r
          <div class="flex items-center space-x-2">\r
            <button \r
              (click)="previousPage()" \r
              [disabled]="currentPage === 1"\r
              class="relative inline-flex items-center px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"\r
            >\r
              <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>\r
              </svg>\r
              Previous\r
            </button>\r
            \r
            <div class="hidden md:flex space-x-1">\r
              <ng-container *ngFor="let pageNum of getPageNumbers()">\r
                <button \r
                  (click)="handlePageClick(pageNum)" \r
                  [disabled]="pageNum === '...'"\r
                  class="relative inline-flex items-center px-4 py-2 text-sm font-medium border rounded-md transition-colors"\r
                  [ngClass]="pageNum === currentPage ? \r
                    'bg-primary-600 text-white border-primary-600' : \r
                    'text-gray-700 bg-white border-gray-300 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed'"\r
                >\r
                  {{ pageNum }}\r
                </button>\r
              </ng-container>\r
            </div>\r
            \r
            <button \r
              (click)="nextPage()" \r
              [disabled]="currentPage === totalPages"\r
              class="relative inline-flex items-center px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"\r
            >\r
              Next\r
              <svg class="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>\r
              </svg>\r
            </button>\r
          </div>\r
        </div>\r
      </div>\r
    </div>\r
  </div>\r
</div>\r
` }]
  }], () => [{ type: QuestionService }, { type: Router }], null);
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(QuestionListComponent, { className: "QuestionListComponent", filePath: "src/app/components/question-list/question-list.component.ts", lineNumber: 76 });
})();

// src/app/services/branch.service.ts
var BranchService = class _BranchService {
  http;
  apiUrl = `${environment.apiUrl}/hierarchy`;
  constructor(http) {
    this.http = http;
  }
  getBranches() {
    const token = localStorage.getItem("token");
    const headers = new HttpHeaders({ Authorization: `Bearer ${token}` });
    return this.http.get(`${this.apiUrl}/branch`, { headers });
  }
  createBranch(name) {
    const headers = new HttpHeaders({ Authorization: `Bearer ${localStorage.getItem("token")}` });
    return this.http.post(`${this.apiUrl}/branch`, { name }, { headers });
  }
  static \u0275fac = function BranchService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _BranchService)(\u0275\u0275inject(HttpClient));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _BranchService, factory: _BranchService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(BranchService, [{
    type: Injectable,
    args: [{ providedIn: "root" }]
  }], () => [{ type: HttpClient }], null);
})();

// src/app/services/subject.service.ts
var SubjectService = class _SubjectService {
  http;
  apiUrl = `${environment.apiUrl}/hierarchy`;
  constructor(http) {
    this.http = http;
  }
  // Fetch subjects for a given branch
  getSubjects(branchId) {
    const token = localStorage.getItem("token");
    const headers = new HttpHeaders({ Authorization: `Bearer ${token}` });
    return this.http.get(`${this.apiUrl}/subject?branchId=${branchId}`, { headers });
  }
  // Create a new subject under a branch
  createSubject(name, branchId) {
    const token = localStorage.getItem("token");
    const headers = new HttpHeaders({ Authorization: `Bearer ${token}` });
    return this.http.post(`${this.apiUrl}/subject`, { name, branch: branchId }, { headers });
  }
  static \u0275fac = function SubjectService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _SubjectService)(\u0275\u0275inject(HttpClient));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _SubjectService, factory: _SubjectService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(SubjectService, [{
    type: Injectable,
    args: [{ providedIn: "root" }]
  }], () => [{ type: HttpClient }], null);
})();

// src/app/services/topic.service.ts
var TopicService = class _TopicService {
  http;
  apiUrl = `${environment.apiUrl}/hierarchy`;
  constructor(http) {
    this.http = http;
  }
  getTopics(subjectId) {
    const token = localStorage.getItem("token");
    const headers = new HttpHeaders({ Authorization: `Bearer ${token}` });
    return this.http.get(`${this.apiUrl}/topic?subjectId=${subjectId}`, { headers });
  }
  createTopic(name, subjectId) {
    const token = localStorage.getItem("token");
    const headers = new HttpHeaders({ Authorization: `Bearer ${token}` });
    return this.http.post(`${this.apiUrl}/topic`, { name, subject: subjectId }, { headers });
  }
  static \u0275fac = function TopicService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _TopicService)(\u0275\u0275inject(HttpClient));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _TopicService, factory: _TopicService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TopicService, [{
    type: Injectable,
    args: [{ providedIn: "root" }]
  }], () => [{ type: HttpClient }], null);
})();

// src/app/services/subtopic.service.ts
var SubtopicService = class _SubtopicService {
  http;
  apiUrl = `${environment.apiUrl}/hierarchy`;
  constructor(http) {
    this.http = http;
  }
  getSubtopics(topicId) {
    const token = localStorage.getItem("token");
    const headers = new HttpHeaders({ Authorization: `Bearer ${token}` });
    return this.http.get(`${this.apiUrl}/subtopic?topicId=${topicId}`, { headers });
  }
  createSubtopic(name, topicId) {
    const token = localStorage.getItem("token");
    const headers = new HttpHeaders({ Authorization: `Bearer ${token}` });
    return this.http.post(`${this.apiUrl}/subtopic`, { name, topic: topicId }, { headers });
  }
  static \u0275fac = function SubtopicService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _SubtopicService)(\u0275\u0275inject(HttpClient));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _SubtopicService, factory: _SubtopicService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(SubtopicService, [{
    type: Injectable,
    args: [{ providedIn: "root" }]
  }], () => [{ type: HttpClient }], null);
})();

// src/app/services/image-upload.service.ts
var ImageUploadService = class _ImageUploadService {
  http;
  apiUrl = `${environment.apiUrl}/questions`;
  // Use environment config
  constructor(http) {
    this.http = http;
  }
  /**
   * Get authorization headers
   */
  getAuthHeaders() {
    const token = localStorage.getItem("token");
    return new HttpHeaders({
      "Authorization": `Bearer ${token}`
    });
  }
  /**
   * Upload image for question (body or option)
   * Implements "Upload As You Go" approach
   */
  uploadQuestionImage(request) {
    const formData = new FormData();
    formData.append("questionImageFile", request.file, request.file.name);
    formData.append("branchId", request.branchId);
    formData.append("subjectId", request.subjectId);
    formData.append("topicId", request.topicId);
    formData.append("imageFor", request.imageFor);
    if (request.optionIndex !== void 0) {
      formData.append("optionIndex", request.optionIndex.toString());
    }
    if (request.questionId) {
      formData.append("questionId", request.questionId);
    }
    return this.http.post(`${this.apiUrl}/upload-image`, formData, {
      headers: this.getAuthHeaders()
    });
  }
  /**
   * Delete uploaded image from S3
   */
  deleteImage(imageUrl) {
    const headers = this.getAuthHeaders().set("Content-Type", "application/json");
    return this.http.delete(`${this.apiUrl}/delete-image`, {
      headers,
      body: { imageUrl }
    });
  }
  /**
   * Validate image file before upload
   */
  validateImageFile(file) {
    const allowedTypes = ["image/jpeg", "image/jpg", "image/png", "image/gif", "image/webp"];
    if (!allowedTypes.includes(file.type)) {
      return {
        isValid: false,
        error: "Invalid file type. Only JPEG, PNG, GIF, and WebP images are allowed."
      };
    }
    const maxSize = 10 * 1024 * 1024;
    if (file.size > maxSize) {
      return {
        isValid: false,
        error: "File size too large. Maximum size allowed is 10MB."
      };
    }
    return { isValid: true };
  }
  /**
   * Generate preview URL for local file
   */
  generatePreviewUrl(file) {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = () => resolve(reader.result);
      reader.onerror = () => reject(new Error("Failed to read file"));
      reader.readAsDataURL(file);
    });
  }
  static \u0275fac = function ImageUploadService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _ImageUploadService)(\u0275\u0275inject(HttpClient));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _ImageUploadService, factory: _ImageUploadService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ImageUploadService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }], null);
})();

// node_modules/katex/dist/katex.mjs
var SourceLocation = class _SourceLocation {
  // The + prefix indicates that these fields aren't writeable
  // Lexer holding the input string.
  // Start offset, zero-based inclusive.
  // End offset, zero-based exclusive.
  constructor(lexer, start, end) {
    this.lexer = void 0;
    this.start = void 0;
    this.end = void 0;
    this.lexer = lexer;
    this.start = start;
    this.end = end;
  }
  /**
   * Merges two `SourceLocation`s from location providers, given they are
   * provided in order of appearance.
   * - Returns the first one's location if only the first is provided.
   * - Returns a merged range of the first and the last if both are provided
   *   and their lexers match.
   * - Otherwise, returns null.
   */
  static range(first2, second) {
    if (!second) {
      return first2 && first2.loc;
    } else if (!first2 || !first2.loc || !second.loc || first2.loc.lexer !== second.loc.lexer) {
      return null;
    } else {
      return new _SourceLocation(first2.loc.lexer, first2.loc.start, second.loc.end);
    }
  }
};
var Token2 = class _Token {
  // don't expand the token
  // used in \noexpand
  constructor(text3, loc) {
    this.text = void 0;
    this.loc = void 0;
    this.noexpand = void 0;
    this.treatAsRelax = void 0;
    this.text = text3;
    this.loc = loc;
  }
  /**
   * Given a pair of tokens (this and endToken), compute a `Token` encompassing
   * the whole input range enclosed by these two.
   */
  range(endToken, text3) {
    return new _Token(text3, SourceLocation.range(this, endToken));
  }
};
var ParseError2 = class _ParseError {
  // Error start position based on passed-in Token or ParseNode.
  // Length of affected text based on passed-in Token or ParseNode.
  // The underlying error message without any context added.
  constructor(message, token) {
    this.name = void 0;
    this.position = void 0;
    this.length = void 0;
    this.rawMessage = void 0;
    var error = "KaTeX parse error: " + message;
    var start;
    var end;
    var loc = token && token.loc;
    if (loc && loc.start <= loc.end) {
      var input2 = loc.lexer.input;
      start = loc.start;
      end = loc.end;
      if (start === input2.length) {
        error += " at end of input: ";
      } else {
        error += " at position " + (start + 1) + ": ";
      }
      var underlined = input2.slice(start, end).replace(/[^]/g, "$&\u0332");
      var left;
      if (start > 15) {
        left = "\u2026" + input2.slice(start - 15, start);
      } else {
        left = input2.slice(0, start);
      }
      var right;
      if (end + 15 < input2.length) {
        right = input2.slice(end, end + 15) + "\u2026";
      } else {
        right = input2.slice(end);
      }
      error += left + underlined + right;
    }
    var self2 = new Error(error);
    self2.name = "ParseError";
    self2.__proto__ = _ParseError.prototype;
    self2.position = start;
    if (start != null && end != null) {
      self2.length = end - start;
    }
    self2.rawMessage = message;
    return self2;
  }
};
ParseError2.prototype.__proto__ = Error.prototype;
var contains = function contains2(list, elem) {
  return list.indexOf(elem) !== -1;
};
var deflt = function deflt2(setting, defaultIfUndefined) {
  return setting === void 0 ? defaultIfUndefined : setting;
};
var uppercase = /([A-Z])/g;
var hyphenate2 = function hyphenate3(str) {
  return str.replace(uppercase, "-$1").toLowerCase();
};
var ESCAPE_LOOKUP = {
  "&": "&amp;",
  ">": "&gt;",
  "<": "&lt;",
  '"': "&quot;",
  "'": "&#x27;"
};
var ESCAPE_REGEX = /[&><"']/g;
function escape(text3) {
  return String(text3).replace(ESCAPE_REGEX, (match2) => ESCAPE_LOOKUP[match2]);
}
var getBaseElem = function getBaseElem2(group) {
  if (group.type === "ordgroup") {
    if (group.body.length === 1) {
      return getBaseElem2(group.body[0]);
    } else {
      return group;
    }
  } else if (group.type === "color") {
    if (group.body.length === 1) {
      return getBaseElem2(group.body[0]);
    } else {
      return group;
    }
  } else if (group.type === "font") {
    return getBaseElem2(group.body);
  } else {
    return group;
  }
};
var isCharacterBox = function isCharacterBox2(group) {
  var baseElem = getBaseElem(group);
  return baseElem.type === "mathord" || baseElem.type === "textord" || baseElem.type === "atom";
};
var assert = function assert2(value) {
  if (!value) {
    throw new Error("Expected non-null, but got " + String(value));
  }
  return value;
};
var protocolFromUrl = function protocolFromUrl2(url) {
  var protocol = /^[\x00-\x20]*([^\\/#?]*?)(:|&#0*58|&#x0*3a|&colon)/i.exec(url);
  if (!protocol) {
    return "_relative";
  }
  if (protocol[2] !== ":") {
    return null;
  }
  if (!/^[a-zA-Z][a-zA-Z0-9+\-.]*$/.test(protocol[1])) {
    return null;
  }
  return protocol[1].toLowerCase();
};
var utils = {
  contains,
  deflt,
  escape,
  hyphenate: hyphenate2,
  getBaseElem,
  isCharacterBox,
  protocolFromUrl
};
var SETTINGS_SCHEMA = {
  displayMode: {
    type: "boolean",
    description: "Render math in display mode, which puts the math in display style (so \\int and \\sum are large, for example), and centers the math on the page on its own line.",
    cli: "-d, --display-mode"
  },
  output: {
    type: {
      enum: ["htmlAndMathml", "html", "mathml"]
    },
    description: "Determines the markup language of the output.",
    cli: "-F, --format <type>"
  },
  leqno: {
    type: "boolean",
    description: "Render display math in leqno style (left-justified tags)."
  },
  fleqn: {
    type: "boolean",
    description: "Render display math flush left."
  },
  throwOnError: {
    type: "boolean",
    default: true,
    cli: "-t, --no-throw-on-error",
    cliDescription: "Render errors (in the color given by --error-color) instead of throwing a ParseError exception when encountering an error."
  },
  errorColor: {
    type: "string",
    default: "#cc0000",
    cli: "-c, --error-color <color>",
    cliDescription: "A color string given in the format 'rgb' or 'rrggbb' (no #). This option determines the color of errors rendered by the -t option.",
    cliProcessor: (color) => "#" + color
  },
  macros: {
    type: "object",
    cli: "-m, --macro <def>",
    cliDescription: "Define custom macro of the form '\\foo:expansion' (use multiple -m arguments for multiple macros).",
    cliDefault: [],
    cliProcessor: (def, defs) => {
      defs.push(def);
      return defs;
    }
  },
  minRuleThickness: {
    type: "number",
    description: "Specifies a minimum thickness, in ems, for fraction lines, `\\sqrt` top lines, `{array}` vertical lines, `\\hline`, `\\hdashline`, `\\underline`, `\\overline`, and the borders of `\\fbox`, `\\boxed`, and `\\fcolorbox`.",
    processor: (t) => Math.max(0, t),
    cli: "--min-rule-thickness <size>",
    cliProcessor: parseFloat
  },
  colorIsTextColor: {
    type: "boolean",
    description: "Makes \\color behave like LaTeX's 2-argument \\textcolor, instead of LaTeX's one-argument \\color mode change.",
    cli: "-b, --color-is-text-color"
  },
  strict: {
    type: [{
      enum: ["warn", "ignore", "error"]
    }, "boolean", "function"],
    description: "Turn on strict / LaTeX faithfulness mode, which throws an error if the input uses features that are not supported by LaTeX.",
    cli: "-S, --strict",
    cliDefault: false
  },
  trust: {
    type: ["boolean", "function"],
    description: "Trust the input, enabling all HTML features such as \\url.",
    cli: "-T, --trust"
  },
  maxSize: {
    type: "number",
    default: Infinity,
    description: "If non-zero, all user-specified sizes, e.g. in \\rule{500em}{500em}, will be capped to maxSize ems. Otherwise, elements and spaces can be arbitrarily large",
    processor: (s) => Math.max(0, s),
    cli: "-s, --max-size <n>",
    cliProcessor: parseInt
  },
  maxExpand: {
    type: "number",
    default: 1e3,
    description: "Limit the number of macro expansions to the specified number, to prevent e.g. infinite macro loops. If set to Infinity, the macro expander will try to fully expand as in LaTeX.",
    processor: (n) => Math.max(0, n),
    cli: "-e, --max-expand <n>",
    cliProcessor: (n) => n === "Infinity" ? Infinity : parseInt(n)
  },
  globalGroup: {
    type: "boolean",
    cli: false
  }
};
function getDefaultValue(schema) {
  if (schema.default) {
    return schema.default;
  }
  var type = schema.type;
  var defaultType = Array.isArray(type) ? type[0] : type;
  if (typeof defaultType !== "string") {
    return defaultType.enum[0];
  }
  switch (defaultType) {
    case "boolean":
      return false;
    case "string":
      return "";
    case "number":
      return 0;
    case "object":
      return {};
  }
}
var Settings = class {
  constructor(options) {
    this.displayMode = void 0;
    this.output = void 0;
    this.leqno = void 0;
    this.fleqn = void 0;
    this.throwOnError = void 0;
    this.errorColor = void 0;
    this.macros = void 0;
    this.minRuleThickness = void 0;
    this.colorIsTextColor = void 0;
    this.strict = void 0;
    this.trust = void 0;
    this.maxSize = void 0;
    this.maxExpand = void 0;
    this.globalGroup = void 0;
    options = options || {};
    for (var prop in SETTINGS_SCHEMA) {
      if (SETTINGS_SCHEMA.hasOwnProperty(prop)) {
        var schema = SETTINGS_SCHEMA[prop];
        this[prop] = options[prop] !== void 0 ? schema.processor ? schema.processor(options[prop]) : options[prop] : getDefaultValue(schema);
      }
    }
  }
  /**
   * Report nonstrict (non-LaTeX-compatible) input.
   * Can safely not be called if `this.strict` is false in JavaScript.
   */
  reportNonstrict(errorCode, errorMsg, token) {
    var strict = this.strict;
    if (typeof strict === "function") {
      strict = strict(errorCode, errorMsg, token);
    }
    if (!strict || strict === "ignore") {
      return;
    } else if (strict === true || strict === "error") {
      throw new ParseError2("LaTeX-incompatible input and strict mode is set to 'error': " + (errorMsg + " [" + errorCode + "]"), token);
    } else if (strict === "warn") {
      typeof console !== "undefined" && console.warn("LaTeX-incompatible input and strict mode is set to 'warn': " + (errorMsg + " [" + errorCode + "]"));
    } else {
      typeof console !== "undefined" && console.warn("LaTeX-incompatible input and strict mode is set to " + ("unrecognized '" + strict + "': " + errorMsg + " [" + errorCode + "]"));
    }
  }
  /**
   * Check whether to apply strict (LaTeX-adhering) behavior for unusual
   * input (like `\\`).  Unlike `nonstrict`, will not throw an error;
   * instead, "error" translates to a return value of `true`, while "ignore"
   * translates to a return value of `false`.  May still print a warning:
   * "warn" prints a warning and returns `false`.
   * This is for the second category of `errorCode`s listed in the README.
   */
  useStrictBehavior(errorCode, errorMsg, token) {
    var strict = this.strict;
    if (typeof strict === "function") {
      try {
        strict = strict(errorCode, errorMsg, token);
      } catch (error) {
        strict = "error";
      }
    }
    if (!strict || strict === "ignore") {
      return false;
    } else if (strict === true || strict === "error") {
      return true;
    } else if (strict === "warn") {
      typeof console !== "undefined" && console.warn("LaTeX-incompatible input and strict mode is set to 'warn': " + (errorMsg + " [" + errorCode + "]"));
      return false;
    } else {
      typeof console !== "undefined" && console.warn("LaTeX-incompatible input and strict mode is set to " + ("unrecognized '" + strict + "': " + errorMsg + " [" + errorCode + "]"));
      return false;
    }
  }
  /**
   * Check whether to test potentially dangerous input, and return
   * `true` (trusted) or `false` (untrusted).  The sole argument `context`
   * should be an object with `command` field specifying the relevant LaTeX
   * command (as a string starting with `\`), and any other arguments, etc.
   * If `context` has a `url` field, a `protocol` field will automatically
   * get added by this function (changing the specified object).
   */
  isTrusted(context) {
    if (context.url && !context.protocol) {
      var protocol = utils.protocolFromUrl(context.url);
      if (protocol == null) {
        return false;
      }
      context.protocol = protocol;
    }
    var trust = typeof this.trust === "function" ? this.trust(context) : this.trust;
    return Boolean(trust);
  }
};
var Style = class {
  constructor(id, size, cramped) {
    this.id = void 0;
    this.size = void 0;
    this.cramped = void 0;
    this.id = id;
    this.size = size;
    this.cramped = cramped;
  }
  /**
   * Get the style of a superscript given a base in the current style.
   */
  sup() {
    return styles[sup[this.id]];
  }
  /**
   * Get the style of a subscript given a base in the current style.
   */
  sub() {
    return styles[sub[this.id]];
  }
  /**
   * Get the style of a fraction numerator given the fraction in the current
   * style.
   */
  fracNum() {
    return styles[fracNum[this.id]];
  }
  /**
   * Get the style of a fraction denominator given the fraction in the current
   * style.
   */
  fracDen() {
    return styles[fracDen[this.id]];
  }
  /**
   * Get the cramped version of a style (in particular, cramping a cramped style
   * doesn't change the style).
   */
  cramp() {
    return styles[cramp[this.id]];
  }
  /**
   * Get a text or display version of this style.
   */
  text() {
    return styles[text$1[this.id]];
  }
  /**
   * Return true if this style is tightly spaced (scriptstyle/scriptscriptstyle)
   */
  isTight() {
    return this.size >= 2;
  }
};
var D = 0;
var Dc = 1;
var T = 2;
var Tc = 3;
var S = 4;
var Sc = 5;
var SS = 6;
var SSc = 7;
var styles = [new Style(D, 0, false), new Style(Dc, 0, true), new Style(T, 1, false), new Style(Tc, 1, true), new Style(S, 2, false), new Style(Sc, 2, true), new Style(SS, 3, false), new Style(SSc, 3, true)];
var sup = [S, Sc, S, Sc, SS, SSc, SS, SSc];
var sub = [Sc, Sc, Sc, Sc, SSc, SSc, SSc, SSc];
var fracNum = [T, Tc, S, Sc, SS, SSc, SS, SSc];
var fracDen = [Tc, Tc, Sc, Sc, SSc, SSc, SSc, SSc];
var cramp = [Dc, Dc, Tc, Tc, Sc, Sc, SSc, SSc];
var text$1 = [D, Dc, T, Tc, T, Tc, T, Tc];
var Style$1 = {
  DISPLAY: styles[D],
  TEXT: styles[T],
  SCRIPT: styles[S],
  SCRIPTSCRIPT: styles[SS]
};
var scriptData = [{
  // Latin characters beyond the Latin-1 characters we have metrics for.
  // Needed for Czech, Hungarian and Turkish text, for example.
  name: "latin",
  blocks: [
    [256, 591],
    // Latin Extended-A and Latin Extended-B
    [768, 879]
    // Combining Diacritical marks
  ]
}, {
  // The Cyrillic script used by Russian and related languages.
  // A Cyrillic subset used to be supported as explicitly defined
  // symbols in symbols.js
  name: "cyrillic",
  blocks: [[1024, 1279]]
}, {
  // Armenian
  name: "armenian",
  blocks: [[1328, 1423]]
}, {
  // The Brahmic scripts of South and Southeast Asia
  // Devanagari (0900–097F)
  // Bengali (0980–09FF)
  // Gurmukhi (0A00–0A7F)
  // Gujarati (0A80–0AFF)
  // Oriya (0B00–0B7F)
  // Tamil (0B80–0BFF)
  // Telugu (0C00–0C7F)
  // Kannada (0C80–0CFF)
  // Malayalam (0D00–0D7F)
  // Sinhala (0D80–0DFF)
  // Thai (0E00–0E7F)
  // Lao (0E80–0EFF)
  // Tibetan (0F00–0FFF)
  // Myanmar (1000–109F)
  name: "brahmic",
  blocks: [[2304, 4255]]
}, {
  name: "georgian",
  blocks: [[4256, 4351]]
}, {
  // Chinese and Japanese.
  // The "k" in cjk is for Korean, but we've separated Korean out
  name: "cjk",
  blocks: [
    [12288, 12543],
    // CJK symbols and punctuation, Hiragana, Katakana
    [19968, 40879],
    // CJK ideograms
    [65280, 65376]
    // Fullwidth punctuation
    // TODO: add halfwidth Katakana and Romanji glyphs
  ]
}, {
  // Korean
  name: "hangul",
  blocks: [[44032, 55215]]
}];
function scriptFromCodepoint(codepoint) {
  for (var i = 0; i < scriptData.length; i++) {
    var script = scriptData[i];
    for (var _i = 0; _i < script.blocks.length; _i++) {
      var block = script.blocks[_i];
      if (codepoint >= block[0] && codepoint <= block[1]) {
        return script.name;
      }
    }
  }
  return null;
}
var allBlocks = [];
scriptData.forEach((s) => s.blocks.forEach((b) => allBlocks.push(...b)));
function supportedCodepoint(codepoint) {
  for (var i = 0; i < allBlocks.length; i += 2) {
    if (codepoint >= allBlocks[i] && codepoint <= allBlocks[i + 1]) {
      return true;
    }
  }
  return false;
}
var hLinePad = 80;
var sqrtMain = function sqrtMain2(extraVinculum, hLinePad2) {
  return "M95," + (622 + extraVinculum + hLinePad2) + "\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl" + extraVinculum / 2.075 + " -" + extraVinculum + "\nc5.3,-9.3,12,-14,20,-14\nH400000v" + (40 + extraVinculum) + "H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM" + (834 + extraVinculum) + " " + hLinePad2 + "h400000v" + (40 + extraVinculum) + "h-400000z";
};
var sqrtSize1 = function sqrtSize12(extraVinculum, hLinePad2) {
  return "M263," + (601 + extraVinculum + hLinePad2) + "c0.7,0,18,39.7,52,119\nc34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120\nc340,-704.7,510.7,-1060.3,512,-1067\nl" + extraVinculum / 2.084 + " -" + extraVinculum + "\nc4.7,-7.3,11,-11,19,-11\nH40000v" + (40 + extraVinculum) + "H1012.3\ns-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232\nc-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1\ns-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26\nc-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60z\nM" + (1001 + extraVinculum) + " " + hLinePad2 + "h400000v" + (40 + extraVinculum) + "h-400000z";
};
var sqrtSize2 = function sqrtSize22(extraVinculum, hLinePad2) {
  return "M983 " + (10 + extraVinculum + hLinePad2) + "\nl" + extraVinculum / 3.13 + " -" + extraVinculum + "\nc4,-6.7,10,-10,18,-10 H400000v" + (40 + extraVinculum) + "\nH1013.1s-83.4,268,-264.1,840c-180.7,572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7\ns-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744\nc-10,12,-21,25,-33,39s-32,39,-32,39c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30\nc26.7,-32.7,52,-63,76,-91s52,-60,52,-60s208,722,208,722\nc56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,-658.5\nc53.7,-170.3,84.5,-266.8,92.5,-289.5z\nM" + (1001 + extraVinculum) + " " + hLinePad2 + "h400000v" + (40 + extraVinculum) + "h-400000z";
};
var sqrtSize3 = function sqrtSize32(extraVinculum, hLinePad2) {
  return "M424," + (2398 + extraVinculum + hLinePad2) + "\nc-1.3,-0.7,-38.5,-172,-111.5,-514c-73,-342,-109.8,-513.3,-110.5,-514\nc0,-2,-10.7,14.3,-32,49c-4.7,7.3,-9.8,15.7,-15.5,25c-5.7,9.3,-9.8,16,-12.5,20\ns-5,7,-5,7c-4,-3.3,-8.3,-7.7,-13,-13s-13,-13,-13,-13s76,-122,76,-122s77,-121,77,-121\ns209,968,209,968c0,-2,84.7,-361.7,254,-1079c169.3,-717.3,254.7,-1077.7,256,-1081\nl" + extraVinculum / 4.223 + " -" + extraVinculum + "c4,-6.7,10,-10,18,-10 H400000\nv" + (40 + extraVinculum) + "H1014.6\ns-87.3,378.7,-272.6,1166c-185.3,787.3,-279.3,1182.3,-282,1185\nc-2,6,-10,9,-24,9\nc-8,0,-12,-0.7,-12,-2z M" + (1001 + extraVinculum) + " " + hLinePad2 + "\nh400000v" + (40 + extraVinculum) + "h-400000z";
};
var sqrtSize4 = function sqrtSize42(extraVinculum, hLinePad2) {
  return "M473," + (2713 + extraVinculum + hLinePad2) + "\nc339.3,-1799.3,509.3,-2700,510,-2702 l" + extraVinculum / 5.298 + " -" + extraVinculum + "\nc3.3,-7.3,9.3,-11,18,-11 H400000v" + (40 + extraVinculum) + "H1017.7\ns-90.5,478,-276.2,1466c-185.7,988,-279.5,1483,-281.5,1485c-2,6,-10,9,-24,9\nc-8,0,-12,-0.7,-12,-2c0,-1.3,-5.3,-32,-16,-92c-50.7,-293.3,-119.7,-693.3,-207,-1200\nc0,-1.3,-5.3,8.7,-16,30c-10.7,21.3,-21.3,42.7,-32,64s-16,33,-16,33s-26,-26,-26,-26\ns76,-153,76,-153s77,-151,77,-151c0.7,0.7,35.7,202,105,604c67.3,400.7,102,602.7,104,\n606zM" + (1001 + extraVinculum) + " " + hLinePad2 + "h400000v" + (40 + extraVinculum) + "H1017.7z";
};
var phasePath = function phasePath2(y) {
  var x = y / 2;
  return "M400000 " + y + " H0 L" + x + " 0 l65 45 L145 " + (y - 80) + " H400000z";
};
var sqrtTall = function sqrtTall2(extraVinculum, hLinePad2, viewBoxHeight) {
  var vertSegment = viewBoxHeight - 54 - hLinePad2 - extraVinculum;
  return "M702 " + (extraVinculum + hLinePad2) + "H400000" + (40 + extraVinculum) + "\nH742v" + vertSegment + "l-4 4-4 4c-.667.7 -2 1.5-4 2.5s-4.167 1.833-6.5 2.5-5.5 1-9.5 1\nh-12l-28-84c-16.667-52-96.667 -294.333-240-727l-212 -643 -85 170\nc-4-3.333-8.333-7.667-13 -13l-13-13l77-155 77-156c66 199.333 139 419.667\n219 661 l218 661zM702 " + hLinePad2 + "H400000v" + (40 + extraVinculum) + "H742z";
};
var sqrtPath = function sqrtPath2(size, extraVinculum, viewBoxHeight) {
  extraVinculum = 1e3 * extraVinculum;
  var path2 = "";
  switch (size) {
    case "sqrtMain":
      path2 = sqrtMain(extraVinculum, hLinePad);
      break;
    case "sqrtSize1":
      path2 = sqrtSize1(extraVinculum, hLinePad);
      break;
    case "sqrtSize2":
      path2 = sqrtSize2(extraVinculum, hLinePad);
      break;
    case "sqrtSize3":
      path2 = sqrtSize3(extraVinculum, hLinePad);
      break;
    case "sqrtSize4":
      path2 = sqrtSize4(extraVinculum, hLinePad);
      break;
    case "sqrtTall":
      path2 = sqrtTall(extraVinculum, hLinePad, viewBoxHeight);
  }
  return path2;
};
var innerPath = function innerPath2(name, height) {
  switch (name) {
    case "\u239C":
      return "M291 0 H417 V" + height + " H291z M291 0 H417 V" + height + " H291z";
    case "\u2223":
      return "M145 0 H188 V" + height + " H145z M145 0 H188 V" + height + " H145z";
    case "\u2225":
      return "M145 0 H188 V" + height + " H145z M145 0 H188 V" + height + " H145z" + ("M367 0 H410 V" + height + " H367z M367 0 H410 V" + height + " H367z");
    case "\u239F":
      return "M457 0 H583 V" + height + " H457z M457 0 H583 V" + height + " H457z";
    case "\u23A2":
      return "M319 0 H403 V" + height + " H319z M319 0 H403 V" + height + " H319z";
    case "\u23A5":
      return "M263 0 H347 V" + height + " H263z M263 0 H347 V" + height + " H263z";
    case "\u23AA":
      return "M384 0 H504 V" + height + " H384z M384 0 H504 V" + height + " H384z";
    case "\u23D0":
      return "M312 0 H355 V" + height + " H312z M312 0 H355 V" + height + " H312z";
    case "\u2016":
      return "M257 0 H300 V" + height + " H257z M257 0 H300 V" + height + " H257z" + ("M478 0 H521 V" + height + " H478z M478 0 H521 V" + height + " H478z");
    default:
      return "";
  }
};
var path = {
  // The doubleleftarrow geometry is from glyph U+21D0 in the font KaTeX Main
  doubleleftarrow: "M262 157\nl10-10c34-36 62.7-77 86-123 3.3-8 5-13.3 5-16 0-5.3-6.7-8-20-8-7.3\n 0-12.2.5-14.5 1.5-2.3 1-4.8 4.5-7.5 10.5-49.3 97.3-121.7 169.3-217 216-28\n 14-57.3 25-88 33-6.7 2-11 3.8-13 5.5-2 1.7-3 4.2-3 7.5s1 5.8 3 7.5\nc2 1.7 6.3 3.5 13 5.5 68 17.3 128.2 47.8 180.5 91.5 52.3 43.7 93.8 96.2 124.5\n 157.5 9.3 8 15.3 12.3 18 13h6c12-.7 18-4 18-10 0-2-1.7-7-5-15-23.3-46-52-87\n-86-123l-10-10h399738v-40H218c328 0 0 0 0 0l-10-8c-26.7-20-65.7-43-117-69 2.7\n-2 6-3.7 10-5 36.7-16 72.3-37.3 107-64l10-8h399782v-40z\nm8 0v40h399730v-40zm0 194v40h399730v-40z",
  // doublerightarrow is from glyph U+21D2 in font KaTeX Main
  doublerightarrow: "M399738 392l\n-10 10c-34 36-62.7 77-86 123-3.3 8-5 13.3-5 16 0 5.3 6.7 8 20 8 7.3 0 12.2-.5\n 14.5-1.5 2.3-1 4.8-4.5 7.5-10.5 49.3-97.3 121.7-169.3 217-216 28-14 57.3-25 88\n-33 6.7-2 11-3.8 13-5.5 2-1.7 3-4.2 3-7.5s-1-5.8-3-7.5c-2-1.7-6.3-3.5-13-5.5-68\n-17.3-128.2-47.8-180.5-91.5-52.3-43.7-93.8-96.2-124.5-157.5-9.3-8-15.3-12.3-18\n-13h-6c-12 .7-18 4-18 10 0 2 1.7 7 5 15 23.3 46 52 87 86 123l10 10H0v40h399782\nc-328 0 0 0 0 0l10 8c26.7 20 65.7 43 117 69-2.7 2-6 3.7-10 5-36.7 16-72.3 37.3\n-107 64l-10 8H0v40zM0 157v40h399730v-40zm0 194v40h399730v-40z",
  // leftarrow is from glyph U+2190 in font KaTeX Main
  leftarrow: "M400000 241H110l3-3c68.7-52.7 113.7-120\n 135-202 4-14.7 6-23 6-25 0-7.3-7-11-21-11-8 0-13.2.8-15.5 2.5-2.3 1.7-4.2 5.8\n-5.5 12.5-1.3 4.7-2.7 10.3-4 17-12 48.7-34.8 92-68.5 130S65.3 228.3 18 247\nc-10 4-16 7.7-18 11 0 8.7 6 14.3 18 17 47.3 18.7 87.8 47 121.5 85S196 441.3 208\n 490c.7 2 1.3 5 2 9s1.2 6.7 1.5 8c.3 1.3 1 3.3 2 6s2.2 4.5 3.5 5.5c1.3 1 3.3\n 1.8 6 2.5s6 1 10 1c14 0 21-3.7 21-11 0-2-2-10.3-6-25-20-79.3-65-146.7-135-202\n l-3-3h399890zM100 241v40h399900v-40z",
  // overbrace is from glyphs U+23A9/23A8/23A7 in font KaTeX_Size4-Regular
  leftbrace: "M6 548l-6-6v-35l6-11c56-104 135.3-181.3 238-232 57.3-28.7 117\n-45 179-50h399577v120H403c-43.3 7-81 15-113 26-100.7 33-179.7 91-237 174-2.7\n 5-6 9-10 13-.7 1-7.3 1-20 1H6z",
  leftbraceunder: "M0 6l6-6h17c12.688 0 19.313.3 20 1 4 4 7.313 8.3 10 13\n 35.313 51.3 80.813 93.8 136.5 127.5 55.688 33.7 117.188 55.8 184.5 66.5.688\n 0 2 .3 4 1 18.688 2.7 76 4.3 172 5h399450v120H429l-6-1c-124.688-8-235-61.7\n-331-161C60.687 138.7 32.312 99.3 7 54L0 41V6z",
  // overgroup is from the MnSymbol package (public domain)
  leftgroup: "M400000 80\nH435C64 80 168.3 229.4 21 260c-5.9 1.2-18 0-18 0-2 0-3-1-3-3v-38C76 61 257 0\n 435 0h399565z",
  leftgroupunder: "M400000 262\nH435C64 262 168.3 112.6 21 82c-5.9-1.2-18 0-18 0-2 0-3 1-3 3v38c76 158 257 219\n 435 219h399565z",
  // Harpoons are from glyph U+21BD in font KaTeX Main
  leftharpoon: "M0 267c.7 5.3 3 10 7 14h399993v-40H93c3.3\n-3.3 10.2-9.5 20.5-18.5s17.8-15.8 22.5-20.5c50.7-52 88-110.3 112-175 4-11.3 5\n-18.3 3-21-1.3-4-7.3-6-18-6-8 0-13 .7-15 2s-4.7 6.7-8 16c-42 98.7-107.3 174.7\n-196 228-6.7 4.7-10.7 8-12 10-1.3 2-2 5.7-2 11zm100-26v40h399900v-40z",
  leftharpoonplus: "M0 267c.7 5.3 3 10 7 14h399993v-40H93c3.3-3.3 10.2-9.5\n 20.5-18.5s17.8-15.8 22.5-20.5c50.7-52 88-110.3 112-175 4-11.3 5-18.3 3-21-1.3\n-4-7.3-6-18-6-8 0-13 .7-15 2s-4.7 6.7-8 16c-42 98.7-107.3 174.7-196 228-6.7 4.7\n-10.7 8-12 10-1.3 2-2 5.7-2 11zm100-26v40h399900v-40zM0 435v40h400000v-40z\nm0 0v40h400000v-40z",
  leftharpoondown: "M7 241c-4 4-6.333 8.667-7 14 0 5.333.667 9 2 11s5.333\n 5.333 12 10c90.667 54 156 130 196 228 3.333 10.667 6.333 16.333 9 17 2 .667 5\n 1 9 1h5c10.667 0 16.667-2 18-6 2-2.667 1-9.667-3-21-32-87.333-82.667-157.667\n-152-211l-3-3h399907v-40zM93 281 H400000 v-40L7 241z",
  leftharpoondownplus: "M7 435c-4 4-6.3 8.7-7 14 0 5.3.7 9 2 11s5.3 5.3 12\n 10c90.7 54 156 130 196 228 3.3 10.7 6.3 16.3 9 17 2 .7 5 1 9 1h5c10.7 0 16.7\n-2 18-6 2-2.7 1-9.7-3-21-32-87.3-82.7-157.7-152-211l-3-3h399907v-40H7zm93 0\nv40h399900v-40zM0 241v40h399900v-40zm0 0v40h399900v-40z",
  // hook is from glyph U+21A9 in font KaTeX Main
  lefthook: "M400000 281 H103s-33-11.2-61-33.5S0 197.3 0 164s14.2-61.2 42.5\n-83.5C70.8 58.2 104 47 142 47 c16.7 0 25 6.7 25 20 0 12-8.7 18.7-26 20-40 3.3\n-68.7 15.7-86 37-10 12-15 25.3-15 40 0 22.7 9.8 40.7 29.5 54 19.7 13.3 43.5 21\n 71.5 23h399859zM103 281v-40h399897v40z",
  leftlinesegment: "M40 281 V428 H0 V94 H40 V241 H400000 v40z\nM40 281 V428 H0 V94 H40 V241 H400000 v40z",
  leftmapsto: "M40 281 V448H0V74H40V241H400000v40z\nM40 281 V448H0V74H40V241H400000v40z",
  // tofrom is from glyph U+21C4 in font KaTeX AMS Regular
  leftToFrom: "M0 147h400000v40H0zm0 214c68 40 115.7 95.7 143 167h22c15.3 0 23\n-.3 23-1 0-1.3-5.3-13.7-16-37-18-35.3-41.3-69-70-101l-7-8h399905v-40H95l7-8\nc28.7-32 52-65.7 70-101 10.7-23.3 16-35.7 16-37 0-.7-7.7-1-23-1h-22C115.7 265.3\n 68 321 0 361zm0-174v-40h399900v40zm100 154v40h399900v-40z",
  longequal: "M0 50 h400000 v40H0z m0 194h40000v40H0z\nM0 50 h400000 v40H0z m0 194h40000v40H0z",
  midbrace: "M200428 334\nc-100.7-8.3-195.3-44-280-108-55.3-42-101.7-93-139-153l-9-14c-2.7 4-5.7 8.7-9 14\n-53.3 86.7-123.7 153-211 199-66.7 36-137.3 56.3-212 62H0V214h199568c178.3-11.7\n 311.7-78.3 403-201 6-8 9.7-12 11-12 .7-.7 6.7-1 18-1s17.3.3 18 1c1.3 0 5 4 11\n 12 44.7 59.3 101.3 106.3 170 141s145.3 54.3 229 60h199572v120z",
  midbraceunder: "M199572 214\nc100.7 8.3 195.3 44 280 108 55.3 42 101.7 93 139 153l9 14c2.7-4 5.7-8.7 9-14\n 53.3-86.7 123.7-153 211-199 66.7-36 137.3-56.3 212-62h199568v120H200432c-178.3\n 11.7-311.7 78.3-403 201-6 8-9.7 12-11 12-.7.7-6.7 1-18 1s-17.3-.3-18-1c-1.3 0\n-5-4-11-12-44.7-59.3-101.3-106.3-170-141s-145.3-54.3-229-60H0V214z",
  oiintSize1: "M512.6 71.6c272.6 0 320.3 106.8 320.3 178.2 0 70.8-47.7 177.6\n-320.3 177.6S193.1 320.6 193.1 249.8c0-71.4 46.9-178.2 319.5-178.2z\nm368.1 178.2c0-86.4-60.9-215.4-368.1-215.4-306.4 0-367.3 129-367.3 215.4 0 85.8\n60.9 214.8 367.3 214.8 307.2 0 368.1-129 368.1-214.8z",
  oiintSize2: "M757.8 100.1c384.7 0 451.1 137.6 451.1 230 0 91.3-66.4 228.8\n-451.1 228.8-386.3 0-452.7-137.5-452.7-228.8 0-92.4 66.4-230 452.7-230z\nm502.4 230c0-111.2-82.4-277.2-502.4-277.2s-504 166-504 277.2\nc0 110 84 276 504 276s502.4-166 502.4-276z",
  oiiintSize1: "M681.4 71.6c408.9 0 480.5 106.8 480.5 178.2 0 70.8-71.6 177.6\n-480.5 177.6S202.1 320.6 202.1 249.8c0-71.4 70.5-178.2 479.3-178.2z\nm525.8 178.2c0-86.4-86.8-215.4-525.7-215.4-437.9 0-524.7 129-524.7 215.4 0\n85.8 86.8 214.8 524.7 214.8 438.9 0 525.7-129 525.7-214.8z",
  oiiintSize2: "M1021.2 53c603.6 0 707.8 165.8 707.8 277.2 0 110-104.2 275.8\n-707.8 275.8-606 0-710.2-165.8-710.2-275.8C311 218.8 415.2 53 1021.2 53z\nm770.4 277.1c0-131.2-126.4-327.6-770.5-327.6S248.4 198.9 248.4 330.1\nc0 130 128.8 326.4 772.7 326.4s770.5-196.4 770.5-326.4z",
  rightarrow: "M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z",
  rightbrace: "M400000 542l\n-6 6h-17c-12.7 0-19.3-.3-20-1-4-4-7.3-8.3-10-13-35.3-51.3-80.8-93.8-136.5-127.5\ns-117.2-55.8-184.5-66.5c-.7 0-2-.3-4-1-18.7-2.7-76-4.3-172-5H0V214h399571l6 1\nc124.7 8 235 61.7 331 161 31.3 33.3 59.7 72.7 85 118l7 13v35z",
  rightbraceunder: "M399994 0l6 6v35l-6 11c-56 104-135.3 181.3-238 232-57.3\n 28.7-117 45-179 50H-300V214h399897c43.3-7 81-15 113-26 100.7-33 179.7-91 237\n-174 2.7-5 6-9 10-13 .7-1 7.3-1 20-1h17z",
  rightgroup: "M0 80h399565c371 0 266.7 149.4 414 180 5.9 1.2 18 0 18 0 2 0\n 3-1 3-3v-38c-76-158-257-219-435-219H0z",
  rightgroupunder: "M0 262h399565c371 0 266.7-149.4 414-180 5.9-1.2 18 0 18\n 0 2 0 3 1 3 3v38c-76 158-257 219-435 219H0z",
  rightharpoon: "M0 241v40h399993c4.7-4.7 7-9.3 7-14 0-9.3\n-3.7-15.3-11-18-92.7-56.7-159-133.7-199-231-3.3-9.3-6-14.7-8-16-2-1.3-7-2-15-2\n-10.7 0-16.7 2-18 6-2 2.7-1 9.7 3 21 15.3 42 36.7 81.8 64 119.5 27.3 37.7 58\n 69.2 92 94.5zm0 0v40h399900v-40z",
  rightharpoonplus: "M0 241v40h399993c4.7-4.7 7-9.3 7-14 0-9.3-3.7-15.3-11\n-18-92.7-56.7-159-133.7-199-231-3.3-9.3-6-14.7-8-16-2-1.3-7-2-15-2-10.7 0-16.7\n 2-18 6-2 2.7-1 9.7 3 21 15.3 42 36.7 81.8 64 119.5 27.3 37.7 58 69.2 92 94.5z\nm0 0v40h399900v-40z m100 194v40h399900v-40zm0 0v40h399900v-40z",
  rightharpoondown: "M399747 511c0 7.3 6.7 11 20 11 8 0 13-.8 15-2.5s4.7-6.8\n 8-15.5c40-94 99.3-166.3 178-217 13.3-8 20.3-12.3 21-13 5.3-3.3 8.5-5.8 9.5\n-7.5 1-1.7 1.5-5.2 1.5-10.5s-2.3-10.3-7-15H0v40h399908c-34 25.3-64.7 57-92 95\n-27.3 38-48.7 77.7-64 119-3.3 8.7-5 14-5 16zM0 241v40h399900v-40z",
  rightharpoondownplus: "M399747 705c0 7.3 6.7 11 20 11 8 0 13-.8\n 15-2.5s4.7-6.8 8-15.5c40-94 99.3-166.3 178-217 13.3-8 20.3-12.3 21-13 5.3-3.3\n 8.5-5.8 9.5-7.5 1-1.7 1.5-5.2 1.5-10.5s-2.3-10.3-7-15H0v40h399908c-34 25.3\n-64.7 57-92 95-27.3 38-48.7 77.7-64 119-3.3 8.7-5 14-5 16zM0 435v40h399900v-40z\nm0-194v40h400000v-40zm0 0v40h400000v-40z",
  righthook: "M399859 241c-764 0 0 0 0 0 40-3.3 68.7-15.7 86-37 10-12 15-25.3\n 15-40 0-22.7-9.8-40.7-29.5-54-19.7-13.3-43.5-21-71.5-23-17.3-1.3-26-8-26-20 0\n-13.3 8.7-20 26-20 38 0 71 11.2 99 33.5 0 0 7 5.6 21 16.7 14 11.2 21 33.5 21\n 66.8s-14 61.2-42 83.5c-28 22.3-61 33.5-99 33.5L0 241z M0 281v-40h399859v40z",
  rightlinesegment: "M399960 241 V94 h40 V428 h-40 V281 H0 v-40z\nM399960 241 V94 h40 V428 h-40 V281 H0 v-40z",
  rightToFrom: "M400000 167c-70.7-42-118-97.7-142-167h-23c-15.3 0-23 .3-23\n 1 0 1.3 5.3 13.7 16 37 18 35.3 41.3 69 70 101l7 8H0v40h399905l-7 8c-28.7 32\n-52 65.7-70 101-10.7 23.3-16 35.7-16 37 0 .7 7.7 1 23 1h23c24-69.3 71.3-125 142\n-167z M100 147v40h399900v-40zM0 341v40h399900v-40z",
  // twoheadleftarrow is from glyph U+219E in font KaTeX AMS Regular
  twoheadleftarrow: "M0 167c68 40\n 115.7 95.7 143 167h22c15.3 0 23-.3 23-1 0-1.3-5.3-13.7-16-37-18-35.3-41.3-69\n-70-101l-7-8h125l9 7c50.7 39.3 85 86 103 140h46c0-4.7-6.3-18.7-19-42-18-35.3\n-40-67.3-66-96l-9-9h399716v-40H284l9-9c26-28.7 48-60.7 66-96 12.7-23.333 19\n-37.333 19-42h-46c-18 54-52.3 100.7-103 140l-9 7H95l7-8c28.7-32 52-65.7 70-101\n 10.7-23.333 16-35.7 16-37 0-.7-7.7-1-23-1h-22C115.7 71.3 68 127 0 167z",
  twoheadrightarrow: "M400000 167\nc-68-40-115.7-95.7-143-167h-22c-15.3 0-23 .3-23 1 0 1.3 5.3 13.7 16 37 18 35.3\n 41.3 69 70 101l7 8h-125l-9-7c-50.7-39.3-85-86-103-140h-46c0 4.7 6.3 18.7 19 42\n 18 35.3 40 67.3 66 96l9 9H0v40h399716l-9 9c-26 28.7-48 60.7-66 96-12.7 23.333\n-19 37.333-19 42h46c18-54 52.3-100.7 103-140l9-7h125l-7 8c-28.7 32-52 65.7-70\n 101-10.7 23.333-16 35.7-16 37 0 .7 7.7 1 23 1h22c27.3-71.3 75-127 143-167z",
  // tilde1 is a modified version of a glyph from the MnSymbol package
  tilde1: "M200 55.538c-77 0-168 73.953-177 73.953-3 0-7\n-2.175-9-5.437L2 97c-1-2-2-4-2-6 0-4 2-7 5-9l20-12C116 12 171 0 207 0c86 0\n 114 68 191 68 78 0 168-68 177-68 4 0 7 2 9 5l12 19c1 2.175 2 4.35 2 6.525 0\n 4.35-2 7.613-5 9.788l-19 13.05c-92 63.077-116.937 75.308-183 76.128\n-68.267.847-113-73.952-191-73.952z",
  // ditto tilde2, tilde3, & tilde4
  tilde2: "M344 55.266c-142 0-300.638 81.316-311.5 86.418\n-8.01 3.762-22.5 10.91-23.5 5.562L1 120c-1-2-1-3-1-4 0-5 3-9 8-10l18.4-9C160.9\n 31.9 283 0 358 0c148 0 188 122 331 122s314-97 326-97c4 0 8 2 10 7l7 21.114\nc1 2.14 1 3.21 1 4.28 0 5.347-3 9.626-7 10.696l-22.3 12.622C852.6 158.372 751\n 181.476 676 181.476c-149 0-189-126.21-332-126.21z",
  tilde3: "M786 59C457 59 32 175.242 13 175.242c-6 0-10-3.457\n-11-10.37L.15 138c-1-7 3-12 10-13l19.2-6.4C378.4 40.7 634.3 0 804.3 0c337 0\n 411.8 157 746.8 157 328 0 754-112 773-112 5 0 10 3 11 9l1 14.075c1 8.066-.697\n 16.595-6.697 17.492l-21.052 7.31c-367.9 98.146-609.15 122.696-778.15 122.696\n -338 0-409-156.573-744-156.573z",
  tilde4: "M786 58C457 58 32 177.487 13 177.487c-6 0-10-3.345\n-11-10.035L.15 143c-1-7 3-12 10-13l22-6.7C381.2 35 637.15 0 807.15 0c337 0 409\n 177 744 177 328 0 754-127 773-127 5 0 10 3 11 9l1 14.794c1 7.805-3 13.38-9\n 14.495l-20.7 5.574c-366.85 99.79-607.3 139.372-776.3 139.372-338 0-409\n -175.236-744-175.236z",
  // vec is from glyph U+20D7 in font KaTeX Main
  vec: "M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z",
  // widehat1 is a modified version of a glyph from the MnSymbol package
  widehat1: "M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22\nc-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z",
  // ditto widehat2, widehat3, & widehat4
  widehat2: "M1181 0h2l1171 176c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 220h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z",
  widehat3: "M1181 0h2l1171 236c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 280h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z",
  widehat4: "M1181 0h2l1171 296c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 340h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z",
  // widecheck paths are all inverted versions of widehat
  widecheck1: "M529,159h5l519,-115c5,-1,9,-5,9,-10c0,-1,-1,-2,-1,-3l-4,-22c-1,\n-5,-5,-9,-11,-9h-2l-512,92l-513,-92h-2c-5,0,-9,4,-11,9l-5,22c-1,6,2,12,8,13z",
  widecheck2: "M1181,220h2l1171,-176c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,153l-1167,-153h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z",
  widecheck3: "M1181,280h2l1171,-236c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,213l-1167,-213h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z",
  widecheck4: "M1181,340h2l1171,-296c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,273l-1167,-273h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z",
  // The next ten paths support reaction arrows from the mhchem package.
  // Arrows for \ce{<-->} are offset from xAxis by 0.22ex, per mhchem in LaTeX
  // baraboveleftarrow is mostly from glyph U+2190 in font KaTeX Main
  baraboveleftarrow: "M400000 620h-399890l3 -3c68.7 -52.7 113.7 -120 135 -202\nc4 -14.7 6 -23 6 -25c0 -7.3 -7 -11 -21 -11c-8 0 -13.2 0.8 -15.5 2.5\nc-2.3 1.7 -4.2 5.8 -5.5 12.5c-1.3 4.7 -2.7 10.3 -4 17c-12 48.7 -34.8 92 -68.5 130\ns-74.2 66.3 -121.5 85c-10 4 -16 7.7 -18 11c0 8.7 6 14.3 18 17c47.3 18.7 87.8 47\n121.5 85s56.5 81.3 68.5 130c0.7 2 1.3 5 2 9s1.2 6.7 1.5 8c0.3 1.3 1 3.3 2 6\ns2.2 4.5 3.5 5.5c1.3 1 3.3 1.8 6 2.5s6 1 10 1c14 0 21 -3.7 21 -11\nc0 -2 -2 -10.3 -6 -25c-20 -79.3 -65 -146.7 -135 -202l-3 -3h399890z\nM100 620v40h399900v-40z M0 241v40h399900v-40zM0 241v40h399900v-40z",
  // rightarrowabovebar is mostly from glyph U+2192, KaTeX Main
  rightarrowabovebar: "M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32\n-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0\n13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39\n-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5\n-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n151.7 139 205zm96 379h399894v40H0zm0 0h399904v40H0z",
  // The short left harpoon has 0.5em (i.e. 500 units) kern on the left end.
  // Ref from mhchem.sty: \rlap{\raisebox{-.22ex}{$\kern0.5em
  baraboveshortleftharpoon: "M507,435c-4,4,-6.3,8.7,-7,14c0,5.3,0.7,9,2,11\nc1.3,2,5.3,5.3,12,10c90.7,54,156,130,196,228c3.3,10.7,6.3,16.3,9,17\nc2,0.7,5,1,9,1c0,0,5,0,5,0c10.7,0,16.7,-2,18,-6c2,-2.7,1,-9.7,-3,-21\nc-32,-87.3,-82.7,-157.7,-152,-211c0,0,-3,-3,-3,-3l399351,0l0,-40\nc-398570,0,-399437,0,-399437,0z M593 435 v40 H399500 v-40z\nM0 281 v-40 H399908 v40z M0 281 v-40 H399908 v40z",
  rightharpoonaboveshortbar: "M0,241 l0,40c399126,0,399993,0,399993,0\nc4.7,-4.7,7,-9.3,7,-14c0,-9.3,-3.7,-15.3,-11,-18c-92.7,-56.7,-159,-133.7,-199,\n-231c-3.3,-9.3,-6,-14.7,-8,-16c-2,-1.3,-7,-2,-15,-2c-10.7,0,-16.7,2,-18,6\nc-2,2.7,-1,9.7,3,21c15.3,42,36.7,81.8,64,119.5c27.3,37.7,58,69.2,92,94.5z\nM0 241 v40 H399908 v-40z M0 475 v-40 H399500 v40z M0 475 v-40 H399500 v40z",
  shortbaraboveleftharpoon: "M7,435c-4,4,-6.3,8.7,-7,14c0,5.3,0.7,9,2,11\nc1.3,2,5.3,5.3,12,10c90.7,54,156,130,196,228c3.3,10.7,6.3,16.3,9,17c2,0.7,5,1,9,\n1c0,0,5,0,5,0c10.7,0,16.7,-2,18,-6c2,-2.7,1,-9.7,-3,-21c-32,-87.3,-82.7,-157.7,\n-152,-211c0,0,-3,-3,-3,-3l399907,0l0,-40c-399126,0,-399993,0,-399993,0z\nM93 435 v40 H400000 v-40z M500 241 v40 H400000 v-40z M500 241 v40 H400000 v-40z",
  shortrightharpoonabovebar: "M53,241l0,40c398570,0,399437,0,399437,0\nc4.7,-4.7,7,-9.3,7,-14c0,-9.3,-3.7,-15.3,-11,-18c-92.7,-56.7,-159,-133.7,-199,\n-231c-3.3,-9.3,-6,-14.7,-8,-16c-2,-1.3,-7,-2,-15,-2c-10.7,0,-16.7,2,-18,6\nc-2,2.7,-1,9.7,3,21c15.3,42,36.7,81.8,64,119.5c27.3,37.7,58,69.2,92,94.5z\nM500 241 v40 H399408 v-40z M500 435 v40 H400000 v-40z"
};
var tallDelim = function tallDelim2(label, midHeight) {
  switch (label) {
    case "lbrack":
      return "M403 1759 V84 H666 V0 H319 V1759 v" + midHeight + " v1759 h347 v-84\nH403z M403 1759 V0 H319 V1759 v" + midHeight + " v1759 h84z";
    case "rbrack":
      return "M347 1759 V0 H0 V84 H263 V1759 v" + midHeight + " v1759 H0 v84 H347z\nM347 1759 V0 H263 V1759 v" + midHeight + " v1759 h84z";
    case "vert":
      return "M145 15 v585 v" + midHeight + " v585 c2.667,10,9.667,15,21,15\nc10,0,16.667,-5,20,-15 v-585 v" + -midHeight + " v-585 c-2.667,-10,-9.667,-15,-21,-15\nc-10,0,-16.667,5,-20,15z M188 15 H145 v585 v" + midHeight + " v585 h43z";
    case "doublevert":
      return "M145 15 v585 v" + midHeight + " v585 c2.667,10,9.667,15,21,15\nc10,0,16.667,-5,20,-15 v-585 v" + -midHeight + " v-585 c-2.667,-10,-9.667,-15,-21,-15\nc-10,0,-16.667,5,-20,15z M188 15 H145 v585 v" + midHeight + " v585 h43z\nM367 15 v585 v" + midHeight + " v585 c2.667,10,9.667,15,21,15\nc10,0,16.667,-5,20,-15 v-585 v" + -midHeight + " v-585 c-2.667,-10,-9.667,-15,-21,-15\nc-10,0,-16.667,5,-20,15z M410 15 H367 v585 v" + midHeight + " v585 h43z";
    case "lfloor":
      return "M319 602 V0 H403 V602 v" + midHeight + " v1715 h263 v84 H319z\nMM319 602 V0 H403 V602 v" + midHeight + " v1715 H319z";
    case "rfloor":
      return "M319 602 V0 H403 V602 v" + midHeight + " v1799 H0 v-84 H319z\nMM319 602 V0 H403 V602 v" + midHeight + " v1715 H319z";
    case "lceil":
      return "M403 1759 V84 H666 V0 H319 V1759 v" + midHeight + " v602 h84z\nM403 1759 V0 H319 V1759 v" + midHeight + " v602 h84z";
    case "rceil":
      return "M347 1759 V0 H0 V84 H263 V1759 v" + midHeight + " v602 h84z\nM347 1759 V0 h-84 V1759 v" + midHeight + " v602 h84z";
    case "lparen":
      return "M863,9c0,-2,-2,-5,-6,-9c0,0,-17,0,-17,0c-12.7,0,-19.3,0.3,-20,1\nc-5.3,5.3,-10.3,11,-15,17c-242.7,294.7,-395.3,682,-458,1162c-21.3,163.3,-33.3,349,\n-36,557 l0," + (midHeight + 84) + "c0.2,6,0,26,0,60c2,159.3,10,310.7,24,454c53.3,528,210,\n949.7,470,1265c4.7,6,9.7,11.7,15,17c0.7,0.7,7,1,19,1c0,0,18,0,18,0c4,-4,6,-7,6,-9\nc0,-2.7,-3.3,-8.7,-10,-18c-135.3,-192.7,-235.5,-414.3,-300.5,-665c-65,-250.7,-102.5,\n-544.7,-112.5,-882c-2,-104,-3,-167,-3,-189\nl0,-" + (midHeight + 92) + "c0,-162.7,5.7,-314,17,-454c20.7,-272,63.7,-513,129,-723c65.3,\n-210,155.3,-396.3,270,-559c6.7,-9.3,10,-15.3,10,-18z";
    case "rparen":
      return "M76,0c-16.7,0,-25,3,-25,9c0,2,2,6.3,6,13c21.3,28.7,42.3,60.3,\n63,95c96.7,156.7,172.8,332.5,228.5,527.5c55.7,195,92.8,416.5,111.5,664.5\nc11.3,139.3,17,290.7,17,454c0,28,1.7,43,3.3,45l0," + (midHeight + 9) + "\nc-3,4,-3.3,16.7,-3.3,38c0,162,-5.7,313.7,-17,455c-18.7,248,-55.8,469.3,-111.5,664\nc-55.7,194.7,-131.8,370.3,-228.5,527c-20.7,34.7,-41.7,66.3,-63,95c-2,3.3,-4,7,-6,11\nc0,7.3,5.7,11,17,11c0,0,11,0,11,0c9.3,0,14.3,-0.3,15,-1c5.3,-5.3,10.3,-11,15,-17\nc242.7,-294.7,395.3,-681.7,458,-1161c21.3,-164.7,33.3,-350.7,36,-558\nl0,-" + (midHeight + 144) + "c-2,-159.3,-10,-310.7,-24,-454c-53.3,-528,-210,-949.7,\n-470,-1265c-4.7,-6,-9.7,-11.7,-15,-17c-0.7,-0.7,-6.7,-1,-18,-1z";
    default:
      throw new Error("Unknown stretchy delimiter.");
  }
};
var DocumentFragment2 = class {
  // HtmlDomNode
  // Never used; needed for satisfying interface.
  constructor(children) {
    this.children = void 0;
    this.classes = void 0;
    this.height = void 0;
    this.depth = void 0;
    this.maxFontSize = void 0;
    this.style = void 0;
    this.children = children;
    this.classes = [];
    this.height = 0;
    this.depth = 0;
    this.maxFontSize = 0;
    this.style = {};
  }
  hasClass(className) {
    return utils.contains(this.classes, className);
  }
  /** Convert the fragment into a node. */
  toNode() {
    var frag = document.createDocumentFragment();
    for (var i = 0; i < this.children.length; i++) {
      frag.appendChild(this.children[i].toNode());
    }
    return frag;
  }
  /** Convert the fragment into HTML markup. */
  toMarkup() {
    var markup = "";
    for (var i = 0; i < this.children.length; i++) {
      markup += this.children[i].toMarkup();
    }
    return markup;
  }
  /**
   * Converts the math node into a string, similar to innerText. Applies to
   * MathDomNode's only.
   */
  toText() {
    var toText = (child) => child.toText();
    return this.children.map(toText).join("");
  }
};
var fontMetricsData = {
  "AMS-Regular": {
    "32": [0, 0, 0, 0, 0.25],
    "65": [0, 0.68889, 0, 0, 0.72222],
    "66": [0, 0.68889, 0, 0, 0.66667],
    "67": [0, 0.68889, 0, 0, 0.72222],
    "68": [0, 0.68889, 0, 0, 0.72222],
    "69": [0, 0.68889, 0, 0, 0.66667],
    "70": [0, 0.68889, 0, 0, 0.61111],
    "71": [0, 0.68889, 0, 0, 0.77778],
    "72": [0, 0.68889, 0, 0, 0.77778],
    "73": [0, 0.68889, 0, 0, 0.38889],
    "74": [0.16667, 0.68889, 0, 0, 0.5],
    "75": [0, 0.68889, 0, 0, 0.77778],
    "76": [0, 0.68889, 0, 0, 0.66667],
    "77": [0, 0.68889, 0, 0, 0.94445],
    "78": [0, 0.68889, 0, 0, 0.72222],
    "79": [0.16667, 0.68889, 0, 0, 0.77778],
    "80": [0, 0.68889, 0, 0, 0.61111],
    "81": [0.16667, 0.68889, 0, 0, 0.77778],
    "82": [0, 0.68889, 0, 0, 0.72222],
    "83": [0, 0.68889, 0, 0, 0.55556],
    "84": [0, 0.68889, 0, 0, 0.66667],
    "85": [0, 0.68889, 0, 0, 0.72222],
    "86": [0, 0.68889, 0, 0, 0.72222],
    "87": [0, 0.68889, 0, 0, 1],
    "88": [0, 0.68889, 0, 0, 0.72222],
    "89": [0, 0.68889, 0, 0, 0.72222],
    "90": [0, 0.68889, 0, 0, 0.66667],
    "107": [0, 0.68889, 0, 0, 0.55556],
    "160": [0, 0, 0, 0, 0.25],
    "165": [0, 0.675, 0.025, 0, 0.75],
    "174": [0.15559, 0.69224, 0, 0, 0.94666],
    "240": [0, 0.68889, 0, 0, 0.55556],
    "295": [0, 0.68889, 0, 0, 0.54028],
    "710": [0, 0.825, 0, 0, 2.33334],
    "732": [0, 0.9, 0, 0, 2.33334],
    "770": [0, 0.825, 0, 0, 2.33334],
    "771": [0, 0.9, 0, 0, 2.33334],
    "989": [0.08167, 0.58167, 0, 0, 0.77778],
    "1008": [0, 0.43056, 0.04028, 0, 0.66667],
    "8245": [0, 0.54986, 0, 0, 0.275],
    "8463": [0, 0.68889, 0, 0, 0.54028],
    "8487": [0, 0.68889, 0, 0, 0.72222],
    "8498": [0, 0.68889, 0, 0, 0.55556],
    "8502": [0, 0.68889, 0, 0, 0.66667],
    "8503": [0, 0.68889, 0, 0, 0.44445],
    "8504": [0, 0.68889, 0, 0, 0.66667],
    "8513": [0, 0.68889, 0, 0, 0.63889],
    "8592": [-0.03598, 0.46402, 0, 0, 0.5],
    "8594": [-0.03598, 0.46402, 0, 0, 0.5],
    "8602": [-0.13313, 0.36687, 0, 0, 1],
    "8603": [-0.13313, 0.36687, 0, 0, 1],
    "8606": [0.01354, 0.52239, 0, 0, 1],
    "8608": [0.01354, 0.52239, 0, 0, 1],
    "8610": [0.01354, 0.52239, 0, 0, 1.11111],
    "8611": [0.01354, 0.52239, 0, 0, 1.11111],
    "8619": [0, 0.54986, 0, 0, 1],
    "8620": [0, 0.54986, 0, 0, 1],
    "8621": [-0.13313, 0.37788, 0, 0, 1.38889],
    "8622": [-0.13313, 0.36687, 0, 0, 1],
    "8624": [0, 0.69224, 0, 0, 0.5],
    "8625": [0, 0.69224, 0, 0, 0.5],
    "8630": [0, 0.43056, 0, 0, 1],
    "8631": [0, 0.43056, 0, 0, 1],
    "8634": [0.08198, 0.58198, 0, 0, 0.77778],
    "8635": [0.08198, 0.58198, 0, 0, 0.77778],
    "8638": [0.19444, 0.69224, 0, 0, 0.41667],
    "8639": [0.19444, 0.69224, 0, 0, 0.41667],
    "8642": [0.19444, 0.69224, 0, 0, 0.41667],
    "8643": [0.19444, 0.69224, 0, 0, 0.41667],
    "8644": [0.1808, 0.675, 0, 0, 1],
    "8646": [0.1808, 0.675, 0, 0, 1],
    "8647": [0.1808, 0.675, 0, 0, 1],
    "8648": [0.19444, 0.69224, 0, 0, 0.83334],
    "8649": [0.1808, 0.675, 0, 0, 1],
    "8650": [0.19444, 0.69224, 0, 0, 0.83334],
    "8651": [0.01354, 0.52239, 0, 0, 1],
    "8652": [0.01354, 0.52239, 0, 0, 1],
    "8653": [-0.13313, 0.36687, 0, 0, 1],
    "8654": [-0.13313, 0.36687, 0, 0, 1],
    "8655": [-0.13313, 0.36687, 0, 0, 1],
    "8666": [0.13667, 0.63667, 0, 0, 1],
    "8667": [0.13667, 0.63667, 0, 0, 1],
    "8669": [-0.13313, 0.37788, 0, 0, 1],
    "8672": [-0.064, 0.437, 0, 0, 1.334],
    "8674": [-0.064, 0.437, 0, 0, 1.334],
    "8705": [0, 0.825, 0, 0, 0.5],
    "8708": [0, 0.68889, 0, 0, 0.55556],
    "8709": [0.08167, 0.58167, 0, 0, 0.77778],
    "8717": [0, 0.43056, 0, 0, 0.42917],
    "8722": [-0.03598, 0.46402, 0, 0, 0.5],
    "8724": [0.08198, 0.69224, 0, 0, 0.77778],
    "8726": [0.08167, 0.58167, 0, 0, 0.77778],
    "8733": [0, 0.69224, 0, 0, 0.77778],
    "8736": [0, 0.69224, 0, 0, 0.72222],
    "8737": [0, 0.69224, 0, 0, 0.72222],
    "8738": [0.03517, 0.52239, 0, 0, 0.72222],
    "8739": [0.08167, 0.58167, 0, 0, 0.22222],
    "8740": [0.25142, 0.74111, 0, 0, 0.27778],
    "8741": [0.08167, 0.58167, 0, 0, 0.38889],
    "8742": [0.25142, 0.74111, 0, 0, 0.5],
    "8756": [0, 0.69224, 0, 0, 0.66667],
    "8757": [0, 0.69224, 0, 0, 0.66667],
    "8764": [-0.13313, 0.36687, 0, 0, 0.77778],
    "8765": [-0.13313, 0.37788, 0, 0, 0.77778],
    "8769": [-0.13313, 0.36687, 0, 0, 0.77778],
    "8770": [-0.03625, 0.46375, 0, 0, 0.77778],
    "8774": [0.30274, 0.79383, 0, 0, 0.77778],
    "8776": [-0.01688, 0.48312, 0, 0, 0.77778],
    "8778": [0.08167, 0.58167, 0, 0, 0.77778],
    "8782": [0.06062, 0.54986, 0, 0, 0.77778],
    "8783": [0.06062, 0.54986, 0, 0, 0.77778],
    "8785": [0.08198, 0.58198, 0, 0, 0.77778],
    "8786": [0.08198, 0.58198, 0, 0, 0.77778],
    "8787": [0.08198, 0.58198, 0, 0, 0.77778],
    "8790": [0, 0.69224, 0, 0, 0.77778],
    "8791": [0.22958, 0.72958, 0, 0, 0.77778],
    "8796": [0.08198, 0.91667, 0, 0, 0.77778],
    "8806": [0.25583, 0.75583, 0, 0, 0.77778],
    "8807": [0.25583, 0.75583, 0, 0, 0.77778],
    "8808": [0.25142, 0.75726, 0, 0, 0.77778],
    "8809": [0.25142, 0.75726, 0, 0, 0.77778],
    "8812": [0.25583, 0.75583, 0, 0, 0.5],
    "8814": [0.20576, 0.70576, 0, 0, 0.77778],
    "8815": [0.20576, 0.70576, 0, 0, 0.77778],
    "8816": [0.30274, 0.79383, 0, 0, 0.77778],
    "8817": [0.30274, 0.79383, 0, 0, 0.77778],
    "8818": [0.22958, 0.72958, 0, 0, 0.77778],
    "8819": [0.22958, 0.72958, 0, 0, 0.77778],
    "8822": [0.1808, 0.675, 0, 0, 0.77778],
    "8823": [0.1808, 0.675, 0, 0, 0.77778],
    "8828": [0.13667, 0.63667, 0, 0, 0.77778],
    "8829": [0.13667, 0.63667, 0, 0, 0.77778],
    "8830": [0.22958, 0.72958, 0, 0, 0.77778],
    "8831": [0.22958, 0.72958, 0, 0, 0.77778],
    "8832": [0.20576, 0.70576, 0, 0, 0.77778],
    "8833": [0.20576, 0.70576, 0, 0, 0.77778],
    "8840": [0.30274, 0.79383, 0, 0, 0.77778],
    "8841": [0.30274, 0.79383, 0, 0, 0.77778],
    "8842": [0.13597, 0.63597, 0, 0, 0.77778],
    "8843": [0.13597, 0.63597, 0, 0, 0.77778],
    "8847": [0.03517, 0.54986, 0, 0, 0.77778],
    "8848": [0.03517, 0.54986, 0, 0, 0.77778],
    "8858": [0.08198, 0.58198, 0, 0, 0.77778],
    "8859": [0.08198, 0.58198, 0, 0, 0.77778],
    "8861": [0.08198, 0.58198, 0, 0, 0.77778],
    "8862": [0, 0.675, 0, 0, 0.77778],
    "8863": [0, 0.675, 0, 0, 0.77778],
    "8864": [0, 0.675, 0, 0, 0.77778],
    "8865": [0, 0.675, 0, 0, 0.77778],
    "8872": [0, 0.69224, 0, 0, 0.61111],
    "8873": [0, 0.69224, 0, 0, 0.72222],
    "8874": [0, 0.69224, 0, 0, 0.88889],
    "8876": [0, 0.68889, 0, 0, 0.61111],
    "8877": [0, 0.68889, 0, 0, 0.61111],
    "8878": [0, 0.68889, 0, 0, 0.72222],
    "8879": [0, 0.68889, 0, 0, 0.72222],
    "8882": [0.03517, 0.54986, 0, 0, 0.77778],
    "8883": [0.03517, 0.54986, 0, 0, 0.77778],
    "8884": [0.13667, 0.63667, 0, 0, 0.77778],
    "8885": [0.13667, 0.63667, 0, 0, 0.77778],
    "8888": [0, 0.54986, 0, 0, 1.11111],
    "8890": [0.19444, 0.43056, 0, 0, 0.55556],
    "8891": [0.19444, 0.69224, 0, 0, 0.61111],
    "8892": [0.19444, 0.69224, 0, 0, 0.61111],
    "8901": [0, 0.54986, 0, 0, 0.27778],
    "8903": [0.08167, 0.58167, 0, 0, 0.77778],
    "8905": [0.08167, 0.58167, 0, 0, 0.77778],
    "8906": [0.08167, 0.58167, 0, 0, 0.77778],
    "8907": [0, 0.69224, 0, 0, 0.77778],
    "8908": [0, 0.69224, 0, 0, 0.77778],
    "8909": [-0.03598, 0.46402, 0, 0, 0.77778],
    "8910": [0, 0.54986, 0, 0, 0.76042],
    "8911": [0, 0.54986, 0, 0, 0.76042],
    "8912": [0.03517, 0.54986, 0, 0, 0.77778],
    "8913": [0.03517, 0.54986, 0, 0, 0.77778],
    "8914": [0, 0.54986, 0, 0, 0.66667],
    "8915": [0, 0.54986, 0, 0, 0.66667],
    "8916": [0, 0.69224, 0, 0, 0.66667],
    "8918": [0.0391, 0.5391, 0, 0, 0.77778],
    "8919": [0.0391, 0.5391, 0, 0, 0.77778],
    "8920": [0.03517, 0.54986, 0, 0, 1.33334],
    "8921": [0.03517, 0.54986, 0, 0, 1.33334],
    "8922": [0.38569, 0.88569, 0, 0, 0.77778],
    "8923": [0.38569, 0.88569, 0, 0, 0.77778],
    "8926": [0.13667, 0.63667, 0, 0, 0.77778],
    "8927": [0.13667, 0.63667, 0, 0, 0.77778],
    "8928": [0.30274, 0.79383, 0, 0, 0.77778],
    "8929": [0.30274, 0.79383, 0, 0, 0.77778],
    "8934": [0.23222, 0.74111, 0, 0, 0.77778],
    "8935": [0.23222, 0.74111, 0, 0, 0.77778],
    "8936": [0.23222, 0.74111, 0, 0, 0.77778],
    "8937": [0.23222, 0.74111, 0, 0, 0.77778],
    "8938": [0.20576, 0.70576, 0, 0, 0.77778],
    "8939": [0.20576, 0.70576, 0, 0, 0.77778],
    "8940": [0.30274, 0.79383, 0, 0, 0.77778],
    "8941": [0.30274, 0.79383, 0, 0, 0.77778],
    "8994": [0.19444, 0.69224, 0, 0, 0.77778],
    "8995": [0.19444, 0.69224, 0, 0, 0.77778],
    "9416": [0.15559, 0.69224, 0, 0, 0.90222],
    "9484": [0, 0.69224, 0, 0, 0.5],
    "9488": [0, 0.69224, 0, 0, 0.5],
    "9492": [0, 0.37788, 0, 0, 0.5],
    "9496": [0, 0.37788, 0, 0, 0.5],
    "9585": [0.19444, 0.68889, 0, 0, 0.88889],
    "9586": [0.19444, 0.74111, 0, 0, 0.88889],
    "9632": [0, 0.675, 0, 0, 0.77778],
    "9633": [0, 0.675, 0, 0, 0.77778],
    "9650": [0, 0.54986, 0, 0, 0.72222],
    "9651": [0, 0.54986, 0, 0, 0.72222],
    "9654": [0.03517, 0.54986, 0, 0, 0.77778],
    "9660": [0, 0.54986, 0, 0, 0.72222],
    "9661": [0, 0.54986, 0, 0, 0.72222],
    "9664": [0.03517, 0.54986, 0, 0, 0.77778],
    "9674": [0.11111, 0.69224, 0, 0, 0.66667],
    "9733": [0.19444, 0.69224, 0, 0, 0.94445],
    "10003": [0, 0.69224, 0, 0, 0.83334],
    "10016": [0, 0.69224, 0, 0, 0.83334],
    "10731": [0.11111, 0.69224, 0, 0, 0.66667],
    "10846": [0.19444, 0.75583, 0, 0, 0.61111],
    "10877": [0.13667, 0.63667, 0, 0, 0.77778],
    "10878": [0.13667, 0.63667, 0, 0, 0.77778],
    "10885": [0.25583, 0.75583, 0, 0, 0.77778],
    "10886": [0.25583, 0.75583, 0, 0, 0.77778],
    "10887": [0.13597, 0.63597, 0, 0, 0.77778],
    "10888": [0.13597, 0.63597, 0, 0, 0.77778],
    "10889": [0.26167, 0.75726, 0, 0, 0.77778],
    "10890": [0.26167, 0.75726, 0, 0, 0.77778],
    "10891": [0.48256, 0.98256, 0, 0, 0.77778],
    "10892": [0.48256, 0.98256, 0, 0, 0.77778],
    "10901": [0.13667, 0.63667, 0, 0, 0.77778],
    "10902": [0.13667, 0.63667, 0, 0, 0.77778],
    "10933": [0.25142, 0.75726, 0, 0, 0.77778],
    "10934": [0.25142, 0.75726, 0, 0, 0.77778],
    "10935": [0.26167, 0.75726, 0, 0, 0.77778],
    "10936": [0.26167, 0.75726, 0, 0, 0.77778],
    "10937": [0.26167, 0.75726, 0, 0, 0.77778],
    "10938": [0.26167, 0.75726, 0, 0, 0.77778],
    "10949": [0.25583, 0.75583, 0, 0, 0.77778],
    "10950": [0.25583, 0.75583, 0, 0, 0.77778],
    "10955": [0.28481, 0.79383, 0, 0, 0.77778],
    "10956": [0.28481, 0.79383, 0, 0, 0.77778],
    "57350": [0.08167, 0.58167, 0, 0, 0.22222],
    "57351": [0.08167, 0.58167, 0, 0, 0.38889],
    "57352": [0.08167, 0.58167, 0, 0, 0.77778],
    "57353": [0, 0.43056, 0.04028, 0, 0.66667],
    "57356": [0.25142, 0.75726, 0, 0, 0.77778],
    "57357": [0.25142, 0.75726, 0, 0, 0.77778],
    "57358": [0.41951, 0.91951, 0, 0, 0.77778],
    "57359": [0.30274, 0.79383, 0, 0, 0.77778],
    "57360": [0.30274, 0.79383, 0, 0, 0.77778],
    "57361": [0.41951, 0.91951, 0, 0, 0.77778],
    "57366": [0.25142, 0.75726, 0, 0, 0.77778],
    "57367": [0.25142, 0.75726, 0, 0, 0.77778],
    "57368": [0.25142, 0.75726, 0, 0, 0.77778],
    "57369": [0.25142, 0.75726, 0, 0, 0.77778],
    "57370": [0.13597, 0.63597, 0, 0, 0.77778],
    "57371": [0.13597, 0.63597, 0, 0, 0.77778]
  },
  "Caligraphic-Regular": {
    "32": [0, 0, 0, 0, 0.25],
    "65": [0, 0.68333, 0, 0.19445, 0.79847],
    "66": [0, 0.68333, 0.03041, 0.13889, 0.65681],
    "67": [0, 0.68333, 0.05834, 0.13889, 0.52653],
    "68": [0, 0.68333, 0.02778, 0.08334, 0.77139],
    "69": [0, 0.68333, 0.08944, 0.11111, 0.52778],
    "70": [0, 0.68333, 0.09931, 0.11111, 0.71875],
    "71": [0.09722, 0.68333, 0.0593, 0.11111, 0.59487],
    "72": [0, 0.68333, 965e-5, 0.11111, 0.84452],
    "73": [0, 0.68333, 0.07382, 0, 0.54452],
    "74": [0.09722, 0.68333, 0.18472, 0.16667, 0.67778],
    "75": [0, 0.68333, 0.01445, 0.05556, 0.76195],
    "76": [0, 0.68333, 0, 0.13889, 0.68972],
    "77": [0, 0.68333, 0, 0.13889, 1.2009],
    "78": [0, 0.68333, 0.14736, 0.08334, 0.82049],
    "79": [0, 0.68333, 0.02778, 0.11111, 0.79611],
    "80": [0, 0.68333, 0.08222, 0.08334, 0.69556],
    "81": [0.09722, 0.68333, 0, 0.11111, 0.81667],
    "82": [0, 0.68333, 0, 0.08334, 0.8475],
    "83": [0, 0.68333, 0.075, 0.13889, 0.60556],
    "84": [0, 0.68333, 0.25417, 0, 0.54464],
    "85": [0, 0.68333, 0.09931, 0.08334, 0.62583],
    "86": [0, 0.68333, 0.08222, 0, 0.61278],
    "87": [0, 0.68333, 0.08222, 0.08334, 0.98778],
    "88": [0, 0.68333, 0.14643, 0.13889, 0.7133],
    "89": [0.09722, 0.68333, 0.08222, 0.08334, 0.66834],
    "90": [0, 0.68333, 0.07944, 0.13889, 0.72473],
    "160": [0, 0, 0, 0, 0.25]
  },
  "Fraktur-Regular": {
    "32": [0, 0, 0, 0, 0.25],
    "33": [0, 0.69141, 0, 0, 0.29574],
    "34": [0, 0.69141, 0, 0, 0.21471],
    "38": [0, 0.69141, 0, 0, 0.73786],
    "39": [0, 0.69141, 0, 0, 0.21201],
    "40": [0.24982, 0.74947, 0, 0, 0.38865],
    "41": [0.24982, 0.74947, 0, 0, 0.38865],
    "42": [0, 0.62119, 0, 0, 0.27764],
    "43": [0.08319, 0.58283, 0, 0, 0.75623],
    "44": [0, 0.10803, 0, 0, 0.27764],
    "45": [0.08319, 0.58283, 0, 0, 0.75623],
    "46": [0, 0.10803, 0, 0, 0.27764],
    "47": [0.24982, 0.74947, 0, 0, 0.50181],
    "48": [0, 0.47534, 0, 0, 0.50181],
    "49": [0, 0.47534, 0, 0, 0.50181],
    "50": [0, 0.47534, 0, 0, 0.50181],
    "51": [0.18906, 0.47534, 0, 0, 0.50181],
    "52": [0.18906, 0.47534, 0, 0, 0.50181],
    "53": [0.18906, 0.47534, 0, 0, 0.50181],
    "54": [0, 0.69141, 0, 0, 0.50181],
    "55": [0.18906, 0.47534, 0, 0, 0.50181],
    "56": [0, 0.69141, 0, 0, 0.50181],
    "57": [0.18906, 0.47534, 0, 0, 0.50181],
    "58": [0, 0.47534, 0, 0, 0.21606],
    "59": [0.12604, 0.47534, 0, 0, 0.21606],
    "61": [-0.13099, 0.36866, 0, 0, 0.75623],
    "63": [0, 0.69141, 0, 0, 0.36245],
    "65": [0, 0.69141, 0, 0, 0.7176],
    "66": [0, 0.69141, 0, 0, 0.88397],
    "67": [0, 0.69141, 0, 0, 0.61254],
    "68": [0, 0.69141, 0, 0, 0.83158],
    "69": [0, 0.69141, 0, 0, 0.66278],
    "70": [0.12604, 0.69141, 0, 0, 0.61119],
    "71": [0, 0.69141, 0, 0, 0.78539],
    "72": [0.06302, 0.69141, 0, 0, 0.7203],
    "73": [0, 0.69141, 0, 0, 0.55448],
    "74": [0.12604, 0.69141, 0, 0, 0.55231],
    "75": [0, 0.69141, 0, 0, 0.66845],
    "76": [0, 0.69141, 0, 0, 0.66602],
    "77": [0, 0.69141, 0, 0, 1.04953],
    "78": [0, 0.69141, 0, 0, 0.83212],
    "79": [0, 0.69141, 0, 0, 0.82699],
    "80": [0.18906, 0.69141, 0, 0, 0.82753],
    "81": [0.03781, 0.69141, 0, 0, 0.82699],
    "82": [0, 0.69141, 0, 0, 0.82807],
    "83": [0, 0.69141, 0, 0, 0.82861],
    "84": [0, 0.69141, 0, 0, 0.66899],
    "85": [0, 0.69141, 0, 0, 0.64576],
    "86": [0, 0.69141, 0, 0, 0.83131],
    "87": [0, 0.69141, 0, 0, 1.04602],
    "88": [0, 0.69141, 0, 0, 0.71922],
    "89": [0.18906, 0.69141, 0, 0, 0.83293],
    "90": [0.12604, 0.69141, 0, 0, 0.60201],
    "91": [0.24982, 0.74947, 0, 0, 0.27764],
    "93": [0.24982, 0.74947, 0, 0, 0.27764],
    "94": [0, 0.69141, 0, 0, 0.49965],
    "97": [0, 0.47534, 0, 0, 0.50046],
    "98": [0, 0.69141, 0, 0, 0.51315],
    "99": [0, 0.47534, 0, 0, 0.38946],
    "100": [0, 0.62119, 0, 0, 0.49857],
    "101": [0, 0.47534, 0, 0, 0.40053],
    "102": [0.18906, 0.69141, 0, 0, 0.32626],
    "103": [0.18906, 0.47534, 0, 0, 0.5037],
    "104": [0.18906, 0.69141, 0, 0, 0.52126],
    "105": [0, 0.69141, 0, 0, 0.27899],
    "106": [0, 0.69141, 0, 0, 0.28088],
    "107": [0, 0.69141, 0, 0, 0.38946],
    "108": [0, 0.69141, 0, 0, 0.27953],
    "109": [0, 0.47534, 0, 0, 0.76676],
    "110": [0, 0.47534, 0, 0, 0.52666],
    "111": [0, 0.47534, 0, 0, 0.48885],
    "112": [0.18906, 0.52396, 0, 0, 0.50046],
    "113": [0.18906, 0.47534, 0, 0, 0.48912],
    "114": [0, 0.47534, 0, 0, 0.38919],
    "115": [0, 0.47534, 0, 0, 0.44266],
    "116": [0, 0.62119, 0, 0, 0.33301],
    "117": [0, 0.47534, 0, 0, 0.5172],
    "118": [0, 0.52396, 0, 0, 0.5118],
    "119": [0, 0.52396, 0, 0, 0.77351],
    "120": [0.18906, 0.47534, 0, 0, 0.38865],
    "121": [0.18906, 0.47534, 0, 0, 0.49884],
    "122": [0.18906, 0.47534, 0, 0, 0.39054],
    "160": [0, 0, 0, 0, 0.25],
    "8216": [0, 0.69141, 0, 0, 0.21471],
    "8217": [0, 0.69141, 0, 0, 0.21471],
    "58112": [0, 0.62119, 0, 0, 0.49749],
    "58113": [0, 0.62119, 0, 0, 0.4983],
    "58114": [0.18906, 0.69141, 0, 0, 0.33328],
    "58115": [0.18906, 0.69141, 0, 0, 0.32923],
    "58116": [0.18906, 0.47534, 0, 0, 0.50343],
    "58117": [0, 0.69141, 0, 0, 0.33301],
    "58118": [0, 0.62119, 0, 0, 0.33409],
    "58119": [0, 0.47534, 0, 0, 0.50073]
  },
  "Main-Bold": {
    "32": [0, 0, 0, 0, 0.25],
    "33": [0, 0.69444, 0, 0, 0.35],
    "34": [0, 0.69444, 0, 0, 0.60278],
    "35": [0.19444, 0.69444, 0, 0, 0.95833],
    "36": [0.05556, 0.75, 0, 0, 0.575],
    "37": [0.05556, 0.75, 0, 0, 0.95833],
    "38": [0, 0.69444, 0, 0, 0.89444],
    "39": [0, 0.69444, 0, 0, 0.31944],
    "40": [0.25, 0.75, 0, 0, 0.44722],
    "41": [0.25, 0.75, 0, 0, 0.44722],
    "42": [0, 0.75, 0, 0, 0.575],
    "43": [0.13333, 0.63333, 0, 0, 0.89444],
    "44": [0.19444, 0.15556, 0, 0, 0.31944],
    "45": [0, 0.44444, 0, 0, 0.38333],
    "46": [0, 0.15556, 0, 0, 0.31944],
    "47": [0.25, 0.75, 0, 0, 0.575],
    "48": [0, 0.64444, 0, 0, 0.575],
    "49": [0, 0.64444, 0, 0, 0.575],
    "50": [0, 0.64444, 0, 0, 0.575],
    "51": [0, 0.64444, 0, 0, 0.575],
    "52": [0, 0.64444, 0, 0, 0.575],
    "53": [0, 0.64444, 0, 0, 0.575],
    "54": [0, 0.64444, 0, 0, 0.575],
    "55": [0, 0.64444, 0, 0, 0.575],
    "56": [0, 0.64444, 0, 0, 0.575],
    "57": [0, 0.64444, 0, 0, 0.575],
    "58": [0, 0.44444, 0, 0, 0.31944],
    "59": [0.19444, 0.44444, 0, 0, 0.31944],
    "60": [0.08556, 0.58556, 0, 0, 0.89444],
    "61": [-0.10889, 0.39111, 0, 0, 0.89444],
    "62": [0.08556, 0.58556, 0, 0, 0.89444],
    "63": [0, 0.69444, 0, 0, 0.54305],
    "64": [0, 0.69444, 0, 0, 0.89444],
    "65": [0, 0.68611, 0, 0, 0.86944],
    "66": [0, 0.68611, 0, 0, 0.81805],
    "67": [0, 0.68611, 0, 0, 0.83055],
    "68": [0, 0.68611, 0, 0, 0.88194],
    "69": [0, 0.68611, 0, 0, 0.75555],
    "70": [0, 0.68611, 0, 0, 0.72361],
    "71": [0, 0.68611, 0, 0, 0.90416],
    "72": [0, 0.68611, 0, 0, 0.9],
    "73": [0, 0.68611, 0, 0, 0.43611],
    "74": [0, 0.68611, 0, 0, 0.59444],
    "75": [0, 0.68611, 0, 0, 0.90138],
    "76": [0, 0.68611, 0, 0, 0.69166],
    "77": [0, 0.68611, 0, 0, 1.09166],
    "78": [0, 0.68611, 0, 0, 0.9],
    "79": [0, 0.68611, 0, 0, 0.86388],
    "80": [0, 0.68611, 0, 0, 0.78611],
    "81": [0.19444, 0.68611, 0, 0, 0.86388],
    "82": [0, 0.68611, 0, 0, 0.8625],
    "83": [0, 0.68611, 0, 0, 0.63889],
    "84": [0, 0.68611, 0, 0, 0.8],
    "85": [0, 0.68611, 0, 0, 0.88472],
    "86": [0, 0.68611, 0.01597, 0, 0.86944],
    "87": [0, 0.68611, 0.01597, 0, 1.18888],
    "88": [0, 0.68611, 0, 0, 0.86944],
    "89": [0, 0.68611, 0.02875, 0, 0.86944],
    "90": [0, 0.68611, 0, 0, 0.70277],
    "91": [0.25, 0.75, 0, 0, 0.31944],
    "92": [0.25, 0.75, 0, 0, 0.575],
    "93": [0.25, 0.75, 0, 0, 0.31944],
    "94": [0, 0.69444, 0, 0, 0.575],
    "95": [0.31, 0.13444, 0.03194, 0, 0.575],
    "97": [0, 0.44444, 0, 0, 0.55902],
    "98": [0, 0.69444, 0, 0, 0.63889],
    "99": [0, 0.44444, 0, 0, 0.51111],
    "100": [0, 0.69444, 0, 0, 0.63889],
    "101": [0, 0.44444, 0, 0, 0.52708],
    "102": [0, 0.69444, 0.10903, 0, 0.35139],
    "103": [0.19444, 0.44444, 0.01597, 0, 0.575],
    "104": [0, 0.69444, 0, 0, 0.63889],
    "105": [0, 0.69444, 0, 0, 0.31944],
    "106": [0.19444, 0.69444, 0, 0, 0.35139],
    "107": [0, 0.69444, 0, 0, 0.60694],
    "108": [0, 0.69444, 0, 0, 0.31944],
    "109": [0, 0.44444, 0, 0, 0.95833],
    "110": [0, 0.44444, 0, 0, 0.63889],
    "111": [0, 0.44444, 0, 0, 0.575],
    "112": [0.19444, 0.44444, 0, 0, 0.63889],
    "113": [0.19444, 0.44444, 0, 0, 0.60694],
    "114": [0, 0.44444, 0, 0, 0.47361],
    "115": [0, 0.44444, 0, 0, 0.45361],
    "116": [0, 0.63492, 0, 0, 0.44722],
    "117": [0, 0.44444, 0, 0, 0.63889],
    "118": [0, 0.44444, 0.01597, 0, 0.60694],
    "119": [0, 0.44444, 0.01597, 0, 0.83055],
    "120": [0, 0.44444, 0, 0, 0.60694],
    "121": [0.19444, 0.44444, 0.01597, 0, 0.60694],
    "122": [0, 0.44444, 0, 0, 0.51111],
    "123": [0.25, 0.75, 0, 0, 0.575],
    "124": [0.25, 0.75, 0, 0, 0.31944],
    "125": [0.25, 0.75, 0, 0, 0.575],
    "126": [0.35, 0.34444, 0, 0, 0.575],
    "160": [0, 0, 0, 0, 0.25],
    "163": [0, 0.69444, 0, 0, 0.86853],
    "168": [0, 0.69444, 0, 0, 0.575],
    "172": [0, 0.44444, 0, 0, 0.76666],
    "176": [0, 0.69444, 0, 0, 0.86944],
    "177": [0.13333, 0.63333, 0, 0, 0.89444],
    "184": [0.17014, 0, 0, 0, 0.51111],
    "198": [0, 0.68611, 0, 0, 1.04166],
    "215": [0.13333, 0.63333, 0, 0, 0.89444],
    "216": [0.04861, 0.73472, 0, 0, 0.89444],
    "223": [0, 0.69444, 0, 0, 0.59722],
    "230": [0, 0.44444, 0, 0, 0.83055],
    "247": [0.13333, 0.63333, 0, 0, 0.89444],
    "248": [0.09722, 0.54167, 0, 0, 0.575],
    "305": [0, 0.44444, 0, 0, 0.31944],
    "338": [0, 0.68611, 0, 0, 1.16944],
    "339": [0, 0.44444, 0, 0, 0.89444],
    "567": [0.19444, 0.44444, 0, 0, 0.35139],
    "710": [0, 0.69444, 0, 0, 0.575],
    "711": [0, 0.63194, 0, 0, 0.575],
    "713": [0, 0.59611, 0, 0, 0.575],
    "714": [0, 0.69444, 0, 0, 0.575],
    "715": [0, 0.69444, 0, 0, 0.575],
    "728": [0, 0.69444, 0, 0, 0.575],
    "729": [0, 0.69444, 0, 0, 0.31944],
    "730": [0, 0.69444, 0, 0, 0.86944],
    "732": [0, 0.69444, 0, 0, 0.575],
    "733": [0, 0.69444, 0, 0, 0.575],
    "915": [0, 0.68611, 0, 0, 0.69166],
    "916": [0, 0.68611, 0, 0, 0.95833],
    "920": [0, 0.68611, 0, 0, 0.89444],
    "923": [0, 0.68611, 0, 0, 0.80555],
    "926": [0, 0.68611, 0, 0, 0.76666],
    "928": [0, 0.68611, 0, 0, 0.9],
    "931": [0, 0.68611, 0, 0, 0.83055],
    "933": [0, 0.68611, 0, 0, 0.89444],
    "934": [0, 0.68611, 0, 0, 0.83055],
    "936": [0, 0.68611, 0, 0, 0.89444],
    "937": [0, 0.68611, 0, 0, 0.83055],
    "8211": [0, 0.44444, 0.03194, 0, 0.575],
    "8212": [0, 0.44444, 0.03194, 0, 1.14999],
    "8216": [0, 0.69444, 0, 0, 0.31944],
    "8217": [0, 0.69444, 0, 0, 0.31944],
    "8220": [0, 0.69444, 0, 0, 0.60278],
    "8221": [0, 0.69444, 0, 0, 0.60278],
    "8224": [0.19444, 0.69444, 0, 0, 0.51111],
    "8225": [0.19444, 0.69444, 0, 0, 0.51111],
    "8242": [0, 0.55556, 0, 0, 0.34444],
    "8407": [0, 0.72444, 0.15486, 0, 0.575],
    "8463": [0, 0.69444, 0, 0, 0.66759],
    "8465": [0, 0.69444, 0, 0, 0.83055],
    "8467": [0, 0.69444, 0, 0, 0.47361],
    "8472": [0.19444, 0.44444, 0, 0, 0.74027],
    "8476": [0, 0.69444, 0, 0, 0.83055],
    "8501": [0, 0.69444, 0, 0, 0.70277],
    "8592": [-0.10889, 0.39111, 0, 0, 1.14999],
    "8593": [0.19444, 0.69444, 0, 0, 0.575],
    "8594": [-0.10889, 0.39111, 0, 0, 1.14999],
    "8595": [0.19444, 0.69444, 0, 0, 0.575],
    "8596": [-0.10889, 0.39111, 0, 0, 1.14999],
    "8597": [0.25, 0.75, 0, 0, 0.575],
    "8598": [0.19444, 0.69444, 0, 0, 1.14999],
    "8599": [0.19444, 0.69444, 0, 0, 1.14999],
    "8600": [0.19444, 0.69444, 0, 0, 1.14999],
    "8601": [0.19444, 0.69444, 0, 0, 1.14999],
    "8636": [-0.10889, 0.39111, 0, 0, 1.14999],
    "8637": [-0.10889, 0.39111, 0, 0, 1.14999],
    "8640": [-0.10889, 0.39111, 0, 0, 1.14999],
    "8641": [-0.10889, 0.39111, 0, 0, 1.14999],
    "8656": [-0.10889, 0.39111, 0, 0, 1.14999],
    "8657": [0.19444, 0.69444, 0, 0, 0.70277],
    "8658": [-0.10889, 0.39111, 0, 0, 1.14999],
    "8659": [0.19444, 0.69444, 0, 0, 0.70277],
    "8660": [-0.10889, 0.39111, 0, 0, 1.14999],
    "8661": [0.25, 0.75, 0, 0, 0.70277],
    "8704": [0, 0.69444, 0, 0, 0.63889],
    "8706": [0, 0.69444, 0.06389, 0, 0.62847],
    "8707": [0, 0.69444, 0, 0, 0.63889],
    "8709": [0.05556, 0.75, 0, 0, 0.575],
    "8711": [0, 0.68611, 0, 0, 0.95833],
    "8712": [0.08556, 0.58556, 0, 0, 0.76666],
    "8715": [0.08556, 0.58556, 0, 0, 0.76666],
    "8722": [0.13333, 0.63333, 0, 0, 0.89444],
    "8723": [0.13333, 0.63333, 0, 0, 0.89444],
    "8725": [0.25, 0.75, 0, 0, 0.575],
    "8726": [0.25, 0.75, 0, 0, 0.575],
    "8727": [-0.02778, 0.47222, 0, 0, 0.575],
    "8728": [-0.02639, 0.47361, 0, 0, 0.575],
    "8729": [-0.02639, 0.47361, 0, 0, 0.575],
    "8730": [0.18, 0.82, 0, 0, 0.95833],
    "8733": [0, 0.44444, 0, 0, 0.89444],
    "8734": [0, 0.44444, 0, 0, 1.14999],
    "8736": [0, 0.69224, 0, 0, 0.72222],
    "8739": [0.25, 0.75, 0, 0, 0.31944],
    "8741": [0.25, 0.75, 0, 0, 0.575],
    "8743": [0, 0.55556, 0, 0, 0.76666],
    "8744": [0, 0.55556, 0, 0, 0.76666],
    "8745": [0, 0.55556, 0, 0, 0.76666],
    "8746": [0, 0.55556, 0, 0, 0.76666],
    "8747": [0.19444, 0.69444, 0.12778, 0, 0.56875],
    "8764": [-0.10889, 0.39111, 0, 0, 0.89444],
    "8768": [0.19444, 0.69444, 0, 0, 0.31944],
    "8771": [222e-5, 0.50222, 0, 0, 0.89444],
    "8773": [0.027, 0.638, 0, 0, 0.894],
    "8776": [0.02444, 0.52444, 0, 0, 0.89444],
    "8781": [222e-5, 0.50222, 0, 0, 0.89444],
    "8801": [222e-5, 0.50222, 0, 0, 0.89444],
    "8804": [0.19667, 0.69667, 0, 0, 0.89444],
    "8805": [0.19667, 0.69667, 0, 0, 0.89444],
    "8810": [0.08556, 0.58556, 0, 0, 1.14999],
    "8811": [0.08556, 0.58556, 0, 0, 1.14999],
    "8826": [0.08556, 0.58556, 0, 0, 0.89444],
    "8827": [0.08556, 0.58556, 0, 0, 0.89444],
    "8834": [0.08556, 0.58556, 0, 0, 0.89444],
    "8835": [0.08556, 0.58556, 0, 0, 0.89444],
    "8838": [0.19667, 0.69667, 0, 0, 0.89444],
    "8839": [0.19667, 0.69667, 0, 0, 0.89444],
    "8846": [0, 0.55556, 0, 0, 0.76666],
    "8849": [0.19667, 0.69667, 0, 0, 0.89444],
    "8850": [0.19667, 0.69667, 0, 0, 0.89444],
    "8851": [0, 0.55556, 0, 0, 0.76666],
    "8852": [0, 0.55556, 0, 0, 0.76666],
    "8853": [0.13333, 0.63333, 0, 0, 0.89444],
    "8854": [0.13333, 0.63333, 0, 0, 0.89444],
    "8855": [0.13333, 0.63333, 0, 0, 0.89444],
    "8856": [0.13333, 0.63333, 0, 0, 0.89444],
    "8857": [0.13333, 0.63333, 0, 0, 0.89444],
    "8866": [0, 0.69444, 0, 0, 0.70277],
    "8867": [0, 0.69444, 0, 0, 0.70277],
    "8868": [0, 0.69444, 0, 0, 0.89444],
    "8869": [0, 0.69444, 0, 0, 0.89444],
    "8900": [-0.02639, 0.47361, 0, 0, 0.575],
    "8901": [-0.02639, 0.47361, 0, 0, 0.31944],
    "8902": [-0.02778, 0.47222, 0, 0, 0.575],
    "8968": [0.25, 0.75, 0, 0, 0.51111],
    "8969": [0.25, 0.75, 0, 0, 0.51111],
    "8970": [0.25, 0.75, 0, 0, 0.51111],
    "8971": [0.25, 0.75, 0, 0, 0.51111],
    "8994": [-0.13889, 0.36111, 0, 0, 1.14999],
    "8995": [-0.13889, 0.36111, 0, 0, 1.14999],
    "9651": [0.19444, 0.69444, 0, 0, 1.02222],
    "9657": [-0.02778, 0.47222, 0, 0, 0.575],
    "9661": [0.19444, 0.69444, 0, 0, 1.02222],
    "9667": [-0.02778, 0.47222, 0, 0, 0.575],
    "9711": [0.19444, 0.69444, 0, 0, 1.14999],
    "9824": [0.12963, 0.69444, 0, 0, 0.89444],
    "9825": [0.12963, 0.69444, 0, 0, 0.89444],
    "9826": [0.12963, 0.69444, 0, 0, 0.89444],
    "9827": [0.12963, 0.69444, 0, 0, 0.89444],
    "9837": [0, 0.75, 0, 0, 0.44722],
    "9838": [0.19444, 0.69444, 0, 0, 0.44722],
    "9839": [0.19444, 0.69444, 0, 0, 0.44722],
    "10216": [0.25, 0.75, 0, 0, 0.44722],
    "10217": [0.25, 0.75, 0, 0, 0.44722],
    "10815": [0, 0.68611, 0, 0, 0.9],
    "10927": [0.19667, 0.69667, 0, 0, 0.89444],
    "10928": [0.19667, 0.69667, 0, 0, 0.89444],
    "57376": [0.19444, 0.69444, 0, 0, 0]
  },
  "Main-BoldItalic": {
    "32": [0, 0, 0, 0, 0.25],
    "33": [0, 0.69444, 0.11417, 0, 0.38611],
    "34": [0, 0.69444, 0.07939, 0, 0.62055],
    "35": [0.19444, 0.69444, 0.06833, 0, 0.94444],
    "37": [0.05556, 0.75, 0.12861, 0, 0.94444],
    "38": [0, 0.69444, 0.08528, 0, 0.88555],
    "39": [0, 0.69444, 0.12945, 0, 0.35555],
    "40": [0.25, 0.75, 0.15806, 0, 0.47333],
    "41": [0.25, 0.75, 0.03306, 0, 0.47333],
    "42": [0, 0.75, 0.14333, 0, 0.59111],
    "43": [0.10333, 0.60333, 0.03306, 0, 0.88555],
    "44": [0.19444, 0.14722, 0, 0, 0.35555],
    "45": [0, 0.44444, 0.02611, 0, 0.41444],
    "46": [0, 0.14722, 0, 0, 0.35555],
    "47": [0.25, 0.75, 0.15806, 0, 0.59111],
    "48": [0, 0.64444, 0.13167, 0, 0.59111],
    "49": [0, 0.64444, 0.13167, 0, 0.59111],
    "50": [0, 0.64444, 0.13167, 0, 0.59111],
    "51": [0, 0.64444, 0.13167, 0, 0.59111],
    "52": [0.19444, 0.64444, 0.13167, 0, 0.59111],
    "53": [0, 0.64444, 0.13167, 0, 0.59111],
    "54": [0, 0.64444, 0.13167, 0, 0.59111],
    "55": [0.19444, 0.64444, 0.13167, 0, 0.59111],
    "56": [0, 0.64444, 0.13167, 0, 0.59111],
    "57": [0, 0.64444, 0.13167, 0, 0.59111],
    "58": [0, 0.44444, 0.06695, 0, 0.35555],
    "59": [0.19444, 0.44444, 0.06695, 0, 0.35555],
    "61": [-0.10889, 0.39111, 0.06833, 0, 0.88555],
    "63": [0, 0.69444, 0.11472, 0, 0.59111],
    "64": [0, 0.69444, 0.09208, 0, 0.88555],
    "65": [0, 0.68611, 0, 0, 0.86555],
    "66": [0, 0.68611, 0.0992, 0, 0.81666],
    "67": [0, 0.68611, 0.14208, 0, 0.82666],
    "68": [0, 0.68611, 0.09062, 0, 0.87555],
    "69": [0, 0.68611, 0.11431, 0, 0.75666],
    "70": [0, 0.68611, 0.12903, 0, 0.72722],
    "71": [0, 0.68611, 0.07347, 0, 0.89527],
    "72": [0, 0.68611, 0.17208, 0, 0.8961],
    "73": [0, 0.68611, 0.15681, 0, 0.47166],
    "74": [0, 0.68611, 0.145, 0, 0.61055],
    "75": [0, 0.68611, 0.14208, 0, 0.89499],
    "76": [0, 0.68611, 0, 0, 0.69777],
    "77": [0, 0.68611, 0.17208, 0, 1.07277],
    "78": [0, 0.68611, 0.17208, 0, 0.8961],
    "79": [0, 0.68611, 0.09062, 0, 0.85499],
    "80": [0, 0.68611, 0.0992, 0, 0.78721],
    "81": [0.19444, 0.68611, 0.09062, 0, 0.85499],
    "82": [0, 0.68611, 0.02559, 0, 0.85944],
    "83": [0, 0.68611, 0.11264, 0, 0.64999],
    "84": [0, 0.68611, 0.12903, 0, 0.7961],
    "85": [0, 0.68611, 0.17208, 0, 0.88083],
    "86": [0, 0.68611, 0.18625, 0, 0.86555],
    "87": [0, 0.68611, 0.18625, 0, 1.15999],
    "88": [0, 0.68611, 0.15681, 0, 0.86555],
    "89": [0, 0.68611, 0.19803, 0, 0.86555],
    "90": [0, 0.68611, 0.14208, 0, 0.70888],
    "91": [0.25, 0.75, 0.1875, 0, 0.35611],
    "93": [0.25, 0.75, 0.09972, 0, 0.35611],
    "94": [0, 0.69444, 0.06709, 0, 0.59111],
    "95": [0.31, 0.13444, 0.09811, 0, 0.59111],
    "97": [0, 0.44444, 0.09426, 0, 0.59111],
    "98": [0, 0.69444, 0.07861, 0, 0.53222],
    "99": [0, 0.44444, 0.05222, 0, 0.53222],
    "100": [0, 0.69444, 0.10861, 0, 0.59111],
    "101": [0, 0.44444, 0.085, 0, 0.53222],
    "102": [0.19444, 0.69444, 0.21778, 0, 0.4],
    "103": [0.19444, 0.44444, 0.105, 0, 0.53222],
    "104": [0, 0.69444, 0.09426, 0, 0.59111],
    "105": [0, 0.69326, 0.11387, 0, 0.35555],
    "106": [0.19444, 0.69326, 0.1672, 0, 0.35555],
    "107": [0, 0.69444, 0.11111, 0, 0.53222],
    "108": [0, 0.69444, 0.10861, 0, 0.29666],
    "109": [0, 0.44444, 0.09426, 0, 0.94444],
    "110": [0, 0.44444, 0.09426, 0, 0.64999],
    "111": [0, 0.44444, 0.07861, 0, 0.59111],
    "112": [0.19444, 0.44444, 0.07861, 0, 0.59111],
    "113": [0.19444, 0.44444, 0.105, 0, 0.53222],
    "114": [0, 0.44444, 0.11111, 0, 0.50167],
    "115": [0, 0.44444, 0.08167, 0, 0.48694],
    "116": [0, 0.63492, 0.09639, 0, 0.385],
    "117": [0, 0.44444, 0.09426, 0, 0.62055],
    "118": [0, 0.44444, 0.11111, 0, 0.53222],
    "119": [0, 0.44444, 0.11111, 0, 0.76777],
    "120": [0, 0.44444, 0.12583, 0, 0.56055],
    "121": [0.19444, 0.44444, 0.105, 0, 0.56166],
    "122": [0, 0.44444, 0.13889, 0, 0.49055],
    "126": [0.35, 0.34444, 0.11472, 0, 0.59111],
    "160": [0, 0, 0, 0, 0.25],
    "168": [0, 0.69444, 0.11473, 0, 0.59111],
    "176": [0, 0.69444, 0, 0, 0.94888],
    "184": [0.17014, 0, 0, 0, 0.53222],
    "198": [0, 0.68611, 0.11431, 0, 1.02277],
    "216": [0.04861, 0.73472, 0.09062, 0, 0.88555],
    "223": [0.19444, 0.69444, 0.09736, 0, 0.665],
    "230": [0, 0.44444, 0.085, 0, 0.82666],
    "248": [0.09722, 0.54167, 0.09458, 0, 0.59111],
    "305": [0, 0.44444, 0.09426, 0, 0.35555],
    "338": [0, 0.68611, 0.11431, 0, 1.14054],
    "339": [0, 0.44444, 0.085, 0, 0.82666],
    "567": [0.19444, 0.44444, 0.04611, 0, 0.385],
    "710": [0, 0.69444, 0.06709, 0, 0.59111],
    "711": [0, 0.63194, 0.08271, 0, 0.59111],
    "713": [0, 0.59444, 0.10444, 0, 0.59111],
    "714": [0, 0.69444, 0.08528, 0, 0.59111],
    "715": [0, 0.69444, 0, 0, 0.59111],
    "728": [0, 0.69444, 0.10333, 0, 0.59111],
    "729": [0, 0.69444, 0.12945, 0, 0.35555],
    "730": [0, 0.69444, 0, 0, 0.94888],
    "732": [0, 0.69444, 0.11472, 0, 0.59111],
    "733": [0, 0.69444, 0.11472, 0, 0.59111],
    "915": [0, 0.68611, 0.12903, 0, 0.69777],
    "916": [0, 0.68611, 0, 0, 0.94444],
    "920": [0, 0.68611, 0.09062, 0, 0.88555],
    "923": [0, 0.68611, 0, 0, 0.80666],
    "926": [0, 0.68611, 0.15092, 0, 0.76777],
    "928": [0, 0.68611, 0.17208, 0, 0.8961],
    "931": [0, 0.68611, 0.11431, 0, 0.82666],
    "933": [0, 0.68611, 0.10778, 0, 0.88555],
    "934": [0, 0.68611, 0.05632, 0, 0.82666],
    "936": [0, 0.68611, 0.10778, 0, 0.88555],
    "937": [0, 0.68611, 0.0992, 0, 0.82666],
    "8211": [0, 0.44444, 0.09811, 0, 0.59111],
    "8212": [0, 0.44444, 0.09811, 0, 1.18221],
    "8216": [0, 0.69444, 0.12945, 0, 0.35555],
    "8217": [0, 0.69444, 0.12945, 0, 0.35555],
    "8220": [0, 0.69444, 0.16772, 0, 0.62055],
    "8221": [0, 0.69444, 0.07939, 0, 0.62055]
  },
  "Main-Italic": {
    "32": [0, 0, 0, 0, 0.25],
    "33": [0, 0.69444, 0.12417, 0, 0.30667],
    "34": [0, 0.69444, 0.06961, 0, 0.51444],
    "35": [0.19444, 0.69444, 0.06616, 0, 0.81777],
    "37": [0.05556, 0.75, 0.13639, 0, 0.81777],
    "38": [0, 0.69444, 0.09694, 0, 0.76666],
    "39": [0, 0.69444, 0.12417, 0, 0.30667],
    "40": [0.25, 0.75, 0.16194, 0, 0.40889],
    "41": [0.25, 0.75, 0.03694, 0, 0.40889],
    "42": [0, 0.75, 0.14917, 0, 0.51111],
    "43": [0.05667, 0.56167, 0.03694, 0, 0.76666],
    "44": [0.19444, 0.10556, 0, 0, 0.30667],
    "45": [0, 0.43056, 0.02826, 0, 0.35778],
    "46": [0, 0.10556, 0, 0, 0.30667],
    "47": [0.25, 0.75, 0.16194, 0, 0.51111],
    "48": [0, 0.64444, 0.13556, 0, 0.51111],
    "49": [0, 0.64444, 0.13556, 0, 0.51111],
    "50": [0, 0.64444, 0.13556, 0, 0.51111],
    "51": [0, 0.64444, 0.13556, 0, 0.51111],
    "52": [0.19444, 0.64444, 0.13556, 0, 0.51111],
    "53": [0, 0.64444, 0.13556, 0, 0.51111],
    "54": [0, 0.64444, 0.13556, 0, 0.51111],
    "55": [0.19444, 0.64444, 0.13556, 0, 0.51111],
    "56": [0, 0.64444, 0.13556, 0, 0.51111],
    "57": [0, 0.64444, 0.13556, 0, 0.51111],
    "58": [0, 0.43056, 0.0582, 0, 0.30667],
    "59": [0.19444, 0.43056, 0.0582, 0, 0.30667],
    "61": [-0.13313, 0.36687, 0.06616, 0, 0.76666],
    "63": [0, 0.69444, 0.1225, 0, 0.51111],
    "64": [0, 0.69444, 0.09597, 0, 0.76666],
    "65": [0, 0.68333, 0, 0, 0.74333],
    "66": [0, 0.68333, 0.10257, 0, 0.70389],
    "67": [0, 0.68333, 0.14528, 0, 0.71555],
    "68": [0, 0.68333, 0.09403, 0, 0.755],
    "69": [0, 0.68333, 0.12028, 0, 0.67833],
    "70": [0, 0.68333, 0.13305, 0, 0.65277],
    "71": [0, 0.68333, 0.08722, 0, 0.77361],
    "72": [0, 0.68333, 0.16389, 0, 0.74333],
    "73": [0, 0.68333, 0.15806, 0, 0.38555],
    "74": [0, 0.68333, 0.14028, 0, 0.525],
    "75": [0, 0.68333, 0.14528, 0, 0.76888],
    "76": [0, 0.68333, 0, 0, 0.62722],
    "77": [0, 0.68333, 0.16389, 0, 0.89666],
    "78": [0, 0.68333, 0.16389, 0, 0.74333],
    "79": [0, 0.68333, 0.09403, 0, 0.76666],
    "80": [0, 0.68333, 0.10257, 0, 0.67833],
    "81": [0.19444, 0.68333, 0.09403, 0, 0.76666],
    "82": [0, 0.68333, 0.03868, 0, 0.72944],
    "83": [0, 0.68333, 0.11972, 0, 0.56222],
    "84": [0, 0.68333, 0.13305, 0, 0.71555],
    "85": [0, 0.68333, 0.16389, 0, 0.74333],
    "86": [0, 0.68333, 0.18361, 0, 0.74333],
    "87": [0, 0.68333, 0.18361, 0, 0.99888],
    "88": [0, 0.68333, 0.15806, 0, 0.74333],
    "89": [0, 0.68333, 0.19383, 0, 0.74333],
    "90": [0, 0.68333, 0.14528, 0, 0.61333],
    "91": [0.25, 0.75, 0.1875, 0, 0.30667],
    "93": [0.25, 0.75, 0.10528, 0, 0.30667],
    "94": [0, 0.69444, 0.06646, 0, 0.51111],
    "95": [0.31, 0.12056, 0.09208, 0, 0.51111],
    "97": [0, 0.43056, 0.07671, 0, 0.51111],
    "98": [0, 0.69444, 0.06312, 0, 0.46],
    "99": [0, 0.43056, 0.05653, 0, 0.46],
    "100": [0, 0.69444, 0.10333, 0, 0.51111],
    "101": [0, 0.43056, 0.07514, 0, 0.46],
    "102": [0.19444, 0.69444, 0.21194, 0, 0.30667],
    "103": [0.19444, 0.43056, 0.08847, 0, 0.46],
    "104": [0, 0.69444, 0.07671, 0, 0.51111],
    "105": [0, 0.65536, 0.1019, 0, 0.30667],
    "106": [0.19444, 0.65536, 0.14467, 0, 0.30667],
    "107": [0, 0.69444, 0.10764, 0, 0.46],
    "108": [0, 0.69444, 0.10333, 0, 0.25555],
    "109": [0, 0.43056, 0.07671, 0, 0.81777],
    "110": [0, 0.43056, 0.07671, 0, 0.56222],
    "111": [0, 0.43056, 0.06312, 0, 0.51111],
    "112": [0.19444, 0.43056, 0.06312, 0, 0.51111],
    "113": [0.19444, 0.43056, 0.08847, 0, 0.46],
    "114": [0, 0.43056, 0.10764, 0, 0.42166],
    "115": [0, 0.43056, 0.08208, 0, 0.40889],
    "116": [0, 0.61508, 0.09486, 0, 0.33222],
    "117": [0, 0.43056, 0.07671, 0, 0.53666],
    "118": [0, 0.43056, 0.10764, 0, 0.46],
    "119": [0, 0.43056, 0.10764, 0, 0.66444],
    "120": [0, 0.43056, 0.12042, 0, 0.46389],
    "121": [0.19444, 0.43056, 0.08847, 0, 0.48555],
    "122": [0, 0.43056, 0.12292, 0, 0.40889],
    "126": [0.35, 0.31786, 0.11585, 0, 0.51111],
    "160": [0, 0, 0, 0, 0.25],
    "168": [0, 0.66786, 0.10474, 0, 0.51111],
    "176": [0, 0.69444, 0, 0, 0.83129],
    "184": [0.17014, 0, 0, 0, 0.46],
    "198": [0, 0.68333, 0.12028, 0, 0.88277],
    "216": [0.04861, 0.73194, 0.09403, 0, 0.76666],
    "223": [0.19444, 0.69444, 0.10514, 0, 0.53666],
    "230": [0, 0.43056, 0.07514, 0, 0.71555],
    "248": [0.09722, 0.52778, 0.09194, 0, 0.51111],
    "338": [0, 0.68333, 0.12028, 0, 0.98499],
    "339": [0, 0.43056, 0.07514, 0, 0.71555],
    "710": [0, 0.69444, 0.06646, 0, 0.51111],
    "711": [0, 0.62847, 0.08295, 0, 0.51111],
    "713": [0, 0.56167, 0.10333, 0, 0.51111],
    "714": [0, 0.69444, 0.09694, 0, 0.51111],
    "715": [0, 0.69444, 0, 0, 0.51111],
    "728": [0, 0.69444, 0.10806, 0, 0.51111],
    "729": [0, 0.66786, 0.11752, 0, 0.30667],
    "730": [0, 0.69444, 0, 0, 0.83129],
    "732": [0, 0.66786, 0.11585, 0, 0.51111],
    "733": [0, 0.69444, 0.1225, 0, 0.51111],
    "915": [0, 0.68333, 0.13305, 0, 0.62722],
    "916": [0, 0.68333, 0, 0, 0.81777],
    "920": [0, 0.68333, 0.09403, 0, 0.76666],
    "923": [0, 0.68333, 0, 0, 0.69222],
    "926": [0, 0.68333, 0.15294, 0, 0.66444],
    "928": [0, 0.68333, 0.16389, 0, 0.74333],
    "931": [0, 0.68333, 0.12028, 0, 0.71555],
    "933": [0, 0.68333, 0.11111, 0, 0.76666],
    "934": [0, 0.68333, 0.05986, 0, 0.71555],
    "936": [0, 0.68333, 0.11111, 0, 0.76666],
    "937": [0, 0.68333, 0.10257, 0, 0.71555],
    "8211": [0, 0.43056, 0.09208, 0, 0.51111],
    "8212": [0, 0.43056, 0.09208, 0, 1.02222],
    "8216": [0, 0.69444, 0.12417, 0, 0.30667],
    "8217": [0, 0.69444, 0.12417, 0, 0.30667],
    "8220": [0, 0.69444, 0.1685, 0, 0.51444],
    "8221": [0, 0.69444, 0.06961, 0, 0.51444],
    "8463": [0, 0.68889, 0, 0, 0.54028]
  },
  "Main-Regular": {
    "32": [0, 0, 0, 0, 0.25],
    "33": [0, 0.69444, 0, 0, 0.27778],
    "34": [0, 0.69444, 0, 0, 0.5],
    "35": [0.19444, 0.69444, 0, 0, 0.83334],
    "36": [0.05556, 0.75, 0, 0, 0.5],
    "37": [0.05556, 0.75, 0, 0, 0.83334],
    "38": [0, 0.69444, 0, 0, 0.77778],
    "39": [0, 0.69444, 0, 0, 0.27778],
    "40": [0.25, 0.75, 0, 0, 0.38889],
    "41": [0.25, 0.75, 0, 0, 0.38889],
    "42": [0, 0.75, 0, 0, 0.5],
    "43": [0.08333, 0.58333, 0, 0, 0.77778],
    "44": [0.19444, 0.10556, 0, 0, 0.27778],
    "45": [0, 0.43056, 0, 0, 0.33333],
    "46": [0, 0.10556, 0, 0, 0.27778],
    "47": [0.25, 0.75, 0, 0, 0.5],
    "48": [0, 0.64444, 0, 0, 0.5],
    "49": [0, 0.64444, 0, 0, 0.5],
    "50": [0, 0.64444, 0, 0, 0.5],
    "51": [0, 0.64444, 0, 0, 0.5],
    "52": [0, 0.64444, 0, 0, 0.5],
    "53": [0, 0.64444, 0, 0, 0.5],
    "54": [0, 0.64444, 0, 0, 0.5],
    "55": [0, 0.64444, 0, 0, 0.5],
    "56": [0, 0.64444, 0, 0, 0.5],
    "57": [0, 0.64444, 0, 0, 0.5],
    "58": [0, 0.43056, 0, 0, 0.27778],
    "59": [0.19444, 0.43056, 0, 0, 0.27778],
    "60": [0.0391, 0.5391, 0, 0, 0.77778],
    "61": [-0.13313, 0.36687, 0, 0, 0.77778],
    "62": [0.0391, 0.5391, 0, 0, 0.77778],
    "63": [0, 0.69444, 0, 0, 0.47222],
    "64": [0, 0.69444, 0, 0, 0.77778],
    "65": [0, 0.68333, 0, 0, 0.75],
    "66": [0, 0.68333, 0, 0, 0.70834],
    "67": [0, 0.68333, 0, 0, 0.72222],
    "68": [0, 0.68333, 0, 0, 0.76389],
    "69": [0, 0.68333, 0, 0, 0.68056],
    "70": [0, 0.68333, 0, 0, 0.65278],
    "71": [0, 0.68333, 0, 0, 0.78472],
    "72": [0, 0.68333, 0, 0, 0.75],
    "73": [0, 0.68333, 0, 0, 0.36111],
    "74": [0, 0.68333, 0, 0, 0.51389],
    "75": [0, 0.68333, 0, 0, 0.77778],
    "76": [0, 0.68333, 0, 0, 0.625],
    "77": [0, 0.68333, 0, 0, 0.91667],
    "78": [0, 0.68333, 0, 0, 0.75],
    "79": [0, 0.68333, 0, 0, 0.77778],
    "80": [0, 0.68333, 0, 0, 0.68056],
    "81": [0.19444, 0.68333, 0, 0, 0.77778],
    "82": [0, 0.68333, 0, 0, 0.73611],
    "83": [0, 0.68333, 0, 0, 0.55556],
    "84": [0, 0.68333, 0, 0, 0.72222],
    "85": [0, 0.68333, 0, 0, 0.75],
    "86": [0, 0.68333, 0.01389, 0, 0.75],
    "87": [0, 0.68333, 0.01389, 0, 1.02778],
    "88": [0, 0.68333, 0, 0, 0.75],
    "89": [0, 0.68333, 0.025, 0, 0.75],
    "90": [0, 0.68333, 0, 0, 0.61111],
    "91": [0.25, 0.75, 0, 0, 0.27778],
    "92": [0.25, 0.75, 0, 0, 0.5],
    "93": [0.25, 0.75, 0, 0, 0.27778],
    "94": [0, 0.69444, 0, 0, 0.5],
    "95": [0.31, 0.12056, 0.02778, 0, 0.5],
    "97": [0, 0.43056, 0, 0, 0.5],
    "98": [0, 0.69444, 0, 0, 0.55556],
    "99": [0, 0.43056, 0, 0, 0.44445],
    "100": [0, 0.69444, 0, 0, 0.55556],
    "101": [0, 0.43056, 0, 0, 0.44445],
    "102": [0, 0.69444, 0.07778, 0, 0.30556],
    "103": [0.19444, 0.43056, 0.01389, 0, 0.5],
    "104": [0, 0.69444, 0, 0, 0.55556],
    "105": [0, 0.66786, 0, 0, 0.27778],
    "106": [0.19444, 0.66786, 0, 0, 0.30556],
    "107": [0, 0.69444, 0, 0, 0.52778],
    "108": [0, 0.69444, 0, 0, 0.27778],
    "109": [0, 0.43056, 0, 0, 0.83334],
    "110": [0, 0.43056, 0, 0, 0.55556],
    "111": [0, 0.43056, 0, 0, 0.5],
    "112": [0.19444, 0.43056, 0, 0, 0.55556],
    "113": [0.19444, 0.43056, 0, 0, 0.52778],
    "114": [0, 0.43056, 0, 0, 0.39167],
    "115": [0, 0.43056, 0, 0, 0.39445],
    "116": [0, 0.61508, 0, 0, 0.38889],
    "117": [0, 0.43056, 0, 0, 0.55556],
    "118": [0, 0.43056, 0.01389, 0, 0.52778],
    "119": [0, 0.43056, 0.01389, 0, 0.72222],
    "120": [0, 0.43056, 0, 0, 0.52778],
    "121": [0.19444, 0.43056, 0.01389, 0, 0.52778],
    "122": [0, 0.43056, 0, 0, 0.44445],
    "123": [0.25, 0.75, 0, 0, 0.5],
    "124": [0.25, 0.75, 0, 0, 0.27778],
    "125": [0.25, 0.75, 0, 0, 0.5],
    "126": [0.35, 0.31786, 0, 0, 0.5],
    "160": [0, 0, 0, 0, 0.25],
    "163": [0, 0.69444, 0, 0, 0.76909],
    "167": [0.19444, 0.69444, 0, 0, 0.44445],
    "168": [0, 0.66786, 0, 0, 0.5],
    "172": [0, 0.43056, 0, 0, 0.66667],
    "176": [0, 0.69444, 0, 0, 0.75],
    "177": [0.08333, 0.58333, 0, 0, 0.77778],
    "182": [0.19444, 0.69444, 0, 0, 0.61111],
    "184": [0.17014, 0, 0, 0, 0.44445],
    "198": [0, 0.68333, 0, 0, 0.90278],
    "215": [0.08333, 0.58333, 0, 0, 0.77778],
    "216": [0.04861, 0.73194, 0, 0, 0.77778],
    "223": [0, 0.69444, 0, 0, 0.5],
    "230": [0, 0.43056, 0, 0, 0.72222],
    "247": [0.08333, 0.58333, 0, 0, 0.77778],
    "248": [0.09722, 0.52778, 0, 0, 0.5],
    "305": [0, 0.43056, 0, 0, 0.27778],
    "338": [0, 0.68333, 0, 0, 1.01389],
    "339": [0, 0.43056, 0, 0, 0.77778],
    "567": [0.19444, 0.43056, 0, 0, 0.30556],
    "710": [0, 0.69444, 0, 0, 0.5],
    "711": [0, 0.62847, 0, 0, 0.5],
    "713": [0, 0.56778, 0, 0, 0.5],
    "714": [0, 0.69444, 0, 0, 0.5],
    "715": [0, 0.69444, 0, 0, 0.5],
    "728": [0, 0.69444, 0, 0, 0.5],
    "729": [0, 0.66786, 0, 0, 0.27778],
    "730": [0, 0.69444, 0, 0, 0.75],
    "732": [0, 0.66786, 0, 0, 0.5],
    "733": [0, 0.69444, 0, 0, 0.5],
    "915": [0, 0.68333, 0, 0, 0.625],
    "916": [0, 0.68333, 0, 0, 0.83334],
    "920": [0, 0.68333, 0, 0, 0.77778],
    "923": [0, 0.68333, 0, 0, 0.69445],
    "926": [0, 0.68333, 0, 0, 0.66667],
    "928": [0, 0.68333, 0, 0, 0.75],
    "931": [0, 0.68333, 0, 0, 0.72222],
    "933": [0, 0.68333, 0, 0, 0.77778],
    "934": [0, 0.68333, 0, 0, 0.72222],
    "936": [0, 0.68333, 0, 0, 0.77778],
    "937": [0, 0.68333, 0, 0, 0.72222],
    "8211": [0, 0.43056, 0.02778, 0, 0.5],
    "8212": [0, 0.43056, 0.02778, 0, 1],
    "8216": [0, 0.69444, 0, 0, 0.27778],
    "8217": [0, 0.69444, 0, 0, 0.27778],
    "8220": [0, 0.69444, 0, 0, 0.5],
    "8221": [0, 0.69444, 0, 0, 0.5],
    "8224": [0.19444, 0.69444, 0, 0, 0.44445],
    "8225": [0.19444, 0.69444, 0, 0, 0.44445],
    "8230": [0, 0.123, 0, 0, 1.172],
    "8242": [0, 0.55556, 0, 0, 0.275],
    "8407": [0, 0.71444, 0.15382, 0, 0.5],
    "8463": [0, 0.68889, 0, 0, 0.54028],
    "8465": [0, 0.69444, 0, 0, 0.72222],
    "8467": [0, 0.69444, 0, 0.11111, 0.41667],
    "8472": [0.19444, 0.43056, 0, 0.11111, 0.63646],
    "8476": [0, 0.69444, 0, 0, 0.72222],
    "8501": [0, 0.69444, 0, 0, 0.61111],
    "8592": [-0.13313, 0.36687, 0, 0, 1],
    "8593": [0.19444, 0.69444, 0, 0, 0.5],
    "8594": [-0.13313, 0.36687, 0, 0, 1],
    "8595": [0.19444, 0.69444, 0, 0, 0.5],
    "8596": [-0.13313, 0.36687, 0, 0, 1],
    "8597": [0.25, 0.75, 0, 0, 0.5],
    "8598": [0.19444, 0.69444, 0, 0, 1],
    "8599": [0.19444, 0.69444, 0, 0, 1],
    "8600": [0.19444, 0.69444, 0, 0, 1],
    "8601": [0.19444, 0.69444, 0, 0, 1],
    "8614": [0.011, 0.511, 0, 0, 1],
    "8617": [0.011, 0.511, 0, 0, 1.126],
    "8618": [0.011, 0.511, 0, 0, 1.126],
    "8636": [-0.13313, 0.36687, 0, 0, 1],
    "8637": [-0.13313, 0.36687, 0, 0, 1],
    "8640": [-0.13313, 0.36687, 0, 0, 1],
    "8641": [-0.13313, 0.36687, 0, 0, 1],
    "8652": [0.011, 0.671, 0, 0, 1],
    "8656": [-0.13313, 0.36687, 0, 0, 1],
    "8657": [0.19444, 0.69444, 0, 0, 0.61111],
    "8658": [-0.13313, 0.36687, 0, 0, 1],
    "8659": [0.19444, 0.69444, 0, 0, 0.61111],
    "8660": [-0.13313, 0.36687, 0, 0, 1],
    "8661": [0.25, 0.75, 0, 0, 0.61111],
    "8704": [0, 0.69444, 0, 0, 0.55556],
    "8706": [0, 0.69444, 0.05556, 0.08334, 0.5309],
    "8707": [0, 0.69444, 0, 0, 0.55556],
    "8709": [0.05556, 0.75, 0, 0, 0.5],
    "8711": [0, 0.68333, 0, 0, 0.83334],
    "8712": [0.0391, 0.5391, 0, 0, 0.66667],
    "8715": [0.0391, 0.5391, 0, 0, 0.66667],
    "8722": [0.08333, 0.58333, 0, 0, 0.77778],
    "8723": [0.08333, 0.58333, 0, 0, 0.77778],
    "8725": [0.25, 0.75, 0, 0, 0.5],
    "8726": [0.25, 0.75, 0, 0, 0.5],
    "8727": [-0.03472, 0.46528, 0, 0, 0.5],
    "8728": [-0.05555, 0.44445, 0, 0, 0.5],
    "8729": [-0.05555, 0.44445, 0, 0, 0.5],
    "8730": [0.2, 0.8, 0, 0, 0.83334],
    "8733": [0, 0.43056, 0, 0, 0.77778],
    "8734": [0, 0.43056, 0, 0, 1],
    "8736": [0, 0.69224, 0, 0, 0.72222],
    "8739": [0.25, 0.75, 0, 0, 0.27778],
    "8741": [0.25, 0.75, 0, 0, 0.5],
    "8743": [0, 0.55556, 0, 0, 0.66667],
    "8744": [0, 0.55556, 0, 0, 0.66667],
    "8745": [0, 0.55556, 0, 0, 0.66667],
    "8746": [0, 0.55556, 0, 0, 0.66667],
    "8747": [0.19444, 0.69444, 0.11111, 0, 0.41667],
    "8764": [-0.13313, 0.36687, 0, 0, 0.77778],
    "8768": [0.19444, 0.69444, 0, 0, 0.27778],
    "8771": [-0.03625, 0.46375, 0, 0, 0.77778],
    "8773": [-0.022, 0.589, 0, 0, 0.778],
    "8776": [-0.01688, 0.48312, 0, 0, 0.77778],
    "8781": [-0.03625, 0.46375, 0, 0, 0.77778],
    "8784": [-0.133, 0.673, 0, 0, 0.778],
    "8801": [-0.03625, 0.46375, 0, 0, 0.77778],
    "8804": [0.13597, 0.63597, 0, 0, 0.77778],
    "8805": [0.13597, 0.63597, 0, 0, 0.77778],
    "8810": [0.0391, 0.5391, 0, 0, 1],
    "8811": [0.0391, 0.5391, 0, 0, 1],
    "8826": [0.0391, 0.5391, 0, 0, 0.77778],
    "8827": [0.0391, 0.5391, 0, 0, 0.77778],
    "8834": [0.0391, 0.5391, 0, 0, 0.77778],
    "8835": [0.0391, 0.5391, 0, 0, 0.77778],
    "8838": [0.13597, 0.63597, 0, 0, 0.77778],
    "8839": [0.13597, 0.63597, 0, 0, 0.77778],
    "8846": [0, 0.55556, 0, 0, 0.66667],
    "8849": [0.13597, 0.63597, 0, 0, 0.77778],
    "8850": [0.13597, 0.63597, 0, 0, 0.77778],
    "8851": [0, 0.55556, 0, 0, 0.66667],
    "8852": [0, 0.55556, 0, 0, 0.66667],
    "8853": [0.08333, 0.58333, 0, 0, 0.77778],
    "8854": [0.08333, 0.58333, 0, 0, 0.77778],
    "8855": [0.08333, 0.58333, 0, 0, 0.77778],
    "8856": [0.08333, 0.58333, 0, 0, 0.77778],
    "8857": [0.08333, 0.58333, 0, 0, 0.77778],
    "8866": [0, 0.69444, 0, 0, 0.61111],
    "8867": [0, 0.69444, 0, 0, 0.61111],
    "8868": [0, 0.69444, 0, 0, 0.77778],
    "8869": [0, 0.69444, 0, 0, 0.77778],
    "8872": [0.249, 0.75, 0, 0, 0.867],
    "8900": [-0.05555, 0.44445, 0, 0, 0.5],
    "8901": [-0.05555, 0.44445, 0, 0, 0.27778],
    "8902": [-0.03472, 0.46528, 0, 0, 0.5],
    "8904": [5e-3, 0.505, 0, 0, 0.9],
    "8942": [0.03, 0.903, 0, 0, 0.278],
    "8943": [-0.19, 0.313, 0, 0, 1.172],
    "8945": [-0.1, 0.823, 0, 0, 1.282],
    "8968": [0.25, 0.75, 0, 0, 0.44445],
    "8969": [0.25, 0.75, 0, 0, 0.44445],
    "8970": [0.25, 0.75, 0, 0, 0.44445],
    "8971": [0.25, 0.75, 0, 0, 0.44445],
    "8994": [-0.14236, 0.35764, 0, 0, 1],
    "8995": [-0.14236, 0.35764, 0, 0, 1],
    "9136": [0.244, 0.744, 0, 0, 0.412],
    "9137": [0.244, 0.745, 0, 0, 0.412],
    "9651": [0.19444, 0.69444, 0, 0, 0.88889],
    "9657": [-0.03472, 0.46528, 0, 0, 0.5],
    "9661": [0.19444, 0.69444, 0, 0, 0.88889],
    "9667": [-0.03472, 0.46528, 0, 0, 0.5],
    "9711": [0.19444, 0.69444, 0, 0, 1],
    "9824": [0.12963, 0.69444, 0, 0, 0.77778],
    "9825": [0.12963, 0.69444, 0, 0, 0.77778],
    "9826": [0.12963, 0.69444, 0, 0, 0.77778],
    "9827": [0.12963, 0.69444, 0, 0, 0.77778],
    "9837": [0, 0.75, 0, 0, 0.38889],
    "9838": [0.19444, 0.69444, 0, 0, 0.38889],
    "9839": [0.19444, 0.69444, 0, 0, 0.38889],
    "10216": [0.25, 0.75, 0, 0, 0.38889],
    "10217": [0.25, 0.75, 0, 0, 0.38889],
    "10222": [0.244, 0.744, 0, 0, 0.412],
    "10223": [0.244, 0.745, 0, 0, 0.412],
    "10229": [0.011, 0.511, 0, 0, 1.609],
    "10230": [0.011, 0.511, 0, 0, 1.638],
    "10231": [0.011, 0.511, 0, 0, 1.859],
    "10232": [0.024, 0.525, 0, 0, 1.609],
    "10233": [0.024, 0.525, 0, 0, 1.638],
    "10234": [0.024, 0.525, 0, 0, 1.858],
    "10236": [0.011, 0.511, 0, 0, 1.638],
    "10815": [0, 0.68333, 0, 0, 0.75],
    "10927": [0.13597, 0.63597, 0, 0, 0.77778],
    "10928": [0.13597, 0.63597, 0, 0, 0.77778],
    "57376": [0.19444, 0.69444, 0, 0, 0]
  },
  "Math-BoldItalic": {
    "32": [0, 0, 0, 0, 0.25],
    "48": [0, 0.44444, 0, 0, 0.575],
    "49": [0, 0.44444, 0, 0, 0.575],
    "50": [0, 0.44444, 0, 0, 0.575],
    "51": [0.19444, 0.44444, 0, 0, 0.575],
    "52": [0.19444, 0.44444, 0, 0, 0.575],
    "53": [0.19444, 0.44444, 0, 0, 0.575],
    "54": [0, 0.64444, 0, 0, 0.575],
    "55": [0.19444, 0.44444, 0, 0, 0.575],
    "56": [0, 0.64444, 0, 0, 0.575],
    "57": [0.19444, 0.44444, 0, 0, 0.575],
    "65": [0, 0.68611, 0, 0, 0.86944],
    "66": [0, 0.68611, 0.04835, 0, 0.8664],
    "67": [0, 0.68611, 0.06979, 0, 0.81694],
    "68": [0, 0.68611, 0.03194, 0, 0.93812],
    "69": [0, 0.68611, 0.05451, 0, 0.81007],
    "70": [0, 0.68611, 0.15972, 0, 0.68889],
    "71": [0, 0.68611, 0, 0, 0.88673],
    "72": [0, 0.68611, 0.08229, 0, 0.98229],
    "73": [0, 0.68611, 0.07778, 0, 0.51111],
    "74": [0, 0.68611, 0.10069, 0, 0.63125],
    "75": [0, 0.68611, 0.06979, 0, 0.97118],
    "76": [0, 0.68611, 0, 0, 0.75555],
    "77": [0, 0.68611, 0.11424, 0, 1.14201],
    "78": [0, 0.68611, 0.11424, 0, 0.95034],
    "79": [0, 0.68611, 0.03194, 0, 0.83666],
    "80": [0, 0.68611, 0.15972, 0, 0.72309],
    "81": [0.19444, 0.68611, 0, 0, 0.86861],
    "82": [0, 0.68611, 421e-5, 0, 0.87235],
    "83": [0, 0.68611, 0.05382, 0, 0.69271],
    "84": [0, 0.68611, 0.15972, 0, 0.63663],
    "85": [0, 0.68611, 0.11424, 0, 0.80027],
    "86": [0, 0.68611, 0.25555, 0, 0.67778],
    "87": [0, 0.68611, 0.15972, 0, 1.09305],
    "88": [0, 0.68611, 0.07778, 0, 0.94722],
    "89": [0, 0.68611, 0.25555, 0, 0.67458],
    "90": [0, 0.68611, 0.06979, 0, 0.77257],
    "97": [0, 0.44444, 0, 0, 0.63287],
    "98": [0, 0.69444, 0, 0, 0.52083],
    "99": [0, 0.44444, 0, 0, 0.51342],
    "100": [0, 0.69444, 0, 0, 0.60972],
    "101": [0, 0.44444, 0, 0, 0.55361],
    "102": [0.19444, 0.69444, 0.11042, 0, 0.56806],
    "103": [0.19444, 0.44444, 0.03704, 0, 0.5449],
    "104": [0, 0.69444, 0, 0, 0.66759],
    "105": [0, 0.69326, 0, 0, 0.4048],
    "106": [0.19444, 0.69326, 0.0622, 0, 0.47083],
    "107": [0, 0.69444, 0.01852, 0, 0.6037],
    "108": [0, 0.69444, 88e-4, 0, 0.34815],
    "109": [0, 0.44444, 0, 0, 1.0324],
    "110": [0, 0.44444, 0, 0, 0.71296],
    "111": [0, 0.44444, 0, 0, 0.58472],
    "112": [0.19444, 0.44444, 0, 0, 0.60092],
    "113": [0.19444, 0.44444, 0.03704, 0, 0.54213],
    "114": [0, 0.44444, 0.03194, 0, 0.5287],
    "115": [0, 0.44444, 0, 0, 0.53125],
    "116": [0, 0.63492, 0, 0, 0.41528],
    "117": [0, 0.44444, 0, 0, 0.68102],
    "118": [0, 0.44444, 0.03704, 0, 0.56666],
    "119": [0, 0.44444, 0.02778, 0, 0.83148],
    "120": [0, 0.44444, 0, 0, 0.65903],
    "121": [0.19444, 0.44444, 0.03704, 0, 0.59028],
    "122": [0, 0.44444, 0.04213, 0, 0.55509],
    "160": [0, 0, 0, 0, 0.25],
    "915": [0, 0.68611, 0.15972, 0, 0.65694],
    "916": [0, 0.68611, 0, 0, 0.95833],
    "920": [0, 0.68611, 0.03194, 0, 0.86722],
    "923": [0, 0.68611, 0, 0, 0.80555],
    "926": [0, 0.68611, 0.07458, 0, 0.84125],
    "928": [0, 0.68611, 0.08229, 0, 0.98229],
    "931": [0, 0.68611, 0.05451, 0, 0.88507],
    "933": [0, 0.68611, 0.15972, 0, 0.67083],
    "934": [0, 0.68611, 0, 0, 0.76666],
    "936": [0, 0.68611, 0.11653, 0, 0.71402],
    "937": [0, 0.68611, 0.04835, 0, 0.8789],
    "945": [0, 0.44444, 0, 0, 0.76064],
    "946": [0.19444, 0.69444, 0.03403, 0, 0.65972],
    "947": [0.19444, 0.44444, 0.06389, 0, 0.59003],
    "948": [0, 0.69444, 0.03819, 0, 0.52222],
    "949": [0, 0.44444, 0, 0, 0.52882],
    "950": [0.19444, 0.69444, 0.06215, 0, 0.50833],
    "951": [0.19444, 0.44444, 0.03704, 0, 0.6],
    "952": [0, 0.69444, 0.03194, 0, 0.5618],
    "953": [0, 0.44444, 0, 0, 0.41204],
    "954": [0, 0.44444, 0, 0, 0.66759],
    "955": [0, 0.69444, 0, 0, 0.67083],
    "956": [0.19444, 0.44444, 0, 0, 0.70787],
    "957": [0, 0.44444, 0.06898, 0, 0.57685],
    "958": [0.19444, 0.69444, 0.03021, 0, 0.50833],
    "959": [0, 0.44444, 0, 0, 0.58472],
    "960": [0, 0.44444, 0.03704, 0, 0.68241],
    "961": [0.19444, 0.44444, 0, 0, 0.6118],
    "962": [0.09722, 0.44444, 0.07917, 0, 0.42361],
    "963": [0, 0.44444, 0.03704, 0, 0.68588],
    "964": [0, 0.44444, 0.13472, 0, 0.52083],
    "965": [0, 0.44444, 0.03704, 0, 0.63055],
    "966": [0.19444, 0.44444, 0, 0, 0.74722],
    "967": [0.19444, 0.44444, 0, 0, 0.71805],
    "968": [0.19444, 0.69444, 0.03704, 0, 0.75833],
    "969": [0, 0.44444, 0.03704, 0, 0.71782],
    "977": [0, 0.69444, 0, 0, 0.69155],
    "981": [0.19444, 0.69444, 0, 0, 0.7125],
    "982": [0, 0.44444, 0.03194, 0, 0.975],
    "1009": [0.19444, 0.44444, 0, 0, 0.6118],
    "1013": [0, 0.44444, 0, 0, 0.48333],
    "57649": [0, 0.44444, 0, 0, 0.39352],
    "57911": [0.19444, 0.44444, 0, 0, 0.43889]
  },
  "Math-Italic": {
    "32": [0, 0, 0, 0, 0.25],
    "48": [0, 0.43056, 0, 0, 0.5],
    "49": [0, 0.43056, 0, 0, 0.5],
    "50": [0, 0.43056, 0, 0, 0.5],
    "51": [0.19444, 0.43056, 0, 0, 0.5],
    "52": [0.19444, 0.43056, 0, 0, 0.5],
    "53": [0.19444, 0.43056, 0, 0, 0.5],
    "54": [0, 0.64444, 0, 0, 0.5],
    "55": [0.19444, 0.43056, 0, 0, 0.5],
    "56": [0, 0.64444, 0, 0, 0.5],
    "57": [0.19444, 0.43056, 0, 0, 0.5],
    "65": [0, 0.68333, 0, 0.13889, 0.75],
    "66": [0, 0.68333, 0.05017, 0.08334, 0.75851],
    "67": [0, 0.68333, 0.07153, 0.08334, 0.71472],
    "68": [0, 0.68333, 0.02778, 0.05556, 0.82792],
    "69": [0, 0.68333, 0.05764, 0.08334, 0.7382],
    "70": [0, 0.68333, 0.13889, 0.08334, 0.64306],
    "71": [0, 0.68333, 0, 0.08334, 0.78625],
    "72": [0, 0.68333, 0.08125, 0.05556, 0.83125],
    "73": [0, 0.68333, 0.07847, 0.11111, 0.43958],
    "74": [0, 0.68333, 0.09618, 0.16667, 0.55451],
    "75": [0, 0.68333, 0.07153, 0.05556, 0.84931],
    "76": [0, 0.68333, 0, 0.02778, 0.68056],
    "77": [0, 0.68333, 0.10903, 0.08334, 0.97014],
    "78": [0, 0.68333, 0.10903, 0.08334, 0.80347],
    "79": [0, 0.68333, 0.02778, 0.08334, 0.76278],
    "80": [0, 0.68333, 0.13889, 0.08334, 0.64201],
    "81": [0.19444, 0.68333, 0, 0.08334, 0.79056],
    "82": [0, 0.68333, 773e-5, 0.08334, 0.75929],
    "83": [0, 0.68333, 0.05764, 0.08334, 0.6132],
    "84": [0, 0.68333, 0.13889, 0.08334, 0.58438],
    "85": [0, 0.68333, 0.10903, 0.02778, 0.68278],
    "86": [0, 0.68333, 0.22222, 0, 0.58333],
    "87": [0, 0.68333, 0.13889, 0, 0.94445],
    "88": [0, 0.68333, 0.07847, 0.08334, 0.82847],
    "89": [0, 0.68333, 0.22222, 0, 0.58056],
    "90": [0, 0.68333, 0.07153, 0.08334, 0.68264],
    "97": [0, 0.43056, 0, 0, 0.52859],
    "98": [0, 0.69444, 0, 0, 0.42917],
    "99": [0, 0.43056, 0, 0.05556, 0.43276],
    "100": [0, 0.69444, 0, 0.16667, 0.52049],
    "101": [0, 0.43056, 0, 0.05556, 0.46563],
    "102": [0.19444, 0.69444, 0.10764, 0.16667, 0.48959],
    "103": [0.19444, 0.43056, 0.03588, 0.02778, 0.47697],
    "104": [0, 0.69444, 0, 0, 0.57616],
    "105": [0, 0.65952, 0, 0, 0.34451],
    "106": [0.19444, 0.65952, 0.05724, 0, 0.41181],
    "107": [0, 0.69444, 0.03148, 0, 0.5206],
    "108": [0, 0.69444, 0.01968, 0.08334, 0.29838],
    "109": [0, 0.43056, 0, 0, 0.87801],
    "110": [0, 0.43056, 0, 0, 0.60023],
    "111": [0, 0.43056, 0, 0.05556, 0.48472],
    "112": [0.19444, 0.43056, 0, 0.08334, 0.50313],
    "113": [0.19444, 0.43056, 0.03588, 0.08334, 0.44641],
    "114": [0, 0.43056, 0.02778, 0.05556, 0.45116],
    "115": [0, 0.43056, 0, 0.05556, 0.46875],
    "116": [0, 0.61508, 0, 0.08334, 0.36111],
    "117": [0, 0.43056, 0, 0.02778, 0.57246],
    "118": [0, 0.43056, 0.03588, 0.02778, 0.48472],
    "119": [0, 0.43056, 0.02691, 0.08334, 0.71592],
    "120": [0, 0.43056, 0, 0.02778, 0.57153],
    "121": [0.19444, 0.43056, 0.03588, 0.05556, 0.49028],
    "122": [0, 0.43056, 0.04398, 0.05556, 0.46505],
    "160": [0, 0, 0, 0, 0.25],
    "915": [0, 0.68333, 0.13889, 0.08334, 0.61528],
    "916": [0, 0.68333, 0, 0.16667, 0.83334],
    "920": [0, 0.68333, 0.02778, 0.08334, 0.76278],
    "923": [0, 0.68333, 0, 0.16667, 0.69445],
    "926": [0, 0.68333, 0.07569, 0.08334, 0.74236],
    "928": [0, 0.68333, 0.08125, 0.05556, 0.83125],
    "931": [0, 0.68333, 0.05764, 0.08334, 0.77986],
    "933": [0, 0.68333, 0.13889, 0.05556, 0.58333],
    "934": [0, 0.68333, 0, 0.08334, 0.66667],
    "936": [0, 0.68333, 0.11, 0.05556, 0.61222],
    "937": [0, 0.68333, 0.05017, 0.08334, 0.7724],
    "945": [0, 0.43056, 37e-4, 0.02778, 0.6397],
    "946": [0.19444, 0.69444, 0.05278, 0.08334, 0.56563],
    "947": [0.19444, 0.43056, 0.05556, 0, 0.51773],
    "948": [0, 0.69444, 0.03785, 0.05556, 0.44444],
    "949": [0, 0.43056, 0, 0.08334, 0.46632],
    "950": [0.19444, 0.69444, 0.07378, 0.08334, 0.4375],
    "951": [0.19444, 0.43056, 0.03588, 0.05556, 0.49653],
    "952": [0, 0.69444, 0.02778, 0.08334, 0.46944],
    "953": [0, 0.43056, 0, 0.05556, 0.35394],
    "954": [0, 0.43056, 0, 0, 0.57616],
    "955": [0, 0.69444, 0, 0, 0.58334],
    "956": [0.19444, 0.43056, 0, 0.02778, 0.60255],
    "957": [0, 0.43056, 0.06366, 0.02778, 0.49398],
    "958": [0.19444, 0.69444, 0.04601, 0.11111, 0.4375],
    "959": [0, 0.43056, 0, 0.05556, 0.48472],
    "960": [0, 0.43056, 0.03588, 0, 0.57003],
    "961": [0.19444, 0.43056, 0, 0.08334, 0.51702],
    "962": [0.09722, 0.43056, 0.07986, 0.08334, 0.36285],
    "963": [0, 0.43056, 0.03588, 0, 0.57141],
    "964": [0, 0.43056, 0.1132, 0.02778, 0.43715],
    "965": [0, 0.43056, 0.03588, 0.02778, 0.54028],
    "966": [0.19444, 0.43056, 0, 0.08334, 0.65417],
    "967": [0.19444, 0.43056, 0, 0.05556, 0.62569],
    "968": [0.19444, 0.69444, 0.03588, 0.11111, 0.65139],
    "969": [0, 0.43056, 0.03588, 0, 0.62245],
    "977": [0, 0.69444, 0, 0.08334, 0.59144],
    "981": [0.19444, 0.69444, 0, 0.08334, 0.59583],
    "982": [0, 0.43056, 0.02778, 0, 0.82813],
    "1009": [0.19444, 0.43056, 0, 0.08334, 0.51702],
    "1013": [0, 0.43056, 0, 0.05556, 0.4059],
    "57649": [0, 0.43056, 0, 0.02778, 0.32246],
    "57911": [0.19444, 0.43056, 0, 0.08334, 0.38403]
  },
  "SansSerif-Bold": {
    "32": [0, 0, 0, 0, 0.25],
    "33": [0, 0.69444, 0, 0, 0.36667],
    "34": [0, 0.69444, 0, 0, 0.55834],
    "35": [0.19444, 0.69444, 0, 0, 0.91667],
    "36": [0.05556, 0.75, 0, 0, 0.55],
    "37": [0.05556, 0.75, 0, 0, 1.02912],
    "38": [0, 0.69444, 0, 0, 0.83056],
    "39": [0, 0.69444, 0, 0, 0.30556],
    "40": [0.25, 0.75, 0, 0, 0.42778],
    "41": [0.25, 0.75, 0, 0, 0.42778],
    "42": [0, 0.75, 0, 0, 0.55],
    "43": [0.11667, 0.61667, 0, 0, 0.85556],
    "44": [0.10556, 0.13056, 0, 0, 0.30556],
    "45": [0, 0.45833, 0, 0, 0.36667],
    "46": [0, 0.13056, 0, 0, 0.30556],
    "47": [0.25, 0.75, 0, 0, 0.55],
    "48": [0, 0.69444, 0, 0, 0.55],
    "49": [0, 0.69444, 0, 0, 0.55],
    "50": [0, 0.69444, 0, 0, 0.55],
    "51": [0, 0.69444, 0, 0, 0.55],
    "52": [0, 0.69444, 0, 0, 0.55],
    "53": [0, 0.69444, 0, 0, 0.55],
    "54": [0, 0.69444, 0, 0, 0.55],
    "55": [0, 0.69444, 0, 0, 0.55],
    "56": [0, 0.69444, 0, 0, 0.55],
    "57": [0, 0.69444, 0, 0, 0.55],
    "58": [0, 0.45833, 0, 0, 0.30556],
    "59": [0.10556, 0.45833, 0, 0, 0.30556],
    "61": [-0.09375, 0.40625, 0, 0, 0.85556],
    "63": [0, 0.69444, 0, 0, 0.51945],
    "64": [0, 0.69444, 0, 0, 0.73334],
    "65": [0, 0.69444, 0, 0, 0.73334],
    "66": [0, 0.69444, 0, 0, 0.73334],
    "67": [0, 0.69444, 0, 0, 0.70278],
    "68": [0, 0.69444, 0, 0, 0.79445],
    "69": [0, 0.69444, 0, 0, 0.64167],
    "70": [0, 0.69444, 0, 0, 0.61111],
    "71": [0, 0.69444, 0, 0, 0.73334],
    "72": [0, 0.69444, 0, 0, 0.79445],
    "73": [0, 0.69444, 0, 0, 0.33056],
    "74": [0, 0.69444, 0, 0, 0.51945],
    "75": [0, 0.69444, 0, 0, 0.76389],
    "76": [0, 0.69444, 0, 0, 0.58056],
    "77": [0, 0.69444, 0, 0, 0.97778],
    "78": [0, 0.69444, 0, 0, 0.79445],
    "79": [0, 0.69444, 0, 0, 0.79445],
    "80": [0, 0.69444, 0, 0, 0.70278],
    "81": [0.10556, 0.69444, 0, 0, 0.79445],
    "82": [0, 0.69444, 0, 0, 0.70278],
    "83": [0, 0.69444, 0, 0, 0.61111],
    "84": [0, 0.69444, 0, 0, 0.73334],
    "85": [0, 0.69444, 0, 0, 0.76389],
    "86": [0, 0.69444, 0.01528, 0, 0.73334],
    "87": [0, 0.69444, 0.01528, 0, 1.03889],
    "88": [0, 0.69444, 0, 0, 0.73334],
    "89": [0, 0.69444, 0.0275, 0, 0.73334],
    "90": [0, 0.69444, 0, 0, 0.67223],
    "91": [0.25, 0.75, 0, 0, 0.34306],
    "93": [0.25, 0.75, 0, 0, 0.34306],
    "94": [0, 0.69444, 0, 0, 0.55],
    "95": [0.35, 0.10833, 0.03056, 0, 0.55],
    "97": [0, 0.45833, 0, 0, 0.525],
    "98": [0, 0.69444, 0, 0, 0.56111],
    "99": [0, 0.45833, 0, 0, 0.48889],
    "100": [0, 0.69444, 0, 0, 0.56111],
    "101": [0, 0.45833, 0, 0, 0.51111],
    "102": [0, 0.69444, 0.07639, 0, 0.33611],
    "103": [0.19444, 0.45833, 0.01528, 0, 0.55],
    "104": [0, 0.69444, 0, 0, 0.56111],
    "105": [0, 0.69444, 0, 0, 0.25556],
    "106": [0.19444, 0.69444, 0, 0, 0.28611],
    "107": [0, 0.69444, 0, 0, 0.53056],
    "108": [0, 0.69444, 0, 0, 0.25556],
    "109": [0, 0.45833, 0, 0, 0.86667],
    "110": [0, 0.45833, 0, 0, 0.56111],
    "111": [0, 0.45833, 0, 0, 0.55],
    "112": [0.19444, 0.45833, 0, 0, 0.56111],
    "113": [0.19444, 0.45833, 0, 0, 0.56111],
    "114": [0, 0.45833, 0.01528, 0, 0.37222],
    "115": [0, 0.45833, 0, 0, 0.42167],
    "116": [0, 0.58929, 0, 0, 0.40417],
    "117": [0, 0.45833, 0, 0, 0.56111],
    "118": [0, 0.45833, 0.01528, 0, 0.5],
    "119": [0, 0.45833, 0.01528, 0, 0.74445],
    "120": [0, 0.45833, 0, 0, 0.5],
    "121": [0.19444, 0.45833, 0.01528, 0, 0.5],
    "122": [0, 0.45833, 0, 0, 0.47639],
    "126": [0.35, 0.34444, 0, 0, 0.55],
    "160": [0, 0, 0, 0, 0.25],
    "168": [0, 0.69444, 0, 0, 0.55],
    "176": [0, 0.69444, 0, 0, 0.73334],
    "180": [0, 0.69444, 0, 0, 0.55],
    "184": [0.17014, 0, 0, 0, 0.48889],
    "305": [0, 0.45833, 0, 0, 0.25556],
    "567": [0.19444, 0.45833, 0, 0, 0.28611],
    "710": [0, 0.69444, 0, 0, 0.55],
    "711": [0, 0.63542, 0, 0, 0.55],
    "713": [0, 0.63778, 0, 0, 0.55],
    "728": [0, 0.69444, 0, 0, 0.55],
    "729": [0, 0.69444, 0, 0, 0.30556],
    "730": [0, 0.69444, 0, 0, 0.73334],
    "732": [0, 0.69444, 0, 0, 0.55],
    "733": [0, 0.69444, 0, 0, 0.55],
    "915": [0, 0.69444, 0, 0, 0.58056],
    "916": [0, 0.69444, 0, 0, 0.91667],
    "920": [0, 0.69444, 0, 0, 0.85556],
    "923": [0, 0.69444, 0, 0, 0.67223],
    "926": [0, 0.69444, 0, 0, 0.73334],
    "928": [0, 0.69444, 0, 0, 0.79445],
    "931": [0, 0.69444, 0, 0, 0.79445],
    "933": [0, 0.69444, 0, 0, 0.85556],
    "934": [0, 0.69444, 0, 0, 0.79445],
    "936": [0, 0.69444, 0, 0, 0.85556],
    "937": [0, 0.69444, 0, 0, 0.79445],
    "8211": [0, 0.45833, 0.03056, 0, 0.55],
    "8212": [0, 0.45833, 0.03056, 0, 1.10001],
    "8216": [0, 0.69444, 0, 0, 0.30556],
    "8217": [0, 0.69444, 0, 0, 0.30556],
    "8220": [0, 0.69444, 0, 0, 0.55834],
    "8221": [0, 0.69444, 0, 0, 0.55834]
  },
  "SansSerif-Italic": {
    "32": [0, 0, 0, 0, 0.25],
    "33": [0, 0.69444, 0.05733, 0, 0.31945],
    "34": [0, 0.69444, 316e-5, 0, 0.5],
    "35": [0.19444, 0.69444, 0.05087, 0, 0.83334],
    "36": [0.05556, 0.75, 0.11156, 0, 0.5],
    "37": [0.05556, 0.75, 0.03126, 0, 0.83334],
    "38": [0, 0.69444, 0.03058, 0, 0.75834],
    "39": [0, 0.69444, 0.07816, 0, 0.27778],
    "40": [0.25, 0.75, 0.13164, 0, 0.38889],
    "41": [0.25, 0.75, 0.02536, 0, 0.38889],
    "42": [0, 0.75, 0.11775, 0, 0.5],
    "43": [0.08333, 0.58333, 0.02536, 0, 0.77778],
    "44": [0.125, 0.08333, 0, 0, 0.27778],
    "45": [0, 0.44444, 0.01946, 0, 0.33333],
    "46": [0, 0.08333, 0, 0, 0.27778],
    "47": [0.25, 0.75, 0.13164, 0, 0.5],
    "48": [0, 0.65556, 0.11156, 0, 0.5],
    "49": [0, 0.65556, 0.11156, 0, 0.5],
    "50": [0, 0.65556, 0.11156, 0, 0.5],
    "51": [0, 0.65556, 0.11156, 0, 0.5],
    "52": [0, 0.65556, 0.11156, 0, 0.5],
    "53": [0, 0.65556, 0.11156, 0, 0.5],
    "54": [0, 0.65556, 0.11156, 0, 0.5],
    "55": [0, 0.65556, 0.11156, 0, 0.5],
    "56": [0, 0.65556, 0.11156, 0, 0.5],
    "57": [0, 0.65556, 0.11156, 0, 0.5],
    "58": [0, 0.44444, 0.02502, 0, 0.27778],
    "59": [0.125, 0.44444, 0.02502, 0, 0.27778],
    "61": [-0.13, 0.37, 0.05087, 0, 0.77778],
    "63": [0, 0.69444, 0.11809, 0, 0.47222],
    "64": [0, 0.69444, 0.07555, 0, 0.66667],
    "65": [0, 0.69444, 0, 0, 0.66667],
    "66": [0, 0.69444, 0.08293, 0, 0.66667],
    "67": [0, 0.69444, 0.11983, 0, 0.63889],
    "68": [0, 0.69444, 0.07555, 0, 0.72223],
    "69": [0, 0.69444, 0.11983, 0, 0.59722],
    "70": [0, 0.69444, 0.13372, 0, 0.56945],
    "71": [0, 0.69444, 0.11983, 0, 0.66667],
    "72": [0, 0.69444, 0.08094, 0, 0.70834],
    "73": [0, 0.69444, 0.13372, 0, 0.27778],
    "74": [0, 0.69444, 0.08094, 0, 0.47222],
    "75": [0, 0.69444, 0.11983, 0, 0.69445],
    "76": [0, 0.69444, 0, 0, 0.54167],
    "77": [0, 0.69444, 0.08094, 0, 0.875],
    "78": [0, 0.69444, 0.08094, 0, 0.70834],
    "79": [0, 0.69444, 0.07555, 0, 0.73611],
    "80": [0, 0.69444, 0.08293, 0, 0.63889],
    "81": [0.125, 0.69444, 0.07555, 0, 0.73611],
    "82": [0, 0.69444, 0.08293, 0, 0.64584],
    "83": [0, 0.69444, 0.09205, 0, 0.55556],
    "84": [0, 0.69444, 0.13372, 0, 0.68056],
    "85": [0, 0.69444, 0.08094, 0, 0.6875],
    "86": [0, 0.69444, 0.1615, 0, 0.66667],
    "87": [0, 0.69444, 0.1615, 0, 0.94445],
    "88": [0, 0.69444, 0.13372, 0, 0.66667],
    "89": [0, 0.69444, 0.17261, 0, 0.66667],
    "90": [0, 0.69444, 0.11983, 0, 0.61111],
    "91": [0.25, 0.75, 0.15942, 0, 0.28889],
    "93": [0.25, 0.75, 0.08719, 0, 0.28889],
    "94": [0, 0.69444, 0.0799, 0, 0.5],
    "95": [0.35, 0.09444, 0.08616, 0, 0.5],
    "97": [0, 0.44444, 981e-5, 0, 0.48056],
    "98": [0, 0.69444, 0.03057, 0, 0.51667],
    "99": [0, 0.44444, 0.08336, 0, 0.44445],
    "100": [0, 0.69444, 0.09483, 0, 0.51667],
    "101": [0, 0.44444, 0.06778, 0, 0.44445],
    "102": [0, 0.69444, 0.21705, 0, 0.30556],
    "103": [0.19444, 0.44444, 0.10836, 0, 0.5],
    "104": [0, 0.69444, 0.01778, 0, 0.51667],
    "105": [0, 0.67937, 0.09718, 0, 0.23889],
    "106": [0.19444, 0.67937, 0.09162, 0, 0.26667],
    "107": [0, 0.69444, 0.08336, 0, 0.48889],
    "108": [0, 0.69444, 0.09483, 0, 0.23889],
    "109": [0, 0.44444, 0.01778, 0, 0.79445],
    "110": [0, 0.44444, 0.01778, 0, 0.51667],
    "111": [0, 0.44444, 0.06613, 0, 0.5],
    "112": [0.19444, 0.44444, 0.0389, 0, 0.51667],
    "113": [0.19444, 0.44444, 0.04169, 0, 0.51667],
    "114": [0, 0.44444, 0.10836, 0, 0.34167],
    "115": [0, 0.44444, 0.0778, 0, 0.38333],
    "116": [0, 0.57143, 0.07225, 0, 0.36111],
    "117": [0, 0.44444, 0.04169, 0, 0.51667],
    "118": [0, 0.44444, 0.10836, 0, 0.46111],
    "119": [0, 0.44444, 0.10836, 0, 0.68334],
    "120": [0, 0.44444, 0.09169, 0, 0.46111],
    "121": [0.19444, 0.44444, 0.10836, 0, 0.46111],
    "122": [0, 0.44444, 0.08752, 0, 0.43472],
    "126": [0.35, 0.32659, 0.08826, 0, 0.5],
    "160": [0, 0, 0, 0, 0.25],
    "168": [0, 0.67937, 0.06385, 0, 0.5],
    "176": [0, 0.69444, 0, 0, 0.73752],
    "184": [0.17014, 0, 0, 0, 0.44445],
    "305": [0, 0.44444, 0.04169, 0, 0.23889],
    "567": [0.19444, 0.44444, 0.04169, 0, 0.26667],
    "710": [0, 0.69444, 0.0799, 0, 0.5],
    "711": [0, 0.63194, 0.08432, 0, 0.5],
    "713": [0, 0.60889, 0.08776, 0, 0.5],
    "714": [0, 0.69444, 0.09205, 0, 0.5],
    "715": [0, 0.69444, 0, 0, 0.5],
    "728": [0, 0.69444, 0.09483, 0, 0.5],
    "729": [0, 0.67937, 0.07774, 0, 0.27778],
    "730": [0, 0.69444, 0, 0, 0.73752],
    "732": [0, 0.67659, 0.08826, 0, 0.5],
    "733": [0, 0.69444, 0.09205, 0, 0.5],
    "915": [0, 0.69444, 0.13372, 0, 0.54167],
    "916": [0, 0.69444, 0, 0, 0.83334],
    "920": [0, 0.69444, 0.07555, 0, 0.77778],
    "923": [0, 0.69444, 0, 0, 0.61111],
    "926": [0, 0.69444, 0.12816, 0, 0.66667],
    "928": [0, 0.69444, 0.08094, 0, 0.70834],
    "931": [0, 0.69444, 0.11983, 0, 0.72222],
    "933": [0, 0.69444, 0.09031, 0, 0.77778],
    "934": [0, 0.69444, 0.04603, 0, 0.72222],
    "936": [0, 0.69444, 0.09031, 0, 0.77778],
    "937": [0, 0.69444, 0.08293, 0, 0.72222],
    "8211": [0, 0.44444, 0.08616, 0, 0.5],
    "8212": [0, 0.44444, 0.08616, 0, 1],
    "8216": [0, 0.69444, 0.07816, 0, 0.27778],
    "8217": [0, 0.69444, 0.07816, 0, 0.27778],
    "8220": [0, 0.69444, 0.14205, 0, 0.5],
    "8221": [0, 0.69444, 316e-5, 0, 0.5]
  },
  "SansSerif-Regular": {
    "32": [0, 0, 0, 0, 0.25],
    "33": [0, 0.69444, 0, 0, 0.31945],
    "34": [0, 0.69444, 0, 0, 0.5],
    "35": [0.19444, 0.69444, 0, 0, 0.83334],
    "36": [0.05556, 0.75, 0, 0, 0.5],
    "37": [0.05556, 0.75, 0, 0, 0.83334],
    "38": [0, 0.69444, 0, 0, 0.75834],
    "39": [0, 0.69444, 0, 0, 0.27778],
    "40": [0.25, 0.75, 0, 0, 0.38889],
    "41": [0.25, 0.75, 0, 0, 0.38889],
    "42": [0, 0.75, 0, 0, 0.5],
    "43": [0.08333, 0.58333, 0, 0, 0.77778],
    "44": [0.125, 0.08333, 0, 0, 0.27778],
    "45": [0, 0.44444, 0, 0, 0.33333],
    "46": [0, 0.08333, 0, 0, 0.27778],
    "47": [0.25, 0.75, 0, 0, 0.5],
    "48": [0, 0.65556, 0, 0, 0.5],
    "49": [0, 0.65556, 0, 0, 0.5],
    "50": [0, 0.65556, 0, 0, 0.5],
    "51": [0, 0.65556, 0, 0, 0.5],
    "52": [0, 0.65556, 0, 0, 0.5],
    "53": [0, 0.65556, 0, 0, 0.5],
    "54": [0, 0.65556, 0, 0, 0.5],
    "55": [0, 0.65556, 0, 0, 0.5],
    "56": [0, 0.65556, 0, 0, 0.5],
    "57": [0, 0.65556, 0, 0, 0.5],
    "58": [0, 0.44444, 0, 0, 0.27778],
    "59": [0.125, 0.44444, 0, 0, 0.27778],
    "61": [-0.13, 0.37, 0, 0, 0.77778],
    "63": [0, 0.69444, 0, 0, 0.47222],
    "64": [0, 0.69444, 0, 0, 0.66667],
    "65": [0, 0.69444, 0, 0, 0.66667],
    "66": [0, 0.69444, 0, 0, 0.66667],
    "67": [0, 0.69444, 0, 0, 0.63889],
    "68": [0, 0.69444, 0, 0, 0.72223],
    "69": [0, 0.69444, 0, 0, 0.59722],
    "70": [0, 0.69444, 0, 0, 0.56945],
    "71": [0, 0.69444, 0, 0, 0.66667],
    "72": [0, 0.69444, 0, 0, 0.70834],
    "73": [0, 0.69444, 0, 0, 0.27778],
    "74": [0, 0.69444, 0, 0, 0.47222],
    "75": [0, 0.69444, 0, 0, 0.69445],
    "76": [0, 0.69444, 0, 0, 0.54167],
    "77": [0, 0.69444, 0, 0, 0.875],
    "78": [0, 0.69444, 0, 0, 0.70834],
    "79": [0, 0.69444, 0, 0, 0.73611],
    "80": [0, 0.69444, 0, 0, 0.63889],
    "81": [0.125, 0.69444, 0, 0, 0.73611],
    "82": [0, 0.69444, 0, 0, 0.64584],
    "83": [0, 0.69444, 0, 0, 0.55556],
    "84": [0, 0.69444, 0, 0, 0.68056],
    "85": [0, 0.69444, 0, 0, 0.6875],
    "86": [0, 0.69444, 0.01389, 0, 0.66667],
    "87": [0, 0.69444, 0.01389, 0, 0.94445],
    "88": [0, 0.69444, 0, 0, 0.66667],
    "89": [0, 0.69444, 0.025, 0, 0.66667],
    "90": [0, 0.69444, 0, 0, 0.61111],
    "91": [0.25, 0.75, 0, 0, 0.28889],
    "93": [0.25, 0.75, 0, 0, 0.28889],
    "94": [0, 0.69444, 0, 0, 0.5],
    "95": [0.35, 0.09444, 0.02778, 0, 0.5],
    "97": [0, 0.44444, 0, 0, 0.48056],
    "98": [0, 0.69444, 0, 0, 0.51667],
    "99": [0, 0.44444, 0, 0, 0.44445],
    "100": [0, 0.69444, 0, 0, 0.51667],
    "101": [0, 0.44444, 0, 0, 0.44445],
    "102": [0, 0.69444, 0.06944, 0, 0.30556],
    "103": [0.19444, 0.44444, 0.01389, 0, 0.5],
    "104": [0, 0.69444, 0, 0, 0.51667],
    "105": [0, 0.67937, 0, 0, 0.23889],
    "106": [0.19444, 0.67937, 0, 0, 0.26667],
    "107": [0, 0.69444, 0, 0, 0.48889],
    "108": [0, 0.69444, 0, 0, 0.23889],
    "109": [0, 0.44444, 0, 0, 0.79445],
    "110": [0, 0.44444, 0, 0, 0.51667],
    "111": [0, 0.44444, 0, 0, 0.5],
    "112": [0.19444, 0.44444, 0, 0, 0.51667],
    "113": [0.19444, 0.44444, 0, 0, 0.51667],
    "114": [0, 0.44444, 0.01389, 0, 0.34167],
    "115": [0, 0.44444, 0, 0, 0.38333],
    "116": [0, 0.57143, 0, 0, 0.36111],
    "117": [0, 0.44444, 0, 0, 0.51667],
    "118": [0, 0.44444, 0.01389, 0, 0.46111],
    "119": [0, 0.44444, 0.01389, 0, 0.68334],
    "120": [0, 0.44444, 0, 0, 0.46111],
    "121": [0.19444, 0.44444, 0.01389, 0, 0.46111],
    "122": [0, 0.44444, 0, 0, 0.43472],
    "126": [0.35, 0.32659, 0, 0, 0.5],
    "160": [0, 0, 0, 0, 0.25],
    "168": [0, 0.67937, 0, 0, 0.5],
    "176": [0, 0.69444, 0, 0, 0.66667],
    "184": [0.17014, 0, 0, 0, 0.44445],
    "305": [0, 0.44444, 0, 0, 0.23889],
    "567": [0.19444, 0.44444, 0, 0, 0.26667],
    "710": [0, 0.69444, 0, 0, 0.5],
    "711": [0, 0.63194, 0, 0, 0.5],
    "713": [0, 0.60889, 0, 0, 0.5],
    "714": [0, 0.69444, 0, 0, 0.5],
    "715": [0, 0.69444, 0, 0, 0.5],
    "728": [0, 0.69444, 0, 0, 0.5],
    "729": [0, 0.67937, 0, 0, 0.27778],
    "730": [0, 0.69444, 0, 0, 0.66667],
    "732": [0, 0.67659, 0, 0, 0.5],
    "733": [0, 0.69444, 0, 0, 0.5],
    "915": [0, 0.69444, 0, 0, 0.54167],
    "916": [0, 0.69444, 0, 0, 0.83334],
    "920": [0, 0.69444, 0, 0, 0.77778],
    "923": [0, 0.69444, 0, 0, 0.61111],
    "926": [0, 0.69444, 0, 0, 0.66667],
    "928": [0, 0.69444, 0, 0, 0.70834],
    "931": [0, 0.69444, 0, 0, 0.72222],
    "933": [0, 0.69444, 0, 0, 0.77778],
    "934": [0, 0.69444, 0, 0, 0.72222],
    "936": [0, 0.69444, 0, 0, 0.77778],
    "937": [0, 0.69444, 0, 0, 0.72222],
    "8211": [0, 0.44444, 0.02778, 0, 0.5],
    "8212": [0, 0.44444, 0.02778, 0, 1],
    "8216": [0, 0.69444, 0, 0, 0.27778],
    "8217": [0, 0.69444, 0, 0, 0.27778],
    "8220": [0, 0.69444, 0, 0, 0.5],
    "8221": [0, 0.69444, 0, 0, 0.5]
  },
  "Script-Regular": {
    "32": [0, 0, 0, 0, 0.25],
    "65": [0, 0.7, 0.22925, 0, 0.80253],
    "66": [0, 0.7, 0.04087, 0, 0.90757],
    "67": [0, 0.7, 0.1689, 0, 0.66619],
    "68": [0, 0.7, 0.09371, 0, 0.77443],
    "69": [0, 0.7, 0.18583, 0, 0.56162],
    "70": [0, 0.7, 0.13634, 0, 0.89544],
    "71": [0, 0.7, 0.17322, 0, 0.60961],
    "72": [0, 0.7, 0.29694, 0, 0.96919],
    "73": [0, 0.7, 0.19189, 0, 0.80907],
    "74": [0.27778, 0.7, 0.19189, 0, 1.05159],
    "75": [0, 0.7, 0.31259, 0, 0.91364],
    "76": [0, 0.7, 0.19189, 0, 0.87373],
    "77": [0, 0.7, 0.15981, 0, 1.08031],
    "78": [0, 0.7, 0.3525, 0, 0.9015],
    "79": [0, 0.7, 0.08078, 0, 0.73787],
    "80": [0, 0.7, 0.08078, 0, 1.01262],
    "81": [0, 0.7, 0.03305, 0, 0.88282],
    "82": [0, 0.7, 0.06259, 0, 0.85],
    "83": [0, 0.7, 0.19189, 0, 0.86767],
    "84": [0, 0.7, 0.29087, 0, 0.74697],
    "85": [0, 0.7, 0.25815, 0, 0.79996],
    "86": [0, 0.7, 0.27523, 0, 0.62204],
    "87": [0, 0.7, 0.27523, 0, 0.80532],
    "88": [0, 0.7, 0.26006, 0, 0.94445],
    "89": [0, 0.7, 0.2939, 0, 0.70961],
    "90": [0, 0.7, 0.24037, 0, 0.8212],
    "160": [0, 0, 0, 0, 0.25]
  },
  "Size1-Regular": {
    "32": [0, 0, 0, 0, 0.25],
    "40": [0.35001, 0.85, 0, 0, 0.45834],
    "41": [0.35001, 0.85, 0, 0, 0.45834],
    "47": [0.35001, 0.85, 0, 0, 0.57778],
    "91": [0.35001, 0.85, 0, 0, 0.41667],
    "92": [0.35001, 0.85, 0, 0, 0.57778],
    "93": [0.35001, 0.85, 0, 0, 0.41667],
    "123": [0.35001, 0.85, 0, 0, 0.58334],
    "125": [0.35001, 0.85, 0, 0, 0.58334],
    "160": [0, 0, 0, 0, 0.25],
    "710": [0, 0.72222, 0, 0, 0.55556],
    "732": [0, 0.72222, 0, 0, 0.55556],
    "770": [0, 0.72222, 0, 0, 0.55556],
    "771": [0, 0.72222, 0, 0, 0.55556],
    "8214": [-99e-5, 0.601, 0, 0, 0.77778],
    "8593": [1e-5, 0.6, 0, 0, 0.66667],
    "8595": [1e-5, 0.6, 0, 0, 0.66667],
    "8657": [1e-5, 0.6, 0, 0, 0.77778],
    "8659": [1e-5, 0.6, 0, 0, 0.77778],
    "8719": [0.25001, 0.75, 0, 0, 0.94445],
    "8720": [0.25001, 0.75, 0, 0, 0.94445],
    "8721": [0.25001, 0.75, 0, 0, 1.05556],
    "8730": [0.35001, 0.85, 0, 0, 1],
    "8739": [-599e-5, 0.606, 0, 0, 0.33333],
    "8741": [-599e-5, 0.606, 0, 0, 0.55556],
    "8747": [0.30612, 0.805, 0.19445, 0, 0.47222],
    "8748": [0.306, 0.805, 0.19445, 0, 0.47222],
    "8749": [0.306, 0.805, 0.19445, 0, 0.47222],
    "8750": [0.30612, 0.805, 0.19445, 0, 0.47222],
    "8896": [0.25001, 0.75, 0, 0, 0.83334],
    "8897": [0.25001, 0.75, 0, 0, 0.83334],
    "8898": [0.25001, 0.75, 0, 0, 0.83334],
    "8899": [0.25001, 0.75, 0, 0, 0.83334],
    "8968": [0.35001, 0.85, 0, 0, 0.47222],
    "8969": [0.35001, 0.85, 0, 0, 0.47222],
    "8970": [0.35001, 0.85, 0, 0, 0.47222],
    "8971": [0.35001, 0.85, 0, 0, 0.47222],
    "9168": [-99e-5, 0.601, 0, 0, 0.66667],
    "10216": [0.35001, 0.85, 0, 0, 0.47222],
    "10217": [0.35001, 0.85, 0, 0, 0.47222],
    "10752": [0.25001, 0.75, 0, 0, 1.11111],
    "10753": [0.25001, 0.75, 0, 0, 1.11111],
    "10754": [0.25001, 0.75, 0, 0, 1.11111],
    "10756": [0.25001, 0.75, 0, 0, 0.83334],
    "10758": [0.25001, 0.75, 0, 0, 0.83334]
  },
  "Size2-Regular": {
    "32": [0, 0, 0, 0, 0.25],
    "40": [0.65002, 1.15, 0, 0, 0.59722],
    "41": [0.65002, 1.15, 0, 0, 0.59722],
    "47": [0.65002, 1.15, 0, 0, 0.81111],
    "91": [0.65002, 1.15, 0, 0, 0.47222],
    "92": [0.65002, 1.15, 0, 0, 0.81111],
    "93": [0.65002, 1.15, 0, 0, 0.47222],
    "123": [0.65002, 1.15, 0, 0, 0.66667],
    "125": [0.65002, 1.15, 0, 0, 0.66667],
    "160": [0, 0, 0, 0, 0.25],
    "710": [0, 0.75, 0, 0, 1],
    "732": [0, 0.75, 0, 0, 1],
    "770": [0, 0.75, 0, 0, 1],
    "771": [0, 0.75, 0, 0, 1],
    "8719": [0.55001, 1.05, 0, 0, 1.27778],
    "8720": [0.55001, 1.05, 0, 0, 1.27778],
    "8721": [0.55001, 1.05, 0, 0, 1.44445],
    "8730": [0.65002, 1.15, 0, 0, 1],
    "8747": [0.86225, 1.36, 0.44445, 0, 0.55556],
    "8748": [0.862, 1.36, 0.44445, 0, 0.55556],
    "8749": [0.862, 1.36, 0.44445, 0, 0.55556],
    "8750": [0.86225, 1.36, 0.44445, 0, 0.55556],
    "8896": [0.55001, 1.05, 0, 0, 1.11111],
    "8897": [0.55001, 1.05, 0, 0, 1.11111],
    "8898": [0.55001, 1.05, 0, 0, 1.11111],
    "8899": [0.55001, 1.05, 0, 0, 1.11111],
    "8968": [0.65002, 1.15, 0, 0, 0.52778],
    "8969": [0.65002, 1.15, 0, 0, 0.52778],
    "8970": [0.65002, 1.15, 0, 0, 0.52778],
    "8971": [0.65002, 1.15, 0, 0, 0.52778],
    "10216": [0.65002, 1.15, 0, 0, 0.61111],
    "10217": [0.65002, 1.15, 0, 0, 0.61111],
    "10752": [0.55001, 1.05, 0, 0, 1.51112],
    "10753": [0.55001, 1.05, 0, 0, 1.51112],
    "10754": [0.55001, 1.05, 0, 0, 1.51112],
    "10756": [0.55001, 1.05, 0, 0, 1.11111],
    "10758": [0.55001, 1.05, 0, 0, 1.11111]
  },
  "Size3-Regular": {
    "32": [0, 0, 0, 0, 0.25],
    "40": [0.95003, 1.45, 0, 0, 0.73611],
    "41": [0.95003, 1.45, 0, 0, 0.73611],
    "47": [0.95003, 1.45, 0, 0, 1.04445],
    "91": [0.95003, 1.45, 0, 0, 0.52778],
    "92": [0.95003, 1.45, 0, 0, 1.04445],
    "93": [0.95003, 1.45, 0, 0, 0.52778],
    "123": [0.95003, 1.45, 0, 0, 0.75],
    "125": [0.95003, 1.45, 0, 0, 0.75],
    "160": [0, 0, 0, 0, 0.25],
    "710": [0, 0.75, 0, 0, 1.44445],
    "732": [0, 0.75, 0, 0, 1.44445],
    "770": [0, 0.75, 0, 0, 1.44445],
    "771": [0, 0.75, 0, 0, 1.44445],
    "8730": [0.95003, 1.45, 0, 0, 1],
    "8968": [0.95003, 1.45, 0, 0, 0.58334],
    "8969": [0.95003, 1.45, 0, 0, 0.58334],
    "8970": [0.95003, 1.45, 0, 0, 0.58334],
    "8971": [0.95003, 1.45, 0, 0, 0.58334],
    "10216": [0.95003, 1.45, 0, 0, 0.75],
    "10217": [0.95003, 1.45, 0, 0, 0.75]
  },
  "Size4-Regular": {
    "32": [0, 0, 0, 0, 0.25],
    "40": [1.25003, 1.75, 0, 0, 0.79167],
    "41": [1.25003, 1.75, 0, 0, 0.79167],
    "47": [1.25003, 1.75, 0, 0, 1.27778],
    "91": [1.25003, 1.75, 0, 0, 0.58334],
    "92": [1.25003, 1.75, 0, 0, 1.27778],
    "93": [1.25003, 1.75, 0, 0, 0.58334],
    "123": [1.25003, 1.75, 0, 0, 0.80556],
    "125": [1.25003, 1.75, 0, 0, 0.80556],
    "160": [0, 0, 0, 0, 0.25],
    "710": [0, 0.825, 0, 0, 1.8889],
    "732": [0, 0.825, 0, 0, 1.8889],
    "770": [0, 0.825, 0, 0, 1.8889],
    "771": [0, 0.825, 0, 0, 1.8889],
    "8730": [1.25003, 1.75, 0, 0, 1],
    "8968": [1.25003, 1.75, 0, 0, 0.63889],
    "8969": [1.25003, 1.75, 0, 0, 0.63889],
    "8970": [1.25003, 1.75, 0, 0, 0.63889],
    "8971": [1.25003, 1.75, 0, 0, 0.63889],
    "9115": [0.64502, 1.155, 0, 0, 0.875],
    "9116": [1e-5, 0.6, 0, 0, 0.875],
    "9117": [0.64502, 1.155, 0, 0, 0.875],
    "9118": [0.64502, 1.155, 0, 0, 0.875],
    "9119": [1e-5, 0.6, 0, 0, 0.875],
    "9120": [0.64502, 1.155, 0, 0, 0.875],
    "9121": [0.64502, 1.155, 0, 0, 0.66667],
    "9122": [-99e-5, 0.601, 0, 0, 0.66667],
    "9123": [0.64502, 1.155, 0, 0, 0.66667],
    "9124": [0.64502, 1.155, 0, 0, 0.66667],
    "9125": [-99e-5, 0.601, 0, 0, 0.66667],
    "9126": [0.64502, 1.155, 0, 0, 0.66667],
    "9127": [1e-5, 0.9, 0, 0, 0.88889],
    "9128": [0.65002, 1.15, 0, 0, 0.88889],
    "9129": [0.90001, 0, 0, 0, 0.88889],
    "9130": [0, 0.3, 0, 0, 0.88889],
    "9131": [1e-5, 0.9, 0, 0, 0.88889],
    "9132": [0.65002, 1.15, 0, 0, 0.88889],
    "9133": [0.90001, 0, 0, 0, 0.88889],
    "9143": [0.88502, 0.915, 0, 0, 1.05556],
    "10216": [1.25003, 1.75, 0, 0, 0.80556],
    "10217": [1.25003, 1.75, 0, 0, 0.80556],
    "57344": [-499e-5, 0.605, 0, 0, 1.05556],
    "57345": [-499e-5, 0.605, 0, 0, 1.05556],
    "57680": [0, 0.12, 0, 0, 0.45],
    "57681": [0, 0.12, 0, 0, 0.45],
    "57682": [0, 0.12, 0, 0, 0.45],
    "57683": [0, 0.12, 0, 0, 0.45]
  },
  "Typewriter-Regular": {
    "32": [0, 0, 0, 0, 0.525],
    "33": [0, 0.61111, 0, 0, 0.525],
    "34": [0, 0.61111, 0, 0, 0.525],
    "35": [0, 0.61111, 0, 0, 0.525],
    "36": [0.08333, 0.69444, 0, 0, 0.525],
    "37": [0.08333, 0.69444, 0, 0, 0.525],
    "38": [0, 0.61111, 0, 0, 0.525],
    "39": [0, 0.61111, 0, 0, 0.525],
    "40": [0.08333, 0.69444, 0, 0, 0.525],
    "41": [0.08333, 0.69444, 0, 0, 0.525],
    "42": [0, 0.52083, 0, 0, 0.525],
    "43": [-0.08056, 0.53055, 0, 0, 0.525],
    "44": [0.13889, 0.125, 0, 0, 0.525],
    "45": [-0.08056, 0.53055, 0, 0, 0.525],
    "46": [0, 0.125, 0, 0, 0.525],
    "47": [0.08333, 0.69444, 0, 0, 0.525],
    "48": [0, 0.61111, 0, 0, 0.525],
    "49": [0, 0.61111, 0, 0, 0.525],
    "50": [0, 0.61111, 0, 0, 0.525],
    "51": [0, 0.61111, 0, 0, 0.525],
    "52": [0, 0.61111, 0, 0, 0.525],
    "53": [0, 0.61111, 0, 0, 0.525],
    "54": [0, 0.61111, 0, 0, 0.525],
    "55": [0, 0.61111, 0, 0, 0.525],
    "56": [0, 0.61111, 0, 0, 0.525],
    "57": [0, 0.61111, 0, 0, 0.525],
    "58": [0, 0.43056, 0, 0, 0.525],
    "59": [0.13889, 0.43056, 0, 0, 0.525],
    "60": [-0.05556, 0.55556, 0, 0, 0.525],
    "61": [-0.19549, 0.41562, 0, 0, 0.525],
    "62": [-0.05556, 0.55556, 0, 0, 0.525],
    "63": [0, 0.61111, 0, 0, 0.525],
    "64": [0, 0.61111, 0, 0, 0.525],
    "65": [0, 0.61111, 0, 0, 0.525],
    "66": [0, 0.61111, 0, 0, 0.525],
    "67": [0, 0.61111, 0, 0, 0.525],
    "68": [0, 0.61111, 0, 0, 0.525],
    "69": [0, 0.61111, 0, 0, 0.525],
    "70": [0, 0.61111, 0, 0, 0.525],
    "71": [0, 0.61111, 0, 0, 0.525],
    "72": [0, 0.61111, 0, 0, 0.525],
    "73": [0, 0.61111, 0, 0, 0.525],
    "74": [0, 0.61111, 0, 0, 0.525],
    "75": [0, 0.61111, 0, 0, 0.525],
    "76": [0, 0.61111, 0, 0, 0.525],
    "77": [0, 0.61111, 0, 0, 0.525],
    "78": [0, 0.61111, 0, 0, 0.525],
    "79": [0, 0.61111, 0, 0, 0.525],
    "80": [0, 0.61111, 0, 0, 0.525],
    "81": [0.13889, 0.61111, 0, 0, 0.525],
    "82": [0, 0.61111, 0, 0, 0.525],
    "83": [0, 0.61111, 0, 0, 0.525],
    "84": [0, 0.61111, 0, 0, 0.525],
    "85": [0, 0.61111, 0, 0, 0.525],
    "86": [0, 0.61111, 0, 0, 0.525],
    "87": [0, 0.61111, 0, 0, 0.525],
    "88": [0, 0.61111, 0, 0, 0.525],
    "89": [0, 0.61111, 0, 0, 0.525],
    "90": [0, 0.61111, 0, 0, 0.525],
    "91": [0.08333, 0.69444, 0, 0, 0.525],
    "92": [0.08333, 0.69444, 0, 0, 0.525],
    "93": [0.08333, 0.69444, 0, 0, 0.525],
    "94": [0, 0.61111, 0, 0, 0.525],
    "95": [0.09514, 0, 0, 0, 0.525],
    "96": [0, 0.61111, 0, 0, 0.525],
    "97": [0, 0.43056, 0, 0, 0.525],
    "98": [0, 0.61111, 0, 0, 0.525],
    "99": [0, 0.43056, 0, 0, 0.525],
    "100": [0, 0.61111, 0, 0, 0.525],
    "101": [0, 0.43056, 0, 0, 0.525],
    "102": [0, 0.61111, 0, 0, 0.525],
    "103": [0.22222, 0.43056, 0, 0, 0.525],
    "104": [0, 0.61111, 0, 0, 0.525],
    "105": [0, 0.61111, 0, 0, 0.525],
    "106": [0.22222, 0.61111, 0, 0, 0.525],
    "107": [0, 0.61111, 0, 0, 0.525],
    "108": [0, 0.61111, 0, 0, 0.525],
    "109": [0, 0.43056, 0, 0, 0.525],
    "110": [0, 0.43056, 0, 0, 0.525],
    "111": [0, 0.43056, 0, 0, 0.525],
    "112": [0.22222, 0.43056, 0, 0, 0.525],
    "113": [0.22222, 0.43056, 0, 0, 0.525],
    "114": [0, 0.43056, 0, 0, 0.525],
    "115": [0, 0.43056, 0, 0, 0.525],
    "116": [0, 0.55358, 0, 0, 0.525],
    "117": [0, 0.43056, 0, 0, 0.525],
    "118": [0, 0.43056, 0, 0, 0.525],
    "119": [0, 0.43056, 0, 0, 0.525],
    "120": [0, 0.43056, 0, 0, 0.525],
    "121": [0.22222, 0.43056, 0, 0, 0.525],
    "122": [0, 0.43056, 0, 0, 0.525],
    "123": [0.08333, 0.69444, 0, 0, 0.525],
    "124": [0.08333, 0.69444, 0, 0, 0.525],
    "125": [0.08333, 0.69444, 0, 0, 0.525],
    "126": [0, 0.61111, 0, 0, 0.525],
    "127": [0, 0.61111, 0, 0, 0.525],
    "160": [0, 0, 0, 0, 0.525],
    "176": [0, 0.61111, 0, 0, 0.525],
    "184": [0.19445, 0, 0, 0, 0.525],
    "305": [0, 0.43056, 0, 0, 0.525],
    "567": [0.22222, 0.43056, 0, 0, 0.525],
    "711": [0, 0.56597, 0, 0, 0.525],
    "713": [0, 0.56555, 0, 0, 0.525],
    "714": [0, 0.61111, 0, 0, 0.525],
    "715": [0, 0.61111, 0, 0, 0.525],
    "728": [0, 0.61111, 0, 0, 0.525],
    "730": [0, 0.61111, 0, 0, 0.525],
    "770": [0, 0.61111, 0, 0, 0.525],
    "771": [0, 0.61111, 0, 0, 0.525],
    "776": [0, 0.61111, 0, 0, 0.525],
    "915": [0, 0.61111, 0, 0, 0.525],
    "916": [0, 0.61111, 0, 0, 0.525],
    "920": [0, 0.61111, 0, 0, 0.525],
    "923": [0, 0.61111, 0, 0, 0.525],
    "926": [0, 0.61111, 0, 0, 0.525],
    "928": [0, 0.61111, 0, 0, 0.525],
    "931": [0, 0.61111, 0, 0, 0.525],
    "933": [0, 0.61111, 0, 0, 0.525],
    "934": [0, 0.61111, 0, 0, 0.525],
    "936": [0, 0.61111, 0, 0, 0.525],
    "937": [0, 0.61111, 0, 0, 0.525],
    "8216": [0, 0.61111, 0, 0, 0.525],
    "8217": [0, 0.61111, 0, 0, 0.525],
    "8242": [0, 0.61111, 0, 0, 0.525],
    "9251": [0.11111, 0.21944, 0, 0, 0.525]
  }
};
var sigmasAndXis = {
  slant: [0.25, 0.25, 0.25],
  // sigma1
  space: [0, 0, 0],
  // sigma2
  stretch: [0, 0, 0],
  // sigma3
  shrink: [0, 0, 0],
  // sigma4
  xHeight: [0.431, 0.431, 0.431],
  // sigma5
  quad: [1, 1.171, 1.472],
  // sigma6
  extraSpace: [0, 0, 0],
  // sigma7
  num1: [0.677, 0.732, 0.925],
  // sigma8
  num2: [0.394, 0.384, 0.387],
  // sigma9
  num3: [0.444, 0.471, 0.504],
  // sigma10
  denom1: [0.686, 0.752, 1.025],
  // sigma11
  denom2: [0.345, 0.344, 0.532],
  // sigma12
  sup1: [0.413, 0.503, 0.504],
  // sigma13
  sup2: [0.363, 0.431, 0.404],
  // sigma14
  sup3: [0.289, 0.286, 0.294],
  // sigma15
  sub1: [0.15, 0.143, 0.2],
  // sigma16
  sub2: [0.247, 0.286, 0.4],
  // sigma17
  supDrop: [0.386, 0.353, 0.494],
  // sigma18
  subDrop: [0.05, 0.071, 0.1],
  // sigma19
  delim1: [2.39, 1.7, 1.98],
  // sigma20
  delim2: [1.01, 1.157, 1.42],
  // sigma21
  axisHeight: [0.25, 0.25, 0.25],
  // sigma22
  // These font metrics are extracted from TeX by using tftopl on cmex10.tfm;
  // they correspond to the font parameters of the extension fonts (family 3).
  // See the TeXbook, page 441. In AMSTeX, the extension fonts scale; to
  // match cmex7, we'd use cmex7.tfm values for script and scriptscript
  // values.
  defaultRuleThickness: [0.04, 0.049, 0.049],
  // xi8; cmex7: 0.049
  bigOpSpacing1: [0.111, 0.111, 0.111],
  // xi9
  bigOpSpacing2: [0.166, 0.166, 0.166],
  // xi10
  bigOpSpacing3: [0.2, 0.2, 0.2],
  // xi11
  bigOpSpacing4: [0.6, 0.611, 0.611],
  // xi12; cmex7: 0.611
  bigOpSpacing5: [0.1, 0.143, 0.143],
  // xi13; cmex7: 0.143
  // The \sqrt rule width is taken from the height of the surd character.
  // Since we use the same font at all sizes, this thickness doesn't scale.
  sqrtRuleThickness: [0.04, 0.04, 0.04],
  // This value determines how large a pt is, for metrics which are defined
  // in terms of pts.
  // This value is also used in katex.scss; if you change it make sure the
  // values match.
  ptPerEm: [10, 10, 10],
  // The space between adjacent `|` columns in an array definition. From
  // `\showthe\doublerulesep` in LaTeX. Equals 2.0 / ptPerEm.
  doubleRuleSep: [0.2, 0.2, 0.2],
  // The width of separator lines in {array} environments. From
  // `\showthe\arrayrulewidth` in LaTeX. Equals 0.4 / ptPerEm.
  arrayRuleWidth: [0.04, 0.04, 0.04],
  // Two values from LaTeX source2e:
  fboxsep: [0.3, 0.3, 0.3],
  //        3 pt / ptPerEm
  fboxrule: [0.04, 0.04, 0.04]
  // 0.4 pt / ptPerEm
};
var extraCharacterMap = {
  // Latin-1
  "\xC5": "A",
  "\xD0": "D",
  "\xDE": "o",
  "\xE5": "a",
  "\xF0": "d",
  "\xFE": "o",
  // Cyrillic
  "\u0410": "A",
  "\u0411": "B",
  "\u0412": "B",
  "\u0413": "F",
  "\u0414": "A",
  "\u0415": "E",
  "\u0416": "K",
  "\u0417": "3",
  "\u0418": "N",
  "\u0419": "N",
  "\u041A": "K",
  "\u041B": "N",
  "\u041C": "M",
  "\u041D": "H",
  "\u041E": "O",
  "\u041F": "N",
  "\u0420": "P",
  "\u0421": "C",
  "\u0422": "T",
  "\u0423": "y",
  "\u0424": "O",
  "\u0425": "X",
  "\u0426": "U",
  "\u0427": "h",
  "\u0428": "W",
  "\u0429": "W",
  "\u042A": "B",
  "\u042B": "X",
  "\u042C": "B",
  "\u042D": "3",
  "\u042E": "X",
  "\u042F": "R",
  "\u0430": "a",
  "\u0431": "b",
  "\u0432": "a",
  "\u0433": "r",
  "\u0434": "y",
  "\u0435": "e",
  "\u0436": "m",
  "\u0437": "e",
  "\u0438": "n",
  "\u0439": "n",
  "\u043A": "n",
  "\u043B": "n",
  "\u043C": "m",
  "\u043D": "n",
  "\u043E": "o",
  "\u043F": "n",
  "\u0440": "p",
  "\u0441": "c",
  "\u0442": "o",
  "\u0443": "y",
  "\u0444": "b",
  "\u0445": "x",
  "\u0446": "n",
  "\u0447": "n",
  "\u0448": "w",
  "\u0449": "w",
  "\u044A": "a",
  "\u044B": "m",
  "\u044C": "a",
  "\u044D": "e",
  "\u044E": "m",
  "\u044F": "r"
};
function getCharacterMetrics(character, font, mode) {
  if (!fontMetricsData[font]) {
    throw new Error("Font metrics not found for font: " + font + ".");
  }
  var ch = character.charCodeAt(0);
  var metrics = fontMetricsData[font][ch];
  if (!metrics && character[0] in extraCharacterMap) {
    ch = extraCharacterMap[character[0]].charCodeAt(0);
    metrics = fontMetricsData[font][ch];
  }
  if (!metrics && mode === "text") {
    if (supportedCodepoint(ch)) {
      metrics = fontMetricsData[font][77];
    }
  }
  if (metrics) {
    return {
      depth: metrics[0],
      height: metrics[1],
      italic: metrics[2],
      skew: metrics[3],
      width: metrics[4]
    };
  }
}
var fontMetricsBySizeIndex = {};
function getGlobalMetrics(size) {
  var sizeIndex;
  if (size >= 5) {
    sizeIndex = 0;
  } else if (size >= 3) {
    sizeIndex = 1;
  } else {
    sizeIndex = 2;
  }
  if (!fontMetricsBySizeIndex[sizeIndex]) {
    var metrics = fontMetricsBySizeIndex[sizeIndex] = {
      cssEmPerMu: sigmasAndXis.quad[sizeIndex] / 18
    };
    for (var key in sigmasAndXis) {
      if (sigmasAndXis.hasOwnProperty(key)) {
        metrics[key] = sigmasAndXis[key][sizeIndex];
      }
    }
  }
  return fontMetricsBySizeIndex[sizeIndex];
}
var sizeStyleMap = [
  // Each element contains [textsize, scriptsize, scriptscriptsize].
  // The size mappings are taken from TeX with \normalsize=10pt.
  [1, 1, 1],
  // size1: [5, 5, 5]              \tiny
  [2, 1, 1],
  // size2: [6, 5, 5]
  [3, 1, 1],
  // size3: [7, 5, 5]              \scriptsize
  [4, 2, 1],
  // size4: [8, 6, 5]              \footnotesize
  [5, 2, 1],
  // size5: [9, 6, 5]              \small
  [6, 3, 1],
  // size6: [10, 7, 5]             \normalsize
  [7, 4, 2],
  // size7: [12, 8, 6]             \large
  [8, 6, 3],
  // size8: [14.4, 10, 7]          \Large
  [9, 7, 6],
  // size9: [17.28, 12, 10]        \LARGE
  [10, 8, 7],
  // size10: [20.74, 14.4, 12]     \huge
  [11, 10, 9]
  // size11: [24.88, 20.74, 17.28] \HUGE
];
var sizeMultipliers = [
  // fontMetrics.js:getGlobalMetrics also uses size indexes, so if
  // you change size indexes, change that function.
  0.5,
  0.6,
  0.7,
  0.8,
  0.9,
  1,
  1.2,
  1.44,
  1.728,
  2.074,
  2.488
];
var sizeAtStyle = function sizeAtStyle2(size, style) {
  return style.size < 2 ? size : sizeStyleMap[size - 1][style.size - 1];
};
var Options = class _Options {
  // A font family applies to a group of fonts (i.e. SansSerif), while a font
  // represents a specific font (i.e. SansSerif Bold).
  // See: https://tex.stackexchange.com/questions/22350/difference-between-textrm-and-mathrm
  /**
   * The base size index.
   */
  constructor(data) {
    this.style = void 0;
    this.color = void 0;
    this.size = void 0;
    this.textSize = void 0;
    this.phantom = void 0;
    this.font = void 0;
    this.fontFamily = void 0;
    this.fontWeight = void 0;
    this.fontShape = void 0;
    this.sizeMultiplier = void 0;
    this.maxSize = void 0;
    this.minRuleThickness = void 0;
    this._fontMetrics = void 0;
    this.style = data.style;
    this.color = data.color;
    this.size = data.size || _Options.BASESIZE;
    this.textSize = data.textSize || this.size;
    this.phantom = !!data.phantom;
    this.font = data.font || "";
    this.fontFamily = data.fontFamily || "";
    this.fontWeight = data.fontWeight || "";
    this.fontShape = data.fontShape || "";
    this.sizeMultiplier = sizeMultipliers[this.size - 1];
    this.maxSize = data.maxSize;
    this.minRuleThickness = data.minRuleThickness;
    this._fontMetrics = void 0;
  }
  /**
   * Returns a new options object with the same properties as "this".  Properties
   * from "extension" will be copied to the new options object.
   */
  extend(extension) {
    var data = {
      style: this.style,
      size: this.size,
      textSize: this.textSize,
      color: this.color,
      phantom: this.phantom,
      font: this.font,
      fontFamily: this.fontFamily,
      fontWeight: this.fontWeight,
      fontShape: this.fontShape,
      maxSize: this.maxSize,
      minRuleThickness: this.minRuleThickness
    };
    for (var key in extension) {
      if (extension.hasOwnProperty(key)) {
        data[key] = extension[key];
      }
    }
    return new _Options(data);
  }
  /**
   * Return an options object with the given style. If `this.style === style`,
   * returns `this`.
   */
  havingStyle(style) {
    if (this.style === style) {
      return this;
    } else {
      return this.extend({
        style,
        size: sizeAtStyle(this.textSize, style)
      });
    }
  }
  /**
   * Return an options object with a cramped version of the current style. If
   * the current style is cramped, returns `this`.
   */
  havingCrampedStyle() {
    return this.havingStyle(this.style.cramp());
  }
  /**
   * Return an options object with the given size and in at least `\textstyle`.
   * Returns `this` if appropriate.
   */
  havingSize(size) {
    if (this.size === size && this.textSize === size) {
      return this;
    } else {
      return this.extend({
        style: this.style.text(),
        size,
        textSize: size,
        sizeMultiplier: sizeMultipliers[size - 1]
      });
    }
  }
  /**
   * Like `this.havingSize(BASESIZE).havingStyle(style)`. If `style` is omitted,
   * changes to at least `\textstyle`.
   */
  havingBaseStyle(style) {
    style = style || this.style.text();
    var wantSize = sizeAtStyle(_Options.BASESIZE, style);
    if (this.size === wantSize && this.textSize === _Options.BASESIZE && this.style === style) {
      return this;
    } else {
      return this.extend({
        style,
        size: wantSize
      });
    }
  }
  /**
   * Remove the effect of sizing changes such as \Huge.
   * Keep the effect of the current style, such as \scriptstyle.
   */
  havingBaseSizing() {
    var size;
    switch (this.style.id) {
      case 4:
      case 5:
        size = 3;
        break;
      case 6:
      case 7:
        size = 1;
        break;
      default:
        size = 6;
    }
    return this.extend({
      style: this.style.text(),
      size
    });
  }
  /**
   * Create a new options object with the given color.
   */
  withColor(color) {
    return this.extend({
      color
    });
  }
  /**
   * Create a new options object with "phantom" set to true.
   */
  withPhantom() {
    return this.extend({
      phantom: true
    });
  }
  /**
   * Creates a new options object with the given math font or old text font.
   * @type {[type]}
   */
  withFont(font) {
    return this.extend({
      font
    });
  }
  /**
   * Create a new options objects with the given fontFamily.
   */
  withTextFontFamily(fontFamily) {
    return this.extend({
      fontFamily,
      font: ""
    });
  }
  /**
   * Creates a new options object with the given font weight
   */
  withTextFontWeight(fontWeight) {
    return this.extend({
      fontWeight,
      font: ""
    });
  }
  /**
   * Creates a new options object with the given font weight
   */
  withTextFontShape(fontShape) {
    return this.extend({
      fontShape,
      font: ""
    });
  }
  /**
   * Return the CSS sizing classes required to switch from enclosing options
   * `oldOptions` to `this`. Returns an array of classes.
   */
  sizingClasses(oldOptions) {
    if (oldOptions.size !== this.size) {
      return ["sizing", "reset-size" + oldOptions.size, "size" + this.size];
    } else {
      return [];
    }
  }
  /**
   * Return the CSS sizing classes required to switch to the base size. Like
   * `this.havingSize(BASESIZE).sizingClasses(this)`.
   */
  baseSizingClasses() {
    if (this.size !== _Options.BASESIZE) {
      return ["sizing", "reset-size" + this.size, "size" + _Options.BASESIZE];
    } else {
      return [];
    }
  }
  /**
   * Return the font metrics for this size.
   */
  fontMetrics() {
    if (!this._fontMetrics) {
      this._fontMetrics = getGlobalMetrics(this.size);
    }
    return this._fontMetrics;
  }
  /**
   * Gets the CSS color of the current options object
   */
  getColor() {
    if (this.phantom) {
      return "transparent";
    } else {
      return this.color;
    }
  }
};
Options.BASESIZE = 6;
var ptPerUnit = {
  // https://en.wikibooks.org/wiki/LaTeX/Lengths and
  // https://tex.stackexchange.com/a/8263
  "pt": 1,
  // TeX point
  "mm": 7227 / 2540,
  // millimeter
  "cm": 7227 / 254,
  // centimeter
  "in": 72.27,
  // inch
  "bp": 803 / 800,
  // big (PostScript) points
  "pc": 12,
  // pica
  "dd": 1238 / 1157,
  // didot
  "cc": 14856 / 1157,
  // cicero (12 didot)
  "nd": 685 / 642,
  // new didot
  "nc": 1370 / 107,
  // new cicero (12 new didot)
  "sp": 1 / 65536,
  // scaled point (TeX's internal smallest unit)
  // https://tex.stackexchange.com/a/41371
  "px": 803 / 800
  // \pdfpxdimen defaults to 1 bp in pdfTeX and LuaTeX
};
var relativeUnit = {
  "ex": true,
  "em": true,
  "mu": true
};
var validUnit = function validUnit2(unit) {
  if (typeof unit !== "string") {
    unit = unit.unit;
  }
  return unit in ptPerUnit || unit in relativeUnit || unit === "ex";
};
var calculateSize = function calculateSize2(sizeValue, options) {
  var scale;
  if (sizeValue.unit in ptPerUnit) {
    scale = ptPerUnit[sizeValue.unit] / options.fontMetrics().ptPerEm / options.sizeMultiplier;
  } else if (sizeValue.unit === "mu") {
    scale = options.fontMetrics().cssEmPerMu;
  } else {
    var unitOptions;
    if (options.style.isTight()) {
      unitOptions = options.havingStyle(options.style.text());
    } else {
      unitOptions = options;
    }
    if (sizeValue.unit === "ex") {
      scale = unitOptions.fontMetrics().xHeight;
    } else if (sizeValue.unit === "em") {
      scale = unitOptions.fontMetrics().quad;
    } else {
      throw new ParseError2("Invalid unit: '" + sizeValue.unit + "'");
    }
    if (unitOptions !== options) {
      scale *= unitOptions.sizeMultiplier / options.sizeMultiplier;
    }
  }
  return Math.min(sizeValue.number * scale, options.maxSize);
};
var makeEm = function makeEm2(n) {
  return +n.toFixed(4) + "em";
};
var createClass = function createClass2(classes) {
  return classes.filter((cls) => cls).join(" ");
};
var initNode = function initNode2(classes, options, style) {
  this.classes = classes || [];
  this.attributes = {};
  this.height = 0;
  this.depth = 0;
  this.maxFontSize = 0;
  this.style = style || {};
  if (options) {
    if (options.style.isTight()) {
      this.classes.push("mtight");
    }
    var color = options.getColor();
    if (color) {
      this.style.color = color;
    }
  }
};
var toNode = function toNode2(tagName) {
  var node = document.createElement(tagName);
  node.className = createClass(this.classes);
  for (var style in this.style) {
    if (this.style.hasOwnProperty(style)) {
      node.style[style] = this.style[style];
    }
  }
  for (var attr in this.attributes) {
    if (this.attributes.hasOwnProperty(attr)) {
      node.setAttribute(attr, this.attributes[attr]);
    }
  }
  for (var i = 0; i < this.children.length; i++) {
    node.appendChild(this.children[i].toNode());
  }
  return node;
};
var invalidAttributeNameRegex = /[\s"'>/=\x00-\x1f]/;
var toMarkup = function toMarkup2(tagName) {
  var markup = "<" + tagName;
  if (this.classes.length) {
    markup += ' class="' + utils.escape(createClass(this.classes)) + '"';
  }
  var styles2 = "";
  for (var style in this.style) {
    if (this.style.hasOwnProperty(style)) {
      styles2 += utils.hyphenate(style) + ":" + this.style[style] + ";";
    }
  }
  if (styles2) {
    markup += ' style="' + utils.escape(styles2) + '"';
  }
  for (var attr in this.attributes) {
    if (this.attributes.hasOwnProperty(attr)) {
      if (invalidAttributeNameRegex.test(attr)) {
        throw new ParseError2("Invalid attribute name '" + attr + "'");
      }
      markup += " " + attr + '="' + utils.escape(this.attributes[attr]) + '"';
    }
  }
  markup += ">";
  for (var i = 0; i < this.children.length; i++) {
    markup += this.children[i].toMarkup();
  }
  markup += "</" + tagName + ">";
  return markup;
};
var Span = class {
  constructor(classes, children, options, style) {
    this.children = void 0;
    this.attributes = void 0;
    this.classes = void 0;
    this.height = void 0;
    this.depth = void 0;
    this.width = void 0;
    this.maxFontSize = void 0;
    this.style = void 0;
    initNode.call(this, classes, options, style);
    this.children = children || [];
  }
  /**
   * Sets an arbitrary attribute on the span. Warning: use this wisely. Not
   * all browsers support attributes the same, and having too many custom
   * attributes is probably bad.
   */
  setAttribute(attribute2, value) {
    this.attributes[attribute2] = value;
  }
  hasClass(className) {
    return utils.contains(this.classes, className);
  }
  toNode() {
    return toNode.call(this, "span");
  }
  toMarkup() {
    return toMarkup.call(this, "span");
  }
};
var Anchor = class {
  constructor(href, classes, children, options) {
    this.children = void 0;
    this.attributes = void 0;
    this.classes = void 0;
    this.height = void 0;
    this.depth = void 0;
    this.maxFontSize = void 0;
    this.style = void 0;
    initNode.call(this, classes, options);
    this.children = children || [];
    this.setAttribute("href", href);
  }
  setAttribute(attribute2, value) {
    this.attributes[attribute2] = value;
  }
  hasClass(className) {
    return utils.contains(this.classes, className);
  }
  toNode() {
    return toNode.call(this, "a");
  }
  toMarkup() {
    return toMarkup.call(this, "a");
  }
};
var Img = class {
  constructor(src, alt, style) {
    this.src = void 0;
    this.alt = void 0;
    this.classes = void 0;
    this.height = void 0;
    this.depth = void 0;
    this.maxFontSize = void 0;
    this.style = void 0;
    this.alt = alt;
    this.src = src;
    this.classes = ["mord"];
    this.style = style;
  }
  hasClass(className) {
    return utils.contains(this.classes, className);
  }
  toNode() {
    var node = document.createElement("img");
    node.src = this.src;
    node.alt = this.alt;
    node.className = "mord";
    for (var style in this.style) {
      if (this.style.hasOwnProperty(style)) {
        node.style[style] = this.style[style];
      }
    }
    return node;
  }
  toMarkup() {
    var markup = '<img src="' + utils.escape(this.src) + '"' + (' alt="' + utils.escape(this.alt) + '"');
    var styles2 = "";
    for (var style in this.style) {
      if (this.style.hasOwnProperty(style)) {
        styles2 += utils.hyphenate(style) + ":" + this.style[style] + ";";
      }
    }
    if (styles2) {
      markup += ' style="' + utils.escape(styles2) + '"';
    }
    markup += "'/>";
    return markup;
  }
};
var iCombinations = {
  "\xEE": "\u0131\u0302",
  "\xEF": "\u0131\u0308",
  "\xED": "\u0131\u0301",
  // 'ī': '\u0131\u0304', // enable when we add Extended Latin
  "\xEC": "\u0131\u0300"
};
var SymbolNode = class {
  constructor(text3, height, depth, italic, skew, width, classes, style) {
    this.text = void 0;
    this.height = void 0;
    this.depth = void 0;
    this.italic = void 0;
    this.skew = void 0;
    this.width = void 0;
    this.maxFontSize = void 0;
    this.classes = void 0;
    this.style = void 0;
    this.text = text3;
    this.height = height || 0;
    this.depth = depth || 0;
    this.italic = italic || 0;
    this.skew = skew || 0;
    this.width = width || 0;
    this.classes = classes || [];
    this.style = style || {};
    this.maxFontSize = 0;
    var script = scriptFromCodepoint(this.text.charCodeAt(0));
    if (script) {
      this.classes.push(script + "_fallback");
    }
    if (/[îïíì]/.test(this.text)) {
      this.text = iCombinations[this.text];
    }
  }
  hasClass(className) {
    return utils.contains(this.classes, className);
  }
  /**
   * Creates a text node or span from a symbol node. Note that a span is only
   * created if it is needed.
   */
  toNode() {
    var node = document.createTextNode(this.text);
    var span = null;
    if (this.italic > 0) {
      span = document.createElement("span");
      span.style.marginRight = makeEm(this.italic);
    }
    if (this.classes.length > 0) {
      span = span || document.createElement("span");
      span.className = createClass(this.classes);
    }
    for (var style in this.style) {
      if (this.style.hasOwnProperty(style)) {
        span = span || document.createElement("span");
        span.style[style] = this.style[style];
      }
    }
    if (span) {
      span.appendChild(node);
      return span;
    } else {
      return node;
    }
  }
  /**
   * Creates markup for a symbol node.
   */
  toMarkup() {
    var needsSpan = false;
    var markup = "<span";
    if (this.classes.length) {
      needsSpan = true;
      markup += ' class="';
      markup += utils.escape(createClass(this.classes));
      markup += '"';
    }
    var styles2 = "";
    if (this.italic > 0) {
      styles2 += "margin-right:" + this.italic + "em;";
    }
    for (var style in this.style) {
      if (this.style.hasOwnProperty(style)) {
        styles2 += utils.hyphenate(style) + ":" + this.style[style] + ";";
      }
    }
    if (styles2) {
      needsSpan = true;
      markup += ' style="' + utils.escape(styles2) + '"';
    }
    var escaped = utils.escape(this.text);
    if (needsSpan) {
      markup += ">";
      markup += escaped;
      markup += "</span>";
      return markup;
    } else {
      return escaped;
    }
  }
};
var SvgNode = class {
  constructor(children, attributes) {
    this.children = void 0;
    this.attributes = void 0;
    this.children = children || [];
    this.attributes = attributes || {};
  }
  toNode() {
    var svgNS = "http://www.w3.org/2000/svg";
    var node = document.createElementNS(svgNS, "svg");
    for (var attr in this.attributes) {
      if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
        node.setAttribute(attr, this.attributes[attr]);
      }
    }
    for (var i = 0; i < this.children.length; i++) {
      node.appendChild(this.children[i].toNode());
    }
    return node;
  }
  toMarkup() {
    var markup = '<svg xmlns="http://www.w3.org/2000/svg"';
    for (var attr in this.attributes) {
      if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
        markup += " " + attr + '="' + utils.escape(this.attributes[attr]) + '"';
      }
    }
    markup += ">";
    for (var i = 0; i < this.children.length; i++) {
      markup += this.children[i].toMarkup();
    }
    markup += "</svg>";
    return markup;
  }
};
var PathNode = class {
  constructor(pathName, alternate) {
    this.pathName = void 0;
    this.alternate = void 0;
    this.pathName = pathName;
    this.alternate = alternate;
  }
  toNode() {
    var svgNS = "http://www.w3.org/2000/svg";
    var node = document.createElementNS(svgNS, "path");
    if (this.alternate) {
      node.setAttribute("d", this.alternate);
    } else {
      node.setAttribute("d", path[this.pathName]);
    }
    return node;
  }
  toMarkup() {
    if (this.alternate) {
      return '<path d="' + utils.escape(this.alternate) + '"/>';
    } else {
      return '<path d="' + utils.escape(path[this.pathName]) + '"/>';
    }
  }
};
var LineNode = class {
  constructor(attributes) {
    this.attributes = void 0;
    this.attributes = attributes || {};
  }
  toNode() {
    var svgNS = "http://www.w3.org/2000/svg";
    var node = document.createElementNS(svgNS, "line");
    for (var attr in this.attributes) {
      if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
        node.setAttribute(attr, this.attributes[attr]);
      }
    }
    return node;
  }
  toMarkup() {
    var markup = "<line";
    for (var attr in this.attributes) {
      if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
        markup += " " + attr + '="' + utils.escape(this.attributes[attr]) + '"';
      }
    }
    markup += "/>";
    return markup;
  }
};
function assertSymbolDomNode(group) {
  if (group instanceof SymbolNode) {
    return group;
  } else {
    throw new Error("Expected symbolNode but got " + String(group) + ".");
  }
}
function assertSpan(group) {
  if (group instanceof Span) {
    return group;
  } else {
    throw new Error("Expected span<HtmlDomNode> but got " + String(group) + ".");
  }
}
var ATOMS = {
  "bin": 1,
  "close": 1,
  "inner": 1,
  "open": 1,
  "punct": 1,
  "rel": 1
};
var NON_ATOMS = {
  "accent-token": 1,
  "mathord": 1,
  "op-token": 1,
  "spacing": 1,
  "textord": 1
};
var symbols = {
  "math": {},
  "text": {}
};
function defineSymbol(mode, font, group, replace, name, acceptUnicodeChar) {
  symbols[mode][name] = {
    font,
    group,
    replace
  };
  if (acceptUnicodeChar && replace) {
    symbols[mode][replace] = symbols[mode][name];
  }
}
var math = "math";
var text2 = "text";
var main = "main";
var ams = "ams";
var accent = "accent-token";
var bin = "bin";
var close = "close";
var inner = "inner";
var mathord = "mathord";
var op = "op-token";
var open2 = "open";
var punct = "punct";
var rel = "rel";
var spacing = "spacing";
var textord = "textord";
defineSymbol(math, main, rel, "\u2261", "\\equiv", true);
defineSymbol(math, main, rel, "\u227A", "\\prec", true);
defineSymbol(math, main, rel, "\u227B", "\\succ", true);
defineSymbol(math, main, rel, "\u223C", "\\sim", true);
defineSymbol(math, main, rel, "\u22A5", "\\perp");
defineSymbol(math, main, rel, "\u2AAF", "\\preceq", true);
defineSymbol(math, main, rel, "\u2AB0", "\\succeq", true);
defineSymbol(math, main, rel, "\u2243", "\\simeq", true);
defineSymbol(math, main, rel, "\u2223", "\\mid", true);
defineSymbol(math, main, rel, "\u226A", "\\ll", true);
defineSymbol(math, main, rel, "\u226B", "\\gg", true);
defineSymbol(math, main, rel, "\u224D", "\\asymp", true);
defineSymbol(math, main, rel, "\u2225", "\\parallel");
defineSymbol(math, main, rel, "\u22C8", "\\bowtie", true);
defineSymbol(math, main, rel, "\u2323", "\\smile", true);
defineSymbol(math, main, rel, "\u2291", "\\sqsubseteq", true);
defineSymbol(math, main, rel, "\u2292", "\\sqsupseteq", true);
defineSymbol(math, main, rel, "\u2250", "\\doteq", true);
defineSymbol(math, main, rel, "\u2322", "\\frown", true);
defineSymbol(math, main, rel, "\u220B", "\\ni", true);
defineSymbol(math, main, rel, "\u221D", "\\propto", true);
defineSymbol(math, main, rel, "\u22A2", "\\vdash", true);
defineSymbol(math, main, rel, "\u22A3", "\\dashv", true);
defineSymbol(math, main, rel, "\u220B", "\\owns");
defineSymbol(math, main, punct, ".", "\\ldotp");
defineSymbol(math, main, punct, "\u22C5", "\\cdotp");
defineSymbol(math, main, textord, "#", "\\#");
defineSymbol(text2, main, textord, "#", "\\#");
defineSymbol(math, main, textord, "&", "\\&");
defineSymbol(text2, main, textord, "&", "\\&");
defineSymbol(math, main, textord, "\u2135", "\\aleph", true);
defineSymbol(math, main, textord, "\u2200", "\\forall", true);
defineSymbol(math, main, textord, "\u210F", "\\hbar", true);
defineSymbol(math, main, textord, "\u2203", "\\exists", true);
defineSymbol(math, main, textord, "\u2207", "\\nabla", true);
defineSymbol(math, main, textord, "\u266D", "\\flat", true);
defineSymbol(math, main, textord, "\u2113", "\\ell", true);
defineSymbol(math, main, textord, "\u266E", "\\natural", true);
defineSymbol(math, main, textord, "\u2663", "\\clubsuit", true);
defineSymbol(math, main, textord, "\u2118", "\\wp", true);
defineSymbol(math, main, textord, "\u266F", "\\sharp", true);
defineSymbol(math, main, textord, "\u2662", "\\diamondsuit", true);
defineSymbol(math, main, textord, "\u211C", "\\Re", true);
defineSymbol(math, main, textord, "\u2661", "\\heartsuit", true);
defineSymbol(math, main, textord, "\u2111", "\\Im", true);
defineSymbol(math, main, textord, "\u2660", "\\spadesuit", true);
defineSymbol(math, main, textord, "\xA7", "\\S", true);
defineSymbol(text2, main, textord, "\xA7", "\\S");
defineSymbol(math, main, textord, "\xB6", "\\P", true);
defineSymbol(text2, main, textord, "\xB6", "\\P");
defineSymbol(math, main, textord, "\u2020", "\\dag");
defineSymbol(text2, main, textord, "\u2020", "\\dag");
defineSymbol(text2, main, textord, "\u2020", "\\textdagger");
defineSymbol(math, main, textord, "\u2021", "\\ddag");
defineSymbol(text2, main, textord, "\u2021", "\\ddag");
defineSymbol(text2, main, textord, "\u2021", "\\textdaggerdbl");
defineSymbol(math, main, close, "\u23B1", "\\rmoustache", true);
defineSymbol(math, main, open2, "\u23B0", "\\lmoustache", true);
defineSymbol(math, main, close, "\u27EF", "\\rgroup", true);
defineSymbol(math, main, open2, "\u27EE", "\\lgroup", true);
defineSymbol(math, main, bin, "\u2213", "\\mp", true);
defineSymbol(math, main, bin, "\u2296", "\\ominus", true);
defineSymbol(math, main, bin, "\u228E", "\\uplus", true);
defineSymbol(math, main, bin, "\u2293", "\\sqcap", true);
defineSymbol(math, main, bin, "\u2217", "\\ast");
defineSymbol(math, main, bin, "\u2294", "\\sqcup", true);
defineSymbol(math, main, bin, "\u25EF", "\\bigcirc", true);
defineSymbol(math, main, bin, "\u2219", "\\bullet", true);
defineSymbol(math, main, bin, "\u2021", "\\ddagger");
defineSymbol(math, main, bin, "\u2240", "\\wr", true);
defineSymbol(math, main, bin, "\u2A3F", "\\amalg");
defineSymbol(math, main, bin, "&", "\\And");
defineSymbol(math, main, rel, "\u27F5", "\\longleftarrow", true);
defineSymbol(math, main, rel, "\u21D0", "\\Leftarrow", true);
defineSymbol(math, main, rel, "\u27F8", "\\Longleftarrow", true);
defineSymbol(math, main, rel, "\u27F6", "\\longrightarrow", true);
defineSymbol(math, main, rel, "\u21D2", "\\Rightarrow", true);
defineSymbol(math, main, rel, "\u27F9", "\\Longrightarrow", true);
defineSymbol(math, main, rel, "\u2194", "\\leftrightarrow", true);
defineSymbol(math, main, rel, "\u27F7", "\\longleftrightarrow", true);
defineSymbol(math, main, rel, "\u21D4", "\\Leftrightarrow", true);
defineSymbol(math, main, rel, "\u27FA", "\\Longleftrightarrow", true);
defineSymbol(math, main, rel, "\u21A6", "\\mapsto", true);
defineSymbol(math, main, rel, "\u27FC", "\\longmapsto", true);
defineSymbol(math, main, rel, "\u2197", "\\nearrow", true);
defineSymbol(math, main, rel, "\u21A9", "\\hookleftarrow", true);
defineSymbol(math, main, rel, "\u21AA", "\\hookrightarrow", true);
defineSymbol(math, main, rel, "\u2198", "\\searrow", true);
defineSymbol(math, main, rel, "\u21BC", "\\leftharpoonup", true);
defineSymbol(math, main, rel, "\u21C0", "\\rightharpoonup", true);
defineSymbol(math, main, rel, "\u2199", "\\swarrow", true);
defineSymbol(math, main, rel, "\u21BD", "\\leftharpoondown", true);
defineSymbol(math, main, rel, "\u21C1", "\\rightharpoondown", true);
defineSymbol(math, main, rel, "\u2196", "\\nwarrow", true);
defineSymbol(math, main, rel, "\u21CC", "\\rightleftharpoons", true);
defineSymbol(math, ams, rel, "\u226E", "\\nless", true);
defineSymbol(math, ams, rel, "\uE010", "\\@nleqslant");
defineSymbol(math, ams, rel, "\uE011", "\\@nleqq");
defineSymbol(math, ams, rel, "\u2A87", "\\lneq", true);
defineSymbol(math, ams, rel, "\u2268", "\\lneqq", true);
defineSymbol(math, ams, rel, "\uE00C", "\\@lvertneqq");
defineSymbol(math, ams, rel, "\u22E6", "\\lnsim", true);
defineSymbol(math, ams, rel, "\u2A89", "\\lnapprox", true);
defineSymbol(math, ams, rel, "\u2280", "\\nprec", true);
defineSymbol(math, ams, rel, "\u22E0", "\\npreceq", true);
defineSymbol(math, ams, rel, "\u22E8", "\\precnsim", true);
defineSymbol(math, ams, rel, "\u2AB9", "\\precnapprox", true);
defineSymbol(math, ams, rel, "\u2241", "\\nsim", true);
defineSymbol(math, ams, rel, "\uE006", "\\@nshortmid");
defineSymbol(math, ams, rel, "\u2224", "\\nmid", true);
defineSymbol(math, ams, rel, "\u22AC", "\\nvdash", true);
defineSymbol(math, ams, rel, "\u22AD", "\\nvDash", true);
defineSymbol(math, ams, rel, "\u22EA", "\\ntriangleleft");
defineSymbol(math, ams, rel, "\u22EC", "\\ntrianglelefteq", true);
defineSymbol(math, ams, rel, "\u228A", "\\subsetneq", true);
defineSymbol(math, ams, rel, "\uE01A", "\\@varsubsetneq");
defineSymbol(math, ams, rel, "\u2ACB", "\\subsetneqq", true);
defineSymbol(math, ams, rel, "\uE017", "\\@varsubsetneqq");
defineSymbol(math, ams, rel, "\u226F", "\\ngtr", true);
defineSymbol(math, ams, rel, "\uE00F", "\\@ngeqslant");
defineSymbol(math, ams, rel, "\uE00E", "\\@ngeqq");
defineSymbol(math, ams, rel, "\u2A88", "\\gneq", true);
defineSymbol(math, ams, rel, "\u2269", "\\gneqq", true);
defineSymbol(math, ams, rel, "\uE00D", "\\@gvertneqq");
defineSymbol(math, ams, rel, "\u22E7", "\\gnsim", true);
defineSymbol(math, ams, rel, "\u2A8A", "\\gnapprox", true);
defineSymbol(math, ams, rel, "\u2281", "\\nsucc", true);
defineSymbol(math, ams, rel, "\u22E1", "\\nsucceq", true);
defineSymbol(math, ams, rel, "\u22E9", "\\succnsim", true);
defineSymbol(math, ams, rel, "\u2ABA", "\\succnapprox", true);
defineSymbol(math, ams, rel, "\u2246", "\\ncong", true);
defineSymbol(math, ams, rel, "\uE007", "\\@nshortparallel");
defineSymbol(math, ams, rel, "\u2226", "\\nparallel", true);
defineSymbol(math, ams, rel, "\u22AF", "\\nVDash", true);
defineSymbol(math, ams, rel, "\u22EB", "\\ntriangleright");
defineSymbol(math, ams, rel, "\u22ED", "\\ntrianglerighteq", true);
defineSymbol(math, ams, rel, "\uE018", "\\@nsupseteqq");
defineSymbol(math, ams, rel, "\u228B", "\\supsetneq", true);
defineSymbol(math, ams, rel, "\uE01B", "\\@varsupsetneq");
defineSymbol(math, ams, rel, "\u2ACC", "\\supsetneqq", true);
defineSymbol(math, ams, rel, "\uE019", "\\@varsupsetneqq");
defineSymbol(math, ams, rel, "\u22AE", "\\nVdash", true);
defineSymbol(math, ams, rel, "\u2AB5", "\\precneqq", true);
defineSymbol(math, ams, rel, "\u2AB6", "\\succneqq", true);
defineSymbol(math, ams, rel, "\uE016", "\\@nsubseteqq");
defineSymbol(math, ams, bin, "\u22B4", "\\unlhd");
defineSymbol(math, ams, bin, "\u22B5", "\\unrhd");
defineSymbol(math, ams, rel, "\u219A", "\\nleftarrow", true);
defineSymbol(math, ams, rel, "\u219B", "\\nrightarrow", true);
defineSymbol(math, ams, rel, "\u21CD", "\\nLeftarrow", true);
defineSymbol(math, ams, rel, "\u21CF", "\\nRightarrow", true);
defineSymbol(math, ams, rel, "\u21AE", "\\nleftrightarrow", true);
defineSymbol(math, ams, rel, "\u21CE", "\\nLeftrightarrow", true);
defineSymbol(math, ams, rel, "\u25B3", "\\vartriangle");
defineSymbol(math, ams, textord, "\u210F", "\\hslash");
defineSymbol(math, ams, textord, "\u25BD", "\\triangledown");
defineSymbol(math, ams, textord, "\u25CA", "\\lozenge");
defineSymbol(math, ams, textord, "\u24C8", "\\circledS");
defineSymbol(math, ams, textord, "\xAE", "\\circledR");
defineSymbol(text2, ams, textord, "\xAE", "\\circledR");
defineSymbol(math, ams, textord, "\u2221", "\\measuredangle", true);
defineSymbol(math, ams, textord, "\u2204", "\\nexists");
defineSymbol(math, ams, textord, "\u2127", "\\mho");
defineSymbol(math, ams, textord, "\u2132", "\\Finv", true);
defineSymbol(math, ams, textord, "\u2141", "\\Game", true);
defineSymbol(math, ams, textord, "\u2035", "\\backprime");
defineSymbol(math, ams, textord, "\u25B2", "\\blacktriangle");
defineSymbol(math, ams, textord, "\u25BC", "\\blacktriangledown");
defineSymbol(math, ams, textord, "\u25A0", "\\blacksquare");
defineSymbol(math, ams, textord, "\u29EB", "\\blacklozenge");
defineSymbol(math, ams, textord, "\u2605", "\\bigstar");
defineSymbol(math, ams, textord, "\u2222", "\\sphericalangle", true);
defineSymbol(math, ams, textord, "\u2201", "\\complement", true);
defineSymbol(math, ams, textord, "\xF0", "\\eth", true);
defineSymbol(text2, main, textord, "\xF0", "\xF0");
defineSymbol(math, ams, textord, "\u2571", "\\diagup");
defineSymbol(math, ams, textord, "\u2572", "\\diagdown");
defineSymbol(math, ams, textord, "\u25A1", "\\square");
defineSymbol(math, ams, textord, "\u25A1", "\\Box");
defineSymbol(math, ams, textord, "\u25CA", "\\Diamond");
defineSymbol(math, ams, textord, "\xA5", "\\yen", true);
defineSymbol(text2, ams, textord, "\xA5", "\\yen", true);
defineSymbol(math, ams, textord, "\u2713", "\\checkmark", true);
defineSymbol(text2, ams, textord, "\u2713", "\\checkmark");
defineSymbol(math, ams, textord, "\u2136", "\\beth", true);
defineSymbol(math, ams, textord, "\u2138", "\\daleth", true);
defineSymbol(math, ams, textord, "\u2137", "\\gimel", true);
defineSymbol(math, ams, textord, "\u03DD", "\\digamma", true);
defineSymbol(math, ams, textord, "\u03F0", "\\varkappa");
defineSymbol(math, ams, open2, "\u250C", "\\@ulcorner", true);
defineSymbol(math, ams, close, "\u2510", "\\@urcorner", true);
defineSymbol(math, ams, open2, "\u2514", "\\@llcorner", true);
defineSymbol(math, ams, close, "\u2518", "\\@lrcorner", true);
defineSymbol(math, ams, rel, "\u2266", "\\leqq", true);
defineSymbol(math, ams, rel, "\u2A7D", "\\leqslant", true);
defineSymbol(math, ams, rel, "\u2A95", "\\eqslantless", true);
defineSymbol(math, ams, rel, "\u2272", "\\lesssim", true);
defineSymbol(math, ams, rel, "\u2A85", "\\lessapprox", true);
defineSymbol(math, ams, rel, "\u224A", "\\approxeq", true);
defineSymbol(math, ams, bin, "\u22D6", "\\lessdot");
defineSymbol(math, ams, rel, "\u22D8", "\\lll", true);
defineSymbol(math, ams, rel, "\u2276", "\\lessgtr", true);
defineSymbol(math, ams, rel, "\u22DA", "\\lesseqgtr", true);
defineSymbol(math, ams, rel, "\u2A8B", "\\lesseqqgtr", true);
defineSymbol(math, ams, rel, "\u2251", "\\doteqdot");
defineSymbol(math, ams, rel, "\u2253", "\\risingdotseq", true);
defineSymbol(math, ams, rel, "\u2252", "\\fallingdotseq", true);
defineSymbol(math, ams, rel, "\u223D", "\\backsim", true);
defineSymbol(math, ams, rel, "\u22CD", "\\backsimeq", true);
defineSymbol(math, ams, rel, "\u2AC5", "\\subseteqq", true);
defineSymbol(math, ams, rel, "\u22D0", "\\Subset", true);
defineSymbol(math, ams, rel, "\u228F", "\\sqsubset", true);
defineSymbol(math, ams, rel, "\u227C", "\\preccurlyeq", true);
defineSymbol(math, ams, rel, "\u22DE", "\\curlyeqprec", true);
defineSymbol(math, ams, rel, "\u227E", "\\precsim", true);
defineSymbol(math, ams, rel, "\u2AB7", "\\precapprox", true);
defineSymbol(math, ams, rel, "\u22B2", "\\vartriangleleft");
defineSymbol(math, ams, rel, "\u22B4", "\\trianglelefteq");
defineSymbol(math, ams, rel, "\u22A8", "\\vDash", true);
defineSymbol(math, ams, rel, "\u22AA", "\\Vvdash", true);
defineSymbol(math, ams, rel, "\u2323", "\\smallsmile");
defineSymbol(math, ams, rel, "\u2322", "\\smallfrown");
defineSymbol(math, ams, rel, "\u224F", "\\bumpeq", true);
defineSymbol(math, ams, rel, "\u224E", "\\Bumpeq", true);
defineSymbol(math, ams, rel, "\u2267", "\\geqq", true);
defineSymbol(math, ams, rel, "\u2A7E", "\\geqslant", true);
defineSymbol(math, ams, rel, "\u2A96", "\\eqslantgtr", true);
defineSymbol(math, ams, rel, "\u2273", "\\gtrsim", true);
defineSymbol(math, ams, rel, "\u2A86", "\\gtrapprox", true);
defineSymbol(math, ams, bin, "\u22D7", "\\gtrdot");
defineSymbol(math, ams, rel, "\u22D9", "\\ggg", true);
defineSymbol(math, ams, rel, "\u2277", "\\gtrless", true);
defineSymbol(math, ams, rel, "\u22DB", "\\gtreqless", true);
defineSymbol(math, ams, rel, "\u2A8C", "\\gtreqqless", true);
defineSymbol(math, ams, rel, "\u2256", "\\eqcirc", true);
defineSymbol(math, ams, rel, "\u2257", "\\circeq", true);
defineSymbol(math, ams, rel, "\u225C", "\\triangleq", true);
defineSymbol(math, ams, rel, "\u223C", "\\thicksim");
defineSymbol(math, ams, rel, "\u2248", "\\thickapprox");
defineSymbol(math, ams, rel, "\u2AC6", "\\supseteqq", true);
defineSymbol(math, ams, rel, "\u22D1", "\\Supset", true);
defineSymbol(math, ams, rel, "\u2290", "\\sqsupset", true);
defineSymbol(math, ams, rel, "\u227D", "\\succcurlyeq", true);
defineSymbol(math, ams, rel, "\u22DF", "\\curlyeqsucc", true);
defineSymbol(math, ams, rel, "\u227F", "\\succsim", true);
defineSymbol(math, ams, rel, "\u2AB8", "\\succapprox", true);
defineSymbol(math, ams, rel, "\u22B3", "\\vartriangleright");
defineSymbol(math, ams, rel, "\u22B5", "\\trianglerighteq");
defineSymbol(math, ams, rel, "\u22A9", "\\Vdash", true);
defineSymbol(math, ams, rel, "\u2223", "\\shortmid");
defineSymbol(math, ams, rel, "\u2225", "\\shortparallel");
defineSymbol(math, ams, rel, "\u226C", "\\between", true);
defineSymbol(math, ams, rel, "\u22D4", "\\pitchfork", true);
defineSymbol(math, ams, rel, "\u221D", "\\varpropto");
defineSymbol(math, ams, rel, "\u25C0", "\\blacktriangleleft");
defineSymbol(math, ams, rel, "\u2234", "\\therefore", true);
defineSymbol(math, ams, rel, "\u220D", "\\backepsilon");
defineSymbol(math, ams, rel, "\u25B6", "\\blacktriangleright");
defineSymbol(math, ams, rel, "\u2235", "\\because", true);
defineSymbol(math, ams, rel, "\u22D8", "\\llless");
defineSymbol(math, ams, rel, "\u22D9", "\\gggtr");
defineSymbol(math, ams, bin, "\u22B2", "\\lhd");
defineSymbol(math, ams, bin, "\u22B3", "\\rhd");
defineSymbol(math, ams, rel, "\u2242", "\\eqsim", true);
defineSymbol(math, main, rel, "\u22C8", "\\Join");
defineSymbol(math, ams, rel, "\u2251", "\\Doteq", true);
defineSymbol(math, ams, bin, "\u2214", "\\dotplus", true);
defineSymbol(math, ams, bin, "\u2216", "\\smallsetminus");
defineSymbol(math, ams, bin, "\u22D2", "\\Cap", true);
defineSymbol(math, ams, bin, "\u22D3", "\\Cup", true);
defineSymbol(math, ams, bin, "\u2A5E", "\\doublebarwedge", true);
defineSymbol(math, ams, bin, "\u229F", "\\boxminus", true);
defineSymbol(math, ams, bin, "\u229E", "\\boxplus", true);
defineSymbol(math, ams, bin, "\u22C7", "\\divideontimes", true);
defineSymbol(math, ams, bin, "\u22C9", "\\ltimes", true);
defineSymbol(math, ams, bin, "\u22CA", "\\rtimes", true);
defineSymbol(math, ams, bin, "\u22CB", "\\leftthreetimes", true);
defineSymbol(math, ams, bin, "\u22CC", "\\rightthreetimes", true);
defineSymbol(math, ams, bin, "\u22CF", "\\curlywedge", true);
defineSymbol(math, ams, bin, "\u22CE", "\\curlyvee", true);
defineSymbol(math, ams, bin, "\u229D", "\\circleddash", true);
defineSymbol(math, ams, bin, "\u229B", "\\circledast", true);
defineSymbol(math, ams, bin, "\u22C5", "\\centerdot");
defineSymbol(math, ams, bin, "\u22BA", "\\intercal", true);
defineSymbol(math, ams, bin, "\u22D2", "\\doublecap");
defineSymbol(math, ams, bin, "\u22D3", "\\doublecup");
defineSymbol(math, ams, bin, "\u22A0", "\\boxtimes", true);
defineSymbol(math, ams, rel, "\u21E2", "\\dashrightarrow", true);
defineSymbol(math, ams, rel, "\u21E0", "\\dashleftarrow", true);
defineSymbol(math, ams, rel, "\u21C7", "\\leftleftarrows", true);
defineSymbol(math, ams, rel, "\u21C6", "\\leftrightarrows", true);
defineSymbol(math, ams, rel, "\u21DA", "\\Lleftarrow", true);
defineSymbol(math, ams, rel, "\u219E", "\\twoheadleftarrow", true);
defineSymbol(math, ams, rel, "\u21A2", "\\leftarrowtail", true);
defineSymbol(math, ams, rel, "\u21AB", "\\looparrowleft", true);
defineSymbol(math, ams, rel, "\u21CB", "\\leftrightharpoons", true);
defineSymbol(math, ams, rel, "\u21B6", "\\curvearrowleft", true);
defineSymbol(math, ams, rel, "\u21BA", "\\circlearrowleft", true);
defineSymbol(math, ams, rel, "\u21B0", "\\Lsh", true);
defineSymbol(math, ams, rel, "\u21C8", "\\upuparrows", true);
defineSymbol(math, ams, rel, "\u21BF", "\\upharpoonleft", true);
defineSymbol(math, ams, rel, "\u21C3", "\\downharpoonleft", true);
defineSymbol(math, main, rel, "\u22B6", "\\origof", true);
defineSymbol(math, main, rel, "\u22B7", "\\imageof", true);
defineSymbol(math, ams, rel, "\u22B8", "\\multimap", true);
defineSymbol(math, ams, rel, "\u21AD", "\\leftrightsquigarrow", true);
defineSymbol(math, ams, rel, "\u21C9", "\\rightrightarrows", true);
defineSymbol(math, ams, rel, "\u21C4", "\\rightleftarrows", true);
defineSymbol(math, ams, rel, "\u21A0", "\\twoheadrightarrow", true);
defineSymbol(math, ams, rel, "\u21A3", "\\rightarrowtail", true);
defineSymbol(math, ams, rel, "\u21AC", "\\looparrowright", true);
defineSymbol(math, ams, rel, "\u21B7", "\\curvearrowright", true);
defineSymbol(math, ams, rel, "\u21BB", "\\circlearrowright", true);
defineSymbol(math, ams, rel, "\u21B1", "\\Rsh", true);
defineSymbol(math, ams, rel, "\u21CA", "\\downdownarrows", true);
defineSymbol(math, ams, rel, "\u21BE", "\\upharpoonright", true);
defineSymbol(math, ams, rel, "\u21C2", "\\downharpoonright", true);
defineSymbol(math, ams, rel, "\u21DD", "\\rightsquigarrow", true);
defineSymbol(math, ams, rel, "\u21DD", "\\leadsto");
defineSymbol(math, ams, rel, "\u21DB", "\\Rrightarrow", true);
defineSymbol(math, ams, rel, "\u21BE", "\\restriction");
defineSymbol(math, main, textord, "\u2018", "`");
defineSymbol(math, main, textord, "$", "\\$");
defineSymbol(text2, main, textord, "$", "\\$");
defineSymbol(text2, main, textord, "$", "\\textdollar");
defineSymbol(math, main, textord, "%", "\\%");
defineSymbol(text2, main, textord, "%", "\\%");
defineSymbol(math, main, textord, "_", "\\_");
defineSymbol(text2, main, textord, "_", "\\_");
defineSymbol(text2, main, textord, "_", "\\textunderscore");
defineSymbol(math, main, textord, "\u2220", "\\angle", true);
defineSymbol(math, main, textord, "\u221E", "\\infty", true);
defineSymbol(math, main, textord, "\u2032", "\\prime");
defineSymbol(math, main, textord, "\u25B3", "\\triangle");
defineSymbol(math, main, textord, "\u0393", "\\Gamma", true);
defineSymbol(math, main, textord, "\u0394", "\\Delta", true);
defineSymbol(math, main, textord, "\u0398", "\\Theta", true);
defineSymbol(math, main, textord, "\u039B", "\\Lambda", true);
defineSymbol(math, main, textord, "\u039E", "\\Xi", true);
defineSymbol(math, main, textord, "\u03A0", "\\Pi", true);
defineSymbol(math, main, textord, "\u03A3", "\\Sigma", true);
defineSymbol(math, main, textord, "\u03A5", "\\Upsilon", true);
defineSymbol(math, main, textord, "\u03A6", "\\Phi", true);
defineSymbol(math, main, textord, "\u03A8", "\\Psi", true);
defineSymbol(math, main, textord, "\u03A9", "\\Omega", true);
defineSymbol(math, main, textord, "A", "\u0391");
defineSymbol(math, main, textord, "B", "\u0392");
defineSymbol(math, main, textord, "E", "\u0395");
defineSymbol(math, main, textord, "Z", "\u0396");
defineSymbol(math, main, textord, "H", "\u0397");
defineSymbol(math, main, textord, "I", "\u0399");
defineSymbol(math, main, textord, "K", "\u039A");
defineSymbol(math, main, textord, "M", "\u039C");
defineSymbol(math, main, textord, "N", "\u039D");
defineSymbol(math, main, textord, "O", "\u039F");
defineSymbol(math, main, textord, "P", "\u03A1");
defineSymbol(math, main, textord, "T", "\u03A4");
defineSymbol(math, main, textord, "X", "\u03A7");
defineSymbol(math, main, textord, "\xAC", "\\neg", true);
defineSymbol(math, main, textord, "\xAC", "\\lnot");
defineSymbol(math, main, textord, "\u22A4", "\\top");
defineSymbol(math, main, textord, "\u22A5", "\\bot");
defineSymbol(math, main, textord, "\u2205", "\\emptyset");
defineSymbol(math, ams, textord, "\u2205", "\\varnothing");
defineSymbol(math, main, mathord, "\u03B1", "\\alpha", true);
defineSymbol(math, main, mathord, "\u03B2", "\\beta", true);
defineSymbol(math, main, mathord, "\u03B3", "\\gamma", true);
defineSymbol(math, main, mathord, "\u03B4", "\\delta", true);
defineSymbol(math, main, mathord, "\u03F5", "\\epsilon", true);
defineSymbol(math, main, mathord, "\u03B6", "\\zeta", true);
defineSymbol(math, main, mathord, "\u03B7", "\\eta", true);
defineSymbol(math, main, mathord, "\u03B8", "\\theta", true);
defineSymbol(math, main, mathord, "\u03B9", "\\iota", true);
defineSymbol(math, main, mathord, "\u03BA", "\\kappa", true);
defineSymbol(math, main, mathord, "\u03BB", "\\lambda", true);
defineSymbol(math, main, mathord, "\u03BC", "\\mu", true);
defineSymbol(math, main, mathord, "\u03BD", "\\nu", true);
defineSymbol(math, main, mathord, "\u03BE", "\\xi", true);
defineSymbol(math, main, mathord, "\u03BF", "\\omicron", true);
defineSymbol(math, main, mathord, "\u03C0", "\\pi", true);
defineSymbol(math, main, mathord, "\u03C1", "\\rho", true);
defineSymbol(math, main, mathord, "\u03C3", "\\sigma", true);
defineSymbol(math, main, mathord, "\u03C4", "\\tau", true);
defineSymbol(math, main, mathord, "\u03C5", "\\upsilon", true);
defineSymbol(math, main, mathord, "\u03D5", "\\phi", true);
defineSymbol(math, main, mathord, "\u03C7", "\\chi", true);
defineSymbol(math, main, mathord, "\u03C8", "\\psi", true);
defineSymbol(math, main, mathord, "\u03C9", "\\omega", true);
defineSymbol(math, main, mathord, "\u03B5", "\\varepsilon", true);
defineSymbol(math, main, mathord, "\u03D1", "\\vartheta", true);
defineSymbol(math, main, mathord, "\u03D6", "\\varpi", true);
defineSymbol(math, main, mathord, "\u03F1", "\\varrho", true);
defineSymbol(math, main, mathord, "\u03C2", "\\varsigma", true);
defineSymbol(math, main, mathord, "\u03C6", "\\varphi", true);
defineSymbol(math, main, bin, "\u2217", "*", true);
defineSymbol(math, main, bin, "+", "+");
defineSymbol(math, main, bin, "\u2212", "-", true);
defineSymbol(math, main, bin, "\u22C5", "\\cdot", true);
defineSymbol(math, main, bin, "\u2218", "\\circ", true);
defineSymbol(math, main, bin, "\xF7", "\\div", true);
defineSymbol(math, main, bin, "\xB1", "\\pm", true);
defineSymbol(math, main, bin, "\xD7", "\\times", true);
defineSymbol(math, main, bin, "\u2229", "\\cap", true);
defineSymbol(math, main, bin, "\u222A", "\\cup", true);
defineSymbol(math, main, bin, "\u2216", "\\setminus", true);
defineSymbol(math, main, bin, "\u2227", "\\land");
defineSymbol(math, main, bin, "\u2228", "\\lor");
defineSymbol(math, main, bin, "\u2227", "\\wedge", true);
defineSymbol(math, main, bin, "\u2228", "\\vee", true);
defineSymbol(math, main, textord, "\u221A", "\\surd");
defineSymbol(math, main, open2, "\u27E8", "\\langle", true);
defineSymbol(math, main, open2, "\u2223", "\\lvert");
defineSymbol(math, main, open2, "\u2225", "\\lVert");
defineSymbol(math, main, close, "?", "?");
defineSymbol(math, main, close, "!", "!");
defineSymbol(math, main, close, "\u27E9", "\\rangle", true);
defineSymbol(math, main, close, "\u2223", "\\rvert");
defineSymbol(math, main, close, "\u2225", "\\rVert");
defineSymbol(math, main, rel, "=", "=");
defineSymbol(math, main, rel, ":", ":");
defineSymbol(math, main, rel, "\u2248", "\\approx", true);
defineSymbol(math, main, rel, "\u2245", "\\cong", true);
defineSymbol(math, main, rel, "\u2265", "\\ge");
defineSymbol(math, main, rel, "\u2265", "\\geq", true);
defineSymbol(math, main, rel, "\u2190", "\\gets");
defineSymbol(math, main, rel, ">", "\\gt", true);
defineSymbol(math, main, rel, "\u2208", "\\in", true);
defineSymbol(math, main, rel, "\uE020", "\\@not");
defineSymbol(math, main, rel, "\u2282", "\\subset", true);
defineSymbol(math, main, rel, "\u2283", "\\supset", true);
defineSymbol(math, main, rel, "\u2286", "\\subseteq", true);
defineSymbol(math, main, rel, "\u2287", "\\supseteq", true);
defineSymbol(math, ams, rel, "\u2288", "\\nsubseteq", true);
defineSymbol(math, ams, rel, "\u2289", "\\nsupseteq", true);
defineSymbol(math, main, rel, "\u22A8", "\\models");
defineSymbol(math, main, rel, "\u2190", "\\leftarrow", true);
defineSymbol(math, main, rel, "\u2264", "\\le");
defineSymbol(math, main, rel, "\u2264", "\\leq", true);
defineSymbol(math, main, rel, "<", "\\lt", true);
defineSymbol(math, main, rel, "\u2192", "\\rightarrow", true);
defineSymbol(math, main, rel, "\u2192", "\\to");
defineSymbol(math, ams, rel, "\u2271", "\\ngeq", true);
defineSymbol(math, ams, rel, "\u2270", "\\nleq", true);
defineSymbol(math, main, spacing, "\xA0", "\\ ");
defineSymbol(math, main, spacing, "\xA0", "\\space");
defineSymbol(math, main, spacing, "\xA0", "\\nobreakspace");
defineSymbol(text2, main, spacing, "\xA0", "\\ ");
defineSymbol(text2, main, spacing, "\xA0", " ");
defineSymbol(text2, main, spacing, "\xA0", "\\space");
defineSymbol(text2, main, spacing, "\xA0", "\\nobreakspace");
defineSymbol(math, main, spacing, null, "\\nobreak");
defineSymbol(math, main, spacing, null, "\\allowbreak");
defineSymbol(math, main, punct, ",", ",");
defineSymbol(math, main, punct, ";", ";");
defineSymbol(math, ams, bin, "\u22BC", "\\barwedge", true);
defineSymbol(math, ams, bin, "\u22BB", "\\veebar", true);
defineSymbol(math, main, bin, "\u2299", "\\odot", true);
defineSymbol(math, main, bin, "\u2295", "\\oplus", true);
defineSymbol(math, main, bin, "\u2297", "\\otimes", true);
defineSymbol(math, main, textord, "\u2202", "\\partial", true);
defineSymbol(math, main, bin, "\u2298", "\\oslash", true);
defineSymbol(math, ams, bin, "\u229A", "\\circledcirc", true);
defineSymbol(math, ams, bin, "\u22A1", "\\boxdot", true);
defineSymbol(math, main, bin, "\u25B3", "\\bigtriangleup");
defineSymbol(math, main, bin, "\u25BD", "\\bigtriangledown");
defineSymbol(math, main, bin, "\u2020", "\\dagger");
defineSymbol(math, main, bin, "\u22C4", "\\diamond");
defineSymbol(math, main, bin, "\u22C6", "\\star");
defineSymbol(math, main, bin, "\u25C3", "\\triangleleft");
defineSymbol(math, main, bin, "\u25B9", "\\triangleright");
defineSymbol(math, main, open2, "{", "\\{");
defineSymbol(text2, main, textord, "{", "\\{");
defineSymbol(text2, main, textord, "{", "\\textbraceleft");
defineSymbol(math, main, close, "}", "\\}");
defineSymbol(text2, main, textord, "}", "\\}");
defineSymbol(text2, main, textord, "}", "\\textbraceright");
defineSymbol(math, main, open2, "{", "\\lbrace");
defineSymbol(math, main, close, "}", "\\rbrace");
defineSymbol(math, main, open2, "[", "\\lbrack", true);
defineSymbol(text2, main, textord, "[", "\\lbrack", true);
defineSymbol(math, main, close, "]", "\\rbrack", true);
defineSymbol(text2, main, textord, "]", "\\rbrack", true);
defineSymbol(math, main, open2, "(", "\\lparen", true);
defineSymbol(math, main, close, ")", "\\rparen", true);
defineSymbol(text2, main, textord, "<", "\\textless", true);
defineSymbol(text2, main, textord, ">", "\\textgreater", true);
defineSymbol(math, main, open2, "\u230A", "\\lfloor", true);
defineSymbol(math, main, close, "\u230B", "\\rfloor", true);
defineSymbol(math, main, open2, "\u2308", "\\lceil", true);
defineSymbol(math, main, close, "\u2309", "\\rceil", true);
defineSymbol(math, main, textord, "\\", "\\backslash");
defineSymbol(math, main, textord, "\u2223", "|");
defineSymbol(math, main, textord, "\u2223", "\\vert");
defineSymbol(text2, main, textord, "|", "\\textbar", true);
defineSymbol(math, main, textord, "\u2225", "\\|");
defineSymbol(math, main, textord, "\u2225", "\\Vert");
defineSymbol(text2, main, textord, "\u2225", "\\textbardbl");
defineSymbol(text2, main, textord, "~", "\\textasciitilde");
defineSymbol(text2, main, textord, "\\", "\\textbackslash");
defineSymbol(text2, main, textord, "^", "\\textasciicircum");
defineSymbol(math, main, rel, "\u2191", "\\uparrow", true);
defineSymbol(math, main, rel, "\u21D1", "\\Uparrow", true);
defineSymbol(math, main, rel, "\u2193", "\\downarrow", true);
defineSymbol(math, main, rel, "\u21D3", "\\Downarrow", true);
defineSymbol(math, main, rel, "\u2195", "\\updownarrow", true);
defineSymbol(math, main, rel, "\u21D5", "\\Updownarrow", true);
defineSymbol(math, main, op, "\u2210", "\\coprod");
defineSymbol(math, main, op, "\u22C1", "\\bigvee");
defineSymbol(math, main, op, "\u22C0", "\\bigwedge");
defineSymbol(math, main, op, "\u2A04", "\\biguplus");
defineSymbol(math, main, op, "\u22C2", "\\bigcap");
defineSymbol(math, main, op, "\u22C3", "\\bigcup");
defineSymbol(math, main, op, "\u222B", "\\int");
defineSymbol(math, main, op, "\u222B", "\\intop");
defineSymbol(math, main, op, "\u222C", "\\iint");
defineSymbol(math, main, op, "\u222D", "\\iiint");
defineSymbol(math, main, op, "\u220F", "\\prod");
defineSymbol(math, main, op, "\u2211", "\\sum");
defineSymbol(math, main, op, "\u2A02", "\\bigotimes");
defineSymbol(math, main, op, "\u2A01", "\\bigoplus");
defineSymbol(math, main, op, "\u2A00", "\\bigodot");
defineSymbol(math, main, op, "\u222E", "\\oint");
defineSymbol(math, main, op, "\u222F", "\\oiint");
defineSymbol(math, main, op, "\u2230", "\\oiiint");
defineSymbol(math, main, op, "\u2A06", "\\bigsqcup");
defineSymbol(math, main, op, "\u222B", "\\smallint");
defineSymbol(text2, main, inner, "\u2026", "\\textellipsis");
defineSymbol(math, main, inner, "\u2026", "\\mathellipsis");
defineSymbol(text2, main, inner, "\u2026", "\\ldots", true);
defineSymbol(math, main, inner, "\u2026", "\\ldots", true);
defineSymbol(math, main, inner, "\u22EF", "\\@cdots", true);
defineSymbol(math, main, inner, "\u22F1", "\\ddots", true);
defineSymbol(math, main, textord, "\u22EE", "\\varvdots");
defineSymbol(text2, main, textord, "\u22EE", "\\varvdots");
defineSymbol(math, main, accent, "\u02CA", "\\acute");
defineSymbol(math, main, accent, "\u02CB", "\\grave");
defineSymbol(math, main, accent, "\xA8", "\\ddot");
defineSymbol(math, main, accent, "~", "\\tilde");
defineSymbol(math, main, accent, "\u02C9", "\\bar");
defineSymbol(math, main, accent, "\u02D8", "\\breve");
defineSymbol(math, main, accent, "\u02C7", "\\check");
defineSymbol(math, main, accent, "^", "\\hat");
defineSymbol(math, main, accent, "\u20D7", "\\vec");
defineSymbol(math, main, accent, "\u02D9", "\\dot");
defineSymbol(math, main, accent, "\u02DA", "\\mathring");
defineSymbol(math, main, mathord, "\uE131", "\\@imath");
defineSymbol(math, main, mathord, "\uE237", "\\@jmath");
defineSymbol(math, main, textord, "\u0131", "\u0131");
defineSymbol(math, main, textord, "\u0237", "\u0237");
defineSymbol(text2, main, textord, "\u0131", "\\i", true);
defineSymbol(text2, main, textord, "\u0237", "\\j", true);
defineSymbol(text2, main, textord, "\xDF", "\\ss", true);
defineSymbol(text2, main, textord, "\xE6", "\\ae", true);
defineSymbol(text2, main, textord, "\u0153", "\\oe", true);
defineSymbol(text2, main, textord, "\xF8", "\\o", true);
defineSymbol(text2, main, textord, "\xC6", "\\AE", true);
defineSymbol(text2, main, textord, "\u0152", "\\OE", true);
defineSymbol(text2, main, textord, "\xD8", "\\O", true);
defineSymbol(text2, main, accent, "\u02CA", "\\'");
defineSymbol(text2, main, accent, "\u02CB", "\\`");
defineSymbol(text2, main, accent, "\u02C6", "\\^");
defineSymbol(text2, main, accent, "\u02DC", "\\~");
defineSymbol(text2, main, accent, "\u02C9", "\\=");
defineSymbol(text2, main, accent, "\u02D8", "\\u");
defineSymbol(text2, main, accent, "\u02D9", "\\.");
defineSymbol(text2, main, accent, "\xB8", "\\c");
defineSymbol(text2, main, accent, "\u02DA", "\\r");
defineSymbol(text2, main, accent, "\u02C7", "\\v");
defineSymbol(text2, main, accent, "\xA8", '\\"');
defineSymbol(text2, main, accent, "\u02DD", "\\H");
defineSymbol(text2, main, accent, "\u25EF", "\\textcircled");
var ligatures = {
  "--": true,
  "---": true,
  "``": true,
  "''": true
};
defineSymbol(text2, main, textord, "\u2013", "--", true);
defineSymbol(text2, main, textord, "\u2013", "\\textendash");
defineSymbol(text2, main, textord, "\u2014", "---", true);
defineSymbol(text2, main, textord, "\u2014", "\\textemdash");
defineSymbol(text2, main, textord, "\u2018", "`", true);
defineSymbol(text2, main, textord, "\u2018", "\\textquoteleft");
defineSymbol(text2, main, textord, "\u2019", "'", true);
defineSymbol(text2, main, textord, "\u2019", "\\textquoteright");
defineSymbol(text2, main, textord, "\u201C", "``", true);
defineSymbol(text2, main, textord, "\u201C", "\\textquotedblleft");
defineSymbol(text2, main, textord, "\u201D", "''", true);
defineSymbol(text2, main, textord, "\u201D", "\\textquotedblright");
defineSymbol(math, main, textord, "\xB0", "\\degree", true);
defineSymbol(text2, main, textord, "\xB0", "\\degree");
defineSymbol(text2, main, textord, "\xB0", "\\textdegree", true);
defineSymbol(math, main, textord, "\xA3", "\\pounds");
defineSymbol(math, main, textord, "\xA3", "\\mathsterling", true);
defineSymbol(text2, main, textord, "\xA3", "\\pounds");
defineSymbol(text2, main, textord, "\xA3", "\\textsterling", true);
defineSymbol(math, ams, textord, "\u2720", "\\maltese");
defineSymbol(text2, ams, textord, "\u2720", "\\maltese");
var mathTextSymbols = '0123456789/@."';
for (i = 0; i < mathTextSymbols.length; i++) {
  ch = mathTextSymbols.charAt(i);
  defineSymbol(math, main, textord, ch, ch);
}
var ch;
var i;
var textSymbols = '0123456789!@*()-=+";:?/.,';
for (_i = 0; _i < textSymbols.length; _i++) {
  _ch = textSymbols.charAt(_i);
  defineSymbol(text2, main, textord, _ch, _ch);
}
var _ch;
var _i;
var letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
for (_i2 = 0; _i2 < letters.length; _i2++) {
  _ch2 = letters.charAt(_i2);
  defineSymbol(math, main, mathord, _ch2, _ch2);
  defineSymbol(text2, main, textord, _ch2, _ch2);
}
var _ch2;
var _i2;
defineSymbol(math, ams, textord, "C", "\u2102");
defineSymbol(text2, ams, textord, "C", "\u2102");
defineSymbol(math, ams, textord, "H", "\u210D");
defineSymbol(text2, ams, textord, "H", "\u210D");
defineSymbol(math, ams, textord, "N", "\u2115");
defineSymbol(text2, ams, textord, "N", "\u2115");
defineSymbol(math, ams, textord, "P", "\u2119");
defineSymbol(text2, ams, textord, "P", "\u2119");
defineSymbol(math, ams, textord, "Q", "\u211A");
defineSymbol(text2, ams, textord, "Q", "\u211A");
defineSymbol(math, ams, textord, "R", "\u211D");
defineSymbol(text2, ams, textord, "R", "\u211D");
defineSymbol(math, ams, textord, "Z", "\u2124");
defineSymbol(text2, ams, textord, "Z", "\u2124");
defineSymbol(math, main, mathord, "h", "\u210E");
defineSymbol(text2, main, mathord, "h", "\u210E");
var wideChar = "";
for (_i3 = 0; _i3 < letters.length; _i3++) {
  _ch3 = letters.charAt(_i3);
  wideChar = String.fromCharCode(55349, 56320 + _i3);
  defineSymbol(math, main, mathord, _ch3, wideChar);
  defineSymbol(text2, main, textord, _ch3, wideChar);
  wideChar = String.fromCharCode(55349, 56372 + _i3);
  defineSymbol(math, main, mathord, _ch3, wideChar);
  defineSymbol(text2, main, textord, _ch3, wideChar);
  wideChar = String.fromCharCode(55349, 56424 + _i3);
  defineSymbol(math, main, mathord, _ch3, wideChar);
  defineSymbol(text2, main, textord, _ch3, wideChar);
  wideChar = String.fromCharCode(55349, 56580 + _i3);
  defineSymbol(math, main, mathord, _ch3, wideChar);
  defineSymbol(text2, main, textord, _ch3, wideChar);
  wideChar = String.fromCharCode(55349, 56684 + _i3);
  defineSymbol(math, main, mathord, _ch3, wideChar);
  defineSymbol(text2, main, textord, _ch3, wideChar);
  wideChar = String.fromCharCode(55349, 56736 + _i3);
  defineSymbol(math, main, mathord, _ch3, wideChar);
  defineSymbol(text2, main, textord, _ch3, wideChar);
  wideChar = String.fromCharCode(55349, 56788 + _i3);
  defineSymbol(math, main, mathord, _ch3, wideChar);
  defineSymbol(text2, main, textord, _ch3, wideChar);
  wideChar = String.fromCharCode(55349, 56840 + _i3);
  defineSymbol(math, main, mathord, _ch3, wideChar);
  defineSymbol(text2, main, textord, _ch3, wideChar);
  wideChar = String.fromCharCode(55349, 56944 + _i3);
  defineSymbol(math, main, mathord, _ch3, wideChar);
  defineSymbol(text2, main, textord, _ch3, wideChar);
  if (_i3 < 26) {
    wideChar = String.fromCharCode(55349, 56632 + _i3);
    defineSymbol(math, main, mathord, _ch3, wideChar);
    defineSymbol(text2, main, textord, _ch3, wideChar);
    wideChar = String.fromCharCode(55349, 56476 + _i3);
    defineSymbol(math, main, mathord, _ch3, wideChar);
    defineSymbol(text2, main, textord, _ch3, wideChar);
  }
}
var _ch3;
var _i3;
wideChar = String.fromCharCode(55349, 56668);
defineSymbol(math, main, mathord, "k", wideChar);
defineSymbol(text2, main, textord, "k", wideChar);
for (_i4 = 0; _i4 < 10; _i4++) {
  _ch4 = _i4.toString();
  wideChar = String.fromCharCode(55349, 57294 + _i4);
  defineSymbol(math, main, mathord, _ch4, wideChar);
  defineSymbol(text2, main, textord, _ch4, wideChar);
  wideChar = String.fromCharCode(55349, 57314 + _i4);
  defineSymbol(math, main, mathord, _ch4, wideChar);
  defineSymbol(text2, main, textord, _ch4, wideChar);
  wideChar = String.fromCharCode(55349, 57324 + _i4);
  defineSymbol(math, main, mathord, _ch4, wideChar);
  defineSymbol(text2, main, textord, _ch4, wideChar);
  wideChar = String.fromCharCode(55349, 57334 + _i4);
  defineSymbol(math, main, mathord, _ch4, wideChar);
  defineSymbol(text2, main, textord, _ch4, wideChar);
}
var _ch4;
var _i4;
var extraLatin = "\xD0\xDE\xFE";
for (_i5 = 0; _i5 < extraLatin.length; _i5++) {
  _ch5 = extraLatin.charAt(_i5);
  defineSymbol(math, main, mathord, _ch5, _ch5);
  defineSymbol(text2, main, textord, _ch5, _ch5);
}
var _ch5;
var _i5;
var wideLatinLetterData = [
  ["mathbf", "textbf", "Main-Bold"],
  // A-Z bold upright
  ["mathbf", "textbf", "Main-Bold"],
  // a-z bold upright
  ["mathnormal", "textit", "Math-Italic"],
  // A-Z italic
  ["mathnormal", "textit", "Math-Italic"],
  // a-z italic
  ["boldsymbol", "boldsymbol", "Main-BoldItalic"],
  // A-Z bold italic
  ["boldsymbol", "boldsymbol", "Main-BoldItalic"],
  // a-z bold italic
  // Map fancy A-Z letters to script, not calligraphic.
  // This aligns with unicode-math and math fonts (except Cambria Math).
  ["mathscr", "textscr", "Script-Regular"],
  // A-Z script
  ["", "", ""],
  // a-z script.  No font
  ["", "", ""],
  // A-Z bold script. No font
  ["", "", ""],
  // a-z bold script. No font
  ["mathfrak", "textfrak", "Fraktur-Regular"],
  // A-Z Fraktur
  ["mathfrak", "textfrak", "Fraktur-Regular"],
  // a-z Fraktur
  ["mathbb", "textbb", "AMS-Regular"],
  // A-Z double-struck
  ["mathbb", "textbb", "AMS-Regular"],
  // k double-struck
  // Note that we are using a bold font, but font metrics for regular Fraktur.
  ["mathboldfrak", "textboldfrak", "Fraktur-Regular"],
  // A-Z bold Fraktur
  ["mathboldfrak", "textboldfrak", "Fraktur-Regular"],
  // a-z bold Fraktur
  ["mathsf", "textsf", "SansSerif-Regular"],
  // A-Z sans-serif
  ["mathsf", "textsf", "SansSerif-Regular"],
  // a-z sans-serif
  ["mathboldsf", "textboldsf", "SansSerif-Bold"],
  // A-Z bold sans-serif
  ["mathboldsf", "textboldsf", "SansSerif-Bold"],
  // a-z bold sans-serif
  ["mathitsf", "textitsf", "SansSerif-Italic"],
  // A-Z italic sans-serif
  ["mathitsf", "textitsf", "SansSerif-Italic"],
  // a-z italic sans-serif
  ["", "", ""],
  // A-Z bold italic sans. No font
  ["", "", ""],
  // a-z bold italic sans. No font
  ["mathtt", "texttt", "Typewriter-Regular"],
  // A-Z monospace
  ["mathtt", "texttt", "Typewriter-Regular"]
  // a-z monospace
];
var wideNumeralData = [
  ["mathbf", "textbf", "Main-Bold"],
  // 0-9 bold
  ["", "", ""],
  // 0-9 double-struck. No KaTeX font.
  ["mathsf", "textsf", "SansSerif-Regular"],
  // 0-9 sans-serif
  ["mathboldsf", "textboldsf", "SansSerif-Bold"],
  // 0-9 bold sans-serif
  ["mathtt", "texttt", "Typewriter-Regular"]
  // 0-9 monospace
];
var wideCharacterFont = function wideCharacterFont2(wideChar2, mode) {
  var H = wideChar2.charCodeAt(0);
  var L = wideChar2.charCodeAt(1);
  var codePoint = (H - 55296) * 1024 + (L - 56320) + 65536;
  var j = mode === "math" ? 0 : 1;
  if (119808 <= codePoint && codePoint < 120484) {
    var i = Math.floor((codePoint - 119808) / 26);
    return [wideLatinLetterData[i][2], wideLatinLetterData[i][j]];
  } else if (120782 <= codePoint && codePoint <= 120831) {
    var _i = Math.floor((codePoint - 120782) / 10);
    return [wideNumeralData[_i][2], wideNumeralData[_i][j]];
  } else if (codePoint === 120485 || codePoint === 120486) {
    return [wideLatinLetterData[0][2], wideLatinLetterData[0][j]];
  } else if (120486 < codePoint && codePoint < 120782) {
    return ["", ""];
  } else {
    throw new ParseError2("Unsupported character: " + wideChar2);
  }
};
var lookupSymbol = function lookupSymbol2(value, fontName, mode) {
  if (symbols[mode][value] && symbols[mode][value].replace) {
    value = symbols[mode][value].replace;
  }
  return {
    value,
    metrics: getCharacterMetrics(value, fontName, mode)
  };
};
var makeSymbol = function makeSymbol2(value, fontName, mode, options, classes) {
  var lookup = lookupSymbol(value, fontName, mode);
  var metrics = lookup.metrics;
  value = lookup.value;
  var symbolNode;
  if (metrics) {
    var italic = metrics.italic;
    if (mode === "text" || options && options.font === "mathit") {
      italic = 0;
    }
    symbolNode = new SymbolNode(value, metrics.height, metrics.depth, italic, metrics.skew, metrics.width, classes);
  } else {
    typeof console !== "undefined" && console.warn("No character metrics " + ("for '" + value + "' in style '" + fontName + "' and mode '" + mode + "'"));
    symbolNode = new SymbolNode(value, 0, 0, 0, 0, 0, classes);
  }
  if (options) {
    symbolNode.maxFontSize = options.sizeMultiplier;
    if (options.style.isTight()) {
      symbolNode.classes.push("mtight");
    }
    var color = options.getColor();
    if (color) {
      symbolNode.style.color = color;
    }
  }
  return symbolNode;
};
var mathsym = function mathsym2(value, mode, options, classes) {
  if (classes === void 0) {
    classes = [];
  }
  if (options.font === "boldsymbol" && lookupSymbol(value, "Main-Bold", mode).metrics) {
    return makeSymbol(value, "Main-Bold", mode, options, classes.concat(["mathbf"]));
  } else if (value === "\\" || symbols[mode][value].font === "main") {
    return makeSymbol(value, "Main-Regular", mode, options, classes);
  } else {
    return makeSymbol(value, "AMS-Regular", mode, options, classes.concat(["amsrm"]));
  }
};
var boldsymbol = function boldsymbol2(value, mode, options, classes, type) {
  if (type !== "textord" && lookupSymbol(value, "Math-BoldItalic", mode).metrics) {
    return {
      fontName: "Math-BoldItalic",
      fontClass: "boldsymbol"
    };
  } else {
    return {
      fontName: "Main-Bold",
      fontClass: "mathbf"
    };
  }
};
var makeOrd = function makeOrd2(group, options, type) {
  var mode = group.mode;
  var text3 = group.text;
  var classes = ["mord"];
  var isFont = mode === "math" || mode === "text" && options.font;
  var fontOrFamily = isFont ? options.font : options.fontFamily;
  var wideFontName = "";
  var wideFontClass = "";
  if (text3.charCodeAt(0) === 55349) {
    [wideFontName, wideFontClass] = wideCharacterFont(text3, mode);
  }
  if (wideFontName.length > 0) {
    return makeSymbol(text3, wideFontName, mode, options, classes.concat(wideFontClass));
  } else if (fontOrFamily) {
    var fontName;
    var fontClasses;
    if (fontOrFamily === "boldsymbol") {
      var fontData = boldsymbol(text3, mode, options, classes, type);
      fontName = fontData.fontName;
      fontClasses = [fontData.fontClass];
    } else if (isFont) {
      fontName = fontMap[fontOrFamily].fontName;
      fontClasses = [fontOrFamily];
    } else {
      fontName = retrieveTextFontName(fontOrFamily, options.fontWeight, options.fontShape);
      fontClasses = [fontOrFamily, options.fontWeight, options.fontShape];
    }
    if (lookupSymbol(text3, fontName, mode).metrics) {
      return makeSymbol(text3, fontName, mode, options, classes.concat(fontClasses));
    } else if (ligatures.hasOwnProperty(text3) && fontName.slice(0, 10) === "Typewriter") {
      var parts = [];
      for (var i = 0; i < text3.length; i++) {
        parts.push(makeSymbol(text3[i], fontName, mode, options, classes.concat(fontClasses)));
      }
      return makeFragment(parts);
    }
  }
  if (type === "mathord") {
    return makeSymbol(text3, "Math-Italic", mode, options, classes.concat(["mathnormal"]));
  } else if (type === "textord") {
    var font = symbols[mode][text3] && symbols[mode][text3].font;
    if (font === "ams") {
      var _fontName = retrieveTextFontName("amsrm", options.fontWeight, options.fontShape);
      return makeSymbol(text3, _fontName, mode, options, classes.concat("amsrm", options.fontWeight, options.fontShape));
    } else if (font === "main" || !font) {
      var _fontName2 = retrieveTextFontName("textrm", options.fontWeight, options.fontShape);
      return makeSymbol(text3, _fontName2, mode, options, classes.concat(options.fontWeight, options.fontShape));
    } else {
      var _fontName3 = retrieveTextFontName(font, options.fontWeight, options.fontShape);
      return makeSymbol(text3, _fontName3, mode, options, classes.concat(_fontName3, options.fontWeight, options.fontShape));
    }
  } else {
    throw new Error("unexpected type: " + type + " in makeOrd");
  }
};
var canCombine = (prev, next) => {
  if (createClass(prev.classes) !== createClass(next.classes) || prev.skew !== next.skew || prev.maxFontSize !== next.maxFontSize) {
    return false;
  }
  if (prev.classes.length === 1) {
    var cls = prev.classes[0];
    if (cls === "mbin" || cls === "mord") {
      return false;
    }
  }
  for (var style in prev.style) {
    if (prev.style.hasOwnProperty(style) && prev.style[style] !== next.style[style]) {
      return false;
    }
  }
  for (var _style in next.style) {
    if (next.style.hasOwnProperty(_style) && prev.style[_style] !== next.style[_style]) {
      return false;
    }
  }
  return true;
};
var tryCombineChars = (chars) => {
  for (var i = 0; i < chars.length - 1; i++) {
    var prev = chars[i];
    var next = chars[i + 1];
    if (prev instanceof SymbolNode && next instanceof SymbolNode && canCombine(prev, next)) {
      prev.text += next.text;
      prev.height = Math.max(prev.height, next.height);
      prev.depth = Math.max(prev.depth, next.depth);
      prev.italic = next.italic;
      chars.splice(i + 1, 1);
      i--;
    }
  }
  return chars;
};
var sizeElementFromChildren = function sizeElementFromChildren2(elem) {
  var height = 0;
  var depth = 0;
  var maxFontSize = 0;
  for (var i = 0; i < elem.children.length; i++) {
    var child = elem.children[i];
    if (child.height > height) {
      height = child.height;
    }
    if (child.depth > depth) {
      depth = child.depth;
    }
    if (child.maxFontSize > maxFontSize) {
      maxFontSize = child.maxFontSize;
    }
  }
  elem.height = height;
  elem.depth = depth;
  elem.maxFontSize = maxFontSize;
};
var makeSpan$2 = function makeSpan(classes, children, options, style) {
  var span = new Span(classes, children, options, style);
  sizeElementFromChildren(span);
  return span;
};
var makeSvgSpan = (classes, children, options, style) => new Span(classes, children, options, style);
var makeLineSpan = function makeLineSpan2(className, options, thickness) {
  var line = makeSpan$2([className], [], options);
  line.height = Math.max(thickness || options.fontMetrics().defaultRuleThickness, options.minRuleThickness);
  line.style.borderBottomWidth = makeEm(line.height);
  line.maxFontSize = 1;
  return line;
};
var makeAnchor = function makeAnchor2(href, classes, children, options) {
  var anchor = new Anchor(href, classes, children, options);
  sizeElementFromChildren(anchor);
  return anchor;
};
var makeFragment = function makeFragment2(children) {
  var fragment = new DocumentFragment2(children);
  sizeElementFromChildren(fragment);
  return fragment;
};
var wrapFragment = function wrapFragment2(group, options) {
  if (group instanceof DocumentFragment2) {
    return makeSpan$2([], [group], options);
  }
  return group;
};
var getVListChildrenAndDepth = function getVListChildrenAndDepth2(params) {
  if (params.positionType === "individualShift") {
    var oldChildren = params.children;
    var children = [oldChildren[0]];
    var _depth = -oldChildren[0].shift - oldChildren[0].elem.depth;
    var currPos = _depth;
    for (var i = 1; i < oldChildren.length; i++) {
      var diff = -oldChildren[i].shift - currPos - oldChildren[i].elem.depth;
      var size = diff - (oldChildren[i - 1].elem.height + oldChildren[i - 1].elem.depth);
      currPos = currPos + diff;
      children.push({
        type: "kern",
        size
      });
      children.push(oldChildren[i]);
    }
    return {
      children,
      depth: _depth
    };
  }
  var depth;
  if (params.positionType === "top") {
    var bottom = params.positionData;
    for (var _i = 0; _i < params.children.length; _i++) {
      var child = params.children[_i];
      bottom -= child.type === "kern" ? child.size : child.elem.height + child.elem.depth;
    }
    depth = bottom;
  } else if (params.positionType === "bottom") {
    depth = -params.positionData;
  } else {
    var firstChild = params.children[0];
    if (firstChild.type !== "elem") {
      throw new Error('First child must have type "elem".');
    }
    if (params.positionType === "shift") {
      depth = -firstChild.elem.depth - params.positionData;
    } else if (params.positionType === "firstBaseline") {
      depth = -firstChild.elem.depth;
    } else {
      throw new Error("Invalid positionType " + params.positionType + ".");
    }
  }
  return {
    children: params.children,
    depth
  };
};
var makeVList = function makeVList2(params, options) {
  var {
    children,
    depth
  } = getVListChildrenAndDepth(params);
  var pstrutSize = 0;
  for (var i = 0; i < children.length; i++) {
    var child = children[i];
    if (child.type === "elem") {
      var elem = child.elem;
      pstrutSize = Math.max(pstrutSize, elem.maxFontSize, elem.height);
    }
  }
  pstrutSize += 2;
  var pstrut = makeSpan$2(["pstrut"], []);
  pstrut.style.height = makeEm(pstrutSize);
  var realChildren = [];
  var minPos = depth;
  var maxPos = depth;
  var currPos = depth;
  for (var _i2 = 0; _i2 < children.length; _i2++) {
    var _child = children[_i2];
    if (_child.type === "kern") {
      currPos += _child.size;
    } else {
      var _elem = _child.elem;
      var classes = _child.wrapperClasses || [];
      var style = _child.wrapperStyle || {};
      var childWrap = makeSpan$2(classes, [pstrut, _elem], void 0, style);
      childWrap.style.top = makeEm(-pstrutSize - currPos - _elem.depth);
      if (_child.marginLeft) {
        childWrap.style.marginLeft = _child.marginLeft;
      }
      if (_child.marginRight) {
        childWrap.style.marginRight = _child.marginRight;
      }
      realChildren.push(childWrap);
      currPos += _elem.height + _elem.depth;
    }
    minPos = Math.min(minPos, currPos);
    maxPos = Math.max(maxPos, currPos);
  }
  var vlist = makeSpan$2(["vlist"], realChildren);
  vlist.style.height = makeEm(maxPos);
  var rows;
  if (minPos < 0) {
    var emptySpan = makeSpan$2([], []);
    var depthStrut = makeSpan$2(["vlist"], [emptySpan]);
    depthStrut.style.height = makeEm(-minPos);
    var topStrut = makeSpan$2(["vlist-s"], [new SymbolNode("\u200B")]);
    rows = [makeSpan$2(["vlist-r"], [vlist, topStrut]), makeSpan$2(["vlist-r"], [depthStrut])];
  } else {
    rows = [makeSpan$2(["vlist-r"], [vlist])];
  }
  var vtable = makeSpan$2(["vlist-t"], rows);
  if (rows.length === 2) {
    vtable.classes.push("vlist-t2");
  }
  vtable.height = maxPos;
  vtable.depth = -minPos;
  return vtable;
};
var makeGlue = (measurement, options) => {
  var rule = makeSpan$2(["mspace"], [], options);
  var size = calculateSize(measurement, options);
  rule.style.marginRight = makeEm(size);
  return rule;
};
var retrieveTextFontName = function retrieveTextFontName2(fontFamily, fontWeight, fontShape) {
  var baseFontName = "";
  switch (fontFamily) {
    case "amsrm":
      baseFontName = "AMS";
      break;
    case "textrm":
      baseFontName = "Main";
      break;
    case "textsf":
      baseFontName = "SansSerif";
      break;
    case "texttt":
      baseFontName = "Typewriter";
      break;
    default:
      baseFontName = fontFamily;
  }
  var fontStylesName;
  if (fontWeight === "textbf" && fontShape === "textit") {
    fontStylesName = "BoldItalic";
  } else if (fontWeight === "textbf") {
    fontStylesName = "Bold";
  } else if (fontWeight === "textit") {
    fontStylesName = "Italic";
  } else {
    fontStylesName = "Regular";
  }
  return baseFontName + "-" + fontStylesName;
};
var fontMap = {
  // styles
  "mathbf": {
    variant: "bold",
    fontName: "Main-Bold"
  },
  "mathrm": {
    variant: "normal",
    fontName: "Main-Regular"
  },
  "textit": {
    variant: "italic",
    fontName: "Main-Italic"
  },
  "mathit": {
    variant: "italic",
    fontName: "Main-Italic"
  },
  "mathnormal": {
    variant: "italic",
    fontName: "Math-Italic"
  },
  "mathsfit": {
    variant: "sans-serif-italic",
    fontName: "SansSerif-Italic"
  },
  // "boldsymbol" is missing because they require the use of multiple fonts:
  // Math-BoldItalic and Main-Bold.  This is handled by a special case in
  // makeOrd which ends up calling boldsymbol.
  // families
  "mathbb": {
    variant: "double-struck",
    fontName: "AMS-Regular"
  },
  "mathcal": {
    variant: "script",
    fontName: "Caligraphic-Regular"
  },
  "mathfrak": {
    variant: "fraktur",
    fontName: "Fraktur-Regular"
  },
  "mathscr": {
    variant: "script",
    fontName: "Script-Regular"
  },
  "mathsf": {
    variant: "sans-serif",
    fontName: "SansSerif-Regular"
  },
  "mathtt": {
    variant: "monospace",
    fontName: "Typewriter-Regular"
  }
};
var svgData = {
  //   path, width, height
  vec: ["vec", 0.471, 0.714],
  // values from the font glyph
  oiintSize1: ["oiintSize1", 0.957, 0.499],
  // oval to overlay the integrand
  oiintSize2: ["oiintSize2", 1.472, 0.659],
  oiiintSize1: ["oiiintSize1", 1.304, 0.499],
  oiiintSize2: ["oiiintSize2", 1.98, 0.659]
};
var staticSvg = function staticSvg2(value, options) {
  var [pathName, width, height] = svgData[value];
  var path2 = new PathNode(pathName);
  var svgNode = new SvgNode([path2], {
    "width": makeEm(width),
    "height": makeEm(height),
    // Override CSS rule `.katex svg { width: 100% }`
    "style": "width:" + makeEm(width),
    "viewBox": "0 0 " + 1e3 * width + " " + 1e3 * height,
    "preserveAspectRatio": "xMinYMin"
  });
  var span = makeSvgSpan(["overlay"], [svgNode], options);
  span.height = height;
  span.style.height = makeEm(height);
  span.style.width = makeEm(width);
  return span;
};
var buildCommon = {
  fontMap,
  makeSymbol,
  mathsym,
  makeSpan: makeSpan$2,
  makeSvgSpan,
  makeLineSpan,
  makeAnchor,
  makeFragment,
  wrapFragment,
  makeVList,
  makeOrd,
  makeGlue,
  staticSvg,
  svgData,
  tryCombineChars
};
var thinspace = {
  number: 3,
  unit: "mu"
};
var mediumspace = {
  number: 4,
  unit: "mu"
};
var thickspace = {
  number: 5,
  unit: "mu"
};
var spacings = {
  mord: {
    mop: thinspace,
    mbin: mediumspace,
    mrel: thickspace,
    minner: thinspace
  },
  mop: {
    mord: thinspace,
    mop: thinspace,
    mrel: thickspace,
    minner: thinspace
  },
  mbin: {
    mord: mediumspace,
    mop: mediumspace,
    mopen: mediumspace,
    minner: mediumspace
  },
  mrel: {
    mord: thickspace,
    mop: thickspace,
    mopen: thickspace,
    minner: thickspace
  },
  mopen: {},
  mclose: {
    mop: thinspace,
    mbin: mediumspace,
    mrel: thickspace,
    minner: thinspace
  },
  mpunct: {
    mord: thinspace,
    mop: thinspace,
    mrel: thickspace,
    mopen: thinspace,
    mclose: thinspace,
    mpunct: thinspace,
    minner: thinspace
  },
  minner: {
    mord: thinspace,
    mop: thinspace,
    mbin: mediumspace,
    mrel: thickspace,
    mopen: thinspace,
    mpunct: thinspace,
    minner: thinspace
  }
};
var tightSpacings = {
  mord: {
    mop: thinspace
  },
  mop: {
    mord: thinspace,
    mop: thinspace
  },
  mbin: {},
  mrel: {},
  mopen: {},
  mclose: {
    mop: thinspace
  },
  mpunct: {},
  minner: {
    mop: thinspace
  }
};
var _functions = {};
var _htmlGroupBuilders = {};
var _mathmlGroupBuilders = {};
function defineFunction(_ref) {
  var {
    type,
    names,
    props,
    handler,
    htmlBuilder: htmlBuilder3,
    mathmlBuilder: mathmlBuilder3
  } = _ref;
  var data = {
    type,
    numArgs: props.numArgs,
    argTypes: props.argTypes,
    allowedInArgument: !!props.allowedInArgument,
    allowedInText: !!props.allowedInText,
    allowedInMath: props.allowedInMath === void 0 ? true : props.allowedInMath,
    numOptionalArgs: props.numOptionalArgs || 0,
    infix: !!props.infix,
    primitive: !!props.primitive,
    handler
  };
  for (var i = 0; i < names.length; ++i) {
    _functions[names[i]] = data;
  }
  if (type) {
    if (htmlBuilder3) {
      _htmlGroupBuilders[type] = htmlBuilder3;
    }
    if (mathmlBuilder3) {
      _mathmlGroupBuilders[type] = mathmlBuilder3;
    }
  }
}
function defineFunctionBuilders(_ref2) {
  var {
    type,
    htmlBuilder: htmlBuilder3,
    mathmlBuilder: mathmlBuilder3
  } = _ref2;
  defineFunction({
    type,
    names: [],
    props: {
      numArgs: 0
    },
    handler() {
      throw new Error("Should never be called.");
    },
    htmlBuilder: htmlBuilder3,
    mathmlBuilder: mathmlBuilder3
  });
}
var normalizeArgument = function normalizeArgument2(arg) {
  return arg.type === "ordgroup" && arg.body.length === 1 ? arg.body[0] : arg;
};
var ordargument = function ordargument2(arg) {
  return arg.type === "ordgroup" ? arg.body : [arg];
};
var makeSpan$1 = buildCommon.makeSpan;
var binLeftCanceller = ["leftmost", "mbin", "mopen", "mrel", "mop", "mpunct"];
var binRightCanceller = ["rightmost", "mrel", "mclose", "mpunct"];
var styleMap$1 = {
  "display": Style$1.DISPLAY,
  "text": Style$1.TEXT,
  "script": Style$1.SCRIPT,
  "scriptscript": Style$1.SCRIPTSCRIPT
};
var DomEnum = {
  mord: "mord",
  mop: "mop",
  mbin: "mbin",
  mrel: "mrel",
  mopen: "mopen",
  mclose: "mclose",
  mpunct: "mpunct",
  minner: "minner"
};
var buildExpression$1 = function buildExpression(expression, options, isRealGroup, surrounding) {
  if (surrounding === void 0) {
    surrounding = [null, null];
  }
  var groups = [];
  for (var i = 0; i < expression.length; i++) {
    var output = buildGroup$1(expression[i], options);
    if (output instanceof DocumentFragment2) {
      var children = output.children;
      groups.push(...children);
    } else {
      groups.push(output);
    }
  }
  buildCommon.tryCombineChars(groups);
  if (!isRealGroup) {
    return groups;
  }
  var glueOptions = options;
  if (expression.length === 1) {
    var node = expression[0];
    if (node.type === "sizing") {
      glueOptions = options.havingSize(node.size);
    } else if (node.type === "styling") {
      glueOptions = options.havingStyle(styleMap$1[node.style]);
    }
  }
  var dummyPrev = makeSpan$1([surrounding[0] || "leftmost"], [], options);
  var dummyNext = makeSpan$1([surrounding[1] || "rightmost"], [], options);
  var isRoot = isRealGroup === "root";
  traverseNonSpaceNodes(groups, (node2, prev) => {
    var prevType = prev.classes[0];
    var type = node2.classes[0];
    if (prevType === "mbin" && utils.contains(binRightCanceller, type)) {
      prev.classes[0] = "mord";
    } else if (type === "mbin" && utils.contains(binLeftCanceller, prevType)) {
      node2.classes[0] = "mord";
    }
  }, {
    node: dummyPrev
  }, dummyNext, isRoot);
  traverseNonSpaceNodes(groups, (node2, prev) => {
    var prevType = getTypeOfDomTree(prev);
    var type = getTypeOfDomTree(node2);
    var space = prevType && type ? node2.hasClass("mtight") ? tightSpacings[prevType][type] : spacings[prevType][type] : null;
    if (space) {
      return buildCommon.makeGlue(space, glueOptions);
    }
  }, {
    node: dummyPrev
  }, dummyNext, isRoot);
  return groups;
};
var traverseNonSpaceNodes = function traverseNonSpaceNodes2(nodes, callback, prev, next, isRoot) {
  if (next) {
    nodes.push(next);
  }
  var i = 0;
  for (; i < nodes.length; i++) {
    var node = nodes[i];
    var partialGroup = checkPartialGroup(node);
    if (partialGroup) {
      traverseNonSpaceNodes2(partialGroup.children, callback, prev, null, isRoot);
      continue;
    }
    var nonspace = !node.hasClass("mspace");
    if (nonspace) {
      var result = callback(node, prev.node);
      if (result) {
        if (prev.insertAfter) {
          prev.insertAfter(result);
        } else {
          nodes.unshift(result);
          i++;
        }
      }
    }
    if (nonspace) {
      prev.node = node;
    } else if (isRoot && node.hasClass("newline")) {
      prev.node = makeSpan$1(["leftmost"]);
    }
    prev.insertAfter = /* @__PURE__ */ ((index) => (n) => {
      nodes.splice(index + 1, 0, n);
      i++;
    })(i);
  }
  if (next) {
    nodes.pop();
  }
};
var checkPartialGroup = function checkPartialGroup2(node) {
  if (node instanceof DocumentFragment2 || node instanceof Anchor || node instanceof Span && node.hasClass("enclosing")) {
    return node;
  }
  return null;
};
var getOutermostNode = function getOutermostNode2(node, side) {
  var partialGroup = checkPartialGroup(node);
  if (partialGroup) {
    var children = partialGroup.children;
    if (children.length) {
      if (side === "right") {
        return getOutermostNode2(children[children.length - 1], "right");
      } else if (side === "left") {
        return getOutermostNode2(children[0], "left");
      }
    }
  }
  return node;
};
var getTypeOfDomTree = function getTypeOfDomTree2(node, side) {
  if (!node) {
    return null;
  }
  if (side) {
    node = getOutermostNode(node, side);
  }
  return DomEnum[node.classes[0]] || null;
};
var makeNullDelimiter = function makeNullDelimiter2(options, classes) {
  var moreClasses = ["nulldelimiter"].concat(options.baseSizingClasses());
  return makeSpan$1(classes.concat(moreClasses));
};
var buildGroup$1 = function buildGroup(group, options, baseOptions) {
  if (!group) {
    return makeSpan$1();
  }
  if (_htmlGroupBuilders[group.type]) {
    var groupNode = _htmlGroupBuilders[group.type](group, options);
    if (baseOptions && options.size !== baseOptions.size) {
      groupNode = makeSpan$1(options.sizingClasses(baseOptions), [groupNode], options);
      var multiplier = options.sizeMultiplier / baseOptions.sizeMultiplier;
      groupNode.height *= multiplier;
      groupNode.depth *= multiplier;
    }
    return groupNode;
  } else {
    throw new ParseError2("Got group of unknown type: '" + group.type + "'");
  }
};
function buildHTMLUnbreakable(children, options) {
  var body = makeSpan$1(["base"], children, options);
  var strut = makeSpan$1(["strut"]);
  strut.style.height = makeEm(body.height + body.depth);
  if (body.depth) {
    strut.style.verticalAlign = makeEm(-body.depth);
  }
  body.children.unshift(strut);
  return body;
}
function buildHTML(tree2, options) {
  var tag = null;
  if (tree2.length === 1 && tree2[0].type === "tag") {
    tag = tree2[0].tag;
    tree2 = tree2[0].body;
  }
  var expression = buildExpression$1(tree2, options, "root");
  var eqnNum;
  if (expression.length === 2 && expression[1].hasClass("tag")) {
    eqnNum = expression.pop();
  }
  var children = [];
  var parts = [];
  for (var i = 0; i < expression.length; i++) {
    parts.push(expression[i]);
    if (expression[i].hasClass("mbin") || expression[i].hasClass("mrel") || expression[i].hasClass("allowbreak")) {
      var nobreak = false;
      while (i < expression.length - 1 && expression[i + 1].hasClass("mspace") && !expression[i + 1].hasClass("newline")) {
        i++;
        parts.push(expression[i]);
        if (expression[i].hasClass("nobreak")) {
          nobreak = true;
        }
      }
      if (!nobreak) {
        children.push(buildHTMLUnbreakable(parts, options));
        parts = [];
      }
    } else if (expression[i].hasClass("newline")) {
      parts.pop();
      if (parts.length > 0) {
        children.push(buildHTMLUnbreakable(parts, options));
        parts = [];
      }
      children.push(expression[i]);
    }
  }
  if (parts.length > 0) {
    children.push(buildHTMLUnbreakable(parts, options));
  }
  var tagChild;
  if (tag) {
    tagChild = buildHTMLUnbreakable(buildExpression$1(tag, options, true));
    tagChild.classes = ["tag"];
    children.push(tagChild);
  } else if (eqnNum) {
    children.push(eqnNum);
  }
  var htmlNode = makeSpan$1(["katex-html"], children);
  htmlNode.setAttribute("aria-hidden", "true");
  if (tagChild) {
    var strut = tagChild.children[0];
    strut.style.height = makeEm(htmlNode.height + htmlNode.depth);
    if (htmlNode.depth) {
      strut.style.verticalAlign = makeEm(-htmlNode.depth);
    }
  }
  return htmlNode;
}
function newDocumentFragment(children) {
  return new DocumentFragment2(children);
}
var MathNode = class {
  constructor(type, children, classes) {
    this.type = void 0;
    this.attributes = void 0;
    this.children = void 0;
    this.classes = void 0;
    this.type = type;
    this.attributes = {};
    this.children = children || [];
    this.classes = classes || [];
  }
  /**
   * Sets an attribute on a MathML node. MathML depends on attributes to convey a
   * semantic content, so this is used heavily.
   */
  setAttribute(name, value) {
    this.attributes[name] = value;
  }
  /**
   * Gets an attribute on a MathML node.
   */
  getAttribute(name) {
    return this.attributes[name];
  }
  /**
   * Converts the math node into a MathML-namespaced DOM element.
   */
  toNode() {
    var node = document.createElementNS("http://www.w3.org/1998/Math/MathML", this.type);
    for (var attr in this.attributes) {
      if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
        node.setAttribute(attr, this.attributes[attr]);
      }
    }
    if (this.classes.length > 0) {
      node.className = createClass(this.classes);
    }
    for (var i = 0; i < this.children.length; i++) {
      if (this.children[i] instanceof TextNode && this.children[i + 1] instanceof TextNode) {
        var text3 = this.children[i].toText() + this.children[++i].toText();
        while (this.children[i + 1] instanceof TextNode) {
          text3 += this.children[++i].toText();
        }
        node.appendChild(new TextNode(text3).toNode());
      } else {
        node.appendChild(this.children[i].toNode());
      }
    }
    return node;
  }
  /**
   * Converts the math node into an HTML markup string.
   */
  toMarkup() {
    var markup = "<" + this.type;
    for (var attr in this.attributes) {
      if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
        markup += " " + attr + '="';
        markup += utils.escape(this.attributes[attr]);
        markup += '"';
      }
    }
    if (this.classes.length > 0) {
      markup += ' class ="' + utils.escape(createClass(this.classes)) + '"';
    }
    markup += ">";
    for (var i = 0; i < this.children.length; i++) {
      markup += this.children[i].toMarkup();
    }
    markup += "</" + this.type + ">";
    return markup;
  }
  /**
   * Converts the math node into a string, similar to innerText, but escaped.
   */
  toText() {
    return this.children.map((child) => child.toText()).join("");
  }
};
var TextNode = class {
  constructor(text3) {
    this.text = void 0;
    this.text = text3;
  }
  /**
   * Converts the text node into a DOM text node.
   */
  toNode() {
    return document.createTextNode(this.text);
  }
  /**
   * Converts the text node into escaped HTML markup
   * (representing the text itself).
   */
  toMarkup() {
    return utils.escape(this.toText());
  }
  /**
   * Converts the text node into a string
   * (representing the text itself).
   */
  toText() {
    return this.text;
  }
};
var SpaceNode = class {
  /**
   * Create a Space node with width given in CSS ems.
   */
  constructor(width) {
    this.width = void 0;
    this.character = void 0;
    this.width = width;
    if (width >= 0.05555 && width <= 0.05556) {
      this.character = "\u200A";
    } else if (width >= 0.1666 && width <= 0.1667) {
      this.character = "\u2009";
    } else if (width >= 0.2222 && width <= 0.2223) {
      this.character = "\u2005";
    } else if (width >= 0.2777 && width <= 0.2778) {
      this.character = "\u2005\u200A";
    } else if (width >= -0.05556 && width <= -0.05555) {
      this.character = "\u200A\u2063";
    } else if (width >= -0.1667 && width <= -0.1666) {
      this.character = "\u2009\u2063";
    } else if (width >= -0.2223 && width <= -0.2222) {
      this.character = "\u205F\u2063";
    } else if (width >= -0.2778 && width <= -0.2777) {
      this.character = "\u2005\u2063";
    } else {
      this.character = null;
    }
  }
  /**
   * Converts the math node into a MathML-namespaced DOM element.
   */
  toNode() {
    if (this.character) {
      return document.createTextNode(this.character);
    } else {
      var node = document.createElementNS("http://www.w3.org/1998/Math/MathML", "mspace");
      node.setAttribute("width", makeEm(this.width));
      return node;
    }
  }
  /**
   * Converts the math node into an HTML markup string.
   */
  toMarkup() {
    if (this.character) {
      return "<mtext>" + this.character + "</mtext>";
    } else {
      return '<mspace width="' + makeEm(this.width) + '"/>';
    }
  }
  /**
   * Converts the math node into a string, similar to innerText.
   */
  toText() {
    if (this.character) {
      return this.character;
    } else {
      return " ";
    }
  }
};
var mathMLTree = {
  MathNode,
  TextNode,
  SpaceNode,
  newDocumentFragment
};
var makeText = function makeText2(text3, mode, options) {
  if (symbols[mode][text3] && symbols[mode][text3].replace && text3.charCodeAt(0) !== 55349 && !(ligatures.hasOwnProperty(text3) && options && (options.fontFamily && options.fontFamily.slice(4, 6) === "tt" || options.font && options.font.slice(4, 6) === "tt"))) {
    text3 = symbols[mode][text3].replace;
  }
  return new mathMLTree.TextNode(text3);
};
var makeRow = function makeRow2(body) {
  if (body.length === 1) {
    return body[0];
  } else {
    return new mathMLTree.MathNode("mrow", body);
  }
};
var getVariant = function getVariant2(group, options) {
  if (options.fontFamily === "texttt") {
    return "monospace";
  } else if (options.fontFamily === "textsf") {
    if (options.fontShape === "textit" && options.fontWeight === "textbf") {
      return "sans-serif-bold-italic";
    } else if (options.fontShape === "textit") {
      return "sans-serif-italic";
    } else if (options.fontWeight === "textbf") {
      return "bold-sans-serif";
    } else {
      return "sans-serif";
    }
  } else if (options.fontShape === "textit" && options.fontWeight === "textbf") {
    return "bold-italic";
  } else if (options.fontShape === "textit") {
    return "italic";
  } else if (options.fontWeight === "textbf") {
    return "bold";
  }
  var font = options.font;
  if (!font || font === "mathnormal") {
    return null;
  }
  var mode = group.mode;
  if (font === "mathit") {
    return "italic";
  } else if (font === "boldsymbol") {
    return group.type === "textord" ? "bold" : "bold-italic";
  } else if (font === "mathbf") {
    return "bold";
  } else if (font === "mathbb") {
    return "double-struck";
  } else if (font === "mathsfit") {
    return "sans-serif-italic";
  } else if (font === "mathfrak") {
    return "fraktur";
  } else if (font === "mathscr" || font === "mathcal") {
    return "script";
  } else if (font === "mathsf") {
    return "sans-serif";
  } else if (font === "mathtt") {
    return "monospace";
  }
  var text3 = group.text;
  if (utils.contains(["\\imath", "\\jmath"], text3)) {
    return null;
  }
  if (symbols[mode][text3] && symbols[mode][text3].replace) {
    text3 = symbols[mode][text3].replace;
  }
  var fontName = buildCommon.fontMap[font].fontName;
  if (getCharacterMetrics(text3, fontName, mode)) {
    return buildCommon.fontMap[font].variant;
  }
  return null;
};
function isNumberPunctuation(group) {
  if (!group) {
    return false;
  }
  if (group.type === "mi" && group.children.length === 1) {
    var child = group.children[0];
    return child instanceof TextNode && child.text === ".";
  } else if (group.type === "mo" && group.children.length === 1 && group.getAttribute("separator") === "true" && group.getAttribute("lspace") === "0em" && group.getAttribute("rspace") === "0em") {
    var _child = group.children[0];
    return _child instanceof TextNode && _child.text === ",";
  } else {
    return false;
  }
}
var buildExpression2 = function buildExpression3(expression, options, isOrdgroup) {
  if (expression.length === 1) {
    var group = buildGroup2(expression[0], options);
    if (isOrdgroup && group instanceof MathNode && group.type === "mo") {
      group.setAttribute("lspace", "0em");
      group.setAttribute("rspace", "0em");
    }
    return [group];
  }
  var groups = [];
  var lastGroup;
  for (var i = 0; i < expression.length; i++) {
    var _group = buildGroup2(expression[i], options);
    if (_group instanceof MathNode && lastGroup instanceof MathNode) {
      if (_group.type === "mtext" && lastGroup.type === "mtext" && _group.getAttribute("mathvariant") === lastGroup.getAttribute("mathvariant")) {
        lastGroup.children.push(..._group.children);
        continue;
      } else if (_group.type === "mn" && lastGroup.type === "mn") {
        lastGroup.children.push(..._group.children);
        continue;
      } else if (isNumberPunctuation(_group) && lastGroup.type === "mn") {
        lastGroup.children.push(..._group.children);
        continue;
      } else if (_group.type === "mn" && isNumberPunctuation(lastGroup)) {
        _group.children = [...lastGroup.children, ..._group.children];
        groups.pop();
      } else if ((_group.type === "msup" || _group.type === "msub") && _group.children.length >= 1 && (lastGroup.type === "mn" || isNumberPunctuation(lastGroup))) {
        var base = _group.children[0];
        if (base instanceof MathNode && base.type === "mn") {
          base.children = [...lastGroup.children, ...base.children];
          groups.pop();
        }
      } else if (lastGroup.type === "mi" && lastGroup.children.length === 1) {
        var lastChild = lastGroup.children[0];
        if (lastChild instanceof TextNode && lastChild.text === "\u0338" && (_group.type === "mo" || _group.type === "mi" || _group.type === "mn")) {
          var child = _group.children[0];
          if (child instanceof TextNode && child.text.length > 0) {
            child.text = child.text.slice(0, 1) + "\u0338" + child.text.slice(1);
            groups.pop();
          }
        }
      }
    }
    groups.push(_group);
    lastGroup = _group;
  }
  return groups;
};
var buildExpressionRow = function buildExpressionRow2(expression, options, isOrdgroup) {
  return makeRow(buildExpression2(expression, options, isOrdgroup));
};
var buildGroup2 = function buildGroup3(group, options) {
  if (!group) {
    return new mathMLTree.MathNode("mrow");
  }
  if (_mathmlGroupBuilders[group.type]) {
    var result = _mathmlGroupBuilders[group.type](group, options);
    return result;
  } else {
    throw new ParseError2("Got group of unknown type: '" + group.type + "'");
  }
};
function buildMathML(tree2, texExpression, options, isDisplayMode, forMathmlOnly) {
  var expression = buildExpression2(tree2, options);
  var wrapper;
  if (expression.length === 1 && expression[0] instanceof MathNode && utils.contains(["mrow", "mtable"], expression[0].type)) {
    wrapper = expression[0];
  } else {
    wrapper = new mathMLTree.MathNode("mrow", expression);
  }
  var annotation = new mathMLTree.MathNode("annotation", [new mathMLTree.TextNode(texExpression)]);
  annotation.setAttribute("encoding", "application/x-tex");
  var semantics = new mathMLTree.MathNode("semantics", [wrapper, annotation]);
  var math2 = new mathMLTree.MathNode("math", [semantics]);
  math2.setAttribute("xmlns", "http://www.w3.org/1998/Math/MathML");
  if (isDisplayMode) {
    math2.setAttribute("display", "block");
  }
  var wrapperClass = forMathmlOnly ? "katex" : "katex-mathml";
  return buildCommon.makeSpan([wrapperClass], [math2]);
}
var optionsFromSettings = function optionsFromSettings2(settings) {
  return new Options({
    style: settings.displayMode ? Style$1.DISPLAY : Style$1.TEXT,
    maxSize: settings.maxSize,
    minRuleThickness: settings.minRuleThickness
  });
};
var displayWrap = function displayWrap2(node, settings) {
  if (settings.displayMode) {
    var classes = ["katex-display"];
    if (settings.leqno) {
      classes.push("leqno");
    }
    if (settings.fleqn) {
      classes.push("fleqn");
    }
    node = buildCommon.makeSpan(classes, [node]);
  }
  return node;
};
var buildTree = function buildTree2(tree2, expression, settings) {
  var options = optionsFromSettings(settings);
  var katexNode;
  if (settings.output === "mathml") {
    return buildMathML(tree2, expression, options, settings.displayMode, true);
  } else if (settings.output === "html") {
    var htmlNode = buildHTML(tree2, options);
    katexNode = buildCommon.makeSpan(["katex"], [htmlNode]);
  } else {
    var mathMLNode = buildMathML(tree2, expression, options, settings.displayMode, false);
    var _htmlNode = buildHTML(tree2, options);
    katexNode = buildCommon.makeSpan(["katex"], [mathMLNode, _htmlNode]);
  }
  return displayWrap(katexNode, settings);
};
var stretchyCodePoint = {
  widehat: "^",
  widecheck: "\u02C7",
  widetilde: "~",
  utilde: "~",
  overleftarrow: "\u2190",
  underleftarrow: "\u2190",
  xleftarrow: "\u2190",
  overrightarrow: "\u2192",
  underrightarrow: "\u2192",
  xrightarrow: "\u2192",
  underbrace: "\u23DF",
  overbrace: "\u23DE",
  overgroup: "\u23E0",
  undergroup: "\u23E1",
  overleftrightarrow: "\u2194",
  underleftrightarrow: "\u2194",
  xleftrightarrow: "\u2194",
  Overrightarrow: "\u21D2",
  xRightarrow: "\u21D2",
  overleftharpoon: "\u21BC",
  xleftharpoonup: "\u21BC",
  overrightharpoon: "\u21C0",
  xrightharpoonup: "\u21C0",
  xLeftarrow: "\u21D0",
  xLeftrightarrow: "\u21D4",
  xhookleftarrow: "\u21A9",
  xhookrightarrow: "\u21AA",
  xmapsto: "\u21A6",
  xrightharpoondown: "\u21C1",
  xleftharpoondown: "\u21BD",
  xrightleftharpoons: "\u21CC",
  xleftrightharpoons: "\u21CB",
  xtwoheadleftarrow: "\u219E",
  xtwoheadrightarrow: "\u21A0",
  xlongequal: "=",
  xtofrom: "\u21C4",
  xrightleftarrows: "\u21C4",
  xrightequilibrium: "\u21CC",
  // Not a perfect match.
  xleftequilibrium: "\u21CB",
  // None better available.
  "\\cdrightarrow": "\u2192",
  "\\cdleftarrow": "\u2190",
  "\\cdlongequal": "="
};
var mathMLnode = function mathMLnode2(label) {
  var node = new mathMLTree.MathNode("mo", [new mathMLTree.TextNode(stretchyCodePoint[label.replace(/^\\/, "")])]);
  node.setAttribute("stretchy", "true");
  return node;
};
var katexImagesData = {
  //   path(s), minWidth, height, align
  overrightarrow: [["rightarrow"], 0.888, 522, "xMaxYMin"],
  overleftarrow: [["leftarrow"], 0.888, 522, "xMinYMin"],
  underrightarrow: [["rightarrow"], 0.888, 522, "xMaxYMin"],
  underleftarrow: [["leftarrow"], 0.888, 522, "xMinYMin"],
  xrightarrow: [["rightarrow"], 1.469, 522, "xMaxYMin"],
  "\\cdrightarrow": [["rightarrow"], 3, 522, "xMaxYMin"],
  // CD minwwidth2.5pc
  xleftarrow: [["leftarrow"], 1.469, 522, "xMinYMin"],
  "\\cdleftarrow": [["leftarrow"], 3, 522, "xMinYMin"],
  Overrightarrow: [["doublerightarrow"], 0.888, 560, "xMaxYMin"],
  xRightarrow: [["doublerightarrow"], 1.526, 560, "xMaxYMin"],
  xLeftarrow: [["doubleleftarrow"], 1.526, 560, "xMinYMin"],
  overleftharpoon: [["leftharpoon"], 0.888, 522, "xMinYMin"],
  xleftharpoonup: [["leftharpoon"], 0.888, 522, "xMinYMin"],
  xleftharpoondown: [["leftharpoondown"], 0.888, 522, "xMinYMin"],
  overrightharpoon: [["rightharpoon"], 0.888, 522, "xMaxYMin"],
  xrightharpoonup: [["rightharpoon"], 0.888, 522, "xMaxYMin"],
  xrightharpoondown: [["rightharpoondown"], 0.888, 522, "xMaxYMin"],
  xlongequal: [["longequal"], 0.888, 334, "xMinYMin"],
  "\\cdlongequal": [["longequal"], 3, 334, "xMinYMin"],
  xtwoheadleftarrow: [["twoheadleftarrow"], 0.888, 334, "xMinYMin"],
  xtwoheadrightarrow: [["twoheadrightarrow"], 0.888, 334, "xMaxYMin"],
  overleftrightarrow: [["leftarrow", "rightarrow"], 0.888, 522],
  overbrace: [["leftbrace", "midbrace", "rightbrace"], 1.6, 548],
  underbrace: [["leftbraceunder", "midbraceunder", "rightbraceunder"], 1.6, 548],
  underleftrightarrow: [["leftarrow", "rightarrow"], 0.888, 522],
  xleftrightarrow: [["leftarrow", "rightarrow"], 1.75, 522],
  xLeftrightarrow: [["doubleleftarrow", "doublerightarrow"], 1.75, 560],
  xrightleftharpoons: [["leftharpoondownplus", "rightharpoonplus"], 1.75, 716],
  xleftrightharpoons: [["leftharpoonplus", "rightharpoondownplus"], 1.75, 716],
  xhookleftarrow: [["leftarrow", "righthook"], 1.08, 522],
  xhookrightarrow: [["lefthook", "rightarrow"], 1.08, 522],
  overlinesegment: [["leftlinesegment", "rightlinesegment"], 0.888, 522],
  underlinesegment: [["leftlinesegment", "rightlinesegment"], 0.888, 522],
  overgroup: [["leftgroup", "rightgroup"], 0.888, 342],
  undergroup: [["leftgroupunder", "rightgroupunder"], 0.888, 342],
  xmapsto: [["leftmapsto", "rightarrow"], 1.5, 522],
  xtofrom: [["leftToFrom", "rightToFrom"], 1.75, 528],
  // The next three arrows are from the mhchem package.
  // In mhchem.sty, min-length is 2.0em. But these arrows might appear in the
  // document as \xrightarrow or \xrightleftharpoons. Those have
  // min-length = 1.75em, so we set min-length on these next three to match.
  xrightleftarrows: [["baraboveleftarrow", "rightarrowabovebar"], 1.75, 901],
  xrightequilibrium: [["baraboveshortleftharpoon", "rightharpoonaboveshortbar"], 1.75, 716],
  xleftequilibrium: [["shortbaraboveleftharpoon", "shortrightharpoonabovebar"], 1.75, 716]
};
var groupLength = function groupLength2(arg) {
  if (arg.type === "ordgroup") {
    return arg.body.length;
  } else {
    return 1;
  }
};
var svgSpan = function svgSpan2(group, options) {
  function buildSvgSpan_() {
    var viewBoxWidth = 4e5;
    var label = group.label.slice(1);
    if (utils.contains(["widehat", "widecheck", "widetilde", "utilde"], label)) {
      var grp = group;
      var numChars = groupLength(grp.base);
      var viewBoxHeight;
      var pathName;
      var _height;
      if (numChars > 5) {
        if (label === "widehat" || label === "widecheck") {
          viewBoxHeight = 420;
          viewBoxWidth = 2364;
          _height = 0.42;
          pathName = label + "4";
        } else {
          viewBoxHeight = 312;
          viewBoxWidth = 2340;
          _height = 0.34;
          pathName = "tilde4";
        }
      } else {
        var imgIndex = [1, 1, 2, 2, 3, 3][numChars];
        if (label === "widehat" || label === "widecheck") {
          viewBoxWidth = [0, 1062, 2364, 2364, 2364][imgIndex];
          viewBoxHeight = [0, 239, 300, 360, 420][imgIndex];
          _height = [0, 0.24, 0.3, 0.3, 0.36, 0.42][imgIndex];
          pathName = label + imgIndex;
        } else {
          viewBoxWidth = [0, 600, 1033, 2339, 2340][imgIndex];
          viewBoxHeight = [0, 260, 286, 306, 312][imgIndex];
          _height = [0, 0.26, 0.286, 0.3, 0.306, 0.34][imgIndex];
          pathName = "tilde" + imgIndex;
        }
      }
      var path2 = new PathNode(pathName);
      var svgNode = new SvgNode([path2], {
        "width": "100%",
        "height": makeEm(_height),
        "viewBox": "0 0 " + viewBoxWidth + " " + viewBoxHeight,
        "preserveAspectRatio": "none"
      });
      return {
        span: buildCommon.makeSvgSpan([], [svgNode], options),
        minWidth: 0,
        height: _height
      };
    } else {
      var spans = [];
      var data = katexImagesData[label];
      var [paths, _minWidth, _viewBoxHeight] = data;
      var _height2 = _viewBoxHeight / 1e3;
      var numSvgChildren = paths.length;
      var widthClasses;
      var aligns;
      if (numSvgChildren === 1) {
        var align1 = data[3];
        widthClasses = ["hide-tail"];
        aligns = [align1];
      } else if (numSvgChildren === 2) {
        widthClasses = ["halfarrow-left", "halfarrow-right"];
        aligns = ["xMinYMin", "xMaxYMin"];
      } else if (numSvgChildren === 3) {
        widthClasses = ["brace-left", "brace-center", "brace-right"];
        aligns = ["xMinYMin", "xMidYMin", "xMaxYMin"];
      } else {
        throw new Error("Correct katexImagesData or update code here to support\n                    " + numSvgChildren + " children.");
      }
      for (var i = 0; i < numSvgChildren; i++) {
        var _path = new PathNode(paths[i]);
        var _svgNode = new SvgNode([_path], {
          "width": "400em",
          "height": makeEm(_height2),
          "viewBox": "0 0 " + viewBoxWidth + " " + _viewBoxHeight,
          "preserveAspectRatio": aligns[i] + " slice"
        });
        var _span = buildCommon.makeSvgSpan([widthClasses[i]], [_svgNode], options);
        if (numSvgChildren === 1) {
          return {
            span: _span,
            minWidth: _minWidth,
            height: _height2
          };
        } else {
          _span.style.height = makeEm(_height2);
          spans.push(_span);
        }
      }
      return {
        span: buildCommon.makeSpan(["stretchy"], spans, options),
        minWidth: _minWidth,
        height: _height2
      };
    }
  }
  var {
    span,
    minWidth,
    height
  } = buildSvgSpan_();
  span.height = height;
  span.style.height = makeEm(height);
  if (minWidth > 0) {
    span.style.minWidth = makeEm(minWidth);
  }
  return span;
};
var encloseSpan = function encloseSpan2(inner2, label, topPad, bottomPad, options) {
  var img;
  var totalHeight = inner2.height + inner2.depth + topPad + bottomPad;
  if (/fbox|color|angl/.test(label)) {
    img = buildCommon.makeSpan(["stretchy", label], [], options);
    if (label === "fbox") {
      var color = options.color && options.getColor();
      if (color) {
        img.style.borderColor = color;
      }
    }
  } else {
    var lines = [];
    if (/^[bx]cancel$/.test(label)) {
      lines.push(new LineNode({
        "x1": "0",
        "y1": "0",
        "x2": "100%",
        "y2": "100%",
        "stroke-width": "0.046em"
      }));
    }
    if (/^x?cancel$/.test(label)) {
      lines.push(new LineNode({
        "x1": "0",
        "y1": "100%",
        "x2": "100%",
        "y2": "0",
        "stroke-width": "0.046em"
      }));
    }
    var svgNode = new SvgNode(lines, {
      "width": "100%",
      "height": makeEm(totalHeight)
    });
    img = buildCommon.makeSvgSpan([], [svgNode], options);
  }
  img.height = totalHeight;
  img.style.height = makeEm(totalHeight);
  return img;
};
var stretchy = {
  encloseSpan,
  mathMLnode,
  svgSpan
};
function assertNodeType(node, type) {
  if (!node || node.type !== type) {
    throw new Error("Expected node of type " + type + ", but got " + (node ? "node of type " + node.type : String(node)));
  }
  return node;
}
function assertSymbolNodeType(node) {
  var typedNode = checkSymbolNodeType(node);
  if (!typedNode) {
    throw new Error("Expected node of symbol group type, but got " + (node ? "node of type " + node.type : String(node)));
  }
  return typedNode;
}
function checkSymbolNodeType(node) {
  if (node && (node.type === "atom" || NON_ATOMS.hasOwnProperty(node.type))) {
    return node;
  }
  return null;
}
var htmlBuilder$a = (grp, options) => {
  var base;
  var group;
  var supSubGroup;
  if (grp && grp.type === "supsub") {
    group = assertNodeType(grp.base, "accent");
    base = group.base;
    grp.base = base;
    supSubGroup = assertSpan(buildGroup$1(grp, options));
    grp.base = group;
  } else {
    group = assertNodeType(grp, "accent");
    base = group.base;
  }
  var body = buildGroup$1(base, options.havingCrampedStyle());
  var mustShift = group.isShifty && utils.isCharacterBox(base);
  var skew = 0;
  if (mustShift) {
    var baseChar = utils.getBaseElem(base);
    var baseGroup = buildGroup$1(baseChar, options.havingCrampedStyle());
    skew = assertSymbolDomNode(baseGroup).skew;
  }
  var accentBelow = group.label === "\\c";
  var clearance = accentBelow ? body.height + body.depth : Math.min(body.height, options.fontMetrics().xHeight);
  var accentBody;
  if (!group.isStretchy) {
    var accent2;
    var width;
    if (group.label === "\\vec") {
      accent2 = buildCommon.staticSvg("vec", options);
      width = buildCommon.svgData.vec[1];
    } else {
      accent2 = buildCommon.makeOrd({
        mode: group.mode,
        text: group.label
      }, options, "textord");
      accent2 = assertSymbolDomNode(accent2);
      accent2.italic = 0;
      width = accent2.width;
      if (accentBelow) {
        clearance += accent2.depth;
      }
    }
    accentBody = buildCommon.makeSpan(["accent-body"], [accent2]);
    var accentFull = group.label === "\\textcircled";
    if (accentFull) {
      accentBody.classes.push("accent-full");
      clearance = body.height;
    }
    var left = skew;
    if (!accentFull) {
      left -= width / 2;
    }
    accentBody.style.left = makeEm(left);
    if (group.label === "\\textcircled") {
      accentBody.style.top = ".2em";
    }
    accentBody = buildCommon.makeVList({
      positionType: "firstBaseline",
      children: [{
        type: "elem",
        elem: body
      }, {
        type: "kern",
        size: -clearance
      }, {
        type: "elem",
        elem: accentBody
      }]
    }, options);
  } else {
    accentBody = stretchy.svgSpan(group, options);
    accentBody = buildCommon.makeVList({
      positionType: "firstBaseline",
      children: [{
        type: "elem",
        elem: body
      }, {
        type: "elem",
        elem: accentBody,
        wrapperClasses: ["svg-align"],
        wrapperStyle: skew > 0 ? {
          width: "calc(100% - " + makeEm(2 * skew) + ")",
          marginLeft: makeEm(2 * skew)
        } : void 0
      }]
    }, options);
  }
  var accentWrap = buildCommon.makeSpan(["mord", "accent"], [accentBody], options);
  if (supSubGroup) {
    supSubGroup.children[0] = accentWrap;
    supSubGroup.height = Math.max(accentWrap.height, supSubGroup.height);
    supSubGroup.classes[0] = "mord";
    return supSubGroup;
  } else {
    return accentWrap;
  }
};
var mathmlBuilder$9 = (group, options) => {
  var accentNode = group.isStretchy ? stretchy.mathMLnode(group.label) : new mathMLTree.MathNode("mo", [makeText(group.label, group.mode)]);
  var node = new mathMLTree.MathNode("mover", [buildGroup2(group.base, options), accentNode]);
  node.setAttribute("accent", "true");
  return node;
};
var NON_STRETCHY_ACCENT_REGEX = new RegExp(["\\acute", "\\grave", "\\ddot", "\\tilde", "\\bar", "\\breve", "\\check", "\\hat", "\\vec", "\\dot", "\\mathring"].map((accent2) => "\\" + accent2).join("|"));
defineFunction({
  type: "accent",
  names: ["\\acute", "\\grave", "\\ddot", "\\tilde", "\\bar", "\\breve", "\\check", "\\hat", "\\vec", "\\dot", "\\mathring", "\\widecheck", "\\widehat", "\\widetilde", "\\overrightarrow", "\\overleftarrow", "\\Overrightarrow", "\\overleftrightarrow", "\\overgroup", "\\overlinesegment", "\\overleftharpoon", "\\overrightharpoon"],
  props: {
    numArgs: 1
  },
  handler: (context, args) => {
    var base = normalizeArgument(args[0]);
    var isStretchy = !NON_STRETCHY_ACCENT_REGEX.test(context.funcName);
    var isShifty = !isStretchy || context.funcName === "\\widehat" || context.funcName === "\\widetilde" || context.funcName === "\\widecheck";
    return {
      type: "accent",
      mode: context.parser.mode,
      label: context.funcName,
      isStretchy,
      isShifty,
      base
    };
  },
  htmlBuilder: htmlBuilder$a,
  mathmlBuilder: mathmlBuilder$9
});
defineFunction({
  type: "accent",
  names: ["\\'", "\\`", "\\^", "\\~", "\\=", "\\u", "\\.", '\\"', "\\c", "\\r", "\\H", "\\v", "\\textcircled"],
  props: {
    numArgs: 1,
    allowedInText: true,
    allowedInMath: true,
    // unless in strict mode
    argTypes: ["primitive"]
  },
  handler: (context, args) => {
    var base = args[0];
    var mode = context.parser.mode;
    if (mode === "math") {
      context.parser.settings.reportNonstrict("mathVsTextAccents", "LaTeX's accent " + context.funcName + " works only in text mode");
      mode = "text";
    }
    return {
      type: "accent",
      mode,
      label: context.funcName,
      isStretchy: false,
      isShifty: true,
      base
    };
  },
  htmlBuilder: htmlBuilder$a,
  mathmlBuilder: mathmlBuilder$9
});
defineFunction({
  type: "accentUnder",
  names: ["\\underleftarrow", "\\underrightarrow", "\\underleftrightarrow", "\\undergroup", "\\underlinesegment", "\\utilde"],
  props: {
    numArgs: 1
  },
  handler: (_ref, args) => {
    var {
      parser,
      funcName
    } = _ref;
    var base = args[0];
    return {
      type: "accentUnder",
      mode: parser.mode,
      label: funcName,
      base
    };
  },
  htmlBuilder: (group, options) => {
    var innerGroup = buildGroup$1(group.base, options);
    var accentBody = stretchy.svgSpan(group, options);
    var kern = group.label === "\\utilde" ? 0.12 : 0;
    var vlist = buildCommon.makeVList({
      positionType: "top",
      positionData: innerGroup.height,
      children: [{
        type: "elem",
        elem: accentBody,
        wrapperClasses: ["svg-align"]
      }, {
        type: "kern",
        size: kern
      }, {
        type: "elem",
        elem: innerGroup
      }]
    }, options);
    return buildCommon.makeSpan(["mord", "accentunder"], [vlist], options);
  },
  mathmlBuilder: (group, options) => {
    var accentNode = stretchy.mathMLnode(group.label);
    var node = new mathMLTree.MathNode("munder", [buildGroup2(group.base, options), accentNode]);
    node.setAttribute("accentunder", "true");
    return node;
  }
});
var paddedNode = (group) => {
  var node = new mathMLTree.MathNode("mpadded", group ? [group] : []);
  node.setAttribute("width", "+0.6em");
  node.setAttribute("lspace", "0.3em");
  return node;
};
defineFunction({
  type: "xArrow",
  names: [
    "\\xleftarrow",
    "\\xrightarrow",
    "\\xLeftarrow",
    "\\xRightarrow",
    "\\xleftrightarrow",
    "\\xLeftrightarrow",
    "\\xhookleftarrow",
    "\\xhookrightarrow",
    "\\xmapsto",
    "\\xrightharpoondown",
    "\\xrightharpoonup",
    "\\xleftharpoondown",
    "\\xleftharpoonup",
    "\\xrightleftharpoons",
    "\\xleftrightharpoons",
    "\\xlongequal",
    "\\xtwoheadrightarrow",
    "\\xtwoheadleftarrow",
    "\\xtofrom",
    // The next 3 functions are here to support the mhchem extension.
    // Direct use of these functions is discouraged and may break someday.
    "\\xrightleftarrows",
    "\\xrightequilibrium",
    "\\xleftequilibrium",
    // The next 3 functions are here only to support the {CD} environment.
    "\\\\cdrightarrow",
    "\\\\cdleftarrow",
    "\\\\cdlongequal"
  ],
  props: {
    numArgs: 1,
    numOptionalArgs: 1
  },
  handler(_ref, args, optArgs) {
    var {
      parser,
      funcName
    } = _ref;
    return {
      type: "xArrow",
      mode: parser.mode,
      label: funcName,
      body: args[0],
      below: optArgs[0]
    };
  },
  // Flow is unable to correctly infer the type of `group`, even though it's
  // unambiguously determined from the passed-in `type` above.
  htmlBuilder(group, options) {
    var style = options.style;
    var newOptions = options.havingStyle(style.sup());
    var upperGroup = buildCommon.wrapFragment(buildGroup$1(group.body, newOptions, options), options);
    var arrowPrefix = group.label.slice(0, 2) === "\\x" ? "x" : "cd";
    upperGroup.classes.push(arrowPrefix + "-arrow-pad");
    var lowerGroup;
    if (group.below) {
      newOptions = options.havingStyle(style.sub());
      lowerGroup = buildCommon.wrapFragment(buildGroup$1(group.below, newOptions, options), options);
      lowerGroup.classes.push(arrowPrefix + "-arrow-pad");
    }
    var arrowBody = stretchy.svgSpan(group, options);
    var arrowShift = -options.fontMetrics().axisHeight + 0.5 * arrowBody.height;
    var upperShift = -options.fontMetrics().axisHeight - 0.5 * arrowBody.height - 0.111;
    if (upperGroup.depth > 0.25 || group.label === "\\xleftequilibrium") {
      upperShift -= upperGroup.depth;
    }
    var vlist;
    if (lowerGroup) {
      var lowerShift = -options.fontMetrics().axisHeight + lowerGroup.height + 0.5 * arrowBody.height + 0.111;
      vlist = buildCommon.makeVList({
        positionType: "individualShift",
        children: [{
          type: "elem",
          elem: upperGroup,
          shift: upperShift
        }, {
          type: "elem",
          elem: arrowBody,
          shift: arrowShift
        }, {
          type: "elem",
          elem: lowerGroup,
          shift: lowerShift
        }]
      }, options);
    } else {
      vlist = buildCommon.makeVList({
        positionType: "individualShift",
        children: [{
          type: "elem",
          elem: upperGroup,
          shift: upperShift
        }, {
          type: "elem",
          elem: arrowBody,
          shift: arrowShift
        }]
      }, options);
    }
    vlist.children[0].children[0].children[1].classes.push("svg-align");
    return buildCommon.makeSpan(["mrel", "x-arrow"], [vlist], options);
  },
  mathmlBuilder(group, options) {
    var arrowNode = stretchy.mathMLnode(group.label);
    arrowNode.setAttribute("minsize", group.label.charAt(0) === "x" ? "1.75em" : "3.0em");
    var node;
    if (group.body) {
      var upperNode = paddedNode(buildGroup2(group.body, options));
      if (group.below) {
        var lowerNode = paddedNode(buildGroup2(group.below, options));
        node = new mathMLTree.MathNode("munderover", [arrowNode, lowerNode, upperNode]);
      } else {
        node = new mathMLTree.MathNode("mover", [arrowNode, upperNode]);
      }
    } else if (group.below) {
      var _lowerNode = paddedNode(buildGroup2(group.below, options));
      node = new mathMLTree.MathNode("munder", [arrowNode, _lowerNode]);
    } else {
      node = paddedNode();
      node = new mathMLTree.MathNode("mover", [arrowNode, node]);
    }
    return node;
  }
});
var makeSpan2 = buildCommon.makeSpan;
function htmlBuilder$9(group, options) {
  var elements = buildExpression$1(group.body, options, true);
  return makeSpan2([group.mclass], elements, options);
}
function mathmlBuilder$8(group, options) {
  var node;
  var inner2 = buildExpression2(group.body, options);
  if (group.mclass === "minner") {
    node = new mathMLTree.MathNode("mpadded", inner2);
  } else if (group.mclass === "mord") {
    if (group.isCharacterBox) {
      node = inner2[0];
      node.type = "mi";
    } else {
      node = new mathMLTree.MathNode("mi", inner2);
    }
  } else {
    if (group.isCharacterBox) {
      node = inner2[0];
      node.type = "mo";
    } else {
      node = new mathMLTree.MathNode("mo", inner2);
    }
    if (group.mclass === "mbin") {
      node.attributes.lspace = "0.22em";
      node.attributes.rspace = "0.22em";
    } else if (group.mclass === "mpunct") {
      node.attributes.lspace = "0em";
      node.attributes.rspace = "0.17em";
    } else if (group.mclass === "mopen" || group.mclass === "mclose") {
      node.attributes.lspace = "0em";
      node.attributes.rspace = "0em";
    } else if (group.mclass === "minner") {
      node.attributes.lspace = "0.0556em";
      node.attributes.width = "+0.1111em";
    }
  }
  return node;
}
defineFunction({
  type: "mclass",
  names: ["\\mathord", "\\mathbin", "\\mathrel", "\\mathopen", "\\mathclose", "\\mathpunct", "\\mathinner"],
  props: {
    numArgs: 1,
    primitive: true
  },
  handler(_ref, args) {
    var {
      parser,
      funcName
    } = _ref;
    var body = args[0];
    return {
      type: "mclass",
      mode: parser.mode,
      mclass: "m" + funcName.slice(5),
      // TODO(kevinb): don't prefix with 'm'
      body: ordargument(body),
      isCharacterBox: utils.isCharacterBox(body)
    };
  },
  htmlBuilder: htmlBuilder$9,
  mathmlBuilder: mathmlBuilder$8
});
var binrelClass = (arg) => {
  var atom = arg.type === "ordgroup" && arg.body.length ? arg.body[0] : arg;
  if (atom.type === "atom" && (atom.family === "bin" || atom.family === "rel")) {
    return "m" + atom.family;
  } else {
    return "mord";
  }
};
defineFunction({
  type: "mclass",
  names: ["\\@binrel"],
  props: {
    numArgs: 2
  },
  handler(_ref2, args) {
    var {
      parser
    } = _ref2;
    return {
      type: "mclass",
      mode: parser.mode,
      mclass: binrelClass(args[0]),
      body: ordargument(args[1]),
      isCharacterBox: utils.isCharacterBox(args[1])
    };
  }
});
defineFunction({
  type: "mclass",
  names: ["\\stackrel", "\\overset", "\\underset"],
  props: {
    numArgs: 2
  },
  handler(_ref3, args) {
    var {
      parser,
      funcName
    } = _ref3;
    var baseArg = args[1];
    var shiftedArg = args[0];
    var mclass;
    if (funcName !== "\\stackrel") {
      mclass = binrelClass(baseArg);
    } else {
      mclass = "mrel";
    }
    var baseOp = {
      type: "op",
      mode: baseArg.mode,
      limits: true,
      alwaysHandleSupSub: true,
      parentIsSupSub: false,
      symbol: false,
      suppressBaseShift: funcName !== "\\stackrel",
      body: ordargument(baseArg)
    };
    var supsub = {
      type: "supsub",
      mode: shiftedArg.mode,
      base: baseOp,
      sup: funcName === "\\underset" ? null : shiftedArg,
      sub: funcName === "\\underset" ? shiftedArg : null
    };
    return {
      type: "mclass",
      mode: parser.mode,
      mclass,
      body: [supsub],
      isCharacterBox: utils.isCharacterBox(supsub)
    };
  },
  htmlBuilder: htmlBuilder$9,
  mathmlBuilder: mathmlBuilder$8
});
defineFunction({
  type: "pmb",
  names: ["\\pmb"],
  props: {
    numArgs: 1,
    allowedInText: true
  },
  handler(_ref, args) {
    var {
      parser
    } = _ref;
    return {
      type: "pmb",
      mode: parser.mode,
      mclass: binrelClass(args[0]),
      body: ordargument(args[0])
    };
  },
  htmlBuilder(group, options) {
    var elements = buildExpression$1(group.body, options, true);
    var node = buildCommon.makeSpan([group.mclass], elements, options);
    node.style.textShadow = "0.02em 0.01em 0.04px";
    return node;
  },
  mathmlBuilder(group, style) {
    var inner2 = buildExpression2(group.body, style);
    var node = new mathMLTree.MathNode("mstyle", inner2);
    node.setAttribute("style", "text-shadow: 0.02em 0.01em 0.04px");
    return node;
  }
});
var cdArrowFunctionName = {
  ">": "\\\\cdrightarrow",
  "<": "\\\\cdleftarrow",
  "=": "\\\\cdlongequal",
  "A": "\\uparrow",
  "V": "\\downarrow",
  "|": "\\Vert",
  ".": "no arrow"
};
var newCell = () => {
  return {
    type: "styling",
    body: [],
    mode: "math",
    style: "display"
  };
};
var isStartOfArrow = (node) => {
  return node.type === "textord" && node.text === "@";
};
var isLabelEnd = (node, endChar) => {
  return (node.type === "mathord" || node.type === "atom") && node.text === endChar;
};
function cdArrow(arrowChar, labels, parser) {
  var funcName = cdArrowFunctionName[arrowChar];
  switch (funcName) {
    case "\\\\cdrightarrow":
    case "\\\\cdleftarrow":
      return parser.callFunction(funcName, [labels[0]], [labels[1]]);
    case "\\uparrow":
    case "\\downarrow": {
      var leftLabel = parser.callFunction("\\\\cdleft", [labels[0]], []);
      var bareArrow = {
        type: "atom",
        text: funcName,
        mode: "math",
        family: "rel"
      };
      var sizedArrow = parser.callFunction("\\Big", [bareArrow], []);
      var rightLabel = parser.callFunction("\\\\cdright", [labels[1]], []);
      var arrowGroup = {
        type: "ordgroup",
        mode: "math",
        body: [leftLabel, sizedArrow, rightLabel]
      };
      return parser.callFunction("\\\\cdparent", [arrowGroup], []);
    }
    case "\\\\cdlongequal":
      return parser.callFunction("\\\\cdlongequal", [], []);
    case "\\Vert": {
      var arrow = {
        type: "textord",
        text: "\\Vert",
        mode: "math"
      };
      return parser.callFunction("\\Big", [arrow], []);
    }
    default:
      return {
        type: "textord",
        text: " ",
        mode: "math"
      };
  }
}
function parseCD(parser) {
  var parsedRows = [];
  parser.gullet.beginGroup();
  parser.gullet.macros.set("\\cr", "\\\\\\relax");
  parser.gullet.beginGroup();
  while (true) {
    parsedRows.push(parser.parseExpression(false, "\\\\"));
    parser.gullet.endGroup();
    parser.gullet.beginGroup();
    var next = parser.fetch().text;
    if (next === "&" || next === "\\\\") {
      parser.consume();
    } else if (next === "\\end") {
      if (parsedRows[parsedRows.length - 1].length === 0) {
        parsedRows.pop();
      }
      break;
    } else {
      throw new ParseError2("Expected \\\\ or \\cr or \\end", parser.nextToken);
    }
  }
  var row = [];
  var body = [row];
  for (var i = 0; i < parsedRows.length; i++) {
    var rowNodes = parsedRows[i];
    var cell = newCell();
    for (var j = 0; j < rowNodes.length; j++) {
      if (!isStartOfArrow(rowNodes[j])) {
        cell.body.push(rowNodes[j]);
      } else {
        row.push(cell);
        j += 1;
        var arrowChar = assertSymbolNodeType(rowNodes[j]).text;
        var labels = new Array(2);
        labels[0] = {
          type: "ordgroup",
          mode: "math",
          body: []
        };
        labels[1] = {
          type: "ordgroup",
          mode: "math",
          body: []
        };
        if ("=|.".indexOf(arrowChar) > -1) ;
        else if ("<>AV".indexOf(arrowChar) > -1) {
          for (var labelNum = 0; labelNum < 2; labelNum++) {
            var inLabel = true;
            for (var k = j + 1; k < rowNodes.length; k++) {
              if (isLabelEnd(rowNodes[k], arrowChar)) {
                inLabel = false;
                j = k;
                break;
              }
              if (isStartOfArrow(rowNodes[k])) {
                throw new ParseError2("Missing a " + arrowChar + " character to complete a CD arrow.", rowNodes[k]);
              }
              labels[labelNum].body.push(rowNodes[k]);
            }
            if (inLabel) {
              throw new ParseError2("Missing a " + arrowChar + " character to complete a CD arrow.", rowNodes[j]);
            }
          }
        } else {
          throw new ParseError2('Expected one of "<>AV=|." after @', rowNodes[j]);
        }
        var arrow = cdArrow(arrowChar, labels, parser);
        var wrappedArrow = {
          type: "styling",
          body: [arrow],
          mode: "math",
          style: "display"
          // CD is always displaystyle.
        };
        row.push(wrappedArrow);
        cell = newCell();
      }
    }
    if (i % 2 === 0) {
      row.push(cell);
    } else {
      row.shift();
    }
    row = [];
    body.push(row);
  }
  parser.gullet.endGroup();
  parser.gullet.endGroup();
  var cols = new Array(body[0].length).fill({
    type: "align",
    align: "c",
    pregap: 0.25,
    // CD package sets \enskip between columns.
    postgap: 0.25
    // So pre and post each get half an \enskip, i.e. 0.25em.
  });
  return {
    type: "array",
    mode: "math",
    body,
    arraystretch: 1,
    addJot: true,
    rowGaps: [null],
    cols,
    colSeparationType: "CD",
    hLinesBeforeRow: new Array(body.length + 1).fill([])
  };
}
defineFunction({
  type: "cdlabel",
  names: ["\\\\cdleft", "\\\\cdright"],
  props: {
    numArgs: 1
  },
  handler(_ref, args) {
    var {
      parser,
      funcName
    } = _ref;
    return {
      type: "cdlabel",
      mode: parser.mode,
      side: funcName.slice(4),
      label: args[0]
    };
  },
  htmlBuilder(group, options) {
    var newOptions = options.havingStyle(options.style.sup());
    var label = buildCommon.wrapFragment(buildGroup$1(group.label, newOptions, options), options);
    label.classes.push("cd-label-" + group.side);
    label.style.bottom = makeEm(0.8 - label.depth);
    label.height = 0;
    label.depth = 0;
    return label;
  },
  mathmlBuilder(group, options) {
    var label = new mathMLTree.MathNode("mrow", [buildGroup2(group.label, options)]);
    label = new mathMLTree.MathNode("mpadded", [label]);
    label.setAttribute("width", "0");
    if (group.side === "left") {
      label.setAttribute("lspace", "-1width");
    }
    label.setAttribute("voffset", "0.7em");
    label = new mathMLTree.MathNode("mstyle", [label]);
    label.setAttribute("displaystyle", "false");
    label.setAttribute("scriptlevel", "1");
    return label;
  }
});
defineFunction({
  type: "cdlabelparent",
  names: ["\\\\cdparent"],
  props: {
    numArgs: 1
  },
  handler(_ref2, args) {
    var {
      parser
    } = _ref2;
    return {
      type: "cdlabelparent",
      mode: parser.mode,
      fragment: args[0]
    };
  },
  htmlBuilder(group, options) {
    var parent = buildCommon.wrapFragment(buildGroup$1(group.fragment, options), options);
    parent.classes.push("cd-vert-arrow");
    return parent;
  },
  mathmlBuilder(group, options) {
    return new mathMLTree.MathNode("mrow", [buildGroup2(group.fragment, options)]);
  }
});
defineFunction({
  type: "textord",
  names: ["\\@char"],
  props: {
    numArgs: 1,
    allowedInText: true
  },
  handler(_ref, args) {
    var {
      parser
    } = _ref;
    var arg = assertNodeType(args[0], "ordgroup");
    var group = arg.body;
    var number = "";
    for (var i = 0; i < group.length; i++) {
      var node = assertNodeType(group[i], "textord");
      number += node.text;
    }
    var code = parseInt(number);
    var text3;
    if (isNaN(code)) {
      throw new ParseError2("\\@char has non-numeric argument " + number);
    } else if (code < 0 || code >= 1114111) {
      throw new ParseError2("\\@char with invalid code point " + number);
    } else if (code <= 65535) {
      text3 = String.fromCharCode(code);
    } else {
      code -= 65536;
      text3 = String.fromCharCode((code >> 10) + 55296, (code & 1023) + 56320);
    }
    return {
      type: "textord",
      mode: parser.mode,
      text: text3
    };
  }
});
var htmlBuilder$8 = (group, options) => {
  var elements = buildExpression$1(group.body, options.withColor(group.color), false);
  return buildCommon.makeFragment(elements);
};
var mathmlBuilder$7 = (group, options) => {
  var inner2 = buildExpression2(group.body, options.withColor(group.color));
  var node = new mathMLTree.MathNode("mstyle", inner2);
  node.setAttribute("mathcolor", group.color);
  return node;
};
defineFunction({
  type: "color",
  names: ["\\textcolor"],
  props: {
    numArgs: 2,
    allowedInText: true,
    argTypes: ["color", "original"]
  },
  handler(_ref, args) {
    var {
      parser
    } = _ref;
    var color = assertNodeType(args[0], "color-token").color;
    var body = args[1];
    return {
      type: "color",
      mode: parser.mode,
      color,
      body: ordargument(body)
    };
  },
  htmlBuilder: htmlBuilder$8,
  mathmlBuilder: mathmlBuilder$7
});
defineFunction({
  type: "color",
  names: ["\\color"],
  props: {
    numArgs: 1,
    allowedInText: true,
    argTypes: ["color"]
  },
  handler(_ref2, args) {
    var {
      parser,
      breakOnTokenText
    } = _ref2;
    var color = assertNodeType(args[0], "color-token").color;
    parser.gullet.macros.set("\\current@color", color);
    var body = parser.parseExpression(true, breakOnTokenText);
    return {
      type: "color",
      mode: parser.mode,
      color,
      body
    };
  },
  htmlBuilder: htmlBuilder$8,
  mathmlBuilder: mathmlBuilder$7
});
defineFunction({
  type: "cr",
  names: ["\\\\"],
  props: {
    numArgs: 0,
    numOptionalArgs: 0,
    allowedInText: true
  },
  handler(_ref, args, optArgs) {
    var {
      parser
    } = _ref;
    var size = parser.gullet.future().text === "[" ? parser.parseSizeGroup(true) : null;
    var newLine = !parser.settings.displayMode || !parser.settings.useStrictBehavior("newLineInDisplayMode", "In LaTeX, \\\\ or \\newline does nothing in display mode");
    return {
      type: "cr",
      mode: parser.mode,
      newLine,
      size: size && assertNodeType(size, "size").value
    };
  },
  // The following builders are called only at the top level,
  // not within tabular/array environments.
  htmlBuilder(group, options) {
    var span = buildCommon.makeSpan(["mspace"], [], options);
    if (group.newLine) {
      span.classes.push("newline");
      if (group.size) {
        span.style.marginTop = makeEm(calculateSize(group.size, options));
      }
    }
    return span;
  },
  mathmlBuilder(group, options) {
    var node = new mathMLTree.MathNode("mspace");
    if (group.newLine) {
      node.setAttribute("linebreak", "newline");
      if (group.size) {
        node.setAttribute("height", makeEm(calculateSize(group.size, options)));
      }
    }
    return node;
  }
});
var globalMap = {
  "\\global": "\\global",
  "\\long": "\\\\globallong",
  "\\\\globallong": "\\\\globallong",
  "\\def": "\\gdef",
  "\\gdef": "\\gdef",
  "\\edef": "\\xdef",
  "\\xdef": "\\xdef",
  "\\let": "\\\\globallet",
  "\\futurelet": "\\\\globalfuture"
};
var checkControlSequence = (tok) => {
  var name = tok.text;
  if (/^(?:[\\{}$&#^_]|EOF)$/.test(name)) {
    throw new ParseError2("Expected a control sequence", tok);
  }
  return name;
};
var getRHS = (parser) => {
  var tok = parser.gullet.popToken();
  if (tok.text === "=") {
    tok = parser.gullet.popToken();
    if (tok.text === " ") {
      tok = parser.gullet.popToken();
    }
  }
  return tok;
};
var letCommand = (parser, name, tok, global2) => {
  var macro = parser.gullet.macros.get(tok.text);
  if (macro == null) {
    tok.noexpand = true;
    macro = {
      tokens: [tok],
      numArgs: 0,
      // reproduce the same behavior in expansion
      unexpandable: !parser.gullet.isExpandable(tok.text)
    };
  }
  parser.gullet.macros.set(name, macro, global2);
};
defineFunction({
  type: "internal",
  names: [
    "\\global",
    "\\long",
    "\\\\globallong"
    // can’t be entered directly
  ],
  props: {
    numArgs: 0,
    allowedInText: true
  },
  handler(_ref) {
    var {
      parser,
      funcName
    } = _ref;
    parser.consumeSpaces();
    var token = parser.fetch();
    if (globalMap[token.text]) {
      if (funcName === "\\global" || funcName === "\\\\globallong") {
        token.text = globalMap[token.text];
      }
      return assertNodeType(parser.parseFunction(), "internal");
    }
    throw new ParseError2("Invalid token after macro prefix", token);
  }
});
defineFunction({
  type: "internal",
  names: ["\\def", "\\gdef", "\\edef", "\\xdef"],
  props: {
    numArgs: 0,
    allowedInText: true,
    primitive: true
  },
  handler(_ref2) {
    var {
      parser,
      funcName
    } = _ref2;
    var tok = parser.gullet.popToken();
    var name = tok.text;
    if (/^(?:[\\{}$&#^_]|EOF)$/.test(name)) {
      throw new ParseError2("Expected a control sequence", tok);
    }
    var numArgs = 0;
    var insert;
    var delimiters2 = [[]];
    while (parser.gullet.future().text !== "{") {
      tok = parser.gullet.popToken();
      if (tok.text === "#") {
        if (parser.gullet.future().text === "{") {
          insert = parser.gullet.future();
          delimiters2[numArgs].push("{");
          break;
        }
        tok = parser.gullet.popToken();
        if (!/^[1-9]$/.test(tok.text)) {
          throw new ParseError2('Invalid argument number "' + tok.text + '"');
        }
        if (parseInt(tok.text) !== numArgs + 1) {
          throw new ParseError2('Argument number "' + tok.text + '" out of order');
        }
        numArgs++;
        delimiters2.push([]);
      } else if (tok.text === "EOF") {
        throw new ParseError2("Expected a macro definition");
      } else {
        delimiters2[numArgs].push(tok.text);
      }
    }
    var {
      tokens
    } = parser.gullet.consumeArg();
    if (insert) {
      tokens.unshift(insert);
    }
    if (funcName === "\\edef" || funcName === "\\xdef") {
      tokens = parser.gullet.expandTokens(tokens);
      tokens.reverse();
    }
    parser.gullet.macros.set(name, {
      tokens,
      numArgs,
      delimiters: delimiters2
    }, funcName === globalMap[funcName]);
    return {
      type: "internal",
      mode: parser.mode
    };
  }
});
defineFunction({
  type: "internal",
  names: [
    "\\let",
    "\\\\globallet"
    // can’t be entered directly
  ],
  props: {
    numArgs: 0,
    allowedInText: true,
    primitive: true
  },
  handler(_ref3) {
    var {
      parser,
      funcName
    } = _ref3;
    var name = checkControlSequence(parser.gullet.popToken());
    parser.gullet.consumeSpaces();
    var tok = getRHS(parser);
    letCommand(parser, name, tok, funcName === "\\\\globallet");
    return {
      type: "internal",
      mode: parser.mode
    };
  }
});
defineFunction({
  type: "internal",
  names: [
    "\\futurelet",
    "\\\\globalfuture"
    // can’t be entered directly
  ],
  props: {
    numArgs: 0,
    allowedInText: true,
    primitive: true
  },
  handler(_ref4) {
    var {
      parser,
      funcName
    } = _ref4;
    var name = checkControlSequence(parser.gullet.popToken());
    var middle = parser.gullet.popToken();
    var tok = parser.gullet.popToken();
    letCommand(parser, name, tok, funcName === "\\\\globalfuture");
    parser.gullet.pushToken(tok);
    parser.gullet.pushToken(middle);
    return {
      type: "internal",
      mode: parser.mode
    };
  }
});
var getMetrics = function getMetrics2(symbol, font, mode) {
  var replace = symbols.math[symbol] && symbols.math[symbol].replace;
  var metrics = getCharacterMetrics(replace || symbol, font, mode);
  if (!metrics) {
    throw new Error("Unsupported symbol " + symbol + " and font size " + font + ".");
  }
  return metrics;
};
var styleWrap = function styleWrap2(delim, toStyle, options, classes) {
  var newOptions = options.havingBaseStyle(toStyle);
  var span = buildCommon.makeSpan(classes.concat(newOptions.sizingClasses(options)), [delim], options);
  var delimSizeMultiplier = newOptions.sizeMultiplier / options.sizeMultiplier;
  span.height *= delimSizeMultiplier;
  span.depth *= delimSizeMultiplier;
  span.maxFontSize = newOptions.sizeMultiplier;
  return span;
};
var centerSpan = function centerSpan2(span, options, style) {
  var newOptions = options.havingBaseStyle(style);
  var shift = (1 - options.sizeMultiplier / newOptions.sizeMultiplier) * options.fontMetrics().axisHeight;
  span.classes.push("delimcenter");
  span.style.top = makeEm(shift);
  span.height -= shift;
  span.depth += shift;
};
var makeSmallDelim = function makeSmallDelim2(delim, style, center, options, mode, classes) {
  var text3 = buildCommon.makeSymbol(delim, "Main-Regular", mode, options);
  var span = styleWrap(text3, style, options, classes);
  if (center) {
    centerSpan(span, options, style);
  }
  return span;
};
var mathrmSize = function mathrmSize2(value, size, mode, options) {
  return buildCommon.makeSymbol(value, "Size" + size + "-Regular", mode, options);
};
var makeLargeDelim = function makeLargeDelim2(delim, size, center, options, mode, classes) {
  var inner2 = mathrmSize(delim, size, mode, options);
  var span = styleWrap(buildCommon.makeSpan(["delimsizing", "size" + size], [inner2], options), Style$1.TEXT, options, classes);
  if (center) {
    centerSpan(span, options, Style$1.TEXT);
  }
  return span;
};
var makeGlyphSpan = function makeGlyphSpan2(symbol, font, mode) {
  var sizeClass;
  if (font === "Size1-Regular") {
    sizeClass = "delim-size1";
  } else {
    sizeClass = "delim-size4";
  }
  var corner = buildCommon.makeSpan(["delimsizinginner", sizeClass], [buildCommon.makeSpan([], [buildCommon.makeSymbol(symbol, font, mode)])]);
  return {
    type: "elem",
    elem: corner
  };
};
var makeInner = function makeInner2(ch, height, options) {
  var width = fontMetricsData["Size4-Regular"][ch.charCodeAt(0)] ? fontMetricsData["Size4-Regular"][ch.charCodeAt(0)][4] : fontMetricsData["Size1-Regular"][ch.charCodeAt(0)][4];
  var path2 = new PathNode("inner", innerPath(ch, Math.round(1e3 * height)));
  var svgNode = new SvgNode([path2], {
    "width": makeEm(width),
    "height": makeEm(height),
    // Override CSS rule `.katex svg { width: 100% }`
    "style": "width:" + makeEm(width),
    "viewBox": "0 0 " + 1e3 * width + " " + Math.round(1e3 * height),
    "preserveAspectRatio": "xMinYMin"
  });
  var span = buildCommon.makeSvgSpan([], [svgNode], options);
  span.height = height;
  span.style.height = makeEm(height);
  span.style.width = makeEm(width);
  return {
    type: "elem",
    elem: span
  };
};
var lapInEms = 8e-3;
var lap = {
  type: "kern",
  size: -1 * lapInEms
};
var verts = ["|", "\\lvert", "\\rvert", "\\vert"];
var doubleVerts = ["\\|", "\\lVert", "\\rVert", "\\Vert"];
var makeStackedDelim = function makeStackedDelim2(delim, heightTotal, center, options, mode, classes) {
  var top;
  var middle;
  var repeat;
  var bottom;
  var svgLabel = "";
  var viewBoxWidth = 0;
  top = repeat = bottom = delim;
  middle = null;
  var font = "Size1-Regular";
  if (delim === "\\uparrow") {
    repeat = bottom = "\u23D0";
  } else if (delim === "\\Uparrow") {
    repeat = bottom = "\u2016";
  } else if (delim === "\\downarrow") {
    top = repeat = "\u23D0";
  } else if (delim === "\\Downarrow") {
    top = repeat = "\u2016";
  } else if (delim === "\\updownarrow") {
    top = "\\uparrow";
    repeat = "\u23D0";
    bottom = "\\downarrow";
  } else if (delim === "\\Updownarrow") {
    top = "\\Uparrow";
    repeat = "\u2016";
    bottom = "\\Downarrow";
  } else if (utils.contains(verts, delim)) {
    repeat = "\u2223";
    svgLabel = "vert";
    viewBoxWidth = 333;
  } else if (utils.contains(doubleVerts, delim)) {
    repeat = "\u2225";
    svgLabel = "doublevert";
    viewBoxWidth = 556;
  } else if (delim === "[" || delim === "\\lbrack") {
    top = "\u23A1";
    repeat = "\u23A2";
    bottom = "\u23A3";
    font = "Size4-Regular";
    svgLabel = "lbrack";
    viewBoxWidth = 667;
  } else if (delim === "]" || delim === "\\rbrack") {
    top = "\u23A4";
    repeat = "\u23A5";
    bottom = "\u23A6";
    font = "Size4-Regular";
    svgLabel = "rbrack";
    viewBoxWidth = 667;
  } else if (delim === "\\lfloor" || delim === "\u230A") {
    repeat = top = "\u23A2";
    bottom = "\u23A3";
    font = "Size4-Regular";
    svgLabel = "lfloor";
    viewBoxWidth = 667;
  } else if (delim === "\\lceil" || delim === "\u2308") {
    top = "\u23A1";
    repeat = bottom = "\u23A2";
    font = "Size4-Regular";
    svgLabel = "lceil";
    viewBoxWidth = 667;
  } else if (delim === "\\rfloor" || delim === "\u230B") {
    repeat = top = "\u23A5";
    bottom = "\u23A6";
    font = "Size4-Regular";
    svgLabel = "rfloor";
    viewBoxWidth = 667;
  } else if (delim === "\\rceil" || delim === "\u2309") {
    top = "\u23A4";
    repeat = bottom = "\u23A5";
    font = "Size4-Regular";
    svgLabel = "rceil";
    viewBoxWidth = 667;
  } else if (delim === "(" || delim === "\\lparen") {
    top = "\u239B";
    repeat = "\u239C";
    bottom = "\u239D";
    font = "Size4-Regular";
    svgLabel = "lparen";
    viewBoxWidth = 875;
  } else if (delim === ")" || delim === "\\rparen") {
    top = "\u239E";
    repeat = "\u239F";
    bottom = "\u23A0";
    font = "Size4-Regular";
    svgLabel = "rparen";
    viewBoxWidth = 875;
  } else if (delim === "\\{" || delim === "\\lbrace") {
    top = "\u23A7";
    middle = "\u23A8";
    bottom = "\u23A9";
    repeat = "\u23AA";
    font = "Size4-Regular";
  } else if (delim === "\\}" || delim === "\\rbrace") {
    top = "\u23AB";
    middle = "\u23AC";
    bottom = "\u23AD";
    repeat = "\u23AA";
    font = "Size4-Regular";
  } else if (delim === "\\lgroup" || delim === "\u27EE") {
    top = "\u23A7";
    bottom = "\u23A9";
    repeat = "\u23AA";
    font = "Size4-Regular";
  } else if (delim === "\\rgroup" || delim === "\u27EF") {
    top = "\u23AB";
    bottom = "\u23AD";
    repeat = "\u23AA";
    font = "Size4-Regular";
  } else if (delim === "\\lmoustache" || delim === "\u23B0") {
    top = "\u23A7";
    bottom = "\u23AD";
    repeat = "\u23AA";
    font = "Size4-Regular";
  } else if (delim === "\\rmoustache" || delim === "\u23B1") {
    top = "\u23AB";
    bottom = "\u23A9";
    repeat = "\u23AA";
    font = "Size4-Regular";
  }
  var topMetrics = getMetrics(top, font, mode);
  var topHeightTotal = topMetrics.height + topMetrics.depth;
  var repeatMetrics = getMetrics(repeat, font, mode);
  var repeatHeightTotal = repeatMetrics.height + repeatMetrics.depth;
  var bottomMetrics = getMetrics(bottom, font, mode);
  var bottomHeightTotal = bottomMetrics.height + bottomMetrics.depth;
  var middleHeightTotal = 0;
  var middleFactor = 1;
  if (middle !== null) {
    var middleMetrics = getMetrics(middle, font, mode);
    middleHeightTotal = middleMetrics.height + middleMetrics.depth;
    middleFactor = 2;
  }
  var minHeight = topHeightTotal + bottomHeightTotal + middleHeightTotal;
  var repeatCount = Math.max(0, Math.ceil((heightTotal - minHeight) / (middleFactor * repeatHeightTotal)));
  var realHeightTotal = minHeight + repeatCount * middleFactor * repeatHeightTotal;
  var axisHeight = options.fontMetrics().axisHeight;
  if (center) {
    axisHeight *= options.sizeMultiplier;
  }
  var depth = realHeightTotal / 2 - axisHeight;
  var stack = [];
  if (svgLabel.length > 0) {
    var midHeight = realHeightTotal - topHeightTotal - bottomHeightTotal;
    var viewBoxHeight = Math.round(realHeightTotal * 1e3);
    var pathStr = tallDelim(svgLabel, Math.round(midHeight * 1e3));
    var path2 = new PathNode(svgLabel, pathStr);
    var width = (viewBoxWidth / 1e3).toFixed(3) + "em";
    var height = (viewBoxHeight / 1e3).toFixed(3) + "em";
    var svg = new SvgNode([path2], {
      "width": width,
      "height": height,
      "viewBox": "0 0 " + viewBoxWidth + " " + viewBoxHeight
    });
    var wrapper = buildCommon.makeSvgSpan([], [svg], options);
    wrapper.height = viewBoxHeight / 1e3;
    wrapper.style.width = width;
    wrapper.style.height = height;
    stack.push({
      type: "elem",
      elem: wrapper
    });
  } else {
    stack.push(makeGlyphSpan(bottom, font, mode));
    stack.push(lap);
    if (middle === null) {
      var innerHeight = realHeightTotal - topHeightTotal - bottomHeightTotal + 2 * lapInEms;
      stack.push(makeInner(repeat, innerHeight, options));
    } else {
      var _innerHeight = (realHeightTotal - topHeightTotal - bottomHeightTotal - middleHeightTotal) / 2 + 2 * lapInEms;
      stack.push(makeInner(repeat, _innerHeight, options));
      stack.push(lap);
      stack.push(makeGlyphSpan(middle, font, mode));
      stack.push(lap);
      stack.push(makeInner(repeat, _innerHeight, options));
    }
    stack.push(lap);
    stack.push(makeGlyphSpan(top, font, mode));
  }
  var newOptions = options.havingBaseStyle(Style$1.TEXT);
  var inner2 = buildCommon.makeVList({
    positionType: "bottom",
    positionData: depth,
    children: stack
  }, newOptions);
  return styleWrap(buildCommon.makeSpan(["delimsizing", "mult"], [inner2], newOptions), Style$1.TEXT, options, classes);
};
var vbPad = 80;
var emPad = 0.08;
var sqrtSvg = function sqrtSvg2(sqrtName, height, viewBoxHeight, extraVinculum, options) {
  var path2 = sqrtPath(sqrtName, extraVinculum, viewBoxHeight);
  var pathNode = new PathNode(sqrtName, path2);
  var svg = new SvgNode([pathNode], {
    // Note: 1000:1 ratio of viewBox to document em width.
    "width": "400em",
    "height": makeEm(height),
    "viewBox": "0 0 400000 " + viewBoxHeight,
    "preserveAspectRatio": "xMinYMin slice"
  });
  return buildCommon.makeSvgSpan(["hide-tail"], [svg], options);
};
var makeSqrtImage = function makeSqrtImage2(height, options) {
  var newOptions = options.havingBaseSizing();
  var delim = traverseSequence("\\surd", height * newOptions.sizeMultiplier, stackLargeDelimiterSequence, newOptions);
  var sizeMultiplier = newOptions.sizeMultiplier;
  var extraVinculum = Math.max(0, options.minRuleThickness - options.fontMetrics().sqrtRuleThickness);
  var span;
  var spanHeight = 0;
  var texHeight = 0;
  var viewBoxHeight = 0;
  var advanceWidth;
  if (delim.type === "small") {
    viewBoxHeight = 1e3 + 1e3 * extraVinculum + vbPad;
    if (height < 1) {
      sizeMultiplier = 1;
    } else if (height < 1.4) {
      sizeMultiplier = 0.7;
    }
    spanHeight = (1 + extraVinculum + emPad) / sizeMultiplier;
    texHeight = (1 + extraVinculum) / sizeMultiplier;
    span = sqrtSvg("sqrtMain", spanHeight, viewBoxHeight, extraVinculum, options);
    span.style.minWidth = "0.853em";
    advanceWidth = 0.833 / sizeMultiplier;
  } else if (delim.type === "large") {
    viewBoxHeight = (1e3 + vbPad) * sizeToMaxHeight[delim.size];
    texHeight = (sizeToMaxHeight[delim.size] + extraVinculum) / sizeMultiplier;
    spanHeight = (sizeToMaxHeight[delim.size] + extraVinculum + emPad) / sizeMultiplier;
    span = sqrtSvg("sqrtSize" + delim.size, spanHeight, viewBoxHeight, extraVinculum, options);
    span.style.minWidth = "1.02em";
    advanceWidth = 1 / sizeMultiplier;
  } else {
    spanHeight = height + extraVinculum + emPad;
    texHeight = height + extraVinculum;
    viewBoxHeight = Math.floor(1e3 * height + extraVinculum) + vbPad;
    span = sqrtSvg("sqrtTall", spanHeight, viewBoxHeight, extraVinculum, options);
    span.style.minWidth = "0.742em";
    advanceWidth = 1.056;
  }
  span.height = texHeight;
  span.style.height = makeEm(spanHeight);
  return {
    span,
    advanceWidth,
    // Calculate the actual line width.
    // This actually should depend on the chosen font -- e.g. \boldmath
    // should use the thicker surd symbols from e.g. KaTeX_Main-Bold, and
    // have thicker rules.
    ruleWidth: (options.fontMetrics().sqrtRuleThickness + extraVinculum) * sizeMultiplier
  };
};
var stackLargeDelimiters = ["(", "\\lparen", ")", "\\rparen", "[", "\\lbrack", "]", "\\rbrack", "\\{", "\\lbrace", "\\}", "\\rbrace", "\\lfloor", "\\rfloor", "\u230A", "\u230B", "\\lceil", "\\rceil", "\u2308", "\u2309", "\\surd"];
var stackAlwaysDelimiters = ["\\uparrow", "\\downarrow", "\\updownarrow", "\\Uparrow", "\\Downarrow", "\\Updownarrow", "|", "\\|", "\\vert", "\\Vert", "\\lvert", "\\rvert", "\\lVert", "\\rVert", "\\lgroup", "\\rgroup", "\u27EE", "\u27EF", "\\lmoustache", "\\rmoustache", "\u23B0", "\u23B1"];
var stackNeverDelimiters = ["<", ">", "\\langle", "\\rangle", "/", "\\backslash", "\\lt", "\\gt"];
var sizeToMaxHeight = [0, 1.2, 1.8, 2.4, 3];
var makeSizedDelim = function makeSizedDelim2(delim, size, options, mode, classes) {
  if (delim === "<" || delim === "\\lt" || delim === "\u27E8") {
    delim = "\\langle";
  } else if (delim === ">" || delim === "\\gt" || delim === "\u27E9") {
    delim = "\\rangle";
  }
  if (utils.contains(stackLargeDelimiters, delim) || utils.contains(stackNeverDelimiters, delim)) {
    return makeLargeDelim(delim, size, false, options, mode, classes);
  } else if (utils.contains(stackAlwaysDelimiters, delim)) {
    return makeStackedDelim(delim, sizeToMaxHeight[size], false, options, mode, classes);
  } else {
    throw new ParseError2("Illegal delimiter: '" + delim + "'");
  }
};
var stackNeverDelimiterSequence = [{
  type: "small",
  style: Style$1.SCRIPTSCRIPT
}, {
  type: "small",
  style: Style$1.SCRIPT
}, {
  type: "small",
  style: Style$1.TEXT
}, {
  type: "large",
  size: 1
}, {
  type: "large",
  size: 2
}, {
  type: "large",
  size: 3
}, {
  type: "large",
  size: 4
}];
var stackAlwaysDelimiterSequence = [{
  type: "small",
  style: Style$1.SCRIPTSCRIPT
}, {
  type: "small",
  style: Style$1.SCRIPT
}, {
  type: "small",
  style: Style$1.TEXT
}, {
  type: "stack"
}];
var stackLargeDelimiterSequence = [{
  type: "small",
  style: Style$1.SCRIPTSCRIPT
}, {
  type: "small",
  style: Style$1.SCRIPT
}, {
  type: "small",
  style: Style$1.TEXT
}, {
  type: "large",
  size: 1
}, {
  type: "large",
  size: 2
}, {
  type: "large",
  size: 3
}, {
  type: "large",
  size: 4
}, {
  type: "stack"
}];
var delimTypeToFont = function delimTypeToFont2(type) {
  if (type.type === "small") {
    return "Main-Regular";
  } else if (type.type === "large") {
    return "Size" + type.size + "-Regular";
  } else if (type.type === "stack") {
    return "Size4-Regular";
  } else {
    throw new Error("Add support for delim type '" + type.type + "' here.");
  }
};
var traverseSequence = function traverseSequence2(delim, height, sequence, options) {
  var start = Math.min(2, 3 - options.style.size);
  for (var i = start; i < sequence.length; i++) {
    if (sequence[i].type === "stack") {
      break;
    }
    var metrics = getMetrics(delim, delimTypeToFont(sequence[i]), "math");
    var heightDepth = metrics.height + metrics.depth;
    if (sequence[i].type === "small") {
      var newOptions = options.havingBaseStyle(sequence[i].style);
      heightDepth *= newOptions.sizeMultiplier;
    }
    if (heightDepth > height) {
      return sequence[i];
    }
  }
  return sequence[sequence.length - 1];
};
var makeCustomSizedDelim = function makeCustomSizedDelim2(delim, height, center, options, mode, classes) {
  if (delim === "<" || delim === "\\lt" || delim === "\u27E8") {
    delim = "\\langle";
  } else if (delim === ">" || delim === "\\gt" || delim === "\u27E9") {
    delim = "\\rangle";
  }
  var sequence;
  if (utils.contains(stackNeverDelimiters, delim)) {
    sequence = stackNeverDelimiterSequence;
  } else if (utils.contains(stackLargeDelimiters, delim)) {
    sequence = stackLargeDelimiterSequence;
  } else {
    sequence = stackAlwaysDelimiterSequence;
  }
  var delimType = traverseSequence(delim, height, sequence, options);
  if (delimType.type === "small") {
    return makeSmallDelim(delim, delimType.style, center, options, mode, classes);
  } else if (delimType.type === "large") {
    return makeLargeDelim(delim, delimType.size, center, options, mode, classes);
  } else {
    return makeStackedDelim(delim, height, center, options, mode, classes);
  }
};
var makeLeftRightDelim = function makeLeftRightDelim2(delim, height, depth, options, mode, classes) {
  var axisHeight = options.fontMetrics().axisHeight * options.sizeMultiplier;
  var delimiterFactor = 901;
  var delimiterExtend = 5 / options.fontMetrics().ptPerEm;
  var maxDistFromAxis = Math.max(height - axisHeight, depth + axisHeight);
  var totalHeight = Math.max(
    // In real TeX, calculations are done using integral values which are
    // 65536 per pt, or 655360 per em. So, the division here truncates in
    // TeX but doesn't here, producing different results. If we wanted to
    // exactly match TeX's calculation, we could do
    //   Math.floor(655360 * maxDistFromAxis / 500) *
    //    delimiterFactor / 655360
    // (To see the difference, compare
    //    x^{x^{\left(\rule{0.1em}{0.68em}\right)}}
    // in TeX and KaTeX)
    maxDistFromAxis / 500 * delimiterFactor,
    2 * maxDistFromAxis - delimiterExtend
  );
  return makeCustomSizedDelim(delim, totalHeight, true, options, mode, classes);
};
var delimiter = {
  sqrtImage: makeSqrtImage,
  sizedDelim: makeSizedDelim,
  sizeToMaxHeight,
  customSizedDelim: makeCustomSizedDelim,
  leftRightDelim: makeLeftRightDelim
};
var delimiterSizes = {
  "\\bigl": {
    mclass: "mopen",
    size: 1
  },
  "\\Bigl": {
    mclass: "mopen",
    size: 2
  },
  "\\biggl": {
    mclass: "mopen",
    size: 3
  },
  "\\Biggl": {
    mclass: "mopen",
    size: 4
  },
  "\\bigr": {
    mclass: "mclose",
    size: 1
  },
  "\\Bigr": {
    mclass: "mclose",
    size: 2
  },
  "\\biggr": {
    mclass: "mclose",
    size: 3
  },
  "\\Biggr": {
    mclass: "mclose",
    size: 4
  },
  "\\bigm": {
    mclass: "mrel",
    size: 1
  },
  "\\Bigm": {
    mclass: "mrel",
    size: 2
  },
  "\\biggm": {
    mclass: "mrel",
    size: 3
  },
  "\\Biggm": {
    mclass: "mrel",
    size: 4
  },
  "\\big": {
    mclass: "mord",
    size: 1
  },
  "\\Big": {
    mclass: "mord",
    size: 2
  },
  "\\bigg": {
    mclass: "mord",
    size: 3
  },
  "\\Bigg": {
    mclass: "mord",
    size: 4
  }
};
var delimiters = ["(", "\\lparen", ")", "\\rparen", "[", "\\lbrack", "]", "\\rbrack", "\\{", "\\lbrace", "\\}", "\\rbrace", "\\lfloor", "\\rfloor", "\u230A", "\u230B", "\\lceil", "\\rceil", "\u2308", "\u2309", "<", ">", "\\langle", "\u27E8", "\\rangle", "\u27E9", "\\lt", "\\gt", "\\lvert", "\\rvert", "\\lVert", "\\rVert", "\\lgroup", "\\rgroup", "\u27EE", "\u27EF", "\\lmoustache", "\\rmoustache", "\u23B0", "\u23B1", "/", "\\backslash", "|", "\\vert", "\\|", "\\Vert", "\\uparrow", "\\Uparrow", "\\downarrow", "\\Downarrow", "\\updownarrow", "\\Updownarrow", "."];
function checkDelimiter(delim, context) {
  var symDelim = checkSymbolNodeType(delim);
  if (symDelim && utils.contains(delimiters, symDelim.text)) {
    return symDelim;
  } else if (symDelim) {
    throw new ParseError2("Invalid delimiter '" + symDelim.text + "' after '" + context.funcName + "'", delim);
  } else {
    throw new ParseError2("Invalid delimiter type '" + delim.type + "'", delim);
  }
}
defineFunction({
  type: "delimsizing",
  names: ["\\bigl", "\\Bigl", "\\biggl", "\\Biggl", "\\bigr", "\\Bigr", "\\biggr", "\\Biggr", "\\bigm", "\\Bigm", "\\biggm", "\\Biggm", "\\big", "\\Big", "\\bigg", "\\Bigg"],
  props: {
    numArgs: 1,
    argTypes: ["primitive"]
  },
  handler: (context, args) => {
    var delim = checkDelimiter(args[0], context);
    return {
      type: "delimsizing",
      mode: context.parser.mode,
      size: delimiterSizes[context.funcName].size,
      mclass: delimiterSizes[context.funcName].mclass,
      delim: delim.text
    };
  },
  htmlBuilder: (group, options) => {
    if (group.delim === ".") {
      return buildCommon.makeSpan([group.mclass]);
    }
    return delimiter.sizedDelim(group.delim, group.size, options, group.mode, [group.mclass]);
  },
  mathmlBuilder: (group) => {
    var children = [];
    if (group.delim !== ".") {
      children.push(makeText(group.delim, group.mode));
    }
    var node = new mathMLTree.MathNode("mo", children);
    if (group.mclass === "mopen" || group.mclass === "mclose") {
      node.setAttribute("fence", "true");
    } else {
      node.setAttribute("fence", "false");
    }
    node.setAttribute("stretchy", "true");
    var size = makeEm(delimiter.sizeToMaxHeight[group.size]);
    node.setAttribute("minsize", size);
    node.setAttribute("maxsize", size);
    return node;
  }
});
function assertParsed(group) {
  if (!group.body) {
    throw new Error("Bug: The leftright ParseNode wasn't fully parsed.");
  }
}
defineFunction({
  type: "leftright-right",
  names: ["\\right"],
  props: {
    numArgs: 1,
    primitive: true
  },
  handler: (context, args) => {
    var color = context.parser.gullet.macros.get("\\current@color");
    if (color && typeof color !== "string") {
      throw new ParseError2("\\current@color set to non-string in \\right");
    }
    return {
      type: "leftright-right",
      mode: context.parser.mode,
      delim: checkDelimiter(args[0], context).text,
      color
      // undefined if not set via \color
    };
  }
});
defineFunction({
  type: "leftright",
  names: ["\\left"],
  props: {
    numArgs: 1,
    primitive: true
  },
  handler: (context, args) => {
    var delim = checkDelimiter(args[0], context);
    var parser = context.parser;
    ++parser.leftrightDepth;
    var body = parser.parseExpression(false);
    --parser.leftrightDepth;
    parser.expect("\\right", false);
    var right = assertNodeType(parser.parseFunction(), "leftright-right");
    return {
      type: "leftright",
      mode: parser.mode,
      body,
      left: delim.text,
      right: right.delim,
      rightColor: right.color
    };
  },
  htmlBuilder: (group, options) => {
    assertParsed(group);
    var inner2 = buildExpression$1(group.body, options, true, ["mopen", "mclose"]);
    var innerHeight = 0;
    var innerDepth = 0;
    var hadMiddle = false;
    for (var i = 0; i < inner2.length; i++) {
      if (inner2[i].isMiddle) {
        hadMiddle = true;
      } else {
        innerHeight = Math.max(inner2[i].height, innerHeight);
        innerDepth = Math.max(inner2[i].depth, innerDepth);
      }
    }
    innerHeight *= options.sizeMultiplier;
    innerDepth *= options.sizeMultiplier;
    var leftDelim;
    if (group.left === ".") {
      leftDelim = makeNullDelimiter(options, ["mopen"]);
    } else {
      leftDelim = delimiter.leftRightDelim(group.left, innerHeight, innerDepth, options, group.mode, ["mopen"]);
    }
    inner2.unshift(leftDelim);
    if (hadMiddle) {
      for (var _i = 1; _i < inner2.length; _i++) {
        var middleDelim = inner2[_i];
        var isMiddle = middleDelim.isMiddle;
        if (isMiddle) {
          inner2[_i] = delimiter.leftRightDelim(isMiddle.delim, innerHeight, innerDepth, isMiddle.options, group.mode, []);
        }
      }
    }
    var rightDelim;
    if (group.right === ".") {
      rightDelim = makeNullDelimiter(options, ["mclose"]);
    } else {
      var colorOptions = group.rightColor ? options.withColor(group.rightColor) : options;
      rightDelim = delimiter.leftRightDelim(group.right, innerHeight, innerDepth, colorOptions, group.mode, ["mclose"]);
    }
    inner2.push(rightDelim);
    return buildCommon.makeSpan(["minner"], inner2, options);
  },
  mathmlBuilder: (group, options) => {
    assertParsed(group);
    var inner2 = buildExpression2(group.body, options);
    if (group.left !== ".") {
      var leftNode = new mathMLTree.MathNode("mo", [makeText(group.left, group.mode)]);
      leftNode.setAttribute("fence", "true");
      inner2.unshift(leftNode);
    }
    if (group.right !== ".") {
      var rightNode = new mathMLTree.MathNode("mo", [makeText(group.right, group.mode)]);
      rightNode.setAttribute("fence", "true");
      if (group.rightColor) {
        rightNode.setAttribute("mathcolor", group.rightColor);
      }
      inner2.push(rightNode);
    }
    return makeRow(inner2);
  }
});
defineFunction({
  type: "middle",
  names: ["\\middle"],
  props: {
    numArgs: 1,
    primitive: true
  },
  handler: (context, args) => {
    var delim = checkDelimiter(args[0], context);
    if (!context.parser.leftrightDepth) {
      throw new ParseError2("\\middle without preceding \\left", delim);
    }
    return {
      type: "middle",
      mode: context.parser.mode,
      delim: delim.text
    };
  },
  htmlBuilder: (group, options) => {
    var middleDelim;
    if (group.delim === ".") {
      middleDelim = makeNullDelimiter(options, []);
    } else {
      middleDelim = delimiter.sizedDelim(group.delim, 1, options, group.mode, []);
      var isMiddle = {
        delim: group.delim,
        options
      };
      middleDelim.isMiddle = isMiddle;
    }
    return middleDelim;
  },
  mathmlBuilder: (group, options) => {
    var textNode = group.delim === "\\vert" || group.delim === "|" ? makeText("|", "text") : makeText(group.delim, group.mode);
    var middleNode = new mathMLTree.MathNode("mo", [textNode]);
    middleNode.setAttribute("fence", "true");
    middleNode.setAttribute("lspace", "0.05em");
    middleNode.setAttribute("rspace", "0.05em");
    return middleNode;
  }
});
var htmlBuilder$7 = (group, options) => {
  var inner2 = buildCommon.wrapFragment(buildGroup$1(group.body, options), options);
  var label = group.label.slice(1);
  var scale = options.sizeMultiplier;
  var img;
  var imgShift = 0;
  var isSingleChar = utils.isCharacterBox(group.body);
  if (label === "sout") {
    img = buildCommon.makeSpan(["stretchy", "sout"]);
    img.height = options.fontMetrics().defaultRuleThickness / scale;
    imgShift = -0.5 * options.fontMetrics().xHeight;
  } else if (label === "phase") {
    var lineWeight = calculateSize({
      number: 0.6,
      unit: "pt"
    }, options);
    var clearance = calculateSize({
      number: 0.35,
      unit: "ex"
    }, options);
    var newOptions = options.havingBaseSizing();
    scale = scale / newOptions.sizeMultiplier;
    var angleHeight = inner2.height + inner2.depth + lineWeight + clearance;
    inner2.style.paddingLeft = makeEm(angleHeight / 2 + lineWeight);
    var viewBoxHeight = Math.floor(1e3 * angleHeight * scale);
    var path2 = phasePath(viewBoxHeight);
    var svgNode = new SvgNode([new PathNode("phase", path2)], {
      "width": "400em",
      "height": makeEm(viewBoxHeight / 1e3),
      "viewBox": "0 0 400000 " + viewBoxHeight,
      "preserveAspectRatio": "xMinYMin slice"
    });
    img = buildCommon.makeSvgSpan(["hide-tail"], [svgNode], options);
    img.style.height = makeEm(angleHeight);
    imgShift = inner2.depth + lineWeight + clearance;
  } else {
    if (/cancel/.test(label)) {
      if (!isSingleChar) {
        inner2.classes.push("cancel-pad");
      }
    } else if (label === "angl") {
      inner2.classes.push("anglpad");
    } else {
      inner2.classes.push("boxpad");
    }
    var topPad = 0;
    var bottomPad = 0;
    var ruleThickness = 0;
    if (/box/.test(label)) {
      ruleThickness = Math.max(
        options.fontMetrics().fboxrule,
        // default
        options.minRuleThickness
        // User override.
      );
      topPad = options.fontMetrics().fboxsep + (label === "colorbox" ? 0 : ruleThickness);
      bottomPad = topPad;
    } else if (label === "angl") {
      ruleThickness = Math.max(options.fontMetrics().defaultRuleThickness, options.minRuleThickness);
      topPad = 4 * ruleThickness;
      bottomPad = Math.max(0, 0.25 - inner2.depth);
    } else {
      topPad = isSingleChar ? 0.2 : 0;
      bottomPad = topPad;
    }
    img = stretchy.encloseSpan(inner2, label, topPad, bottomPad, options);
    if (/fbox|boxed|fcolorbox/.test(label)) {
      img.style.borderStyle = "solid";
      img.style.borderWidth = makeEm(ruleThickness);
    } else if (label === "angl" && ruleThickness !== 0.049) {
      img.style.borderTopWidth = makeEm(ruleThickness);
      img.style.borderRightWidth = makeEm(ruleThickness);
    }
    imgShift = inner2.depth + bottomPad;
    if (group.backgroundColor) {
      img.style.backgroundColor = group.backgroundColor;
      if (group.borderColor) {
        img.style.borderColor = group.borderColor;
      }
    }
  }
  var vlist;
  if (group.backgroundColor) {
    vlist = buildCommon.makeVList({
      positionType: "individualShift",
      children: [
        // Put the color background behind inner;
        {
          type: "elem",
          elem: img,
          shift: imgShift
        },
        {
          type: "elem",
          elem: inner2,
          shift: 0
        }
      ]
    }, options);
  } else {
    var classes = /cancel|phase/.test(label) ? ["svg-align"] : [];
    vlist = buildCommon.makeVList({
      positionType: "individualShift",
      children: [
        // Write the \cancel stroke on top of inner.
        {
          type: "elem",
          elem: inner2,
          shift: 0
        },
        {
          type: "elem",
          elem: img,
          shift: imgShift,
          wrapperClasses: classes
        }
      ]
    }, options);
  }
  if (/cancel/.test(label)) {
    vlist.height = inner2.height;
    vlist.depth = inner2.depth;
  }
  if (/cancel/.test(label) && !isSingleChar) {
    return buildCommon.makeSpan(["mord", "cancel-lap"], [vlist], options);
  } else {
    return buildCommon.makeSpan(["mord"], [vlist], options);
  }
};
var mathmlBuilder$6 = (group, options) => {
  var fboxsep = 0;
  var node = new mathMLTree.MathNode(group.label.indexOf("colorbox") > -1 ? "mpadded" : "menclose", [buildGroup2(group.body, options)]);
  switch (group.label) {
    case "\\cancel":
      node.setAttribute("notation", "updiagonalstrike");
      break;
    case "\\bcancel":
      node.setAttribute("notation", "downdiagonalstrike");
      break;
    case "\\phase":
      node.setAttribute("notation", "phasorangle");
      break;
    case "\\sout":
      node.setAttribute("notation", "horizontalstrike");
      break;
    case "\\fbox":
      node.setAttribute("notation", "box");
      break;
    case "\\angl":
      node.setAttribute("notation", "actuarial");
      break;
    case "\\fcolorbox":
    case "\\colorbox":
      fboxsep = options.fontMetrics().fboxsep * options.fontMetrics().ptPerEm;
      node.setAttribute("width", "+" + 2 * fboxsep + "pt");
      node.setAttribute("height", "+" + 2 * fboxsep + "pt");
      node.setAttribute("lspace", fboxsep + "pt");
      node.setAttribute("voffset", fboxsep + "pt");
      if (group.label === "\\fcolorbox") {
        var thk = Math.max(
          options.fontMetrics().fboxrule,
          // default
          options.minRuleThickness
          // user override
        );
        node.setAttribute("style", "border: " + thk + "em solid " + String(group.borderColor));
      }
      break;
    case "\\xcancel":
      node.setAttribute("notation", "updiagonalstrike downdiagonalstrike");
      break;
  }
  if (group.backgroundColor) {
    node.setAttribute("mathbackground", group.backgroundColor);
  }
  return node;
};
defineFunction({
  type: "enclose",
  names: ["\\colorbox"],
  props: {
    numArgs: 2,
    allowedInText: true,
    argTypes: ["color", "text"]
  },
  handler(_ref, args, optArgs) {
    var {
      parser,
      funcName
    } = _ref;
    var color = assertNodeType(args[0], "color-token").color;
    var body = args[1];
    return {
      type: "enclose",
      mode: parser.mode,
      label: funcName,
      backgroundColor: color,
      body
    };
  },
  htmlBuilder: htmlBuilder$7,
  mathmlBuilder: mathmlBuilder$6
});
defineFunction({
  type: "enclose",
  names: ["\\fcolorbox"],
  props: {
    numArgs: 3,
    allowedInText: true,
    argTypes: ["color", "color", "text"]
  },
  handler(_ref2, args, optArgs) {
    var {
      parser,
      funcName
    } = _ref2;
    var borderColor = assertNodeType(args[0], "color-token").color;
    var backgroundColor = assertNodeType(args[1], "color-token").color;
    var body = args[2];
    return {
      type: "enclose",
      mode: parser.mode,
      label: funcName,
      backgroundColor,
      borderColor,
      body
    };
  },
  htmlBuilder: htmlBuilder$7,
  mathmlBuilder: mathmlBuilder$6
});
defineFunction({
  type: "enclose",
  names: ["\\fbox"],
  props: {
    numArgs: 1,
    argTypes: ["hbox"],
    allowedInText: true
  },
  handler(_ref3, args) {
    var {
      parser
    } = _ref3;
    return {
      type: "enclose",
      mode: parser.mode,
      label: "\\fbox",
      body: args[0]
    };
  }
});
defineFunction({
  type: "enclose",
  names: ["\\cancel", "\\bcancel", "\\xcancel", "\\sout", "\\phase"],
  props: {
    numArgs: 1
  },
  handler(_ref4, args) {
    var {
      parser,
      funcName
    } = _ref4;
    var body = args[0];
    return {
      type: "enclose",
      mode: parser.mode,
      label: funcName,
      body
    };
  },
  htmlBuilder: htmlBuilder$7,
  mathmlBuilder: mathmlBuilder$6
});
defineFunction({
  type: "enclose",
  names: ["\\angl"],
  props: {
    numArgs: 1,
    argTypes: ["hbox"],
    allowedInText: false
  },
  handler(_ref5, args) {
    var {
      parser
    } = _ref5;
    return {
      type: "enclose",
      mode: parser.mode,
      label: "\\angl",
      body: args[0]
    };
  }
});
var _environments = {};
function defineEnvironment(_ref) {
  var {
    type,
    names,
    props,
    handler,
    htmlBuilder: htmlBuilder3,
    mathmlBuilder: mathmlBuilder3
  } = _ref;
  var data = {
    type,
    numArgs: props.numArgs || 0,
    allowedInText: false,
    numOptionalArgs: 0,
    handler
  };
  for (var i = 0; i < names.length; ++i) {
    _environments[names[i]] = data;
  }
  if (htmlBuilder3) {
    _htmlGroupBuilders[type] = htmlBuilder3;
  }
  if (mathmlBuilder3) {
    _mathmlGroupBuilders[type] = mathmlBuilder3;
  }
}
var _macros = {};
function defineMacro(name, body) {
  _macros[name] = body;
}
function getHLines(parser) {
  var hlineInfo = [];
  parser.consumeSpaces();
  var nxt = parser.fetch().text;
  if (nxt === "\\relax") {
    parser.consume();
    parser.consumeSpaces();
    nxt = parser.fetch().text;
  }
  while (nxt === "\\hline" || nxt === "\\hdashline") {
    parser.consume();
    hlineInfo.push(nxt === "\\hdashline");
    parser.consumeSpaces();
    nxt = parser.fetch().text;
  }
  return hlineInfo;
}
var validateAmsEnvironmentContext = (context) => {
  var settings = context.parser.settings;
  if (!settings.displayMode) {
    throw new ParseError2("{" + context.envName + "} can be used only in display mode.");
  }
};
function getAutoTag(name) {
  if (name.indexOf("ed") === -1) {
    return name.indexOf("*") === -1;
  }
}
function parseArray(parser, _ref, style) {
  var {
    hskipBeforeAndAfter,
    addJot,
    cols,
    arraystretch,
    colSeparationType,
    autoTag,
    singleRow,
    emptySingleRow,
    maxNumCols,
    leqno
  } = _ref;
  parser.gullet.beginGroup();
  if (!singleRow) {
    parser.gullet.macros.set("\\cr", "\\\\\\relax");
  }
  if (!arraystretch) {
    var stretch = parser.gullet.expandMacroAsText("\\arraystretch");
    if (stretch == null) {
      arraystretch = 1;
    } else {
      arraystretch = parseFloat(stretch);
      if (!arraystretch || arraystretch < 0) {
        throw new ParseError2("Invalid \\arraystretch: " + stretch);
      }
    }
  }
  parser.gullet.beginGroup();
  var row = [];
  var body = [row];
  var rowGaps = [];
  var hLinesBeforeRow = [];
  var tags = autoTag != null ? [] : void 0;
  function beginRow() {
    if (autoTag) {
      parser.gullet.macros.set("\\@eqnsw", "1", true);
    }
  }
  function endRow() {
    if (tags) {
      if (parser.gullet.macros.get("\\df@tag")) {
        tags.push(parser.subparse([new Token2("\\df@tag")]));
        parser.gullet.macros.set("\\df@tag", void 0, true);
      } else {
        tags.push(Boolean(autoTag) && parser.gullet.macros.get("\\@eqnsw") === "1");
      }
    }
  }
  beginRow();
  hLinesBeforeRow.push(getHLines(parser));
  while (true) {
    var cell = parser.parseExpression(false, singleRow ? "\\end" : "\\\\");
    parser.gullet.endGroup();
    parser.gullet.beginGroup();
    cell = {
      type: "ordgroup",
      mode: parser.mode,
      body: cell
    };
    if (style) {
      cell = {
        type: "styling",
        mode: parser.mode,
        style,
        body: [cell]
      };
    }
    row.push(cell);
    var next = parser.fetch().text;
    if (next === "&") {
      if (maxNumCols && row.length === maxNumCols) {
        if (singleRow || colSeparationType) {
          throw new ParseError2("Too many tab characters: &", parser.nextToken);
        } else {
          parser.settings.reportNonstrict("textEnv", "Too few columns specified in the {array} column argument.");
        }
      }
      parser.consume();
    } else if (next === "\\end") {
      endRow();
      if (row.length === 1 && cell.type === "styling" && cell.body[0].body.length === 0 && (body.length > 1 || !emptySingleRow)) {
        body.pop();
      }
      if (hLinesBeforeRow.length < body.length + 1) {
        hLinesBeforeRow.push([]);
      }
      break;
    } else if (next === "\\\\") {
      parser.consume();
      var size = void 0;
      if (parser.gullet.future().text !== " ") {
        size = parser.parseSizeGroup(true);
      }
      rowGaps.push(size ? size.value : null);
      endRow();
      hLinesBeforeRow.push(getHLines(parser));
      row = [];
      body.push(row);
      beginRow();
    } else {
      throw new ParseError2("Expected & or \\\\ or \\cr or \\end", parser.nextToken);
    }
  }
  parser.gullet.endGroup();
  parser.gullet.endGroup();
  return {
    type: "array",
    mode: parser.mode,
    addJot,
    arraystretch,
    body,
    cols,
    rowGaps,
    hskipBeforeAndAfter,
    hLinesBeforeRow,
    colSeparationType,
    tags,
    leqno
  };
}
function dCellStyle(envName) {
  if (envName.slice(0, 1) === "d") {
    return "display";
  } else {
    return "text";
  }
}
var htmlBuilder$6 = function htmlBuilder(group, options) {
  var r;
  var c;
  var nr = group.body.length;
  var hLinesBeforeRow = group.hLinesBeforeRow;
  var nc = 0;
  var body = new Array(nr);
  var hlines = [];
  var ruleThickness = Math.max(
    // From LaTeX \showthe\arrayrulewidth. Equals 0.04 em.
    options.fontMetrics().arrayRuleWidth,
    options.minRuleThickness
    // User override.
  );
  var pt = 1 / options.fontMetrics().ptPerEm;
  var arraycolsep = 5 * pt;
  if (group.colSeparationType && group.colSeparationType === "small") {
    var localMultiplier = options.havingStyle(Style$1.SCRIPT).sizeMultiplier;
    arraycolsep = 0.2778 * (localMultiplier / options.sizeMultiplier);
  }
  var baselineskip = group.colSeparationType === "CD" ? calculateSize({
    number: 3,
    unit: "ex"
  }, options) : 12 * pt;
  var jot = 3 * pt;
  var arrayskip = group.arraystretch * baselineskip;
  var arstrutHeight = 0.7 * arrayskip;
  var arstrutDepth = 0.3 * arrayskip;
  var totalHeight = 0;
  function setHLinePos(hlinesInGap) {
    for (var i = 0; i < hlinesInGap.length; ++i) {
      if (i > 0) {
        totalHeight += 0.25;
      }
      hlines.push({
        pos: totalHeight,
        isDashed: hlinesInGap[i]
      });
    }
  }
  setHLinePos(hLinesBeforeRow[0]);
  for (r = 0; r < group.body.length; ++r) {
    var inrow = group.body[r];
    var height = arstrutHeight;
    var depth = arstrutDepth;
    if (nc < inrow.length) {
      nc = inrow.length;
    }
    var outrow = new Array(inrow.length);
    for (c = 0; c < inrow.length; ++c) {
      var elt = buildGroup$1(inrow[c], options);
      if (depth < elt.depth) {
        depth = elt.depth;
      }
      if (height < elt.height) {
        height = elt.height;
      }
      outrow[c] = elt;
    }
    var rowGap = group.rowGaps[r];
    var gap = 0;
    if (rowGap) {
      gap = calculateSize(rowGap, options);
      if (gap > 0) {
        gap += arstrutDepth;
        if (depth < gap) {
          depth = gap;
        }
        gap = 0;
      }
    }
    if (group.addJot) {
      depth += jot;
    }
    outrow.height = height;
    outrow.depth = depth;
    totalHeight += height;
    outrow.pos = totalHeight;
    totalHeight += depth + gap;
    body[r] = outrow;
    setHLinePos(hLinesBeforeRow[r + 1]);
  }
  var offset = totalHeight / 2 + options.fontMetrics().axisHeight;
  var colDescriptions = group.cols || [];
  var cols = [];
  var colSep;
  var colDescrNum;
  var tagSpans = [];
  if (group.tags && group.tags.some((tag2) => tag2)) {
    for (r = 0; r < nr; ++r) {
      var rw = body[r];
      var shift = rw.pos - offset;
      var tag = group.tags[r];
      var tagSpan = void 0;
      if (tag === true) {
        tagSpan = buildCommon.makeSpan(["eqn-num"], [], options);
      } else if (tag === false) {
        tagSpan = buildCommon.makeSpan([], [], options);
      } else {
        tagSpan = buildCommon.makeSpan([], buildExpression$1(tag, options, true), options);
      }
      tagSpan.depth = rw.depth;
      tagSpan.height = rw.height;
      tagSpans.push({
        type: "elem",
        elem: tagSpan,
        shift
      });
    }
  }
  for (
    c = 0, colDescrNum = 0;
    // Continue while either there are more columns or more column
    // descriptions, so trailing separators don't get lost.
    c < nc || colDescrNum < colDescriptions.length;
    ++c, ++colDescrNum
  ) {
    var colDescr = colDescriptions[colDescrNum] || {};
    var firstSeparator = true;
    while (colDescr.type === "separator") {
      if (!firstSeparator) {
        colSep = buildCommon.makeSpan(["arraycolsep"], []);
        colSep.style.width = makeEm(options.fontMetrics().doubleRuleSep);
        cols.push(colSep);
      }
      if (colDescr.separator === "|" || colDescr.separator === ":") {
        var lineType = colDescr.separator === "|" ? "solid" : "dashed";
        var separator = buildCommon.makeSpan(["vertical-separator"], [], options);
        separator.style.height = makeEm(totalHeight);
        separator.style.borderRightWidth = makeEm(ruleThickness);
        separator.style.borderRightStyle = lineType;
        separator.style.margin = "0 " + makeEm(-ruleThickness / 2);
        var _shift = totalHeight - offset;
        if (_shift) {
          separator.style.verticalAlign = makeEm(-_shift);
        }
        cols.push(separator);
      } else {
        throw new ParseError2("Invalid separator type: " + colDescr.separator);
      }
      colDescrNum++;
      colDescr = colDescriptions[colDescrNum] || {};
      firstSeparator = false;
    }
    if (c >= nc) {
      continue;
    }
    var sepwidth = void 0;
    if (c > 0 || group.hskipBeforeAndAfter) {
      sepwidth = utils.deflt(colDescr.pregap, arraycolsep);
      if (sepwidth !== 0) {
        colSep = buildCommon.makeSpan(["arraycolsep"], []);
        colSep.style.width = makeEm(sepwidth);
        cols.push(colSep);
      }
    }
    var col = [];
    for (r = 0; r < nr; ++r) {
      var row = body[r];
      var elem = row[c];
      if (!elem) {
        continue;
      }
      var _shift2 = row.pos - offset;
      elem.depth = row.depth;
      elem.height = row.height;
      col.push({
        type: "elem",
        elem,
        shift: _shift2
      });
    }
    col = buildCommon.makeVList({
      positionType: "individualShift",
      children: col
    }, options);
    col = buildCommon.makeSpan(["col-align-" + (colDescr.align || "c")], [col]);
    cols.push(col);
    if (c < nc - 1 || group.hskipBeforeAndAfter) {
      sepwidth = utils.deflt(colDescr.postgap, arraycolsep);
      if (sepwidth !== 0) {
        colSep = buildCommon.makeSpan(["arraycolsep"], []);
        colSep.style.width = makeEm(sepwidth);
        cols.push(colSep);
      }
    }
  }
  body = buildCommon.makeSpan(["mtable"], cols);
  if (hlines.length > 0) {
    var line = buildCommon.makeLineSpan("hline", options, ruleThickness);
    var dashes = buildCommon.makeLineSpan("hdashline", options, ruleThickness);
    var vListElems = [{
      type: "elem",
      elem: body,
      shift: 0
    }];
    while (hlines.length > 0) {
      var hline = hlines.pop();
      var lineShift = hline.pos - offset;
      if (hline.isDashed) {
        vListElems.push({
          type: "elem",
          elem: dashes,
          shift: lineShift
        });
      } else {
        vListElems.push({
          type: "elem",
          elem: line,
          shift: lineShift
        });
      }
    }
    body = buildCommon.makeVList({
      positionType: "individualShift",
      children: vListElems
    }, options);
  }
  if (tagSpans.length === 0) {
    return buildCommon.makeSpan(["mord"], [body], options);
  } else {
    var eqnNumCol = buildCommon.makeVList({
      positionType: "individualShift",
      children: tagSpans
    }, options);
    eqnNumCol = buildCommon.makeSpan(["tag"], [eqnNumCol], options);
    return buildCommon.makeFragment([body, eqnNumCol]);
  }
};
var alignMap = {
  c: "center ",
  l: "left ",
  r: "right "
};
var mathmlBuilder$5 = function mathmlBuilder(group, options) {
  var tbl = [];
  var glue = new mathMLTree.MathNode("mtd", [], ["mtr-glue"]);
  var tag = new mathMLTree.MathNode("mtd", [], ["mml-eqn-num"]);
  for (var i = 0; i < group.body.length; i++) {
    var rw = group.body[i];
    var row = [];
    for (var j = 0; j < rw.length; j++) {
      row.push(new mathMLTree.MathNode("mtd", [buildGroup2(rw[j], options)]));
    }
    if (group.tags && group.tags[i]) {
      row.unshift(glue);
      row.push(glue);
      if (group.leqno) {
        row.unshift(tag);
      } else {
        row.push(tag);
      }
    }
    tbl.push(new mathMLTree.MathNode("mtr", row));
  }
  var table = new mathMLTree.MathNode("mtable", tbl);
  var gap = group.arraystretch === 0.5 ? 0.1 : 0.16 + group.arraystretch - 1 + (group.addJot ? 0.09 : 0);
  table.setAttribute("rowspacing", makeEm(gap));
  var menclose = "";
  var align = "";
  if (group.cols && group.cols.length > 0) {
    var cols = group.cols;
    var columnLines = "";
    var prevTypeWasAlign = false;
    var iStart = 0;
    var iEnd = cols.length;
    if (cols[0].type === "separator") {
      menclose += "top ";
      iStart = 1;
    }
    if (cols[cols.length - 1].type === "separator") {
      menclose += "bottom ";
      iEnd -= 1;
    }
    for (var _i = iStart; _i < iEnd; _i++) {
      if (cols[_i].type === "align") {
        align += alignMap[cols[_i].align];
        if (prevTypeWasAlign) {
          columnLines += "none ";
        }
        prevTypeWasAlign = true;
      } else if (cols[_i].type === "separator") {
        if (prevTypeWasAlign) {
          columnLines += cols[_i].separator === "|" ? "solid " : "dashed ";
          prevTypeWasAlign = false;
        }
      }
    }
    table.setAttribute("columnalign", align.trim());
    if (/[sd]/.test(columnLines)) {
      table.setAttribute("columnlines", columnLines.trim());
    }
  }
  if (group.colSeparationType === "align") {
    var _cols = group.cols || [];
    var spacing2 = "";
    for (var _i2 = 1; _i2 < _cols.length; _i2++) {
      spacing2 += _i2 % 2 ? "0em " : "1em ";
    }
    table.setAttribute("columnspacing", spacing2.trim());
  } else if (group.colSeparationType === "alignat" || group.colSeparationType === "gather") {
    table.setAttribute("columnspacing", "0em");
  } else if (group.colSeparationType === "small") {
    table.setAttribute("columnspacing", "0.2778em");
  } else if (group.colSeparationType === "CD") {
    table.setAttribute("columnspacing", "0.5em");
  } else {
    table.setAttribute("columnspacing", "1em");
  }
  var rowLines = "";
  var hlines = group.hLinesBeforeRow;
  menclose += hlines[0].length > 0 ? "left " : "";
  menclose += hlines[hlines.length - 1].length > 0 ? "right " : "";
  for (var _i3 = 1; _i3 < hlines.length - 1; _i3++) {
    rowLines += hlines[_i3].length === 0 ? "none " : hlines[_i3][0] ? "dashed " : "solid ";
  }
  if (/[sd]/.test(rowLines)) {
    table.setAttribute("rowlines", rowLines.trim());
  }
  if (menclose !== "") {
    table = new mathMLTree.MathNode("menclose", [table]);
    table.setAttribute("notation", menclose.trim());
  }
  if (group.arraystretch && group.arraystretch < 1) {
    table = new mathMLTree.MathNode("mstyle", [table]);
    table.setAttribute("scriptlevel", "1");
  }
  return table;
};
var alignedHandler = function alignedHandler2(context, args) {
  if (context.envName.indexOf("ed") === -1) {
    validateAmsEnvironmentContext(context);
  }
  var cols = [];
  var separationType = context.envName.indexOf("at") > -1 ? "alignat" : "align";
  var isSplit = context.envName === "split";
  var res = parseArray(context.parser, {
    cols,
    addJot: true,
    autoTag: isSplit ? void 0 : getAutoTag(context.envName),
    emptySingleRow: true,
    colSeparationType: separationType,
    maxNumCols: isSplit ? 2 : void 0,
    leqno: context.parser.settings.leqno
  }, "display");
  var numMaths;
  var numCols = 0;
  var emptyGroup = {
    type: "ordgroup",
    mode: context.mode,
    body: []
  };
  if (args[0] && args[0].type === "ordgroup") {
    var arg0 = "";
    for (var i = 0; i < args[0].body.length; i++) {
      var textord2 = assertNodeType(args[0].body[i], "textord");
      arg0 += textord2.text;
    }
    numMaths = Number(arg0);
    numCols = numMaths * 2;
  }
  var isAligned = !numCols;
  res.body.forEach(function(row) {
    for (var _i4 = 1; _i4 < row.length; _i4 += 2) {
      var styling = assertNodeType(row[_i4], "styling");
      var ordgroup = assertNodeType(styling.body[0], "ordgroup");
      ordgroup.body.unshift(emptyGroup);
    }
    if (!isAligned) {
      var curMaths = row.length / 2;
      if (numMaths < curMaths) {
        throw new ParseError2("Too many math in a row: " + ("expected " + numMaths + ", but got " + curMaths), row[0]);
      }
    } else if (numCols < row.length) {
      numCols = row.length;
    }
  });
  for (var _i5 = 0; _i5 < numCols; ++_i5) {
    var align = "r";
    var pregap = 0;
    if (_i5 % 2 === 1) {
      align = "l";
    } else if (_i5 > 0 && isAligned) {
      pregap = 1;
    }
    cols[_i5] = {
      type: "align",
      align,
      pregap,
      postgap: 0
    };
  }
  res.colSeparationType = isAligned ? "align" : "alignat";
  return res;
};
defineEnvironment({
  type: "array",
  names: ["array", "darray"],
  props: {
    numArgs: 1
  },
  handler(context, args) {
    var symNode = checkSymbolNodeType(args[0]);
    var colalign = symNode ? [args[0]] : assertNodeType(args[0], "ordgroup").body;
    var cols = colalign.map(function(nde) {
      var node = assertSymbolNodeType(nde);
      var ca = node.text;
      if ("lcr".indexOf(ca) !== -1) {
        return {
          type: "align",
          align: ca
        };
      } else if (ca === "|") {
        return {
          type: "separator",
          separator: "|"
        };
      } else if (ca === ":") {
        return {
          type: "separator",
          separator: ":"
        };
      }
      throw new ParseError2("Unknown column alignment: " + ca, nde);
    });
    var res = {
      cols,
      hskipBeforeAndAfter: true,
      // \@preamble in lttab.dtx
      maxNumCols: cols.length
    };
    return parseArray(context.parser, res, dCellStyle(context.envName));
  },
  htmlBuilder: htmlBuilder$6,
  mathmlBuilder: mathmlBuilder$5
});
defineEnvironment({
  type: "array",
  names: ["matrix", "pmatrix", "bmatrix", "Bmatrix", "vmatrix", "Vmatrix", "matrix*", "pmatrix*", "bmatrix*", "Bmatrix*", "vmatrix*", "Vmatrix*"],
  props: {
    numArgs: 0
  },
  handler(context) {
    var delimiters2 = {
      "matrix": null,
      "pmatrix": ["(", ")"],
      "bmatrix": ["[", "]"],
      "Bmatrix": ["\\{", "\\}"],
      "vmatrix": ["|", "|"],
      "Vmatrix": ["\\Vert", "\\Vert"]
    }[context.envName.replace("*", "")];
    var colAlign = "c";
    var payload = {
      hskipBeforeAndAfter: false,
      cols: [{
        type: "align",
        align: colAlign
      }]
    };
    if (context.envName.charAt(context.envName.length - 1) === "*") {
      var parser = context.parser;
      parser.consumeSpaces();
      if (parser.fetch().text === "[") {
        parser.consume();
        parser.consumeSpaces();
        colAlign = parser.fetch().text;
        if ("lcr".indexOf(colAlign) === -1) {
          throw new ParseError2("Expected l or c or r", parser.nextToken);
        }
        parser.consume();
        parser.consumeSpaces();
        parser.expect("]");
        parser.consume();
        payload.cols = [{
          type: "align",
          align: colAlign
        }];
      }
    }
    var res = parseArray(context.parser, payload, dCellStyle(context.envName));
    var numCols = Math.max(0, ...res.body.map((row) => row.length));
    res.cols = new Array(numCols).fill({
      type: "align",
      align: colAlign
    });
    return delimiters2 ? {
      type: "leftright",
      mode: context.mode,
      body: [res],
      left: delimiters2[0],
      right: delimiters2[1],
      rightColor: void 0
      // \right uninfluenced by \color in array
    } : res;
  },
  htmlBuilder: htmlBuilder$6,
  mathmlBuilder: mathmlBuilder$5
});
defineEnvironment({
  type: "array",
  names: ["smallmatrix"],
  props: {
    numArgs: 0
  },
  handler(context) {
    var payload = {
      arraystretch: 0.5
    };
    var res = parseArray(context.parser, payload, "script");
    res.colSeparationType = "small";
    return res;
  },
  htmlBuilder: htmlBuilder$6,
  mathmlBuilder: mathmlBuilder$5
});
defineEnvironment({
  type: "array",
  names: ["subarray"],
  props: {
    numArgs: 1
  },
  handler(context, args) {
    var symNode = checkSymbolNodeType(args[0]);
    var colalign = symNode ? [args[0]] : assertNodeType(args[0], "ordgroup").body;
    var cols = colalign.map(function(nde) {
      var node = assertSymbolNodeType(nde);
      var ca = node.text;
      if ("lc".indexOf(ca) !== -1) {
        return {
          type: "align",
          align: ca
        };
      }
      throw new ParseError2("Unknown column alignment: " + ca, nde);
    });
    if (cols.length > 1) {
      throw new ParseError2("{subarray} can contain only one column");
    }
    var res = {
      cols,
      hskipBeforeAndAfter: false,
      arraystretch: 0.5
    };
    res = parseArray(context.parser, res, "script");
    if (res.body.length > 0 && res.body[0].length > 1) {
      throw new ParseError2("{subarray} can contain only one column");
    }
    return res;
  },
  htmlBuilder: htmlBuilder$6,
  mathmlBuilder: mathmlBuilder$5
});
defineEnvironment({
  type: "array",
  names: ["cases", "dcases", "rcases", "drcases"],
  props: {
    numArgs: 0
  },
  handler(context) {
    var payload = {
      arraystretch: 1.2,
      cols: [{
        type: "align",
        align: "l",
        pregap: 0,
        // TODO(kevinb) get the current style.
        // For now we use the metrics for TEXT style which is what we were
        // doing before.  Before attempting to get the current style we
        // should look at TeX's behavior especially for \over and matrices.
        postgap: 1
        /* 1em quad */
      }, {
        type: "align",
        align: "l",
        pregap: 0,
        postgap: 0
      }]
    };
    var res = parseArray(context.parser, payload, dCellStyle(context.envName));
    return {
      type: "leftright",
      mode: context.mode,
      body: [res],
      left: context.envName.indexOf("r") > -1 ? "." : "\\{",
      right: context.envName.indexOf("r") > -1 ? "\\}" : ".",
      rightColor: void 0
    };
  },
  htmlBuilder: htmlBuilder$6,
  mathmlBuilder: mathmlBuilder$5
});
defineEnvironment({
  type: "array",
  names: ["align", "align*", "aligned", "split"],
  props: {
    numArgs: 0
  },
  handler: alignedHandler,
  htmlBuilder: htmlBuilder$6,
  mathmlBuilder: mathmlBuilder$5
});
defineEnvironment({
  type: "array",
  names: ["gathered", "gather", "gather*"],
  props: {
    numArgs: 0
  },
  handler(context) {
    if (utils.contains(["gather", "gather*"], context.envName)) {
      validateAmsEnvironmentContext(context);
    }
    var res = {
      cols: [{
        type: "align",
        align: "c"
      }],
      addJot: true,
      colSeparationType: "gather",
      autoTag: getAutoTag(context.envName),
      emptySingleRow: true,
      leqno: context.parser.settings.leqno
    };
    return parseArray(context.parser, res, "display");
  },
  htmlBuilder: htmlBuilder$6,
  mathmlBuilder: mathmlBuilder$5
});
defineEnvironment({
  type: "array",
  names: ["alignat", "alignat*", "alignedat"],
  props: {
    numArgs: 1
  },
  handler: alignedHandler,
  htmlBuilder: htmlBuilder$6,
  mathmlBuilder: mathmlBuilder$5
});
defineEnvironment({
  type: "array",
  names: ["equation", "equation*"],
  props: {
    numArgs: 0
  },
  handler(context) {
    validateAmsEnvironmentContext(context);
    var res = {
      autoTag: getAutoTag(context.envName),
      emptySingleRow: true,
      singleRow: true,
      maxNumCols: 1,
      leqno: context.parser.settings.leqno
    };
    return parseArray(context.parser, res, "display");
  },
  htmlBuilder: htmlBuilder$6,
  mathmlBuilder: mathmlBuilder$5
});
defineEnvironment({
  type: "array",
  names: ["CD"],
  props: {
    numArgs: 0
  },
  handler(context) {
    validateAmsEnvironmentContext(context);
    return parseCD(context.parser);
  },
  htmlBuilder: htmlBuilder$6,
  mathmlBuilder: mathmlBuilder$5
});
defineMacro("\\nonumber", "\\gdef\\@eqnsw{0}");
defineMacro("\\notag", "\\nonumber");
defineFunction({
  type: "text",
  // Doesn't matter what this is.
  names: ["\\hline", "\\hdashline"],
  props: {
    numArgs: 0,
    allowedInText: true,
    allowedInMath: true
  },
  handler(context, args) {
    throw new ParseError2(context.funcName + " valid only within array environment");
  }
});
var environments = _environments;
defineFunction({
  type: "environment",
  names: ["\\begin", "\\end"],
  props: {
    numArgs: 1,
    argTypes: ["text"]
  },
  handler(_ref, args) {
    var {
      parser,
      funcName
    } = _ref;
    var nameGroup = args[0];
    if (nameGroup.type !== "ordgroup") {
      throw new ParseError2("Invalid environment name", nameGroup);
    }
    var envName = "";
    for (var i = 0; i < nameGroup.body.length; ++i) {
      envName += assertNodeType(nameGroup.body[i], "textord").text;
    }
    if (funcName === "\\begin") {
      if (!environments.hasOwnProperty(envName)) {
        throw new ParseError2("No such environment: " + envName, nameGroup);
      }
      var env = environments[envName];
      var {
        args: _args,
        optArgs
      } = parser.parseArguments("\\begin{" + envName + "}", env);
      var context = {
        mode: parser.mode,
        envName,
        parser
      };
      var result = env.handler(context, _args, optArgs);
      parser.expect("\\end", false);
      var endNameToken = parser.nextToken;
      var end = assertNodeType(parser.parseFunction(), "environment");
      if (end.name !== envName) {
        throw new ParseError2("Mismatch: \\begin{" + envName + "} matched by \\end{" + end.name + "}", endNameToken);
      }
      return result;
    }
    return {
      type: "environment",
      mode: parser.mode,
      name: envName,
      nameGroup
    };
  }
});
var htmlBuilder$5 = (group, options) => {
  var font = group.font;
  var newOptions = options.withFont(font);
  return buildGroup$1(group.body, newOptions);
};
var mathmlBuilder$4 = (group, options) => {
  var font = group.font;
  var newOptions = options.withFont(font);
  return buildGroup2(group.body, newOptions);
};
var fontAliases = {
  "\\Bbb": "\\mathbb",
  "\\bold": "\\mathbf",
  "\\frak": "\\mathfrak",
  "\\bm": "\\boldsymbol"
};
defineFunction({
  type: "font",
  names: [
    // styles, except \boldsymbol defined below
    "\\mathrm",
    "\\mathit",
    "\\mathbf",
    "\\mathnormal",
    "\\mathsfit",
    // families
    "\\mathbb",
    "\\mathcal",
    "\\mathfrak",
    "\\mathscr",
    "\\mathsf",
    "\\mathtt",
    // aliases, except \bm defined below
    "\\Bbb",
    "\\bold",
    "\\frak"
  ],
  props: {
    numArgs: 1,
    allowedInArgument: true
  },
  handler: (_ref, args) => {
    var {
      parser,
      funcName
    } = _ref;
    var body = normalizeArgument(args[0]);
    var func = funcName;
    if (func in fontAliases) {
      func = fontAliases[func];
    }
    return {
      type: "font",
      mode: parser.mode,
      font: func.slice(1),
      body
    };
  },
  htmlBuilder: htmlBuilder$5,
  mathmlBuilder: mathmlBuilder$4
});
defineFunction({
  type: "mclass",
  names: ["\\boldsymbol", "\\bm"],
  props: {
    numArgs: 1
  },
  handler: (_ref2, args) => {
    var {
      parser
    } = _ref2;
    var body = args[0];
    var isCharacterBox3 = utils.isCharacterBox(body);
    return {
      type: "mclass",
      mode: parser.mode,
      mclass: binrelClass(body),
      body: [{
        type: "font",
        mode: parser.mode,
        font: "boldsymbol",
        body
      }],
      isCharacterBox: isCharacterBox3
    };
  }
});
defineFunction({
  type: "font",
  names: ["\\rm", "\\sf", "\\tt", "\\bf", "\\it", "\\cal"],
  props: {
    numArgs: 0,
    allowedInText: true
  },
  handler: (_ref3, args) => {
    var {
      parser,
      funcName,
      breakOnTokenText
    } = _ref3;
    var {
      mode
    } = parser;
    var body = parser.parseExpression(true, breakOnTokenText);
    var style = "math" + funcName.slice(1);
    return {
      type: "font",
      mode,
      font: style,
      body: {
        type: "ordgroup",
        mode: parser.mode,
        body
      }
    };
  },
  htmlBuilder: htmlBuilder$5,
  mathmlBuilder: mathmlBuilder$4
});
var adjustStyle = (size, originalStyle) => {
  var style = originalStyle;
  if (size === "display") {
    style = style.id >= Style$1.SCRIPT.id ? style.text() : Style$1.DISPLAY;
  } else if (size === "text" && style.size === Style$1.DISPLAY.size) {
    style = Style$1.TEXT;
  } else if (size === "script") {
    style = Style$1.SCRIPT;
  } else if (size === "scriptscript") {
    style = Style$1.SCRIPTSCRIPT;
  }
  return style;
};
var htmlBuilder$4 = (group, options) => {
  var style = adjustStyle(group.size, options.style);
  var nstyle = style.fracNum();
  var dstyle = style.fracDen();
  var newOptions;
  newOptions = options.havingStyle(nstyle);
  var numerm = buildGroup$1(group.numer, newOptions, options);
  if (group.continued) {
    var hStrut = 8.5 / options.fontMetrics().ptPerEm;
    var dStrut = 3.5 / options.fontMetrics().ptPerEm;
    numerm.height = numerm.height < hStrut ? hStrut : numerm.height;
    numerm.depth = numerm.depth < dStrut ? dStrut : numerm.depth;
  }
  newOptions = options.havingStyle(dstyle);
  var denomm = buildGroup$1(group.denom, newOptions, options);
  var rule;
  var ruleWidth;
  var ruleSpacing;
  if (group.hasBarLine) {
    if (group.barSize) {
      ruleWidth = calculateSize(group.barSize, options);
      rule = buildCommon.makeLineSpan("frac-line", options, ruleWidth);
    } else {
      rule = buildCommon.makeLineSpan("frac-line", options);
    }
    ruleWidth = rule.height;
    ruleSpacing = rule.height;
  } else {
    rule = null;
    ruleWidth = 0;
    ruleSpacing = options.fontMetrics().defaultRuleThickness;
  }
  var numShift;
  var clearance;
  var denomShift;
  if (style.size === Style$1.DISPLAY.size || group.size === "display") {
    numShift = options.fontMetrics().num1;
    if (ruleWidth > 0) {
      clearance = 3 * ruleSpacing;
    } else {
      clearance = 7 * ruleSpacing;
    }
    denomShift = options.fontMetrics().denom1;
  } else {
    if (ruleWidth > 0) {
      numShift = options.fontMetrics().num2;
      clearance = ruleSpacing;
    } else {
      numShift = options.fontMetrics().num3;
      clearance = 3 * ruleSpacing;
    }
    denomShift = options.fontMetrics().denom2;
  }
  var frac;
  if (!rule) {
    var candidateClearance = numShift - numerm.depth - (denomm.height - denomShift);
    if (candidateClearance < clearance) {
      numShift += 0.5 * (clearance - candidateClearance);
      denomShift += 0.5 * (clearance - candidateClearance);
    }
    frac = buildCommon.makeVList({
      positionType: "individualShift",
      children: [{
        type: "elem",
        elem: denomm,
        shift: denomShift
      }, {
        type: "elem",
        elem: numerm,
        shift: -numShift
      }]
    }, options);
  } else {
    var axisHeight = options.fontMetrics().axisHeight;
    if (numShift - numerm.depth - (axisHeight + 0.5 * ruleWidth) < clearance) {
      numShift += clearance - (numShift - numerm.depth - (axisHeight + 0.5 * ruleWidth));
    }
    if (axisHeight - 0.5 * ruleWidth - (denomm.height - denomShift) < clearance) {
      denomShift += clearance - (axisHeight - 0.5 * ruleWidth - (denomm.height - denomShift));
    }
    var midShift = -(axisHeight - 0.5 * ruleWidth);
    frac = buildCommon.makeVList({
      positionType: "individualShift",
      children: [{
        type: "elem",
        elem: denomm,
        shift: denomShift
      }, {
        type: "elem",
        elem: rule,
        shift: midShift
      }, {
        type: "elem",
        elem: numerm,
        shift: -numShift
      }]
    }, options);
  }
  newOptions = options.havingStyle(style);
  frac.height *= newOptions.sizeMultiplier / options.sizeMultiplier;
  frac.depth *= newOptions.sizeMultiplier / options.sizeMultiplier;
  var delimSize;
  if (style.size === Style$1.DISPLAY.size) {
    delimSize = options.fontMetrics().delim1;
  } else if (style.size === Style$1.SCRIPTSCRIPT.size) {
    delimSize = options.havingStyle(Style$1.SCRIPT).fontMetrics().delim2;
  } else {
    delimSize = options.fontMetrics().delim2;
  }
  var leftDelim;
  var rightDelim;
  if (group.leftDelim == null) {
    leftDelim = makeNullDelimiter(options, ["mopen"]);
  } else {
    leftDelim = delimiter.customSizedDelim(group.leftDelim, delimSize, true, options.havingStyle(style), group.mode, ["mopen"]);
  }
  if (group.continued) {
    rightDelim = buildCommon.makeSpan([]);
  } else if (group.rightDelim == null) {
    rightDelim = makeNullDelimiter(options, ["mclose"]);
  } else {
    rightDelim = delimiter.customSizedDelim(group.rightDelim, delimSize, true, options.havingStyle(style), group.mode, ["mclose"]);
  }
  return buildCommon.makeSpan(["mord"].concat(newOptions.sizingClasses(options)), [leftDelim, buildCommon.makeSpan(["mfrac"], [frac]), rightDelim], options);
};
var mathmlBuilder$3 = (group, options) => {
  var node = new mathMLTree.MathNode("mfrac", [buildGroup2(group.numer, options), buildGroup2(group.denom, options)]);
  if (!group.hasBarLine) {
    node.setAttribute("linethickness", "0px");
  } else if (group.barSize) {
    var ruleWidth = calculateSize(group.barSize, options);
    node.setAttribute("linethickness", makeEm(ruleWidth));
  }
  var style = adjustStyle(group.size, options.style);
  if (style.size !== options.style.size) {
    node = new mathMLTree.MathNode("mstyle", [node]);
    var isDisplay = style.size === Style$1.DISPLAY.size ? "true" : "false";
    node.setAttribute("displaystyle", isDisplay);
    node.setAttribute("scriptlevel", "0");
  }
  if (group.leftDelim != null || group.rightDelim != null) {
    var withDelims = [];
    if (group.leftDelim != null) {
      var leftOp = new mathMLTree.MathNode("mo", [new mathMLTree.TextNode(group.leftDelim.replace("\\", ""))]);
      leftOp.setAttribute("fence", "true");
      withDelims.push(leftOp);
    }
    withDelims.push(node);
    if (group.rightDelim != null) {
      var rightOp = new mathMLTree.MathNode("mo", [new mathMLTree.TextNode(group.rightDelim.replace("\\", ""))]);
      rightOp.setAttribute("fence", "true");
      withDelims.push(rightOp);
    }
    return makeRow(withDelims);
  }
  return node;
};
defineFunction({
  type: "genfrac",
  names: [
    "\\dfrac",
    "\\frac",
    "\\tfrac",
    "\\dbinom",
    "\\binom",
    "\\tbinom",
    "\\\\atopfrac",
    // can’t be entered directly
    "\\\\bracefrac",
    "\\\\brackfrac"
    // ditto
  ],
  props: {
    numArgs: 2,
    allowedInArgument: true
  },
  handler: (_ref, args) => {
    var {
      parser,
      funcName
    } = _ref;
    var numer = args[0];
    var denom = args[1];
    var hasBarLine;
    var leftDelim = null;
    var rightDelim = null;
    var size = "auto";
    switch (funcName) {
      case "\\dfrac":
      case "\\frac":
      case "\\tfrac":
        hasBarLine = true;
        break;
      case "\\\\atopfrac":
        hasBarLine = false;
        break;
      case "\\dbinom":
      case "\\binom":
      case "\\tbinom":
        hasBarLine = false;
        leftDelim = "(";
        rightDelim = ")";
        break;
      case "\\\\bracefrac":
        hasBarLine = false;
        leftDelim = "\\{";
        rightDelim = "\\}";
        break;
      case "\\\\brackfrac":
        hasBarLine = false;
        leftDelim = "[";
        rightDelim = "]";
        break;
      default:
        throw new Error("Unrecognized genfrac command");
    }
    switch (funcName) {
      case "\\dfrac":
      case "\\dbinom":
        size = "display";
        break;
      case "\\tfrac":
      case "\\tbinom":
        size = "text";
        break;
    }
    return {
      type: "genfrac",
      mode: parser.mode,
      continued: false,
      numer,
      denom,
      hasBarLine,
      leftDelim,
      rightDelim,
      size,
      barSize: null
    };
  },
  htmlBuilder: htmlBuilder$4,
  mathmlBuilder: mathmlBuilder$3
});
defineFunction({
  type: "genfrac",
  names: ["\\cfrac"],
  props: {
    numArgs: 2
  },
  handler: (_ref2, args) => {
    var {
      parser,
      funcName
    } = _ref2;
    var numer = args[0];
    var denom = args[1];
    return {
      type: "genfrac",
      mode: parser.mode,
      continued: true,
      numer,
      denom,
      hasBarLine: true,
      leftDelim: null,
      rightDelim: null,
      size: "display",
      barSize: null
    };
  }
});
defineFunction({
  type: "infix",
  names: ["\\over", "\\choose", "\\atop", "\\brace", "\\brack"],
  props: {
    numArgs: 0,
    infix: true
  },
  handler(_ref3) {
    var {
      parser,
      funcName,
      token
    } = _ref3;
    var replaceWith;
    switch (funcName) {
      case "\\over":
        replaceWith = "\\frac";
        break;
      case "\\choose":
        replaceWith = "\\binom";
        break;
      case "\\atop":
        replaceWith = "\\\\atopfrac";
        break;
      case "\\brace":
        replaceWith = "\\\\bracefrac";
        break;
      case "\\brack":
        replaceWith = "\\\\brackfrac";
        break;
      default:
        throw new Error("Unrecognized infix genfrac command");
    }
    return {
      type: "infix",
      mode: parser.mode,
      replaceWith,
      token
    };
  }
});
var stylArray = ["display", "text", "script", "scriptscript"];
var delimFromValue = function delimFromValue2(delimString) {
  var delim = null;
  if (delimString.length > 0) {
    delim = delimString;
    delim = delim === "." ? null : delim;
  }
  return delim;
};
defineFunction({
  type: "genfrac",
  names: ["\\genfrac"],
  props: {
    numArgs: 6,
    allowedInArgument: true,
    argTypes: ["math", "math", "size", "text", "math", "math"]
  },
  handler(_ref4, args) {
    var {
      parser
    } = _ref4;
    var numer = args[4];
    var denom = args[5];
    var leftNode = normalizeArgument(args[0]);
    var leftDelim = leftNode.type === "atom" && leftNode.family === "open" ? delimFromValue(leftNode.text) : null;
    var rightNode = normalizeArgument(args[1]);
    var rightDelim = rightNode.type === "atom" && rightNode.family === "close" ? delimFromValue(rightNode.text) : null;
    var barNode = assertNodeType(args[2], "size");
    var hasBarLine;
    var barSize = null;
    if (barNode.isBlank) {
      hasBarLine = true;
    } else {
      barSize = barNode.value;
      hasBarLine = barSize.number > 0;
    }
    var size = "auto";
    var styl = args[3];
    if (styl.type === "ordgroup") {
      if (styl.body.length > 0) {
        var textOrd = assertNodeType(styl.body[0], "textord");
        size = stylArray[Number(textOrd.text)];
      }
    } else {
      styl = assertNodeType(styl, "textord");
      size = stylArray[Number(styl.text)];
    }
    return {
      type: "genfrac",
      mode: parser.mode,
      numer,
      denom,
      continued: false,
      hasBarLine,
      barSize,
      leftDelim,
      rightDelim,
      size
    };
  },
  htmlBuilder: htmlBuilder$4,
  mathmlBuilder: mathmlBuilder$3
});
defineFunction({
  type: "infix",
  names: ["\\above"],
  props: {
    numArgs: 1,
    argTypes: ["size"],
    infix: true
  },
  handler(_ref5, args) {
    var {
      parser,
      funcName,
      token
    } = _ref5;
    return {
      type: "infix",
      mode: parser.mode,
      replaceWith: "\\\\abovefrac",
      size: assertNodeType(args[0], "size").value,
      token
    };
  }
});
defineFunction({
  type: "genfrac",
  names: ["\\\\abovefrac"],
  props: {
    numArgs: 3,
    argTypes: ["math", "size", "math"]
  },
  handler: (_ref6, args) => {
    var {
      parser,
      funcName
    } = _ref6;
    var numer = args[0];
    var barSize = assert(assertNodeType(args[1], "infix").size);
    var denom = args[2];
    var hasBarLine = barSize.number > 0;
    return {
      type: "genfrac",
      mode: parser.mode,
      numer,
      denom,
      continued: false,
      hasBarLine,
      barSize,
      leftDelim: null,
      rightDelim: null,
      size: "auto"
    };
  },
  htmlBuilder: htmlBuilder$4,
  mathmlBuilder: mathmlBuilder$3
});
var htmlBuilder$3 = (grp, options) => {
  var style = options.style;
  var supSubGroup;
  var group;
  if (grp.type === "supsub") {
    supSubGroup = grp.sup ? buildGroup$1(grp.sup, options.havingStyle(style.sup()), options) : buildGroup$1(grp.sub, options.havingStyle(style.sub()), options);
    group = assertNodeType(grp.base, "horizBrace");
  } else {
    group = assertNodeType(grp, "horizBrace");
  }
  var body = buildGroup$1(group.base, options.havingBaseStyle(Style$1.DISPLAY));
  var braceBody = stretchy.svgSpan(group, options);
  var vlist;
  if (group.isOver) {
    vlist = buildCommon.makeVList({
      positionType: "firstBaseline",
      children: [{
        type: "elem",
        elem: body
      }, {
        type: "kern",
        size: 0.1
      }, {
        type: "elem",
        elem: braceBody
      }]
    }, options);
    vlist.children[0].children[0].children[1].classes.push("svg-align");
  } else {
    vlist = buildCommon.makeVList({
      positionType: "bottom",
      positionData: body.depth + 0.1 + braceBody.height,
      children: [{
        type: "elem",
        elem: braceBody
      }, {
        type: "kern",
        size: 0.1
      }, {
        type: "elem",
        elem: body
      }]
    }, options);
    vlist.children[0].children[0].children[0].classes.push("svg-align");
  }
  if (supSubGroup) {
    var vSpan = buildCommon.makeSpan(["mord", group.isOver ? "mover" : "munder"], [vlist], options);
    if (group.isOver) {
      vlist = buildCommon.makeVList({
        positionType: "firstBaseline",
        children: [{
          type: "elem",
          elem: vSpan
        }, {
          type: "kern",
          size: 0.2
        }, {
          type: "elem",
          elem: supSubGroup
        }]
      }, options);
    } else {
      vlist = buildCommon.makeVList({
        positionType: "bottom",
        positionData: vSpan.depth + 0.2 + supSubGroup.height + supSubGroup.depth,
        children: [{
          type: "elem",
          elem: supSubGroup
        }, {
          type: "kern",
          size: 0.2
        }, {
          type: "elem",
          elem: vSpan
        }]
      }, options);
    }
  }
  return buildCommon.makeSpan(["mord", group.isOver ? "mover" : "munder"], [vlist], options);
};
var mathmlBuilder$2 = (group, options) => {
  var accentNode = stretchy.mathMLnode(group.label);
  return new mathMLTree.MathNode(group.isOver ? "mover" : "munder", [buildGroup2(group.base, options), accentNode]);
};
defineFunction({
  type: "horizBrace",
  names: ["\\overbrace", "\\underbrace"],
  props: {
    numArgs: 1
  },
  handler(_ref, args) {
    var {
      parser,
      funcName
    } = _ref;
    return {
      type: "horizBrace",
      mode: parser.mode,
      label: funcName,
      isOver: /^\\over/.test(funcName),
      base: args[0]
    };
  },
  htmlBuilder: htmlBuilder$3,
  mathmlBuilder: mathmlBuilder$2
});
defineFunction({
  type: "href",
  names: ["\\href"],
  props: {
    numArgs: 2,
    argTypes: ["url", "original"],
    allowedInText: true
  },
  handler: (_ref, args) => {
    var {
      parser
    } = _ref;
    var body = args[1];
    var href = assertNodeType(args[0], "url").url;
    if (!parser.settings.isTrusted({
      command: "\\href",
      url: href
    })) {
      return parser.formatUnsupportedCmd("\\href");
    }
    return {
      type: "href",
      mode: parser.mode,
      href,
      body: ordargument(body)
    };
  },
  htmlBuilder: (group, options) => {
    var elements = buildExpression$1(group.body, options, false);
    return buildCommon.makeAnchor(group.href, [], elements, options);
  },
  mathmlBuilder: (group, options) => {
    var math2 = buildExpressionRow(group.body, options);
    if (!(math2 instanceof MathNode)) {
      math2 = new MathNode("mrow", [math2]);
    }
    math2.setAttribute("href", group.href);
    return math2;
  }
});
defineFunction({
  type: "href",
  names: ["\\url"],
  props: {
    numArgs: 1,
    argTypes: ["url"],
    allowedInText: true
  },
  handler: (_ref2, args) => {
    var {
      parser
    } = _ref2;
    var href = assertNodeType(args[0], "url").url;
    if (!parser.settings.isTrusted({
      command: "\\url",
      url: href
    })) {
      return parser.formatUnsupportedCmd("\\url");
    }
    var chars = [];
    for (var i = 0; i < href.length; i++) {
      var c = href[i];
      if (c === "~") {
        c = "\\textasciitilde";
      }
      chars.push({
        type: "textord",
        mode: "text",
        text: c
      });
    }
    var body = {
      type: "text",
      mode: parser.mode,
      font: "\\texttt",
      body: chars
    };
    return {
      type: "href",
      mode: parser.mode,
      href,
      body: ordargument(body)
    };
  }
});
defineFunction({
  type: "hbox",
  names: ["\\hbox"],
  props: {
    numArgs: 1,
    argTypes: ["text"],
    allowedInText: true,
    primitive: true
  },
  handler(_ref, args) {
    var {
      parser
    } = _ref;
    return {
      type: "hbox",
      mode: parser.mode,
      body: ordargument(args[0])
    };
  },
  htmlBuilder(group, options) {
    var elements = buildExpression$1(group.body, options, false);
    return buildCommon.makeFragment(elements);
  },
  mathmlBuilder(group, options) {
    return new mathMLTree.MathNode("mrow", buildExpression2(group.body, options));
  }
});
defineFunction({
  type: "html",
  names: ["\\htmlClass", "\\htmlId", "\\htmlStyle", "\\htmlData"],
  props: {
    numArgs: 2,
    argTypes: ["raw", "original"],
    allowedInText: true
  },
  handler: (_ref, args) => {
    var {
      parser,
      funcName,
      token
    } = _ref;
    var value = assertNodeType(args[0], "raw").string;
    var body = args[1];
    if (parser.settings.strict) {
      parser.settings.reportNonstrict("htmlExtension", "HTML extension is disabled on strict mode");
    }
    var trustContext;
    var attributes = {};
    switch (funcName) {
      case "\\htmlClass":
        attributes.class = value;
        trustContext = {
          command: "\\htmlClass",
          class: value
        };
        break;
      case "\\htmlId":
        attributes.id = value;
        trustContext = {
          command: "\\htmlId",
          id: value
        };
        break;
      case "\\htmlStyle":
        attributes.style = value;
        trustContext = {
          command: "\\htmlStyle",
          style: value
        };
        break;
      case "\\htmlData": {
        var data = value.split(",");
        for (var i = 0; i < data.length; i++) {
          var keyVal = data[i].split("=");
          if (keyVal.length !== 2) {
            throw new ParseError2("Error parsing key-value for \\htmlData");
          }
          attributes["data-" + keyVal[0].trim()] = keyVal[1].trim();
        }
        trustContext = {
          command: "\\htmlData",
          attributes
        };
        break;
      }
      default:
        throw new Error("Unrecognized html command");
    }
    if (!parser.settings.isTrusted(trustContext)) {
      return parser.formatUnsupportedCmd(funcName);
    }
    return {
      type: "html",
      mode: parser.mode,
      attributes,
      body: ordargument(body)
    };
  },
  htmlBuilder: (group, options) => {
    var elements = buildExpression$1(group.body, options, false);
    var classes = ["enclosing"];
    if (group.attributes.class) {
      classes.push(...group.attributes.class.trim().split(/\s+/));
    }
    var span = buildCommon.makeSpan(classes, elements, options);
    for (var attr in group.attributes) {
      if (attr !== "class" && group.attributes.hasOwnProperty(attr)) {
        span.setAttribute(attr, group.attributes[attr]);
      }
    }
    return span;
  },
  mathmlBuilder: (group, options) => {
    return buildExpressionRow(group.body, options);
  }
});
defineFunction({
  type: "htmlmathml",
  names: ["\\html@mathml"],
  props: {
    numArgs: 2,
    allowedInText: true
  },
  handler: (_ref, args) => {
    var {
      parser
    } = _ref;
    return {
      type: "htmlmathml",
      mode: parser.mode,
      html: ordargument(args[0]),
      mathml: ordargument(args[1])
    };
  },
  htmlBuilder: (group, options) => {
    var elements = buildExpression$1(group.html, options, false);
    return buildCommon.makeFragment(elements);
  },
  mathmlBuilder: (group, options) => {
    return buildExpressionRow(group.mathml, options);
  }
});
var sizeData = function sizeData2(str) {
  if (/^[-+]? *(\d+(\.\d*)?|\.\d+)$/.test(str)) {
    return {
      number: +str,
      unit: "bp"
    };
  } else {
    var match2 = /([-+]?) *(\d+(?:\.\d*)?|\.\d+) *([a-z]{2})/.exec(str);
    if (!match2) {
      throw new ParseError2("Invalid size: '" + str + "' in \\includegraphics");
    }
    var data = {
      number: +(match2[1] + match2[2]),
      // sign + magnitude, cast to number
      unit: match2[3]
    };
    if (!validUnit(data)) {
      throw new ParseError2("Invalid unit: '" + data.unit + "' in \\includegraphics.");
    }
    return data;
  }
};
defineFunction({
  type: "includegraphics",
  names: ["\\includegraphics"],
  props: {
    numArgs: 1,
    numOptionalArgs: 1,
    argTypes: ["raw", "url"],
    allowedInText: false
  },
  handler: (_ref, args, optArgs) => {
    var {
      parser
    } = _ref;
    var width = {
      number: 0,
      unit: "em"
    };
    var height = {
      number: 0.9,
      unit: "em"
    };
    var totalheight = {
      number: 0,
      unit: "em"
    };
    var alt = "";
    if (optArgs[0]) {
      var attributeStr = assertNodeType(optArgs[0], "raw").string;
      var attributes = attributeStr.split(",");
      for (var i = 0; i < attributes.length; i++) {
        var keyVal = attributes[i].split("=");
        if (keyVal.length === 2) {
          var str = keyVal[1].trim();
          switch (keyVal[0].trim()) {
            case "alt":
              alt = str;
              break;
            case "width":
              width = sizeData(str);
              break;
            case "height":
              height = sizeData(str);
              break;
            case "totalheight":
              totalheight = sizeData(str);
              break;
            default:
              throw new ParseError2("Invalid key: '" + keyVal[0] + "' in \\includegraphics.");
          }
        }
      }
    }
    var src = assertNodeType(args[0], "url").url;
    if (alt === "") {
      alt = src;
      alt = alt.replace(/^.*[\\/]/, "");
      alt = alt.substring(0, alt.lastIndexOf("."));
    }
    if (!parser.settings.isTrusted({
      command: "\\includegraphics",
      url: src
    })) {
      return parser.formatUnsupportedCmd("\\includegraphics");
    }
    return {
      type: "includegraphics",
      mode: parser.mode,
      alt,
      width,
      height,
      totalheight,
      src
    };
  },
  htmlBuilder: (group, options) => {
    var height = calculateSize(group.height, options);
    var depth = 0;
    if (group.totalheight.number > 0) {
      depth = calculateSize(group.totalheight, options) - height;
    }
    var width = 0;
    if (group.width.number > 0) {
      width = calculateSize(group.width, options);
    }
    var style = {
      height: makeEm(height + depth)
    };
    if (width > 0) {
      style.width = makeEm(width);
    }
    if (depth > 0) {
      style.verticalAlign = makeEm(-depth);
    }
    var node = new Img(group.src, group.alt, style);
    node.height = height;
    node.depth = depth;
    return node;
  },
  mathmlBuilder: (group, options) => {
    var node = new mathMLTree.MathNode("mglyph", []);
    node.setAttribute("alt", group.alt);
    var height = calculateSize(group.height, options);
    var depth = 0;
    if (group.totalheight.number > 0) {
      depth = calculateSize(group.totalheight, options) - height;
      node.setAttribute("valign", makeEm(-depth));
    }
    node.setAttribute("height", makeEm(height + depth));
    if (group.width.number > 0) {
      var width = calculateSize(group.width, options);
      node.setAttribute("width", makeEm(width));
    }
    node.setAttribute("src", group.src);
    return node;
  }
});
defineFunction({
  type: "kern",
  names: ["\\kern", "\\mkern", "\\hskip", "\\mskip"],
  props: {
    numArgs: 1,
    argTypes: ["size"],
    primitive: true,
    allowedInText: true
  },
  handler(_ref, args) {
    var {
      parser,
      funcName
    } = _ref;
    var size = assertNodeType(args[0], "size");
    if (parser.settings.strict) {
      var mathFunction = funcName[1] === "m";
      var muUnit = size.value.unit === "mu";
      if (mathFunction) {
        if (!muUnit) {
          parser.settings.reportNonstrict("mathVsTextUnits", "LaTeX's " + funcName + " supports only mu units, " + ("not " + size.value.unit + " units"));
        }
        if (parser.mode !== "math") {
          parser.settings.reportNonstrict("mathVsTextUnits", "LaTeX's " + funcName + " works only in math mode");
        }
      } else {
        if (muUnit) {
          parser.settings.reportNonstrict("mathVsTextUnits", "LaTeX's " + funcName + " doesn't support mu units");
        }
      }
    }
    return {
      type: "kern",
      mode: parser.mode,
      dimension: size.value
    };
  },
  htmlBuilder(group, options) {
    return buildCommon.makeGlue(group.dimension, options);
  },
  mathmlBuilder(group, options) {
    var dimension = calculateSize(group.dimension, options);
    return new mathMLTree.SpaceNode(dimension);
  }
});
defineFunction({
  type: "lap",
  names: ["\\mathllap", "\\mathrlap", "\\mathclap"],
  props: {
    numArgs: 1,
    allowedInText: true
  },
  handler: (_ref, args) => {
    var {
      parser,
      funcName
    } = _ref;
    var body = args[0];
    return {
      type: "lap",
      mode: parser.mode,
      alignment: funcName.slice(5),
      body
    };
  },
  htmlBuilder: (group, options) => {
    var inner2;
    if (group.alignment === "clap") {
      inner2 = buildCommon.makeSpan([], [buildGroup$1(group.body, options)]);
      inner2 = buildCommon.makeSpan(["inner"], [inner2], options);
    } else {
      inner2 = buildCommon.makeSpan(["inner"], [buildGroup$1(group.body, options)]);
    }
    var fix = buildCommon.makeSpan(["fix"], []);
    var node = buildCommon.makeSpan([group.alignment], [inner2, fix], options);
    var strut = buildCommon.makeSpan(["strut"]);
    strut.style.height = makeEm(node.height + node.depth);
    if (node.depth) {
      strut.style.verticalAlign = makeEm(-node.depth);
    }
    node.children.unshift(strut);
    node = buildCommon.makeSpan(["thinbox"], [node], options);
    return buildCommon.makeSpan(["mord", "vbox"], [node], options);
  },
  mathmlBuilder: (group, options) => {
    var node = new mathMLTree.MathNode("mpadded", [buildGroup2(group.body, options)]);
    if (group.alignment !== "rlap") {
      var offset = group.alignment === "llap" ? "-1" : "-0.5";
      node.setAttribute("lspace", offset + "width");
    }
    node.setAttribute("width", "0px");
    return node;
  }
});
defineFunction({
  type: "styling",
  names: ["\\(", "$"],
  props: {
    numArgs: 0,
    allowedInText: true,
    allowedInMath: false
  },
  handler(_ref, args) {
    var {
      funcName,
      parser
    } = _ref;
    var outerMode = parser.mode;
    parser.switchMode("math");
    var close2 = funcName === "\\(" ? "\\)" : "$";
    var body = parser.parseExpression(false, close2);
    parser.expect(close2);
    parser.switchMode(outerMode);
    return {
      type: "styling",
      mode: parser.mode,
      style: "text",
      body
    };
  }
});
defineFunction({
  type: "text",
  // Doesn't matter what this is.
  names: ["\\)", "\\]"],
  props: {
    numArgs: 0,
    allowedInText: true,
    allowedInMath: false
  },
  handler(context, args) {
    throw new ParseError2("Mismatched " + context.funcName);
  }
});
var chooseMathStyle = (group, options) => {
  switch (options.style.size) {
    case Style$1.DISPLAY.size:
      return group.display;
    case Style$1.TEXT.size:
      return group.text;
    case Style$1.SCRIPT.size:
      return group.script;
    case Style$1.SCRIPTSCRIPT.size:
      return group.scriptscript;
    default:
      return group.text;
  }
};
defineFunction({
  type: "mathchoice",
  names: ["\\mathchoice"],
  props: {
    numArgs: 4,
    primitive: true
  },
  handler: (_ref, args) => {
    var {
      parser
    } = _ref;
    return {
      type: "mathchoice",
      mode: parser.mode,
      display: ordargument(args[0]),
      text: ordargument(args[1]),
      script: ordargument(args[2]),
      scriptscript: ordargument(args[3])
    };
  },
  htmlBuilder: (group, options) => {
    var body = chooseMathStyle(group, options);
    var elements = buildExpression$1(body, options, false);
    return buildCommon.makeFragment(elements);
  },
  mathmlBuilder: (group, options) => {
    var body = chooseMathStyle(group, options);
    return buildExpressionRow(body, options);
  }
});
var assembleSupSub = (base, supGroup, subGroup, options, style, slant, baseShift) => {
  base = buildCommon.makeSpan([], [base]);
  var subIsSingleCharacter = subGroup && utils.isCharacterBox(subGroup);
  var sub2;
  var sup2;
  if (supGroup) {
    var elem = buildGroup$1(supGroup, options.havingStyle(style.sup()), options);
    sup2 = {
      elem,
      kern: Math.max(options.fontMetrics().bigOpSpacing1, options.fontMetrics().bigOpSpacing3 - elem.depth)
    };
  }
  if (subGroup) {
    var _elem = buildGroup$1(subGroup, options.havingStyle(style.sub()), options);
    sub2 = {
      elem: _elem,
      kern: Math.max(options.fontMetrics().bigOpSpacing2, options.fontMetrics().bigOpSpacing4 - _elem.height)
    };
  }
  var finalGroup;
  if (sup2 && sub2) {
    var bottom = options.fontMetrics().bigOpSpacing5 + sub2.elem.height + sub2.elem.depth + sub2.kern + base.depth + baseShift;
    finalGroup = buildCommon.makeVList({
      positionType: "bottom",
      positionData: bottom,
      children: [{
        type: "kern",
        size: options.fontMetrics().bigOpSpacing5
      }, {
        type: "elem",
        elem: sub2.elem,
        marginLeft: makeEm(-slant)
      }, {
        type: "kern",
        size: sub2.kern
      }, {
        type: "elem",
        elem: base
      }, {
        type: "kern",
        size: sup2.kern
      }, {
        type: "elem",
        elem: sup2.elem,
        marginLeft: makeEm(slant)
      }, {
        type: "kern",
        size: options.fontMetrics().bigOpSpacing5
      }]
    }, options);
  } else if (sub2) {
    var top = base.height - baseShift;
    finalGroup = buildCommon.makeVList({
      positionType: "top",
      positionData: top,
      children: [{
        type: "kern",
        size: options.fontMetrics().bigOpSpacing5
      }, {
        type: "elem",
        elem: sub2.elem,
        marginLeft: makeEm(-slant)
      }, {
        type: "kern",
        size: sub2.kern
      }, {
        type: "elem",
        elem: base
      }]
    }, options);
  } else if (sup2) {
    var _bottom = base.depth + baseShift;
    finalGroup = buildCommon.makeVList({
      positionType: "bottom",
      positionData: _bottom,
      children: [{
        type: "elem",
        elem: base
      }, {
        type: "kern",
        size: sup2.kern
      }, {
        type: "elem",
        elem: sup2.elem,
        marginLeft: makeEm(slant)
      }, {
        type: "kern",
        size: options.fontMetrics().bigOpSpacing5
      }]
    }, options);
  } else {
    return base;
  }
  var parts = [finalGroup];
  if (sub2 && slant !== 0 && !subIsSingleCharacter) {
    var spacer = buildCommon.makeSpan(["mspace"], [], options);
    spacer.style.marginRight = makeEm(slant);
    parts.unshift(spacer);
  }
  return buildCommon.makeSpan(["mop", "op-limits"], parts, options);
};
var noSuccessor = ["\\smallint"];
var htmlBuilder$2 = (grp, options) => {
  var supGroup;
  var subGroup;
  var hasLimits = false;
  var group;
  if (grp.type === "supsub") {
    supGroup = grp.sup;
    subGroup = grp.sub;
    group = assertNodeType(grp.base, "op");
    hasLimits = true;
  } else {
    group = assertNodeType(grp, "op");
  }
  var style = options.style;
  var large = false;
  if (style.size === Style$1.DISPLAY.size && group.symbol && !utils.contains(noSuccessor, group.name)) {
    large = true;
  }
  var base;
  if (group.symbol) {
    var fontName = large ? "Size2-Regular" : "Size1-Regular";
    var stash = "";
    if (group.name === "\\oiint" || group.name === "\\oiiint") {
      stash = group.name.slice(1);
      group.name = stash === "oiint" ? "\\iint" : "\\iiint";
    }
    base = buildCommon.makeSymbol(group.name, fontName, "math", options, ["mop", "op-symbol", large ? "large-op" : "small-op"]);
    if (stash.length > 0) {
      var italic = base.italic;
      var oval = buildCommon.staticSvg(stash + "Size" + (large ? "2" : "1"), options);
      base = buildCommon.makeVList({
        positionType: "individualShift",
        children: [{
          type: "elem",
          elem: base,
          shift: 0
        }, {
          type: "elem",
          elem: oval,
          shift: large ? 0.08 : 0
        }]
      }, options);
      group.name = "\\" + stash;
      base.classes.unshift("mop");
      base.italic = italic;
    }
  } else if (group.body) {
    var inner2 = buildExpression$1(group.body, options, true);
    if (inner2.length === 1 && inner2[0] instanceof SymbolNode) {
      base = inner2[0];
      base.classes[0] = "mop";
    } else {
      base = buildCommon.makeSpan(["mop"], inner2, options);
    }
  } else {
    var output = [];
    for (var i = 1; i < group.name.length; i++) {
      output.push(buildCommon.mathsym(group.name[i], group.mode, options));
    }
    base = buildCommon.makeSpan(["mop"], output, options);
  }
  var baseShift = 0;
  var slant = 0;
  if ((base instanceof SymbolNode || group.name === "\\oiint" || group.name === "\\oiiint") && !group.suppressBaseShift) {
    baseShift = (base.height - base.depth) / 2 - options.fontMetrics().axisHeight;
    slant = base.italic;
  }
  if (hasLimits) {
    return assembleSupSub(base, supGroup, subGroup, options, style, slant, baseShift);
  } else {
    if (baseShift) {
      base.style.position = "relative";
      base.style.top = makeEm(baseShift);
    }
    return base;
  }
};
var mathmlBuilder$1 = (group, options) => {
  var node;
  if (group.symbol) {
    node = new MathNode("mo", [makeText(group.name, group.mode)]);
    if (utils.contains(noSuccessor, group.name)) {
      node.setAttribute("largeop", "false");
    }
  } else if (group.body) {
    node = new MathNode("mo", buildExpression2(group.body, options));
  } else {
    node = new MathNode("mi", [new TextNode(group.name.slice(1))]);
    var operator = new MathNode("mo", [makeText("\u2061", "text")]);
    if (group.parentIsSupSub) {
      node = new MathNode("mrow", [node, operator]);
    } else {
      node = newDocumentFragment([node, operator]);
    }
  }
  return node;
};
var singleCharBigOps = {
  "\u220F": "\\prod",
  "\u2210": "\\coprod",
  "\u2211": "\\sum",
  "\u22C0": "\\bigwedge",
  "\u22C1": "\\bigvee",
  "\u22C2": "\\bigcap",
  "\u22C3": "\\bigcup",
  "\u2A00": "\\bigodot",
  "\u2A01": "\\bigoplus",
  "\u2A02": "\\bigotimes",
  "\u2A04": "\\biguplus",
  "\u2A06": "\\bigsqcup"
};
defineFunction({
  type: "op",
  names: ["\\coprod", "\\bigvee", "\\bigwedge", "\\biguplus", "\\bigcap", "\\bigcup", "\\intop", "\\prod", "\\sum", "\\bigotimes", "\\bigoplus", "\\bigodot", "\\bigsqcup", "\\smallint", "\u220F", "\u2210", "\u2211", "\u22C0", "\u22C1", "\u22C2", "\u22C3", "\u2A00", "\u2A01", "\u2A02", "\u2A04", "\u2A06"],
  props: {
    numArgs: 0
  },
  handler: (_ref, args) => {
    var {
      parser,
      funcName
    } = _ref;
    var fName = funcName;
    if (fName.length === 1) {
      fName = singleCharBigOps[fName];
    }
    return {
      type: "op",
      mode: parser.mode,
      limits: true,
      parentIsSupSub: false,
      symbol: true,
      name: fName
    };
  },
  htmlBuilder: htmlBuilder$2,
  mathmlBuilder: mathmlBuilder$1
});
defineFunction({
  type: "op",
  names: ["\\mathop"],
  props: {
    numArgs: 1,
    primitive: true
  },
  handler: (_ref2, args) => {
    var {
      parser
    } = _ref2;
    var body = args[0];
    return {
      type: "op",
      mode: parser.mode,
      limits: false,
      parentIsSupSub: false,
      symbol: false,
      body: ordargument(body)
    };
  },
  htmlBuilder: htmlBuilder$2,
  mathmlBuilder: mathmlBuilder$1
});
var singleCharIntegrals = {
  "\u222B": "\\int",
  "\u222C": "\\iint",
  "\u222D": "\\iiint",
  "\u222E": "\\oint",
  "\u222F": "\\oiint",
  "\u2230": "\\oiiint"
};
defineFunction({
  type: "op",
  names: ["\\arcsin", "\\arccos", "\\arctan", "\\arctg", "\\arcctg", "\\arg", "\\ch", "\\cos", "\\cosec", "\\cosh", "\\cot", "\\cotg", "\\coth", "\\csc", "\\ctg", "\\cth", "\\deg", "\\dim", "\\exp", "\\hom", "\\ker", "\\lg", "\\ln", "\\log", "\\sec", "\\sin", "\\sinh", "\\sh", "\\tan", "\\tanh", "\\tg", "\\th"],
  props: {
    numArgs: 0
  },
  handler(_ref3) {
    var {
      parser,
      funcName
    } = _ref3;
    return {
      type: "op",
      mode: parser.mode,
      limits: false,
      parentIsSupSub: false,
      symbol: false,
      name: funcName
    };
  },
  htmlBuilder: htmlBuilder$2,
  mathmlBuilder: mathmlBuilder$1
});
defineFunction({
  type: "op",
  names: ["\\det", "\\gcd", "\\inf", "\\lim", "\\max", "\\min", "\\Pr", "\\sup"],
  props: {
    numArgs: 0
  },
  handler(_ref4) {
    var {
      parser,
      funcName
    } = _ref4;
    return {
      type: "op",
      mode: parser.mode,
      limits: true,
      parentIsSupSub: false,
      symbol: false,
      name: funcName
    };
  },
  htmlBuilder: htmlBuilder$2,
  mathmlBuilder: mathmlBuilder$1
});
defineFunction({
  type: "op",
  names: ["\\int", "\\iint", "\\iiint", "\\oint", "\\oiint", "\\oiiint", "\u222B", "\u222C", "\u222D", "\u222E", "\u222F", "\u2230"],
  props: {
    numArgs: 0
  },
  handler(_ref5) {
    var {
      parser,
      funcName
    } = _ref5;
    var fName = funcName;
    if (fName.length === 1) {
      fName = singleCharIntegrals[fName];
    }
    return {
      type: "op",
      mode: parser.mode,
      limits: false,
      parentIsSupSub: false,
      symbol: true,
      name: fName
    };
  },
  htmlBuilder: htmlBuilder$2,
  mathmlBuilder: mathmlBuilder$1
});
var htmlBuilder$1 = (grp, options) => {
  var supGroup;
  var subGroup;
  var hasLimits = false;
  var group;
  if (grp.type === "supsub") {
    supGroup = grp.sup;
    subGroup = grp.sub;
    group = assertNodeType(grp.base, "operatorname");
    hasLimits = true;
  } else {
    group = assertNodeType(grp, "operatorname");
  }
  var base;
  if (group.body.length > 0) {
    var body = group.body.map((child2) => {
      var childText = child2.text;
      if (typeof childText === "string") {
        return {
          type: "textord",
          mode: child2.mode,
          text: childText
        };
      } else {
        return child2;
      }
    });
    var expression = buildExpression$1(body, options.withFont("mathrm"), true);
    for (var i = 0; i < expression.length; i++) {
      var child = expression[i];
      if (child instanceof SymbolNode) {
        child.text = child.text.replace(/\u2212/, "-").replace(/\u2217/, "*");
      }
    }
    base = buildCommon.makeSpan(["mop"], expression, options);
  } else {
    base = buildCommon.makeSpan(["mop"], [], options);
  }
  if (hasLimits) {
    return assembleSupSub(base, supGroup, subGroup, options, options.style, 0, 0);
  } else {
    return base;
  }
};
var mathmlBuilder2 = (group, options) => {
  var expression = buildExpression2(group.body, options.withFont("mathrm"));
  var isAllString = true;
  for (var i = 0; i < expression.length; i++) {
    var node = expression[i];
    if (node instanceof mathMLTree.SpaceNode) ;
    else if (node instanceof mathMLTree.MathNode) {
      switch (node.type) {
        case "mi":
        case "mn":
        case "ms":
        case "mspace":
        case "mtext":
          break;
        // Do nothing yet.
        case "mo": {
          var child = node.children[0];
          if (node.children.length === 1 && child instanceof mathMLTree.TextNode) {
            child.text = child.text.replace(/\u2212/, "-").replace(/\u2217/, "*");
          } else {
            isAllString = false;
          }
          break;
        }
        default:
          isAllString = false;
      }
    } else {
      isAllString = false;
    }
  }
  if (isAllString) {
    var word = expression.map((node2) => node2.toText()).join("");
    expression = [new mathMLTree.TextNode(word)];
  }
  var identifier = new mathMLTree.MathNode("mi", expression);
  identifier.setAttribute("mathvariant", "normal");
  var operator = new mathMLTree.MathNode("mo", [makeText("\u2061", "text")]);
  if (group.parentIsSupSub) {
    return new mathMLTree.MathNode("mrow", [identifier, operator]);
  } else {
    return mathMLTree.newDocumentFragment([identifier, operator]);
  }
};
defineFunction({
  type: "operatorname",
  names: ["\\operatorname@", "\\operatornamewithlimits"],
  props: {
    numArgs: 1
  },
  handler: (_ref, args) => {
    var {
      parser,
      funcName
    } = _ref;
    var body = args[0];
    return {
      type: "operatorname",
      mode: parser.mode,
      body: ordargument(body),
      alwaysHandleSupSub: funcName === "\\operatornamewithlimits",
      limits: false,
      parentIsSupSub: false
    };
  },
  htmlBuilder: htmlBuilder$1,
  mathmlBuilder: mathmlBuilder2
});
defineMacro("\\operatorname", "\\@ifstar\\operatornamewithlimits\\operatorname@");
defineFunctionBuilders({
  type: "ordgroup",
  htmlBuilder(group, options) {
    if (group.semisimple) {
      return buildCommon.makeFragment(buildExpression$1(group.body, options, false));
    }
    return buildCommon.makeSpan(["mord"], buildExpression$1(group.body, options, true), options);
  },
  mathmlBuilder(group, options) {
    return buildExpressionRow(group.body, options, true);
  }
});
defineFunction({
  type: "overline",
  names: ["\\overline"],
  props: {
    numArgs: 1
  },
  handler(_ref, args) {
    var {
      parser
    } = _ref;
    var body = args[0];
    return {
      type: "overline",
      mode: parser.mode,
      body
    };
  },
  htmlBuilder(group, options) {
    var innerGroup = buildGroup$1(group.body, options.havingCrampedStyle());
    var line = buildCommon.makeLineSpan("overline-line", options);
    var defaultRuleThickness = options.fontMetrics().defaultRuleThickness;
    var vlist = buildCommon.makeVList({
      positionType: "firstBaseline",
      children: [{
        type: "elem",
        elem: innerGroup
      }, {
        type: "kern",
        size: 3 * defaultRuleThickness
      }, {
        type: "elem",
        elem: line
      }, {
        type: "kern",
        size: defaultRuleThickness
      }]
    }, options);
    return buildCommon.makeSpan(["mord", "overline"], [vlist], options);
  },
  mathmlBuilder(group, options) {
    var operator = new mathMLTree.MathNode("mo", [new mathMLTree.TextNode("\u203E")]);
    operator.setAttribute("stretchy", "true");
    var node = new mathMLTree.MathNode("mover", [buildGroup2(group.body, options), operator]);
    node.setAttribute("accent", "true");
    return node;
  }
});
defineFunction({
  type: "phantom",
  names: ["\\phantom"],
  props: {
    numArgs: 1,
    allowedInText: true
  },
  handler: (_ref, args) => {
    var {
      parser
    } = _ref;
    var body = args[0];
    return {
      type: "phantom",
      mode: parser.mode,
      body: ordargument(body)
    };
  },
  htmlBuilder: (group, options) => {
    var elements = buildExpression$1(group.body, options.withPhantom(), false);
    return buildCommon.makeFragment(elements);
  },
  mathmlBuilder: (group, options) => {
    var inner2 = buildExpression2(group.body, options);
    return new mathMLTree.MathNode("mphantom", inner2);
  }
});
defineFunction({
  type: "hphantom",
  names: ["\\hphantom"],
  props: {
    numArgs: 1,
    allowedInText: true
  },
  handler: (_ref2, args) => {
    var {
      parser
    } = _ref2;
    var body = args[0];
    return {
      type: "hphantom",
      mode: parser.mode,
      body
    };
  },
  htmlBuilder: (group, options) => {
    var node = buildCommon.makeSpan([], [buildGroup$1(group.body, options.withPhantom())]);
    node.height = 0;
    node.depth = 0;
    if (node.children) {
      for (var i = 0; i < node.children.length; i++) {
        node.children[i].height = 0;
        node.children[i].depth = 0;
      }
    }
    node = buildCommon.makeVList({
      positionType: "firstBaseline",
      children: [{
        type: "elem",
        elem: node
      }]
    }, options);
    return buildCommon.makeSpan(["mord"], [node], options);
  },
  mathmlBuilder: (group, options) => {
    var inner2 = buildExpression2(ordargument(group.body), options);
    var phantom = new mathMLTree.MathNode("mphantom", inner2);
    var node = new mathMLTree.MathNode("mpadded", [phantom]);
    node.setAttribute("height", "0px");
    node.setAttribute("depth", "0px");
    return node;
  }
});
defineFunction({
  type: "vphantom",
  names: ["\\vphantom"],
  props: {
    numArgs: 1,
    allowedInText: true
  },
  handler: (_ref3, args) => {
    var {
      parser
    } = _ref3;
    var body = args[0];
    return {
      type: "vphantom",
      mode: parser.mode,
      body
    };
  },
  htmlBuilder: (group, options) => {
    var inner2 = buildCommon.makeSpan(["inner"], [buildGroup$1(group.body, options.withPhantom())]);
    var fix = buildCommon.makeSpan(["fix"], []);
    return buildCommon.makeSpan(["mord", "rlap"], [inner2, fix], options);
  },
  mathmlBuilder: (group, options) => {
    var inner2 = buildExpression2(ordargument(group.body), options);
    var phantom = new mathMLTree.MathNode("mphantom", inner2);
    var node = new mathMLTree.MathNode("mpadded", [phantom]);
    node.setAttribute("width", "0px");
    return node;
  }
});
defineFunction({
  type: "raisebox",
  names: ["\\raisebox"],
  props: {
    numArgs: 2,
    argTypes: ["size", "hbox"],
    allowedInText: true
  },
  handler(_ref, args) {
    var {
      parser
    } = _ref;
    var amount = assertNodeType(args[0], "size").value;
    var body = args[1];
    return {
      type: "raisebox",
      mode: parser.mode,
      dy: amount,
      body
    };
  },
  htmlBuilder(group, options) {
    var body = buildGroup$1(group.body, options);
    var dy = calculateSize(group.dy, options);
    return buildCommon.makeVList({
      positionType: "shift",
      positionData: -dy,
      children: [{
        type: "elem",
        elem: body
      }]
    }, options);
  },
  mathmlBuilder(group, options) {
    var node = new mathMLTree.MathNode("mpadded", [buildGroup2(group.body, options)]);
    var dy = group.dy.number + group.dy.unit;
    node.setAttribute("voffset", dy);
    return node;
  }
});
defineFunction({
  type: "internal",
  names: ["\\relax"],
  props: {
    numArgs: 0,
    allowedInText: true,
    allowedInArgument: true
  },
  handler(_ref) {
    var {
      parser
    } = _ref;
    return {
      type: "internal",
      mode: parser.mode
    };
  }
});
defineFunction({
  type: "rule",
  names: ["\\rule"],
  props: {
    numArgs: 2,
    numOptionalArgs: 1,
    allowedInText: true,
    allowedInMath: true,
    argTypes: ["size", "size", "size"]
  },
  handler(_ref, args, optArgs) {
    var {
      parser
    } = _ref;
    var shift = optArgs[0];
    var width = assertNodeType(args[0], "size");
    var height = assertNodeType(args[1], "size");
    return {
      type: "rule",
      mode: parser.mode,
      shift: shift && assertNodeType(shift, "size").value,
      width: width.value,
      height: height.value
    };
  },
  htmlBuilder(group, options) {
    var rule = buildCommon.makeSpan(["mord", "rule"], [], options);
    var width = calculateSize(group.width, options);
    var height = calculateSize(group.height, options);
    var shift = group.shift ? calculateSize(group.shift, options) : 0;
    rule.style.borderRightWidth = makeEm(width);
    rule.style.borderTopWidth = makeEm(height);
    rule.style.bottom = makeEm(shift);
    rule.width = width;
    rule.height = height + shift;
    rule.depth = -shift;
    rule.maxFontSize = height * 1.125 * options.sizeMultiplier;
    return rule;
  },
  mathmlBuilder(group, options) {
    var width = calculateSize(group.width, options);
    var height = calculateSize(group.height, options);
    var shift = group.shift ? calculateSize(group.shift, options) : 0;
    var color = options.color && options.getColor() || "black";
    var rule = new mathMLTree.MathNode("mspace");
    rule.setAttribute("mathbackground", color);
    rule.setAttribute("width", makeEm(width));
    rule.setAttribute("height", makeEm(height));
    var wrapper = new mathMLTree.MathNode("mpadded", [rule]);
    if (shift >= 0) {
      wrapper.setAttribute("height", makeEm(shift));
    } else {
      wrapper.setAttribute("height", makeEm(shift));
      wrapper.setAttribute("depth", makeEm(-shift));
    }
    wrapper.setAttribute("voffset", makeEm(shift));
    return wrapper;
  }
});
function sizingGroup(value, options, baseOptions) {
  var inner2 = buildExpression$1(value, options, false);
  var multiplier = options.sizeMultiplier / baseOptions.sizeMultiplier;
  for (var i = 0; i < inner2.length; i++) {
    var pos = inner2[i].classes.indexOf("sizing");
    if (pos < 0) {
      Array.prototype.push.apply(inner2[i].classes, options.sizingClasses(baseOptions));
    } else if (inner2[i].classes[pos + 1] === "reset-size" + options.size) {
      inner2[i].classes[pos + 1] = "reset-size" + baseOptions.size;
    }
    inner2[i].height *= multiplier;
    inner2[i].depth *= multiplier;
  }
  return buildCommon.makeFragment(inner2);
}
var sizeFuncs = ["\\tiny", "\\sixptsize", "\\scriptsize", "\\footnotesize", "\\small", "\\normalsize", "\\large", "\\Large", "\\LARGE", "\\huge", "\\Huge"];
var htmlBuilder2 = (group, options) => {
  var newOptions = options.havingSize(group.size);
  return sizingGroup(group.body, newOptions, options);
};
defineFunction({
  type: "sizing",
  names: sizeFuncs,
  props: {
    numArgs: 0,
    allowedInText: true
  },
  handler: (_ref, args) => {
    var {
      breakOnTokenText,
      funcName,
      parser
    } = _ref;
    var body = parser.parseExpression(false, breakOnTokenText);
    return {
      type: "sizing",
      mode: parser.mode,
      // Figure out what size to use based on the list of functions above
      size: sizeFuncs.indexOf(funcName) + 1,
      body
    };
  },
  htmlBuilder: htmlBuilder2,
  mathmlBuilder: (group, options) => {
    var newOptions = options.havingSize(group.size);
    var inner2 = buildExpression2(group.body, newOptions);
    var node = new mathMLTree.MathNode("mstyle", inner2);
    node.setAttribute("mathsize", makeEm(newOptions.sizeMultiplier));
    return node;
  }
});
defineFunction({
  type: "smash",
  names: ["\\smash"],
  props: {
    numArgs: 1,
    numOptionalArgs: 1,
    allowedInText: true
  },
  handler: (_ref, args, optArgs) => {
    var {
      parser
    } = _ref;
    var smashHeight = false;
    var smashDepth = false;
    var tbArg = optArgs[0] && assertNodeType(optArgs[0], "ordgroup");
    if (tbArg) {
      var letter = "";
      for (var i = 0; i < tbArg.body.length; ++i) {
        var node = tbArg.body[i];
        letter = node.text;
        if (letter === "t") {
          smashHeight = true;
        } else if (letter === "b") {
          smashDepth = true;
        } else {
          smashHeight = false;
          smashDepth = false;
          break;
        }
      }
    } else {
      smashHeight = true;
      smashDepth = true;
    }
    var body = args[0];
    return {
      type: "smash",
      mode: parser.mode,
      body,
      smashHeight,
      smashDepth
    };
  },
  htmlBuilder: (group, options) => {
    var node = buildCommon.makeSpan([], [buildGroup$1(group.body, options)]);
    if (!group.smashHeight && !group.smashDepth) {
      return node;
    }
    if (group.smashHeight) {
      node.height = 0;
      if (node.children) {
        for (var i = 0; i < node.children.length; i++) {
          node.children[i].height = 0;
        }
      }
    }
    if (group.smashDepth) {
      node.depth = 0;
      if (node.children) {
        for (var _i = 0; _i < node.children.length; _i++) {
          node.children[_i].depth = 0;
        }
      }
    }
    var smashedNode = buildCommon.makeVList({
      positionType: "firstBaseline",
      children: [{
        type: "elem",
        elem: node
      }]
    }, options);
    return buildCommon.makeSpan(["mord"], [smashedNode], options);
  },
  mathmlBuilder: (group, options) => {
    var node = new mathMLTree.MathNode("mpadded", [buildGroup2(group.body, options)]);
    if (group.smashHeight) {
      node.setAttribute("height", "0px");
    }
    if (group.smashDepth) {
      node.setAttribute("depth", "0px");
    }
    return node;
  }
});
defineFunction({
  type: "sqrt",
  names: ["\\sqrt"],
  props: {
    numArgs: 1,
    numOptionalArgs: 1
  },
  handler(_ref, args, optArgs) {
    var {
      parser
    } = _ref;
    var index = optArgs[0];
    var body = args[0];
    return {
      type: "sqrt",
      mode: parser.mode,
      body,
      index
    };
  },
  htmlBuilder(group, options) {
    var inner2 = buildGroup$1(group.body, options.havingCrampedStyle());
    if (inner2.height === 0) {
      inner2.height = options.fontMetrics().xHeight;
    }
    inner2 = buildCommon.wrapFragment(inner2, options);
    var metrics = options.fontMetrics();
    var theta = metrics.defaultRuleThickness;
    var phi = theta;
    if (options.style.id < Style$1.TEXT.id) {
      phi = options.fontMetrics().xHeight;
    }
    var lineClearance = theta + phi / 4;
    var minDelimiterHeight = inner2.height + inner2.depth + lineClearance + theta;
    var {
      span: img,
      ruleWidth,
      advanceWidth
    } = delimiter.sqrtImage(minDelimiterHeight, options);
    var delimDepth = img.height - ruleWidth;
    if (delimDepth > inner2.height + inner2.depth + lineClearance) {
      lineClearance = (lineClearance + delimDepth - inner2.height - inner2.depth) / 2;
    }
    var imgShift = img.height - inner2.height - lineClearance - ruleWidth;
    inner2.style.paddingLeft = makeEm(advanceWidth);
    var body = buildCommon.makeVList({
      positionType: "firstBaseline",
      children: [{
        type: "elem",
        elem: inner2,
        wrapperClasses: ["svg-align"]
      }, {
        type: "kern",
        size: -(inner2.height + imgShift)
      }, {
        type: "elem",
        elem: img
      }, {
        type: "kern",
        size: ruleWidth
      }]
    }, options);
    if (!group.index) {
      return buildCommon.makeSpan(["mord", "sqrt"], [body], options);
    } else {
      var newOptions = options.havingStyle(Style$1.SCRIPTSCRIPT);
      var rootm = buildGroup$1(group.index, newOptions, options);
      var toShift = 0.6 * (body.height - body.depth);
      var rootVList = buildCommon.makeVList({
        positionType: "shift",
        positionData: -toShift,
        children: [{
          type: "elem",
          elem: rootm
        }]
      }, options);
      var rootVListWrap = buildCommon.makeSpan(["root"], [rootVList]);
      return buildCommon.makeSpan(["mord", "sqrt"], [rootVListWrap, body], options);
    }
  },
  mathmlBuilder(group, options) {
    var {
      body,
      index
    } = group;
    return index ? new mathMLTree.MathNode("mroot", [buildGroup2(body, options), buildGroup2(index, options)]) : new mathMLTree.MathNode("msqrt", [buildGroup2(body, options)]);
  }
});
var styleMap2 = {
  "display": Style$1.DISPLAY,
  "text": Style$1.TEXT,
  "script": Style$1.SCRIPT,
  "scriptscript": Style$1.SCRIPTSCRIPT
};
defineFunction({
  type: "styling",
  names: ["\\displaystyle", "\\textstyle", "\\scriptstyle", "\\scriptscriptstyle"],
  props: {
    numArgs: 0,
    allowedInText: true,
    primitive: true
  },
  handler(_ref, args) {
    var {
      breakOnTokenText,
      funcName,
      parser
    } = _ref;
    var body = parser.parseExpression(true, breakOnTokenText);
    var style = funcName.slice(1, funcName.length - 5);
    return {
      type: "styling",
      mode: parser.mode,
      // Figure out what style to use by pulling out the style from
      // the function name
      style,
      body
    };
  },
  htmlBuilder(group, options) {
    var newStyle = styleMap2[group.style];
    var newOptions = options.havingStyle(newStyle).withFont("");
    return sizingGroup(group.body, newOptions, options);
  },
  mathmlBuilder(group, options) {
    var newStyle = styleMap2[group.style];
    var newOptions = options.havingStyle(newStyle);
    var inner2 = buildExpression2(group.body, newOptions);
    var node = new mathMLTree.MathNode("mstyle", inner2);
    var styleAttributes = {
      "display": ["0", "true"],
      "text": ["0", "false"],
      "script": ["1", "false"],
      "scriptscript": ["2", "false"]
    };
    var attr = styleAttributes[group.style];
    node.setAttribute("scriptlevel", attr[0]);
    node.setAttribute("displaystyle", attr[1]);
    return node;
  }
});
var htmlBuilderDelegate = function htmlBuilderDelegate2(group, options) {
  var base = group.base;
  if (!base) {
    return null;
  } else if (base.type === "op") {
    var delegate = base.limits && (options.style.size === Style$1.DISPLAY.size || base.alwaysHandleSupSub);
    return delegate ? htmlBuilder$2 : null;
  } else if (base.type === "operatorname") {
    var _delegate = base.alwaysHandleSupSub && (options.style.size === Style$1.DISPLAY.size || base.limits);
    return _delegate ? htmlBuilder$1 : null;
  } else if (base.type === "accent") {
    return utils.isCharacterBox(base.base) ? htmlBuilder$a : null;
  } else if (base.type === "horizBrace") {
    var isSup = !group.sub;
    return isSup === base.isOver ? htmlBuilder$3 : null;
  } else {
    return null;
  }
};
defineFunctionBuilders({
  type: "supsub",
  htmlBuilder(group, options) {
    var builderDelegate = htmlBuilderDelegate(group, options);
    if (builderDelegate) {
      return builderDelegate(group, options);
    }
    var {
      base: valueBase,
      sup: valueSup,
      sub: valueSub
    } = group;
    var base = buildGroup$1(valueBase, options);
    var supm;
    var subm;
    var metrics = options.fontMetrics();
    var supShift = 0;
    var subShift = 0;
    var isCharacterBox3 = valueBase && utils.isCharacterBox(valueBase);
    if (valueSup) {
      var newOptions = options.havingStyle(options.style.sup());
      supm = buildGroup$1(valueSup, newOptions, options);
      if (!isCharacterBox3) {
        supShift = base.height - newOptions.fontMetrics().supDrop * newOptions.sizeMultiplier / options.sizeMultiplier;
      }
    }
    if (valueSub) {
      var _newOptions = options.havingStyle(options.style.sub());
      subm = buildGroup$1(valueSub, _newOptions, options);
      if (!isCharacterBox3) {
        subShift = base.depth + _newOptions.fontMetrics().subDrop * _newOptions.sizeMultiplier / options.sizeMultiplier;
      }
    }
    var minSupShift;
    if (options.style === Style$1.DISPLAY) {
      minSupShift = metrics.sup1;
    } else if (options.style.cramped) {
      minSupShift = metrics.sup3;
    } else {
      minSupShift = metrics.sup2;
    }
    var multiplier = options.sizeMultiplier;
    var marginRight = makeEm(0.5 / metrics.ptPerEm / multiplier);
    var marginLeft = null;
    if (subm) {
      var isOiint = group.base && group.base.type === "op" && group.base.name && (group.base.name === "\\oiint" || group.base.name === "\\oiiint");
      if (base instanceof SymbolNode || isOiint) {
        marginLeft = makeEm(-base.italic);
      }
    }
    var supsub;
    if (supm && subm) {
      supShift = Math.max(supShift, minSupShift, supm.depth + 0.25 * metrics.xHeight);
      subShift = Math.max(subShift, metrics.sub2);
      var ruleWidth = metrics.defaultRuleThickness;
      var maxWidth = 4 * ruleWidth;
      if (supShift - supm.depth - (subm.height - subShift) < maxWidth) {
        subShift = maxWidth - (supShift - supm.depth) + subm.height;
        var psi = 0.8 * metrics.xHeight - (supShift - supm.depth);
        if (psi > 0) {
          supShift += psi;
          subShift -= psi;
        }
      }
      var vlistElem = [{
        type: "elem",
        elem: subm,
        shift: subShift,
        marginRight,
        marginLeft
      }, {
        type: "elem",
        elem: supm,
        shift: -supShift,
        marginRight
      }];
      supsub = buildCommon.makeVList({
        positionType: "individualShift",
        children: vlistElem
      }, options);
    } else if (subm) {
      subShift = Math.max(subShift, metrics.sub1, subm.height - 0.8 * metrics.xHeight);
      var _vlistElem = [{
        type: "elem",
        elem: subm,
        marginLeft,
        marginRight
      }];
      supsub = buildCommon.makeVList({
        positionType: "shift",
        positionData: subShift,
        children: _vlistElem
      }, options);
    } else if (supm) {
      supShift = Math.max(supShift, minSupShift, supm.depth + 0.25 * metrics.xHeight);
      supsub = buildCommon.makeVList({
        positionType: "shift",
        positionData: -supShift,
        children: [{
          type: "elem",
          elem: supm,
          marginRight
        }]
      }, options);
    } else {
      throw new Error("supsub must have either sup or sub.");
    }
    var mclass = getTypeOfDomTree(base, "right") || "mord";
    return buildCommon.makeSpan([mclass], [base, buildCommon.makeSpan(["msupsub"], [supsub])], options);
  },
  mathmlBuilder(group, options) {
    var isBrace = false;
    var isOver;
    var isSup;
    if (group.base && group.base.type === "horizBrace") {
      isSup = !!group.sup;
      if (isSup === group.base.isOver) {
        isBrace = true;
        isOver = group.base.isOver;
      }
    }
    if (group.base && (group.base.type === "op" || group.base.type === "operatorname")) {
      group.base.parentIsSupSub = true;
    }
    var children = [buildGroup2(group.base, options)];
    if (group.sub) {
      children.push(buildGroup2(group.sub, options));
    }
    if (group.sup) {
      children.push(buildGroup2(group.sup, options));
    }
    var nodeType;
    if (isBrace) {
      nodeType = isOver ? "mover" : "munder";
    } else if (!group.sub) {
      var base = group.base;
      if (base && base.type === "op" && base.limits && (options.style === Style$1.DISPLAY || base.alwaysHandleSupSub)) {
        nodeType = "mover";
      } else if (base && base.type === "operatorname" && base.alwaysHandleSupSub && (base.limits || options.style === Style$1.DISPLAY)) {
        nodeType = "mover";
      } else {
        nodeType = "msup";
      }
    } else if (!group.sup) {
      var _base = group.base;
      if (_base && _base.type === "op" && _base.limits && (options.style === Style$1.DISPLAY || _base.alwaysHandleSupSub)) {
        nodeType = "munder";
      } else if (_base && _base.type === "operatorname" && _base.alwaysHandleSupSub && (_base.limits || options.style === Style$1.DISPLAY)) {
        nodeType = "munder";
      } else {
        nodeType = "msub";
      }
    } else {
      var _base2 = group.base;
      if (_base2 && _base2.type === "op" && _base2.limits && options.style === Style$1.DISPLAY) {
        nodeType = "munderover";
      } else if (_base2 && _base2.type === "operatorname" && _base2.alwaysHandleSupSub && (options.style === Style$1.DISPLAY || _base2.limits)) {
        nodeType = "munderover";
      } else {
        nodeType = "msubsup";
      }
    }
    return new mathMLTree.MathNode(nodeType, children);
  }
});
defineFunctionBuilders({
  type: "atom",
  htmlBuilder(group, options) {
    return buildCommon.mathsym(group.text, group.mode, options, ["m" + group.family]);
  },
  mathmlBuilder(group, options) {
    var node = new mathMLTree.MathNode("mo", [makeText(group.text, group.mode)]);
    if (group.family === "bin") {
      var variant = getVariant(group, options);
      if (variant === "bold-italic") {
        node.setAttribute("mathvariant", variant);
      }
    } else if (group.family === "punct") {
      node.setAttribute("separator", "true");
    } else if (group.family === "open" || group.family === "close") {
      node.setAttribute("stretchy", "false");
    }
    return node;
  }
});
var defaultVariant = {
  "mi": "italic",
  "mn": "normal",
  "mtext": "normal"
};
defineFunctionBuilders({
  type: "mathord",
  htmlBuilder(group, options) {
    return buildCommon.makeOrd(group, options, "mathord");
  },
  mathmlBuilder(group, options) {
    var node = new mathMLTree.MathNode("mi", [makeText(group.text, group.mode, options)]);
    var variant = getVariant(group, options) || "italic";
    if (variant !== defaultVariant[node.type]) {
      node.setAttribute("mathvariant", variant);
    }
    return node;
  }
});
defineFunctionBuilders({
  type: "textord",
  htmlBuilder(group, options) {
    return buildCommon.makeOrd(group, options, "textord");
  },
  mathmlBuilder(group, options) {
    var text3 = makeText(group.text, group.mode, options);
    var variant = getVariant(group, options) || "normal";
    var node;
    if (group.mode === "text") {
      node = new mathMLTree.MathNode("mtext", [text3]);
    } else if (/[0-9]/.test(group.text)) {
      node = new mathMLTree.MathNode("mn", [text3]);
    } else if (group.text === "\\prime") {
      node = new mathMLTree.MathNode("mo", [text3]);
    } else {
      node = new mathMLTree.MathNode("mi", [text3]);
    }
    if (variant !== defaultVariant[node.type]) {
      node.setAttribute("mathvariant", variant);
    }
    return node;
  }
});
var cssSpace = {
  "\\nobreak": "nobreak",
  "\\allowbreak": "allowbreak"
};
var regularSpace = {
  " ": {},
  "\\ ": {},
  "~": {
    className: "nobreak"
  },
  "\\space": {},
  "\\nobreakspace": {
    className: "nobreak"
  }
};
defineFunctionBuilders({
  type: "spacing",
  htmlBuilder(group, options) {
    if (regularSpace.hasOwnProperty(group.text)) {
      var className = regularSpace[group.text].className || "";
      if (group.mode === "text") {
        var ord = buildCommon.makeOrd(group, options, "textord");
        ord.classes.push(className);
        return ord;
      } else {
        return buildCommon.makeSpan(["mspace", className], [buildCommon.mathsym(group.text, group.mode, options)], options);
      }
    } else if (cssSpace.hasOwnProperty(group.text)) {
      return buildCommon.makeSpan(["mspace", cssSpace[group.text]], [], options);
    } else {
      throw new ParseError2('Unknown type of space "' + group.text + '"');
    }
  },
  mathmlBuilder(group, options) {
    var node;
    if (regularSpace.hasOwnProperty(group.text)) {
      node = new mathMLTree.MathNode("mtext", [new mathMLTree.TextNode("\xA0")]);
    } else if (cssSpace.hasOwnProperty(group.text)) {
      return new mathMLTree.MathNode("mspace");
    } else {
      throw new ParseError2('Unknown type of space "' + group.text + '"');
    }
    return node;
  }
});
var pad = () => {
  var padNode = new mathMLTree.MathNode("mtd", []);
  padNode.setAttribute("width", "50%");
  return padNode;
};
defineFunctionBuilders({
  type: "tag",
  mathmlBuilder(group, options) {
    var table = new mathMLTree.MathNode("mtable", [new mathMLTree.MathNode("mtr", [pad(), new mathMLTree.MathNode("mtd", [buildExpressionRow(group.body, options)]), pad(), new mathMLTree.MathNode("mtd", [buildExpressionRow(group.tag, options)])])]);
    table.setAttribute("width", "100%");
    return table;
  }
});
var textFontFamilies = {
  "\\text": void 0,
  "\\textrm": "textrm",
  "\\textsf": "textsf",
  "\\texttt": "texttt",
  "\\textnormal": "textrm"
};
var textFontWeights = {
  "\\textbf": "textbf",
  "\\textmd": "textmd"
};
var textFontShapes = {
  "\\textit": "textit",
  "\\textup": "textup"
};
var optionsWithFont = (group, options) => {
  var font = group.font;
  if (!font) {
    return options;
  } else if (textFontFamilies[font]) {
    return options.withTextFontFamily(textFontFamilies[font]);
  } else if (textFontWeights[font]) {
    return options.withTextFontWeight(textFontWeights[font]);
  } else if (font === "\\emph") {
    return options.fontShape === "textit" ? options.withTextFontShape("textup") : options.withTextFontShape("textit");
  }
  return options.withTextFontShape(textFontShapes[font]);
};
defineFunction({
  type: "text",
  names: [
    // Font families
    "\\text",
    "\\textrm",
    "\\textsf",
    "\\texttt",
    "\\textnormal",
    // Font weights
    "\\textbf",
    "\\textmd",
    // Font Shapes
    "\\textit",
    "\\textup",
    "\\emph"
  ],
  props: {
    numArgs: 1,
    argTypes: ["text"],
    allowedInArgument: true,
    allowedInText: true
  },
  handler(_ref, args) {
    var {
      parser,
      funcName
    } = _ref;
    var body = args[0];
    return {
      type: "text",
      mode: parser.mode,
      body: ordargument(body),
      font: funcName
    };
  },
  htmlBuilder(group, options) {
    var newOptions = optionsWithFont(group, options);
    var inner2 = buildExpression$1(group.body, newOptions, true);
    return buildCommon.makeSpan(["mord", "text"], inner2, newOptions);
  },
  mathmlBuilder(group, options) {
    var newOptions = optionsWithFont(group, options);
    return buildExpressionRow(group.body, newOptions);
  }
});
defineFunction({
  type: "underline",
  names: ["\\underline"],
  props: {
    numArgs: 1,
    allowedInText: true
  },
  handler(_ref, args) {
    var {
      parser
    } = _ref;
    return {
      type: "underline",
      mode: parser.mode,
      body: args[0]
    };
  },
  htmlBuilder(group, options) {
    var innerGroup = buildGroup$1(group.body, options);
    var line = buildCommon.makeLineSpan("underline-line", options);
    var defaultRuleThickness = options.fontMetrics().defaultRuleThickness;
    var vlist = buildCommon.makeVList({
      positionType: "top",
      positionData: innerGroup.height,
      children: [{
        type: "kern",
        size: defaultRuleThickness
      }, {
        type: "elem",
        elem: line
      }, {
        type: "kern",
        size: 3 * defaultRuleThickness
      }, {
        type: "elem",
        elem: innerGroup
      }]
    }, options);
    return buildCommon.makeSpan(["mord", "underline"], [vlist], options);
  },
  mathmlBuilder(group, options) {
    var operator = new mathMLTree.MathNode("mo", [new mathMLTree.TextNode("\u203E")]);
    operator.setAttribute("stretchy", "true");
    var node = new mathMLTree.MathNode("munder", [buildGroup2(group.body, options), operator]);
    node.setAttribute("accentunder", "true");
    return node;
  }
});
defineFunction({
  type: "vcenter",
  names: ["\\vcenter"],
  props: {
    numArgs: 1,
    argTypes: ["original"],
    // In LaTeX, \vcenter can act only on a box.
    allowedInText: false
  },
  handler(_ref, args) {
    var {
      parser
    } = _ref;
    return {
      type: "vcenter",
      mode: parser.mode,
      body: args[0]
    };
  },
  htmlBuilder(group, options) {
    var body = buildGroup$1(group.body, options);
    var axisHeight = options.fontMetrics().axisHeight;
    var dy = 0.5 * (body.height - axisHeight - (body.depth + axisHeight));
    return buildCommon.makeVList({
      positionType: "shift",
      positionData: dy,
      children: [{
        type: "elem",
        elem: body
      }]
    }, options);
  },
  mathmlBuilder(group, options) {
    return new mathMLTree.MathNode("mpadded", [buildGroup2(group.body, options)], ["vcenter"]);
  }
});
defineFunction({
  type: "verb",
  names: ["\\verb"],
  props: {
    numArgs: 0,
    allowedInText: true
  },
  handler(context, args, optArgs) {
    throw new ParseError2("\\verb ended by end of line instead of matching delimiter");
  },
  htmlBuilder(group, options) {
    var text3 = makeVerb(group);
    var body = [];
    var newOptions = options.havingStyle(options.style.text());
    for (var i = 0; i < text3.length; i++) {
      var c = text3[i];
      if (c === "~") {
        c = "\\textasciitilde";
      }
      body.push(buildCommon.makeSymbol(c, "Typewriter-Regular", group.mode, newOptions, ["mord", "texttt"]));
    }
    return buildCommon.makeSpan(["mord", "text"].concat(newOptions.sizingClasses(options)), buildCommon.tryCombineChars(body), newOptions);
  },
  mathmlBuilder(group, options) {
    var text3 = new mathMLTree.TextNode(makeVerb(group));
    var node = new mathMLTree.MathNode("mtext", [text3]);
    node.setAttribute("mathvariant", "monospace");
    return node;
  }
});
var makeVerb = (group) => group.body.replace(/ /g, group.star ? "\u2423" : "\xA0");
var functions = _functions;
var spaceRegexString = "[ \r\n	]";
var controlWordRegexString = "\\\\[a-zA-Z@]+";
var controlSymbolRegexString = "\\\\[^\uD800-\uDFFF]";
var controlWordWhitespaceRegexString = "(" + controlWordRegexString + ")" + spaceRegexString + "*";
var controlSpaceRegexString = "\\\\(\n|[ \r	]+\n?)[ \r	]*";
var combiningDiacriticalMarkString = "[\u0300-\u036F]";
var combiningDiacriticalMarksEndRegex = new RegExp(combiningDiacriticalMarkString + "+$");
var tokenRegexString = "(" + spaceRegexString + "+)|" + // whitespace
(controlSpaceRegexString + "|") + // \whitespace
"([!-\\[\\]-\u2027\u202A-\uD7FF\uF900-\uFFFF]" + // single codepoint
(combiningDiacriticalMarkString + "*") + // ...plus accents
"|[\uD800-\uDBFF][\uDC00-\uDFFF]" + // surrogate pair
(combiningDiacriticalMarkString + "*") + // ...plus accents
"|\\\\verb\\*([^]).*?\\4|\\\\verb([^*a-zA-Z]).*?\\5" + // \verb unstarred
("|" + controlWordWhitespaceRegexString) + // \macroName + spaces
("|" + controlSymbolRegexString + ")");
var Lexer2 = class {
  // Category codes. The lexer only supports comment characters (14) for now.
  // MacroExpander additionally distinguishes active (13).
  constructor(input2, settings) {
    this.input = void 0;
    this.settings = void 0;
    this.tokenRegex = void 0;
    this.catcodes = void 0;
    this.input = input2;
    this.settings = settings;
    this.tokenRegex = new RegExp(tokenRegexString, "g");
    this.catcodes = {
      "%": 14,
      // comment character
      "~": 13
      // active character
    };
  }
  setCatcode(char, code) {
    this.catcodes[char] = code;
  }
  /**
   * This function lexes a single token.
   */
  lex() {
    var input2 = this.input;
    var pos = this.tokenRegex.lastIndex;
    if (pos === input2.length) {
      return new Token2("EOF", new SourceLocation(this, pos, pos));
    }
    var match2 = this.tokenRegex.exec(input2);
    if (match2 === null || match2.index !== pos) {
      throw new ParseError2("Unexpected character: '" + input2[pos] + "'", new Token2(input2[pos], new SourceLocation(this, pos, pos + 1)));
    }
    var text3 = match2[6] || match2[3] || (match2[2] ? "\\ " : " ");
    if (this.catcodes[text3] === 14) {
      var nlIndex = input2.indexOf("\n", this.tokenRegex.lastIndex);
      if (nlIndex === -1) {
        this.tokenRegex.lastIndex = input2.length;
        this.settings.reportNonstrict("commentAtEnd", "% comment has no terminating newline; LaTeX would fail because of commenting the end of math mode (e.g. $)");
      } else {
        this.tokenRegex.lastIndex = nlIndex + 1;
      }
      return this.lex();
    }
    return new Token2(text3, new SourceLocation(this, pos, this.tokenRegex.lastIndex));
  }
};
var Namespace2 = class {
  /**
   * Both arguments are optional.  The first argument is an object of
   * built-in mappings which never change.  The second argument is an object
   * of initial (global-level) mappings, which will constantly change
   * according to any global/top-level `set`s done.
   */
  constructor(builtins, globalMacros) {
    if (builtins === void 0) {
      builtins = {};
    }
    if (globalMacros === void 0) {
      globalMacros = {};
    }
    this.current = void 0;
    this.builtins = void 0;
    this.undefStack = void 0;
    this.current = globalMacros;
    this.builtins = builtins;
    this.undefStack = [];
  }
  /**
   * Start a new nested group, affecting future local `set`s.
   */
  beginGroup() {
    this.undefStack.push({});
  }
  /**
   * End current nested group, restoring values before the group began.
   */
  endGroup() {
    if (this.undefStack.length === 0) {
      throw new ParseError2("Unbalanced namespace destruction: attempt to pop global namespace; please report this as a bug");
    }
    var undefs = this.undefStack.pop();
    for (var undef in undefs) {
      if (undefs.hasOwnProperty(undef)) {
        if (undefs[undef] == null) {
          delete this.current[undef];
        } else {
          this.current[undef] = undefs[undef];
        }
      }
    }
  }
  /**
   * Ends all currently nested groups (if any), restoring values before the
   * groups began.  Useful in case of an error in the middle of parsing.
   */
  endGroups() {
    while (this.undefStack.length > 0) {
      this.endGroup();
    }
  }
  /**
   * Detect whether `name` has a definition.  Equivalent to
   * `get(name) != null`.
   */
  has(name) {
    return this.current.hasOwnProperty(name) || this.builtins.hasOwnProperty(name);
  }
  /**
   * Get the current value of a name, or `undefined` if there is no value.
   *
   * Note: Do not use `if (namespace.get(...))` to detect whether a macro
   * is defined, as the definition may be the empty string which evaluates
   * to `false` in JavaScript.  Use `if (namespace.get(...) != null)` or
   * `if (namespace.has(...))`.
   */
  get(name) {
    if (this.current.hasOwnProperty(name)) {
      return this.current[name];
    } else {
      return this.builtins[name];
    }
  }
  /**
   * Set the current value of a name, and optionally set it globally too.
   * Local set() sets the current value and (when appropriate) adds an undo
   * operation to the undo stack.  Global set() may change the undo
   * operation at every level, so takes time linear in their number.
   * A value of undefined means to delete existing definitions.
   */
  set(name, value, global2) {
    if (global2 === void 0) {
      global2 = false;
    }
    if (global2) {
      for (var i = 0; i < this.undefStack.length; i++) {
        delete this.undefStack[i][name];
      }
      if (this.undefStack.length > 0) {
        this.undefStack[this.undefStack.length - 1][name] = value;
      }
    } else {
      var top = this.undefStack[this.undefStack.length - 1];
      if (top && !top.hasOwnProperty(name)) {
        top[name] = this.current[name];
      }
    }
    if (value == null) {
      delete this.current[name];
    } else {
      this.current[name] = value;
    }
  }
};
var macros = _macros;
defineMacro("\\noexpand", function(context) {
  var t = context.popToken();
  if (context.isExpandable(t.text)) {
    t.noexpand = true;
    t.treatAsRelax = true;
  }
  return {
    tokens: [t],
    numArgs: 0
  };
});
defineMacro("\\expandafter", function(context) {
  var t = context.popToken();
  context.expandOnce(true);
  return {
    tokens: [t],
    numArgs: 0
  };
});
defineMacro("\\@firstoftwo", function(context) {
  var args = context.consumeArgs(2);
  return {
    tokens: args[0],
    numArgs: 0
  };
});
defineMacro("\\@secondoftwo", function(context) {
  var args = context.consumeArgs(2);
  return {
    tokens: args[1],
    numArgs: 0
  };
});
defineMacro("\\@ifnextchar", function(context) {
  var args = context.consumeArgs(3);
  context.consumeSpaces();
  var nextToken = context.future();
  if (args[0].length === 1 && args[0][0].text === nextToken.text) {
    return {
      tokens: args[1],
      numArgs: 0
    };
  } else {
    return {
      tokens: args[2],
      numArgs: 0
    };
  }
});
defineMacro("\\@ifstar", "\\@ifnextchar *{\\@firstoftwo{#1}}");
defineMacro("\\TextOrMath", function(context) {
  var args = context.consumeArgs(2);
  if (context.mode === "text") {
    return {
      tokens: args[0],
      numArgs: 0
    };
  } else {
    return {
      tokens: args[1],
      numArgs: 0
    };
  }
});
var digitToNumber = {
  "0": 0,
  "1": 1,
  "2": 2,
  "3": 3,
  "4": 4,
  "5": 5,
  "6": 6,
  "7": 7,
  "8": 8,
  "9": 9,
  "a": 10,
  "A": 10,
  "b": 11,
  "B": 11,
  "c": 12,
  "C": 12,
  "d": 13,
  "D": 13,
  "e": 14,
  "E": 14,
  "f": 15,
  "F": 15
};
defineMacro("\\char", function(context) {
  var token = context.popToken();
  var base;
  var number = "";
  if (token.text === "'") {
    base = 8;
    token = context.popToken();
  } else if (token.text === '"') {
    base = 16;
    token = context.popToken();
  } else if (token.text === "`") {
    token = context.popToken();
    if (token.text[0] === "\\") {
      number = token.text.charCodeAt(1);
    } else if (token.text === "EOF") {
      throw new ParseError2("\\char` missing argument");
    } else {
      number = token.text.charCodeAt(0);
    }
  } else {
    base = 10;
  }
  if (base) {
    number = digitToNumber[token.text];
    if (number == null || number >= base) {
      throw new ParseError2("Invalid base-" + base + " digit " + token.text);
    }
    var digit;
    while ((digit = digitToNumber[context.future().text]) != null && digit < base) {
      number *= base;
      number += digit;
      context.popToken();
    }
  }
  return "\\@char{" + number + "}";
});
var newcommand = (context, existsOK, nonexistsOK, skipIfExists) => {
  var arg = context.consumeArg().tokens;
  if (arg.length !== 1) {
    throw new ParseError2("\\newcommand's first argument must be a macro name");
  }
  var name = arg[0].text;
  var exists = context.isDefined(name);
  if (exists && !existsOK) {
    throw new ParseError2("\\newcommand{" + name + "} attempting to redefine " + (name + "; use \\renewcommand"));
  }
  if (!exists && !nonexistsOK) {
    throw new ParseError2("\\renewcommand{" + name + "} when command " + name + " does not yet exist; use \\newcommand");
  }
  var numArgs = 0;
  arg = context.consumeArg().tokens;
  if (arg.length === 1 && arg[0].text === "[") {
    var argText = "";
    var token = context.expandNextToken();
    while (token.text !== "]" && token.text !== "EOF") {
      argText += token.text;
      token = context.expandNextToken();
    }
    if (!argText.match(/^\s*[0-9]+\s*$/)) {
      throw new ParseError2("Invalid number of arguments: " + argText);
    }
    numArgs = parseInt(argText);
    arg = context.consumeArg().tokens;
  }
  if (!(exists && skipIfExists)) {
    context.macros.set(name, {
      tokens: arg,
      numArgs
    });
  }
  return "";
};
defineMacro("\\newcommand", (context) => newcommand(context, false, true, false));
defineMacro("\\renewcommand", (context) => newcommand(context, true, false, false));
defineMacro("\\providecommand", (context) => newcommand(context, true, true, true));
defineMacro("\\message", (context) => {
  var arg = context.consumeArgs(1)[0];
  console.log(arg.reverse().map((token) => token.text).join(""));
  return "";
});
defineMacro("\\errmessage", (context) => {
  var arg = context.consumeArgs(1)[0];
  console.error(arg.reverse().map((token) => token.text).join(""));
  return "";
});
defineMacro("\\show", (context) => {
  var tok = context.popToken();
  var name = tok.text;
  console.log(tok, context.macros.get(name), functions[name], symbols.math[name], symbols.text[name]);
  return "";
});
defineMacro("\\bgroup", "{");
defineMacro("\\egroup", "}");
defineMacro("~", "\\nobreakspace");
defineMacro("\\lq", "`");
defineMacro("\\rq", "'");
defineMacro("\\aa", "\\r a");
defineMacro("\\AA", "\\r A");
defineMacro("\\textcopyright", "\\html@mathml{\\textcircled{c}}{\\char`\xA9}");
defineMacro("\\copyright", "\\TextOrMath{\\textcopyright}{\\text{\\textcopyright}}");
defineMacro("\\textregistered", "\\html@mathml{\\textcircled{\\scriptsize R}}{\\char`\xAE}");
defineMacro("\u212C", "\\mathscr{B}");
defineMacro("\u2130", "\\mathscr{E}");
defineMacro("\u2131", "\\mathscr{F}");
defineMacro("\u210B", "\\mathscr{H}");
defineMacro("\u2110", "\\mathscr{I}");
defineMacro("\u2112", "\\mathscr{L}");
defineMacro("\u2133", "\\mathscr{M}");
defineMacro("\u211B", "\\mathscr{R}");
defineMacro("\u212D", "\\mathfrak{C}");
defineMacro("\u210C", "\\mathfrak{H}");
defineMacro("\u2128", "\\mathfrak{Z}");
defineMacro("\\Bbbk", "\\Bbb{k}");
defineMacro("\xB7", "\\cdotp");
defineMacro("\\llap", "\\mathllap{\\textrm{#1}}");
defineMacro("\\rlap", "\\mathrlap{\\textrm{#1}}");
defineMacro("\\clap", "\\mathclap{\\textrm{#1}}");
defineMacro("\\mathstrut", "\\vphantom{(}");
defineMacro("\\underbar", "\\underline{\\text{#1}}");
defineMacro("\\not", '\\html@mathml{\\mathrel{\\mathrlap\\@not}}{\\char"338}');
defineMacro("\\neq", "\\html@mathml{\\mathrel{\\not=}}{\\mathrel{\\char`\u2260}}");
defineMacro("\\ne", "\\neq");
defineMacro("\u2260", "\\neq");
defineMacro("\\notin", "\\html@mathml{\\mathrel{{\\in}\\mathllap{/\\mskip1mu}}}{\\mathrel{\\char`\u2209}}");
defineMacro("\u2209", "\\notin");
defineMacro("\u2258", "\\html@mathml{\\mathrel{=\\kern{-1em}\\raisebox{0.4em}{$\\scriptsize\\frown$}}}{\\mathrel{\\char`\u2258}}");
defineMacro("\u2259", "\\html@mathml{\\stackrel{\\tiny\\wedge}{=}}{\\mathrel{\\char`\u2258}}");
defineMacro("\u225A", "\\html@mathml{\\stackrel{\\tiny\\vee}{=}}{\\mathrel{\\char`\u225A}}");
defineMacro("\u225B", "\\html@mathml{\\stackrel{\\scriptsize\\star}{=}}{\\mathrel{\\char`\u225B}}");
defineMacro("\u225D", "\\html@mathml{\\stackrel{\\tiny\\mathrm{def}}{=}}{\\mathrel{\\char`\u225D}}");
defineMacro("\u225E", "\\html@mathml{\\stackrel{\\tiny\\mathrm{m}}{=}}{\\mathrel{\\char`\u225E}}");
defineMacro("\u225F", "\\html@mathml{\\stackrel{\\tiny?}{=}}{\\mathrel{\\char`\u225F}}");
defineMacro("\u27C2", "\\perp");
defineMacro("\u203C", "\\mathclose{!\\mkern-0.8mu!}");
defineMacro("\u220C", "\\notni");
defineMacro("\u231C", "\\ulcorner");
defineMacro("\u231D", "\\urcorner");
defineMacro("\u231E", "\\llcorner");
defineMacro("\u231F", "\\lrcorner");
defineMacro("\xA9", "\\copyright");
defineMacro("\xAE", "\\textregistered");
defineMacro("\uFE0F", "\\textregistered");
defineMacro("\\ulcorner", '\\html@mathml{\\@ulcorner}{\\mathop{\\char"231c}}');
defineMacro("\\urcorner", '\\html@mathml{\\@urcorner}{\\mathop{\\char"231d}}');
defineMacro("\\llcorner", '\\html@mathml{\\@llcorner}{\\mathop{\\char"231e}}');
defineMacro("\\lrcorner", '\\html@mathml{\\@lrcorner}{\\mathop{\\char"231f}}');
defineMacro("\\vdots", "{\\varvdots\\rule{0pt}{15pt}}");
defineMacro("\u22EE", "\\vdots");
defineMacro("\\varGamma", "\\mathit{\\Gamma}");
defineMacro("\\varDelta", "\\mathit{\\Delta}");
defineMacro("\\varTheta", "\\mathit{\\Theta}");
defineMacro("\\varLambda", "\\mathit{\\Lambda}");
defineMacro("\\varXi", "\\mathit{\\Xi}");
defineMacro("\\varPi", "\\mathit{\\Pi}");
defineMacro("\\varSigma", "\\mathit{\\Sigma}");
defineMacro("\\varUpsilon", "\\mathit{\\Upsilon}");
defineMacro("\\varPhi", "\\mathit{\\Phi}");
defineMacro("\\varPsi", "\\mathit{\\Psi}");
defineMacro("\\varOmega", "\\mathit{\\Omega}");
defineMacro("\\substack", "\\begin{subarray}{c}#1\\end{subarray}");
defineMacro("\\colon", "\\nobreak\\mskip2mu\\mathpunct{}\\mathchoice{\\mkern-3mu}{\\mkern-3mu}{}{}{:}\\mskip6mu\\relax");
defineMacro("\\boxed", "\\fbox{$\\displaystyle{#1}$}");
defineMacro("\\iff", "\\DOTSB\\;\\Longleftrightarrow\\;");
defineMacro("\\implies", "\\DOTSB\\;\\Longrightarrow\\;");
defineMacro("\\impliedby", "\\DOTSB\\;\\Longleftarrow\\;");
defineMacro("\\dddot", "{\\overset{\\raisebox{-0.1ex}{\\normalsize ...}}{#1}}");
defineMacro("\\ddddot", "{\\overset{\\raisebox{-0.1ex}{\\normalsize ....}}{#1}}");
var dotsByToken = {
  ",": "\\dotsc",
  "\\not": "\\dotsb",
  // \keybin@ checks for the following:
  "+": "\\dotsb",
  "=": "\\dotsb",
  "<": "\\dotsb",
  ">": "\\dotsb",
  "-": "\\dotsb",
  "*": "\\dotsb",
  ":": "\\dotsb",
  // Symbols whose definition starts with \DOTSB:
  "\\DOTSB": "\\dotsb",
  "\\coprod": "\\dotsb",
  "\\bigvee": "\\dotsb",
  "\\bigwedge": "\\dotsb",
  "\\biguplus": "\\dotsb",
  "\\bigcap": "\\dotsb",
  "\\bigcup": "\\dotsb",
  "\\prod": "\\dotsb",
  "\\sum": "\\dotsb",
  "\\bigotimes": "\\dotsb",
  "\\bigoplus": "\\dotsb",
  "\\bigodot": "\\dotsb",
  "\\bigsqcup": "\\dotsb",
  "\\And": "\\dotsb",
  "\\longrightarrow": "\\dotsb",
  "\\Longrightarrow": "\\dotsb",
  "\\longleftarrow": "\\dotsb",
  "\\Longleftarrow": "\\dotsb",
  "\\longleftrightarrow": "\\dotsb",
  "\\Longleftrightarrow": "\\dotsb",
  "\\mapsto": "\\dotsb",
  "\\longmapsto": "\\dotsb",
  "\\hookrightarrow": "\\dotsb",
  "\\doteq": "\\dotsb",
  // Symbols whose definition starts with \mathbin:
  "\\mathbin": "\\dotsb",
  // Symbols whose definition starts with \mathrel:
  "\\mathrel": "\\dotsb",
  "\\relbar": "\\dotsb",
  "\\Relbar": "\\dotsb",
  "\\xrightarrow": "\\dotsb",
  "\\xleftarrow": "\\dotsb",
  // Symbols whose definition starts with \DOTSI:
  "\\DOTSI": "\\dotsi",
  "\\int": "\\dotsi",
  "\\oint": "\\dotsi",
  "\\iint": "\\dotsi",
  "\\iiint": "\\dotsi",
  "\\iiiint": "\\dotsi",
  "\\idotsint": "\\dotsi",
  // Symbols whose definition starts with \DOTSX:
  "\\DOTSX": "\\dotsx"
};
defineMacro("\\dots", function(context) {
  var thedots = "\\dotso";
  var next = context.expandAfterFuture().text;
  if (next in dotsByToken) {
    thedots = dotsByToken[next];
  } else if (next.slice(0, 4) === "\\not") {
    thedots = "\\dotsb";
  } else if (next in symbols.math) {
    if (utils.contains(["bin", "rel"], symbols.math[next].group)) {
      thedots = "\\dotsb";
    }
  }
  return thedots;
});
var spaceAfterDots = {
  // \rightdelim@ checks for the following:
  ")": true,
  "]": true,
  "\\rbrack": true,
  "\\}": true,
  "\\rbrace": true,
  "\\rangle": true,
  "\\rceil": true,
  "\\rfloor": true,
  "\\rgroup": true,
  "\\rmoustache": true,
  "\\right": true,
  "\\bigr": true,
  "\\biggr": true,
  "\\Bigr": true,
  "\\Biggr": true,
  // \extra@ also tests for the following:
  "$": true,
  // \extrap@ checks for the following:
  ";": true,
  ".": true,
  ",": true
};
defineMacro("\\dotso", function(context) {
  var next = context.future().text;
  if (next in spaceAfterDots) {
    return "\\ldots\\,";
  } else {
    return "\\ldots";
  }
});
defineMacro("\\dotsc", function(context) {
  var next = context.future().text;
  if (next in spaceAfterDots && next !== ",") {
    return "\\ldots\\,";
  } else {
    return "\\ldots";
  }
});
defineMacro("\\cdots", function(context) {
  var next = context.future().text;
  if (next in spaceAfterDots) {
    return "\\@cdots\\,";
  } else {
    return "\\@cdots";
  }
});
defineMacro("\\dotsb", "\\cdots");
defineMacro("\\dotsm", "\\cdots");
defineMacro("\\dotsi", "\\!\\cdots");
defineMacro("\\dotsx", "\\ldots\\,");
defineMacro("\\DOTSI", "\\relax");
defineMacro("\\DOTSB", "\\relax");
defineMacro("\\DOTSX", "\\relax");
defineMacro("\\tmspace", "\\TextOrMath{\\kern#1#3}{\\mskip#1#2}\\relax");
defineMacro("\\,", "\\tmspace+{3mu}{.1667em}");
defineMacro("\\thinspace", "\\,");
defineMacro("\\>", "\\mskip{4mu}");
defineMacro("\\:", "\\tmspace+{4mu}{.2222em}");
defineMacro("\\medspace", "\\:");
defineMacro("\\;", "\\tmspace+{5mu}{.2777em}");
defineMacro("\\thickspace", "\\;");
defineMacro("\\!", "\\tmspace-{3mu}{.1667em}");
defineMacro("\\negthinspace", "\\!");
defineMacro("\\negmedspace", "\\tmspace-{4mu}{.2222em}");
defineMacro("\\negthickspace", "\\tmspace-{5mu}{.277em}");
defineMacro("\\enspace", "\\kern.5em ");
defineMacro("\\enskip", "\\hskip.5em\\relax");
defineMacro("\\quad", "\\hskip1em\\relax");
defineMacro("\\qquad", "\\hskip2em\\relax");
defineMacro("\\tag", "\\@ifstar\\tag@literal\\tag@paren");
defineMacro("\\tag@paren", "\\tag@literal{({#1})}");
defineMacro("\\tag@literal", (context) => {
  if (context.macros.get("\\df@tag")) {
    throw new ParseError2("Multiple \\tag");
  }
  return "\\gdef\\df@tag{\\text{#1}}";
});
defineMacro("\\bmod", "\\mathchoice{\\mskip1mu}{\\mskip1mu}{\\mskip5mu}{\\mskip5mu}\\mathbin{\\rm mod}\\mathchoice{\\mskip1mu}{\\mskip1mu}{\\mskip5mu}{\\mskip5mu}");
defineMacro("\\pod", "\\allowbreak\\mathchoice{\\mkern18mu}{\\mkern8mu}{\\mkern8mu}{\\mkern8mu}(#1)");
defineMacro("\\pmod", "\\pod{{\\rm mod}\\mkern6mu#1}");
defineMacro("\\mod", "\\allowbreak\\mathchoice{\\mkern18mu}{\\mkern12mu}{\\mkern12mu}{\\mkern12mu}{\\rm mod}\\,\\,#1");
defineMacro("\\newline", "\\\\\\relax");
defineMacro("\\TeX", "\\textrm{\\html@mathml{T\\kern-.1667em\\raisebox{-.5ex}{E}\\kern-.125emX}{TeX}}");
var latexRaiseA = makeEm(fontMetricsData["Main-Regular"]["T".charCodeAt(0)][1] - 0.7 * fontMetricsData["Main-Regular"]["A".charCodeAt(0)][1]);
defineMacro("\\LaTeX", "\\textrm{\\html@mathml{" + ("L\\kern-.36em\\raisebox{" + latexRaiseA + "}{\\scriptstyle A}") + "\\kern-.15em\\TeX}{LaTeX}}");
defineMacro("\\KaTeX", "\\textrm{\\html@mathml{" + ("K\\kern-.17em\\raisebox{" + latexRaiseA + "}{\\scriptstyle A}") + "\\kern-.15em\\TeX}{KaTeX}}");
defineMacro("\\hspace", "\\@ifstar\\@hspacer\\@hspace");
defineMacro("\\@hspace", "\\hskip #1\\relax");
defineMacro("\\@hspacer", "\\rule{0pt}{0pt}\\hskip #1\\relax");
defineMacro("\\ordinarycolon", ":");
defineMacro("\\vcentcolon", "\\mathrel{\\mathop\\ordinarycolon}");
defineMacro("\\dblcolon", '\\html@mathml{\\mathrel{\\vcentcolon\\mathrel{\\mkern-.9mu}\\vcentcolon}}{\\mathop{\\char"2237}}');
defineMacro("\\coloneqq", '\\html@mathml{\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}=}}{\\mathop{\\char"2254}}');
defineMacro("\\Coloneqq", '\\html@mathml{\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}=}}{\\mathop{\\char"2237\\char"3d}}');
defineMacro("\\coloneq", '\\html@mathml{\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}\\mathrel{-}}}{\\mathop{\\char"3a\\char"2212}}');
defineMacro("\\Coloneq", '\\html@mathml{\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}\\mathrel{-}}}{\\mathop{\\char"2237\\char"2212}}');
defineMacro("\\eqqcolon", '\\html@mathml{\\mathrel{=\\mathrel{\\mkern-1.2mu}\\vcentcolon}}{\\mathop{\\char"2255}}');
defineMacro("\\Eqqcolon", '\\html@mathml{\\mathrel{=\\mathrel{\\mkern-1.2mu}\\dblcolon}}{\\mathop{\\char"3d\\char"2237}}');
defineMacro("\\eqcolon", '\\html@mathml{\\mathrel{\\mathrel{-}\\mathrel{\\mkern-1.2mu}\\vcentcolon}}{\\mathop{\\char"2239}}');
defineMacro("\\Eqcolon", '\\html@mathml{\\mathrel{\\mathrel{-}\\mathrel{\\mkern-1.2mu}\\dblcolon}}{\\mathop{\\char"2212\\char"2237}}');
defineMacro("\\colonapprox", '\\html@mathml{\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}\\approx}}{\\mathop{\\char"3a\\char"2248}}');
defineMacro("\\Colonapprox", '\\html@mathml{\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}\\approx}}{\\mathop{\\char"2237\\char"2248}}');
defineMacro("\\colonsim", '\\html@mathml{\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}\\sim}}{\\mathop{\\char"3a\\char"223c}}');
defineMacro("\\Colonsim", '\\html@mathml{\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}\\sim}}{\\mathop{\\char"2237\\char"223c}}');
defineMacro("\u2237", "\\dblcolon");
defineMacro("\u2239", "\\eqcolon");
defineMacro("\u2254", "\\coloneqq");
defineMacro("\u2255", "\\eqqcolon");
defineMacro("\u2A74", "\\Coloneqq");
defineMacro("\\ratio", "\\vcentcolon");
defineMacro("\\coloncolon", "\\dblcolon");
defineMacro("\\colonequals", "\\coloneqq");
defineMacro("\\coloncolonequals", "\\Coloneqq");
defineMacro("\\equalscolon", "\\eqqcolon");
defineMacro("\\equalscoloncolon", "\\Eqqcolon");
defineMacro("\\colonminus", "\\coloneq");
defineMacro("\\coloncolonminus", "\\Coloneq");
defineMacro("\\minuscolon", "\\eqcolon");
defineMacro("\\minuscoloncolon", "\\Eqcolon");
defineMacro("\\coloncolonapprox", "\\Colonapprox");
defineMacro("\\coloncolonsim", "\\Colonsim");
defineMacro("\\simcolon", "\\mathrel{\\sim\\mathrel{\\mkern-1.2mu}\\vcentcolon}");
defineMacro("\\simcoloncolon", "\\mathrel{\\sim\\mathrel{\\mkern-1.2mu}\\dblcolon}");
defineMacro("\\approxcolon", "\\mathrel{\\approx\\mathrel{\\mkern-1.2mu}\\vcentcolon}");
defineMacro("\\approxcoloncolon", "\\mathrel{\\approx\\mathrel{\\mkern-1.2mu}\\dblcolon}");
defineMacro("\\notni", "\\html@mathml{\\not\\ni}{\\mathrel{\\char`\u220C}}");
defineMacro("\\limsup", "\\DOTSB\\operatorname*{lim\\,sup}");
defineMacro("\\liminf", "\\DOTSB\\operatorname*{lim\\,inf}");
defineMacro("\\injlim", "\\DOTSB\\operatorname*{inj\\,lim}");
defineMacro("\\projlim", "\\DOTSB\\operatorname*{proj\\,lim}");
defineMacro("\\varlimsup", "\\DOTSB\\operatorname*{\\overline{lim}}");
defineMacro("\\varliminf", "\\DOTSB\\operatorname*{\\underline{lim}}");
defineMacro("\\varinjlim", "\\DOTSB\\operatorname*{\\underrightarrow{lim}}");
defineMacro("\\varprojlim", "\\DOTSB\\operatorname*{\\underleftarrow{lim}}");
defineMacro("\\gvertneqq", "\\html@mathml{\\@gvertneqq}{\u2269}");
defineMacro("\\lvertneqq", "\\html@mathml{\\@lvertneqq}{\u2268}");
defineMacro("\\ngeqq", "\\html@mathml{\\@ngeqq}{\u2271}");
defineMacro("\\ngeqslant", "\\html@mathml{\\@ngeqslant}{\u2271}");
defineMacro("\\nleqq", "\\html@mathml{\\@nleqq}{\u2270}");
defineMacro("\\nleqslant", "\\html@mathml{\\@nleqslant}{\u2270}");
defineMacro("\\nshortmid", "\\html@mathml{\\@nshortmid}{\u2224}");
defineMacro("\\nshortparallel", "\\html@mathml{\\@nshortparallel}{\u2226}");
defineMacro("\\nsubseteqq", "\\html@mathml{\\@nsubseteqq}{\u2288}");
defineMacro("\\nsupseteqq", "\\html@mathml{\\@nsupseteqq}{\u2289}");
defineMacro("\\varsubsetneq", "\\html@mathml{\\@varsubsetneq}{\u228A}");
defineMacro("\\varsubsetneqq", "\\html@mathml{\\@varsubsetneqq}{\u2ACB}");
defineMacro("\\varsupsetneq", "\\html@mathml{\\@varsupsetneq}{\u228B}");
defineMacro("\\varsupsetneqq", "\\html@mathml{\\@varsupsetneqq}{\u2ACC}");
defineMacro("\\imath", "\\html@mathml{\\@imath}{\u0131}");
defineMacro("\\jmath", "\\html@mathml{\\@jmath}{\u0237}");
defineMacro("\\llbracket", "\\html@mathml{\\mathopen{[\\mkern-3.2mu[}}{\\mathopen{\\char`\u27E6}}");
defineMacro("\\rrbracket", "\\html@mathml{\\mathclose{]\\mkern-3.2mu]}}{\\mathclose{\\char`\u27E7}}");
defineMacro("\u27E6", "\\llbracket");
defineMacro("\u27E7", "\\rrbracket");
defineMacro("\\lBrace", "\\html@mathml{\\mathopen{\\{\\mkern-3.2mu[}}{\\mathopen{\\char`\u2983}}");
defineMacro("\\rBrace", "\\html@mathml{\\mathclose{]\\mkern-3.2mu\\}}}{\\mathclose{\\char`\u2984}}");
defineMacro("\u2983", "\\lBrace");
defineMacro("\u2984", "\\rBrace");
defineMacro("\\minuso", "\\mathbin{\\html@mathml{{\\mathrlap{\\mathchoice{\\kern{0.145em}}{\\kern{0.145em}}{\\kern{0.1015em}}{\\kern{0.0725em}}\\circ}{-}}}{\\char`\u29B5}}");
defineMacro("\u29B5", "\\minuso");
defineMacro("\\darr", "\\downarrow");
defineMacro("\\dArr", "\\Downarrow");
defineMacro("\\Darr", "\\Downarrow");
defineMacro("\\lang", "\\langle");
defineMacro("\\rang", "\\rangle");
defineMacro("\\uarr", "\\uparrow");
defineMacro("\\uArr", "\\Uparrow");
defineMacro("\\Uarr", "\\Uparrow");
defineMacro("\\N", "\\mathbb{N}");
defineMacro("\\R", "\\mathbb{R}");
defineMacro("\\Z", "\\mathbb{Z}");
defineMacro("\\alef", "\\aleph");
defineMacro("\\alefsym", "\\aleph");
defineMacro("\\Alpha", "\\mathrm{A}");
defineMacro("\\Beta", "\\mathrm{B}");
defineMacro("\\bull", "\\bullet");
defineMacro("\\Chi", "\\mathrm{X}");
defineMacro("\\clubs", "\\clubsuit");
defineMacro("\\cnums", "\\mathbb{C}");
defineMacro("\\Complex", "\\mathbb{C}");
defineMacro("\\Dagger", "\\ddagger");
defineMacro("\\diamonds", "\\diamondsuit");
defineMacro("\\empty", "\\emptyset");
defineMacro("\\Epsilon", "\\mathrm{E}");
defineMacro("\\Eta", "\\mathrm{H}");
defineMacro("\\exist", "\\exists");
defineMacro("\\harr", "\\leftrightarrow");
defineMacro("\\hArr", "\\Leftrightarrow");
defineMacro("\\Harr", "\\Leftrightarrow");
defineMacro("\\hearts", "\\heartsuit");
defineMacro("\\image", "\\Im");
defineMacro("\\infin", "\\infty");
defineMacro("\\Iota", "\\mathrm{I}");
defineMacro("\\isin", "\\in");
defineMacro("\\Kappa", "\\mathrm{K}");
defineMacro("\\larr", "\\leftarrow");
defineMacro("\\lArr", "\\Leftarrow");
defineMacro("\\Larr", "\\Leftarrow");
defineMacro("\\lrarr", "\\leftrightarrow");
defineMacro("\\lrArr", "\\Leftrightarrow");
defineMacro("\\Lrarr", "\\Leftrightarrow");
defineMacro("\\Mu", "\\mathrm{M}");
defineMacro("\\natnums", "\\mathbb{N}");
defineMacro("\\Nu", "\\mathrm{N}");
defineMacro("\\Omicron", "\\mathrm{O}");
defineMacro("\\plusmn", "\\pm");
defineMacro("\\rarr", "\\rightarrow");
defineMacro("\\rArr", "\\Rightarrow");
defineMacro("\\Rarr", "\\Rightarrow");
defineMacro("\\real", "\\Re");
defineMacro("\\reals", "\\mathbb{R}");
defineMacro("\\Reals", "\\mathbb{R}");
defineMacro("\\Rho", "\\mathrm{P}");
defineMacro("\\sdot", "\\cdot");
defineMacro("\\sect", "\\S");
defineMacro("\\spades", "\\spadesuit");
defineMacro("\\sub", "\\subset");
defineMacro("\\sube", "\\subseteq");
defineMacro("\\supe", "\\supseteq");
defineMacro("\\Tau", "\\mathrm{T}");
defineMacro("\\thetasym", "\\vartheta");
defineMacro("\\weierp", "\\wp");
defineMacro("\\Zeta", "\\mathrm{Z}");
defineMacro("\\argmin", "\\DOTSB\\operatorname*{arg\\,min}");
defineMacro("\\argmax", "\\DOTSB\\operatorname*{arg\\,max}");
defineMacro("\\plim", "\\DOTSB\\mathop{\\operatorname{plim}}\\limits");
defineMacro("\\bra", "\\mathinner{\\langle{#1}|}");
defineMacro("\\ket", "\\mathinner{|{#1}\\rangle}");
defineMacro("\\braket", "\\mathinner{\\langle{#1}\\rangle}");
defineMacro("\\Bra", "\\left\\langle#1\\right|");
defineMacro("\\Ket", "\\left|#1\\right\\rangle");
var braketHelper = (one) => (context) => {
  var left = context.consumeArg().tokens;
  var middle = context.consumeArg().tokens;
  var middleDouble = context.consumeArg().tokens;
  var right = context.consumeArg().tokens;
  var oldMiddle = context.macros.get("|");
  var oldMiddleDouble = context.macros.get("\\|");
  context.macros.beginGroup();
  var midMacro = (double) => (context2) => {
    if (one) {
      context2.macros.set("|", oldMiddle);
      if (middleDouble.length) {
        context2.macros.set("\\|", oldMiddleDouble);
      }
    }
    var doubled = double;
    if (!double && middleDouble.length) {
      var nextToken = context2.future();
      if (nextToken.text === "|") {
        context2.popToken();
        doubled = true;
      }
    }
    return {
      tokens: doubled ? middleDouble : middle,
      numArgs: 0
    };
  };
  context.macros.set("|", midMacro(false));
  if (middleDouble.length) {
    context.macros.set("\\|", midMacro(true));
  }
  var arg = context.consumeArg().tokens;
  var expanded = context.expandTokens([
    ...right,
    ...arg,
    ...left
    // reversed
  ]);
  context.macros.endGroup();
  return {
    tokens: expanded.reverse(),
    numArgs: 0
  };
};
defineMacro("\\bra@ket", braketHelper(false));
defineMacro("\\bra@set", braketHelper(true));
defineMacro("\\Braket", "\\bra@ket{\\left\\langle}{\\,\\middle\\vert\\,}{\\,\\middle\\vert\\,}{\\right\\rangle}");
defineMacro("\\Set", "\\bra@set{\\left\\{\\:}{\\;\\middle\\vert\\;}{\\;\\middle\\Vert\\;}{\\:\\right\\}}");
defineMacro("\\set", "\\bra@set{\\{\\,}{\\mid}{}{\\,\\}}");
defineMacro("\\angln", "{\\angl n}");
defineMacro("\\blue", "\\textcolor{##6495ed}{#1}");
defineMacro("\\orange", "\\textcolor{##ffa500}{#1}");
defineMacro("\\pink", "\\textcolor{##ff00af}{#1}");
defineMacro("\\red", "\\textcolor{##df0030}{#1}");
defineMacro("\\green", "\\textcolor{##28ae7b}{#1}");
defineMacro("\\gray", "\\textcolor{gray}{#1}");
defineMacro("\\purple", "\\textcolor{##9d38bd}{#1}");
defineMacro("\\blueA", "\\textcolor{##ccfaff}{#1}");
defineMacro("\\blueB", "\\textcolor{##80f6ff}{#1}");
defineMacro("\\blueC", "\\textcolor{##63d9ea}{#1}");
defineMacro("\\blueD", "\\textcolor{##11accd}{#1}");
defineMacro("\\blueE", "\\textcolor{##0c7f99}{#1}");
defineMacro("\\tealA", "\\textcolor{##94fff5}{#1}");
defineMacro("\\tealB", "\\textcolor{##26edd5}{#1}");
defineMacro("\\tealC", "\\textcolor{##01d1c1}{#1}");
defineMacro("\\tealD", "\\textcolor{##01a995}{#1}");
defineMacro("\\tealE", "\\textcolor{##208170}{#1}");
defineMacro("\\greenA", "\\textcolor{##b6ffb0}{#1}");
defineMacro("\\greenB", "\\textcolor{##8af281}{#1}");
defineMacro("\\greenC", "\\textcolor{##74cf70}{#1}");
defineMacro("\\greenD", "\\textcolor{##1fab54}{#1}");
defineMacro("\\greenE", "\\textcolor{##0d923f}{#1}");
defineMacro("\\goldA", "\\textcolor{##ffd0a9}{#1}");
defineMacro("\\goldB", "\\textcolor{##ffbb71}{#1}");
defineMacro("\\goldC", "\\textcolor{##ff9c39}{#1}");
defineMacro("\\goldD", "\\textcolor{##e07d10}{#1}");
defineMacro("\\goldE", "\\textcolor{##a75a05}{#1}");
defineMacro("\\redA", "\\textcolor{##fca9a9}{#1}");
defineMacro("\\redB", "\\textcolor{##ff8482}{#1}");
defineMacro("\\redC", "\\textcolor{##f9685d}{#1}");
defineMacro("\\redD", "\\textcolor{##e84d39}{#1}");
defineMacro("\\redE", "\\textcolor{##bc2612}{#1}");
defineMacro("\\maroonA", "\\textcolor{##ffbde0}{#1}");
defineMacro("\\maroonB", "\\textcolor{##ff92c6}{#1}");
defineMacro("\\maroonC", "\\textcolor{##ed5fa6}{#1}");
defineMacro("\\maroonD", "\\textcolor{##ca337c}{#1}");
defineMacro("\\maroonE", "\\textcolor{##9e034e}{#1}");
defineMacro("\\purpleA", "\\textcolor{##ddd7ff}{#1}");
defineMacro("\\purpleB", "\\textcolor{##c6b9fc}{#1}");
defineMacro("\\purpleC", "\\textcolor{##aa87ff}{#1}");
defineMacro("\\purpleD", "\\textcolor{##7854ab}{#1}");
defineMacro("\\purpleE", "\\textcolor{##543b78}{#1}");
defineMacro("\\mintA", "\\textcolor{##f5f9e8}{#1}");
defineMacro("\\mintB", "\\textcolor{##edf2df}{#1}");
defineMacro("\\mintC", "\\textcolor{##e0e5cc}{#1}");
defineMacro("\\grayA", "\\textcolor{##f6f7f7}{#1}");
defineMacro("\\grayB", "\\textcolor{##f0f1f2}{#1}");
defineMacro("\\grayC", "\\textcolor{##e3e5e6}{#1}");
defineMacro("\\grayD", "\\textcolor{##d6d8da}{#1}");
defineMacro("\\grayE", "\\textcolor{##babec2}{#1}");
defineMacro("\\grayF", "\\textcolor{##888d93}{#1}");
defineMacro("\\grayG", "\\textcolor{##626569}{#1}");
defineMacro("\\grayH", "\\textcolor{##3b3e40}{#1}");
defineMacro("\\grayI", "\\textcolor{##21242c}{#1}");
defineMacro("\\kaBlue", "\\textcolor{##314453}{#1}");
defineMacro("\\kaGreen", "\\textcolor{##71B307}{#1}");
var implicitCommands = {
  "^": true,
  // Parser.js
  "_": true,
  // Parser.js
  "\\limits": true,
  // Parser.js
  "\\nolimits": true
  // Parser.js
};
var MacroExpander = class {
  constructor(input2, settings, mode) {
    this.settings = void 0;
    this.expansionCount = void 0;
    this.lexer = void 0;
    this.macros = void 0;
    this.stack = void 0;
    this.mode = void 0;
    this.settings = settings;
    this.expansionCount = 0;
    this.feed(input2);
    this.macros = new Namespace2(macros, settings.macros);
    this.mode = mode;
    this.stack = [];
  }
  /**
   * Feed a new input string to the same MacroExpander
   * (with existing macros etc.).
   */
  feed(input2) {
    this.lexer = new Lexer2(input2, this.settings);
  }
  /**
   * Switches between "text" and "math" modes.
   */
  switchMode(newMode) {
    this.mode = newMode;
  }
  /**
   * Start a new group nesting within all namespaces.
   */
  beginGroup() {
    this.macros.beginGroup();
  }
  /**
   * End current group nesting within all namespaces.
   */
  endGroup() {
    this.macros.endGroup();
  }
  /**
   * Ends all currently nested groups (if any), restoring values before the
   * groups began.  Useful in case of an error in the middle of parsing.
   */
  endGroups() {
    this.macros.endGroups();
  }
  /**
   * Returns the topmost token on the stack, without expanding it.
   * Similar in behavior to TeX's `\futurelet`.
   */
  future() {
    if (this.stack.length === 0) {
      this.pushToken(this.lexer.lex());
    }
    return this.stack[this.stack.length - 1];
  }
  /**
   * Remove and return the next unexpanded token.
   */
  popToken() {
    this.future();
    return this.stack.pop();
  }
  /**
   * Add a given token to the token stack.  In particular, this get be used
   * to put back a token returned from one of the other methods.
   */
  pushToken(token) {
    this.stack.push(token);
  }
  /**
   * Append an array of tokens to the token stack.
   */
  pushTokens(tokens) {
    this.stack.push(...tokens);
  }
  /**
   * Find an macro argument without expanding tokens and append the array of
   * tokens to the token stack. Uses Token as a container for the result.
   */
  scanArgument(isOptional) {
    var start;
    var end;
    var tokens;
    if (isOptional) {
      this.consumeSpaces();
      if (this.future().text !== "[") {
        return null;
      }
      start = this.popToken();
      ({
        tokens,
        end
      } = this.consumeArg(["]"]));
    } else {
      ({
        tokens,
        start,
        end
      } = this.consumeArg());
    }
    this.pushToken(new Token2("EOF", end.loc));
    this.pushTokens(tokens);
    return start.range(end, "");
  }
  /**
   * Consume all following space tokens, without expansion.
   */
  consumeSpaces() {
    for (; ; ) {
      var token = this.future();
      if (token.text === " ") {
        this.stack.pop();
      } else {
        break;
      }
    }
  }
  /**
   * Consume an argument from the token stream, and return the resulting array
   * of tokens and start/end token.
   */
  consumeArg(delims) {
    var tokens = [];
    var isDelimited = delims && delims.length > 0;
    if (!isDelimited) {
      this.consumeSpaces();
    }
    var start = this.future();
    var tok;
    var depth = 0;
    var match2 = 0;
    do {
      tok = this.popToken();
      tokens.push(tok);
      if (tok.text === "{") {
        ++depth;
      } else if (tok.text === "}") {
        --depth;
        if (depth === -1) {
          throw new ParseError2("Extra }", tok);
        }
      } else if (tok.text === "EOF") {
        throw new ParseError2("Unexpected end of input in a macro argument, expected '" + (delims && isDelimited ? delims[match2] : "}") + "'", tok);
      }
      if (delims && isDelimited) {
        if ((depth === 0 || depth === 1 && delims[match2] === "{") && tok.text === delims[match2]) {
          ++match2;
          if (match2 === delims.length) {
            tokens.splice(-match2, match2);
            break;
          }
        } else {
          match2 = 0;
        }
      }
    } while (depth !== 0 || isDelimited);
    if (start.text === "{" && tokens[tokens.length - 1].text === "}") {
      tokens.pop();
      tokens.shift();
    }
    tokens.reverse();
    return {
      tokens,
      start,
      end: tok
    };
  }
  /**
   * Consume the specified number of (delimited) arguments from the token
   * stream and return the resulting array of arguments.
   */
  consumeArgs(numArgs, delimiters2) {
    if (delimiters2) {
      if (delimiters2.length !== numArgs + 1) {
        throw new ParseError2("The length of delimiters doesn't match the number of args!");
      }
      var delims = delimiters2[0];
      for (var i = 0; i < delims.length; i++) {
        var tok = this.popToken();
        if (delims[i] !== tok.text) {
          throw new ParseError2("Use of the macro doesn't match its definition", tok);
        }
      }
    }
    var args = [];
    for (var _i = 0; _i < numArgs; _i++) {
      args.push(this.consumeArg(delimiters2 && delimiters2[_i + 1]).tokens);
    }
    return args;
  }
  /**
   * Increment `expansionCount` by the specified amount.
   * Throw an error if it exceeds `maxExpand`.
   */
  countExpansion(amount) {
    this.expansionCount += amount;
    if (this.expansionCount > this.settings.maxExpand) {
      throw new ParseError2("Too many expansions: infinite loop or need to increase maxExpand setting");
    }
  }
  /**
   * Expand the next token only once if possible.
   *
   * If the token is expanded, the resulting tokens will be pushed onto
   * the stack in reverse order, and the number of such tokens will be
   * returned.  This number might be zero or positive.
   *
   * If not, the return value is `false`, and the next token remains at the
   * top of the stack.
   *
   * In either case, the next token will be on the top of the stack,
   * or the stack will be empty (in case of empty expansion
   * and no other tokens).
   *
   * Used to implement `expandAfterFuture` and `expandNextToken`.
   *
   * If expandableOnly, only expandable tokens are expanded and
   * an undefined control sequence results in an error.
   */
  expandOnce(expandableOnly) {
    var topToken = this.popToken();
    var name = topToken.text;
    var expansion = !topToken.noexpand ? this._getExpansion(name) : null;
    if (expansion == null || expandableOnly && expansion.unexpandable) {
      if (expandableOnly && expansion == null && name[0] === "\\" && !this.isDefined(name)) {
        throw new ParseError2("Undefined control sequence: " + name);
      }
      this.pushToken(topToken);
      return false;
    }
    this.countExpansion(1);
    var tokens = expansion.tokens;
    var args = this.consumeArgs(expansion.numArgs, expansion.delimiters);
    if (expansion.numArgs) {
      tokens = tokens.slice();
      for (var i = tokens.length - 1; i >= 0; --i) {
        var tok = tokens[i];
        if (tok.text === "#") {
          if (i === 0) {
            throw new ParseError2("Incomplete placeholder at end of macro body", tok);
          }
          tok = tokens[--i];
          if (tok.text === "#") {
            tokens.splice(i + 1, 1);
          } else if (/^[1-9]$/.test(tok.text)) {
            tokens.splice(i, 2, ...args[+tok.text - 1]);
          } else {
            throw new ParseError2("Not a valid argument number", tok);
          }
        }
      }
    }
    this.pushTokens(tokens);
    return tokens.length;
  }
  /**
   * Expand the next token only once (if possible), and return the resulting
   * top token on the stack (without removing anything from the stack).
   * Similar in behavior to TeX's `\expandafter\futurelet`.
   * Equivalent to expandOnce() followed by future().
   */
  expandAfterFuture() {
    this.expandOnce();
    return this.future();
  }
  /**
   * Recursively expand first token, then return first non-expandable token.
   */
  expandNextToken() {
    for (; ; ) {
      if (this.expandOnce() === false) {
        var token = this.stack.pop();
        if (token.treatAsRelax) {
          token.text = "\\relax";
        }
        return token;
      }
    }
    throw new Error();
  }
  /**
   * Fully expand the given macro name and return the resulting list of
   * tokens, or return `undefined` if no such macro is defined.
   */
  expandMacro(name) {
    return this.macros.has(name) ? this.expandTokens([new Token2(name)]) : void 0;
  }
  /**
   * Fully expand the given token stream and return the resulting list of
   * tokens.  Note that the input tokens are in reverse order, but the
   * output tokens are in forward order.
   */
  expandTokens(tokens) {
    var output = [];
    var oldStackLength = this.stack.length;
    this.pushTokens(tokens);
    while (this.stack.length > oldStackLength) {
      if (this.expandOnce(true) === false) {
        var token = this.stack.pop();
        if (token.treatAsRelax) {
          token.noexpand = false;
          token.treatAsRelax = false;
        }
        output.push(token);
      }
    }
    this.countExpansion(output.length);
    return output;
  }
  /**
   * Fully expand the given macro name and return the result as a string,
   * or return `undefined` if no such macro is defined.
   */
  expandMacroAsText(name) {
    var tokens = this.expandMacro(name);
    if (tokens) {
      return tokens.map((token) => token.text).join("");
    } else {
      return tokens;
    }
  }
  /**
   * Returns the expanded macro as a reversed array of tokens and a macro
   * argument count.  Or returns `null` if no such macro.
   */
  _getExpansion(name) {
    var definition = this.macros.get(name);
    if (definition == null) {
      return definition;
    }
    if (name.length === 1) {
      var catcode = this.lexer.catcodes[name];
      if (catcode != null && catcode !== 13) {
        return;
      }
    }
    var expansion = typeof definition === "function" ? definition(this) : definition;
    if (typeof expansion === "string") {
      var numArgs = 0;
      if (expansion.indexOf("#") !== -1) {
        var stripped = expansion.replace(/##/g, "");
        while (stripped.indexOf("#" + (numArgs + 1)) !== -1) {
          ++numArgs;
        }
      }
      var bodyLexer = new Lexer2(expansion, this.settings);
      var tokens = [];
      var tok = bodyLexer.lex();
      while (tok.text !== "EOF") {
        tokens.push(tok);
        tok = bodyLexer.lex();
      }
      tokens.reverse();
      var expanded = {
        tokens,
        numArgs
      };
      return expanded;
    }
    return expansion;
  }
  /**
   * Determine whether a command is currently "defined" (has some
   * functionality), meaning that it's a macro (in the current group),
   * a function, a symbol, or one of the special commands listed in
   * `implicitCommands`.
   */
  isDefined(name) {
    return this.macros.has(name) || functions.hasOwnProperty(name) || symbols.math.hasOwnProperty(name) || symbols.text.hasOwnProperty(name) || implicitCommands.hasOwnProperty(name);
  }
  /**
   * Determine whether a command is expandable.
   */
  isExpandable(name) {
    var macro = this.macros.get(name);
    return macro != null ? typeof macro === "string" || typeof macro === "function" || !macro.unexpandable : functions.hasOwnProperty(name) && !functions[name].primitive;
  }
};
var unicodeSubRegEx = /^[₊₋₌₍₎₀₁₂₃₄₅₆₇₈₉ₐₑₕᵢⱼₖₗₘₙₒₚᵣₛₜᵤᵥₓᵦᵧᵨᵩᵪ]/;
var uSubsAndSups = Object.freeze({
  "\u208A": "+",
  "\u208B": "-",
  "\u208C": "=",
  "\u208D": "(",
  "\u208E": ")",
  "\u2080": "0",
  "\u2081": "1",
  "\u2082": "2",
  "\u2083": "3",
  "\u2084": "4",
  "\u2085": "5",
  "\u2086": "6",
  "\u2087": "7",
  "\u2088": "8",
  "\u2089": "9",
  "\u2090": "a",
  "\u2091": "e",
  "\u2095": "h",
  "\u1D62": "i",
  "\u2C7C": "j",
  "\u2096": "k",
  "\u2097": "l",
  "\u2098": "m",
  "\u2099": "n",
  "\u2092": "o",
  "\u209A": "p",
  "\u1D63": "r",
  "\u209B": "s",
  "\u209C": "t",
  "\u1D64": "u",
  "\u1D65": "v",
  "\u2093": "x",
  "\u1D66": "\u03B2",
  "\u1D67": "\u03B3",
  "\u1D68": "\u03C1",
  "\u1D69": "\u03D5",
  "\u1D6A": "\u03C7",
  "\u207A": "+",
  "\u207B": "-",
  "\u207C": "=",
  "\u207D": "(",
  "\u207E": ")",
  "\u2070": "0",
  "\xB9": "1",
  "\xB2": "2",
  "\xB3": "3",
  "\u2074": "4",
  "\u2075": "5",
  "\u2076": "6",
  "\u2077": "7",
  "\u2078": "8",
  "\u2079": "9",
  "\u1D2C": "A",
  "\u1D2E": "B",
  "\u1D30": "D",
  "\u1D31": "E",
  "\u1D33": "G",
  "\u1D34": "H",
  "\u1D35": "I",
  "\u1D36": "J",
  "\u1D37": "K",
  "\u1D38": "L",
  "\u1D39": "M",
  "\u1D3A": "N",
  "\u1D3C": "O",
  "\u1D3E": "P",
  "\u1D3F": "R",
  "\u1D40": "T",
  "\u1D41": "U",
  "\u2C7D": "V",
  "\u1D42": "W",
  "\u1D43": "a",
  "\u1D47": "b",
  "\u1D9C": "c",
  "\u1D48": "d",
  "\u1D49": "e",
  "\u1DA0": "f",
  "\u1D4D": "g",
  "\u02B0": "h",
  "\u2071": "i",
  "\u02B2": "j",
  "\u1D4F": "k",
  "\u02E1": "l",
  "\u1D50": "m",
  "\u207F": "n",
  "\u1D52": "o",
  "\u1D56": "p",
  "\u02B3": "r",
  "\u02E2": "s",
  "\u1D57": "t",
  "\u1D58": "u",
  "\u1D5B": "v",
  "\u02B7": "w",
  "\u02E3": "x",
  "\u02B8": "y",
  "\u1DBB": "z",
  "\u1D5D": "\u03B2",
  "\u1D5E": "\u03B3",
  "\u1D5F": "\u03B4",
  "\u1D60": "\u03D5",
  "\u1D61": "\u03C7",
  "\u1DBF": "\u03B8"
});
var unicodeAccents = {
  "\u0301": {
    "text": "\\'",
    "math": "\\acute"
  },
  "\u0300": {
    "text": "\\`",
    "math": "\\grave"
  },
  "\u0308": {
    "text": '\\"',
    "math": "\\ddot"
  },
  "\u0303": {
    "text": "\\~",
    "math": "\\tilde"
  },
  "\u0304": {
    "text": "\\=",
    "math": "\\bar"
  },
  "\u0306": {
    "text": "\\u",
    "math": "\\breve"
  },
  "\u030C": {
    "text": "\\v",
    "math": "\\check"
  },
  "\u0302": {
    "text": "\\^",
    "math": "\\hat"
  },
  "\u0307": {
    "text": "\\.",
    "math": "\\dot"
  },
  "\u030A": {
    "text": "\\r",
    "math": "\\mathring"
  },
  "\u030B": {
    "text": "\\H"
  },
  "\u0327": {
    "text": "\\c"
  }
};
var unicodeSymbols = {
  "\xE1": "a\u0301",
  "\xE0": "a\u0300",
  "\xE4": "a\u0308",
  "\u01DF": "a\u0308\u0304",
  "\xE3": "a\u0303",
  "\u0101": "a\u0304",
  "\u0103": "a\u0306",
  "\u1EAF": "a\u0306\u0301",
  "\u1EB1": "a\u0306\u0300",
  "\u1EB5": "a\u0306\u0303",
  "\u01CE": "a\u030C",
  "\xE2": "a\u0302",
  "\u1EA5": "a\u0302\u0301",
  "\u1EA7": "a\u0302\u0300",
  "\u1EAB": "a\u0302\u0303",
  "\u0227": "a\u0307",
  "\u01E1": "a\u0307\u0304",
  "\xE5": "a\u030A",
  "\u01FB": "a\u030A\u0301",
  "\u1E03": "b\u0307",
  "\u0107": "c\u0301",
  "\u1E09": "c\u0327\u0301",
  "\u010D": "c\u030C",
  "\u0109": "c\u0302",
  "\u010B": "c\u0307",
  "\xE7": "c\u0327",
  "\u010F": "d\u030C",
  "\u1E0B": "d\u0307",
  "\u1E11": "d\u0327",
  "\xE9": "e\u0301",
  "\xE8": "e\u0300",
  "\xEB": "e\u0308",
  "\u1EBD": "e\u0303",
  "\u0113": "e\u0304",
  "\u1E17": "e\u0304\u0301",
  "\u1E15": "e\u0304\u0300",
  "\u0115": "e\u0306",
  "\u1E1D": "e\u0327\u0306",
  "\u011B": "e\u030C",
  "\xEA": "e\u0302",
  "\u1EBF": "e\u0302\u0301",
  "\u1EC1": "e\u0302\u0300",
  "\u1EC5": "e\u0302\u0303",
  "\u0117": "e\u0307",
  "\u0229": "e\u0327",
  "\u1E1F": "f\u0307",
  "\u01F5": "g\u0301",
  "\u1E21": "g\u0304",
  "\u011F": "g\u0306",
  "\u01E7": "g\u030C",
  "\u011D": "g\u0302",
  "\u0121": "g\u0307",
  "\u0123": "g\u0327",
  "\u1E27": "h\u0308",
  "\u021F": "h\u030C",
  "\u0125": "h\u0302",
  "\u1E23": "h\u0307",
  "\u1E29": "h\u0327",
  "\xED": "i\u0301",
  "\xEC": "i\u0300",
  "\xEF": "i\u0308",
  "\u1E2F": "i\u0308\u0301",
  "\u0129": "i\u0303",
  "\u012B": "i\u0304",
  "\u012D": "i\u0306",
  "\u01D0": "i\u030C",
  "\xEE": "i\u0302",
  "\u01F0": "j\u030C",
  "\u0135": "j\u0302",
  "\u1E31": "k\u0301",
  "\u01E9": "k\u030C",
  "\u0137": "k\u0327",
  "\u013A": "l\u0301",
  "\u013E": "l\u030C",
  "\u013C": "l\u0327",
  "\u1E3F": "m\u0301",
  "\u1E41": "m\u0307",
  "\u0144": "n\u0301",
  "\u01F9": "n\u0300",
  "\xF1": "n\u0303",
  "\u0148": "n\u030C",
  "\u1E45": "n\u0307",
  "\u0146": "n\u0327",
  "\xF3": "o\u0301",
  "\xF2": "o\u0300",
  "\xF6": "o\u0308",
  "\u022B": "o\u0308\u0304",
  "\xF5": "o\u0303",
  "\u1E4D": "o\u0303\u0301",
  "\u1E4F": "o\u0303\u0308",
  "\u022D": "o\u0303\u0304",
  "\u014D": "o\u0304",
  "\u1E53": "o\u0304\u0301",
  "\u1E51": "o\u0304\u0300",
  "\u014F": "o\u0306",
  "\u01D2": "o\u030C",
  "\xF4": "o\u0302",
  "\u1ED1": "o\u0302\u0301",
  "\u1ED3": "o\u0302\u0300",
  "\u1ED7": "o\u0302\u0303",
  "\u022F": "o\u0307",
  "\u0231": "o\u0307\u0304",
  "\u0151": "o\u030B",
  "\u1E55": "p\u0301",
  "\u1E57": "p\u0307",
  "\u0155": "r\u0301",
  "\u0159": "r\u030C",
  "\u1E59": "r\u0307",
  "\u0157": "r\u0327",
  "\u015B": "s\u0301",
  "\u1E65": "s\u0301\u0307",
  "\u0161": "s\u030C",
  "\u1E67": "s\u030C\u0307",
  "\u015D": "s\u0302",
  "\u1E61": "s\u0307",
  "\u015F": "s\u0327",
  "\u1E97": "t\u0308",
  "\u0165": "t\u030C",
  "\u1E6B": "t\u0307",
  "\u0163": "t\u0327",
  "\xFA": "u\u0301",
  "\xF9": "u\u0300",
  "\xFC": "u\u0308",
  "\u01D8": "u\u0308\u0301",
  "\u01DC": "u\u0308\u0300",
  "\u01D6": "u\u0308\u0304",
  "\u01DA": "u\u0308\u030C",
  "\u0169": "u\u0303",
  "\u1E79": "u\u0303\u0301",
  "\u016B": "u\u0304",
  "\u1E7B": "u\u0304\u0308",
  "\u016D": "u\u0306",
  "\u01D4": "u\u030C",
  "\xFB": "u\u0302",
  "\u016F": "u\u030A",
  "\u0171": "u\u030B",
  "\u1E7D": "v\u0303",
  "\u1E83": "w\u0301",
  "\u1E81": "w\u0300",
  "\u1E85": "w\u0308",
  "\u0175": "w\u0302",
  "\u1E87": "w\u0307",
  "\u1E98": "w\u030A",
  "\u1E8D": "x\u0308",
  "\u1E8B": "x\u0307",
  "\xFD": "y\u0301",
  "\u1EF3": "y\u0300",
  "\xFF": "y\u0308",
  "\u1EF9": "y\u0303",
  "\u0233": "y\u0304",
  "\u0177": "y\u0302",
  "\u1E8F": "y\u0307",
  "\u1E99": "y\u030A",
  "\u017A": "z\u0301",
  "\u017E": "z\u030C",
  "\u1E91": "z\u0302",
  "\u017C": "z\u0307",
  "\xC1": "A\u0301",
  "\xC0": "A\u0300",
  "\xC4": "A\u0308",
  "\u01DE": "A\u0308\u0304",
  "\xC3": "A\u0303",
  "\u0100": "A\u0304",
  "\u0102": "A\u0306",
  "\u1EAE": "A\u0306\u0301",
  "\u1EB0": "A\u0306\u0300",
  "\u1EB4": "A\u0306\u0303",
  "\u01CD": "A\u030C",
  "\xC2": "A\u0302",
  "\u1EA4": "A\u0302\u0301",
  "\u1EA6": "A\u0302\u0300",
  "\u1EAA": "A\u0302\u0303",
  "\u0226": "A\u0307",
  "\u01E0": "A\u0307\u0304",
  "\xC5": "A\u030A",
  "\u01FA": "A\u030A\u0301",
  "\u1E02": "B\u0307",
  "\u0106": "C\u0301",
  "\u1E08": "C\u0327\u0301",
  "\u010C": "C\u030C",
  "\u0108": "C\u0302",
  "\u010A": "C\u0307",
  "\xC7": "C\u0327",
  "\u010E": "D\u030C",
  "\u1E0A": "D\u0307",
  "\u1E10": "D\u0327",
  "\xC9": "E\u0301",
  "\xC8": "E\u0300",
  "\xCB": "E\u0308",
  "\u1EBC": "E\u0303",
  "\u0112": "E\u0304",
  "\u1E16": "E\u0304\u0301",
  "\u1E14": "E\u0304\u0300",
  "\u0114": "E\u0306",
  "\u1E1C": "E\u0327\u0306",
  "\u011A": "E\u030C",
  "\xCA": "E\u0302",
  "\u1EBE": "E\u0302\u0301",
  "\u1EC0": "E\u0302\u0300",
  "\u1EC4": "E\u0302\u0303",
  "\u0116": "E\u0307",
  "\u0228": "E\u0327",
  "\u1E1E": "F\u0307",
  "\u01F4": "G\u0301",
  "\u1E20": "G\u0304",
  "\u011E": "G\u0306",
  "\u01E6": "G\u030C",
  "\u011C": "G\u0302",
  "\u0120": "G\u0307",
  "\u0122": "G\u0327",
  "\u1E26": "H\u0308",
  "\u021E": "H\u030C",
  "\u0124": "H\u0302",
  "\u1E22": "H\u0307",
  "\u1E28": "H\u0327",
  "\xCD": "I\u0301",
  "\xCC": "I\u0300",
  "\xCF": "I\u0308",
  "\u1E2E": "I\u0308\u0301",
  "\u0128": "I\u0303",
  "\u012A": "I\u0304",
  "\u012C": "I\u0306",
  "\u01CF": "I\u030C",
  "\xCE": "I\u0302",
  "\u0130": "I\u0307",
  "\u0134": "J\u0302",
  "\u1E30": "K\u0301",
  "\u01E8": "K\u030C",
  "\u0136": "K\u0327",
  "\u0139": "L\u0301",
  "\u013D": "L\u030C",
  "\u013B": "L\u0327",
  "\u1E3E": "M\u0301",
  "\u1E40": "M\u0307",
  "\u0143": "N\u0301",
  "\u01F8": "N\u0300",
  "\xD1": "N\u0303",
  "\u0147": "N\u030C",
  "\u1E44": "N\u0307",
  "\u0145": "N\u0327",
  "\xD3": "O\u0301",
  "\xD2": "O\u0300",
  "\xD6": "O\u0308",
  "\u022A": "O\u0308\u0304",
  "\xD5": "O\u0303",
  "\u1E4C": "O\u0303\u0301",
  "\u1E4E": "O\u0303\u0308",
  "\u022C": "O\u0303\u0304",
  "\u014C": "O\u0304",
  "\u1E52": "O\u0304\u0301",
  "\u1E50": "O\u0304\u0300",
  "\u014E": "O\u0306",
  "\u01D1": "O\u030C",
  "\xD4": "O\u0302",
  "\u1ED0": "O\u0302\u0301",
  "\u1ED2": "O\u0302\u0300",
  "\u1ED6": "O\u0302\u0303",
  "\u022E": "O\u0307",
  "\u0230": "O\u0307\u0304",
  "\u0150": "O\u030B",
  "\u1E54": "P\u0301",
  "\u1E56": "P\u0307",
  "\u0154": "R\u0301",
  "\u0158": "R\u030C",
  "\u1E58": "R\u0307",
  "\u0156": "R\u0327",
  "\u015A": "S\u0301",
  "\u1E64": "S\u0301\u0307",
  "\u0160": "S\u030C",
  "\u1E66": "S\u030C\u0307",
  "\u015C": "S\u0302",
  "\u1E60": "S\u0307",
  "\u015E": "S\u0327",
  "\u0164": "T\u030C",
  "\u1E6A": "T\u0307",
  "\u0162": "T\u0327",
  "\xDA": "U\u0301",
  "\xD9": "U\u0300",
  "\xDC": "U\u0308",
  "\u01D7": "U\u0308\u0301",
  "\u01DB": "U\u0308\u0300",
  "\u01D5": "U\u0308\u0304",
  "\u01D9": "U\u0308\u030C",
  "\u0168": "U\u0303",
  "\u1E78": "U\u0303\u0301",
  "\u016A": "U\u0304",
  "\u1E7A": "U\u0304\u0308",
  "\u016C": "U\u0306",
  "\u01D3": "U\u030C",
  "\xDB": "U\u0302",
  "\u016E": "U\u030A",
  "\u0170": "U\u030B",
  "\u1E7C": "V\u0303",
  "\u1E82": "W\u0301",
  "\u1E80": "W\u0300",
  "\u1E84": "W\u0308",
  "\u0174": "W\u0302",
  "\u1E86": "W\u0307",
  "\u1E8C": "X\u0308",
  "\u1E8A": "X\u0307",
  "\xDD": "Y\u0301",
  "\u1EF2": "Y\u0300",
  "\u0178": "Y\u0308",
  "\u1EF8": "Y\u0303",
  "\u0232": "Y\u0304",
  "\u0176": "Y\u0302",
  "\u1E8E": "Y\u0307",
  "\u0179": "Z\u0301",
  "\u017D": "Z\u030C",
  "\u1E90": "Z\u0302",
  "\u017B": "Z\u0307",
  "\u03AC": "\u03B1\u0301",
  "\u1F70": "\u03B1\u0300",
  "\u1FB1": "\u03B1\u0304",
  "\u1FB0": "\u03B1\u0306",
  "\u03AD": "\u03B5\u0301",
  "\u1F72": "\u03B5\u0300",
  "\u03AE": "\u03B7\u0301",
  "\u1F74": "\u03B7\u0300",
  "\u03AF": "\u03B9\u0301",
  "\u1F76": "\u03B9\u0300",
  "\u03CA": "\u03B9\u0308",
  "\u0390": "\u03B9\u0308\u0301",
  "\u1FD2": "\u03B9\u0308\u0300",
  "\u1FD1": "\u03B9\u0304",
  "\u1FD0": "\u03B9\u0306",
  "\u03CC": "\u03BF\u0301",
  "\u1F78": "\u03BF\u0300",
  "\u03CD": "\u03C5\u0301",
  "\u1F7A": "\u03C5\u0300",
  "\u03CB": "\u03C5\u0308",
  "\u03B0": "\u03C5\u0308\u0301",
  "\u1FE2": "\u03C5\u0308\u0300",
  "\u1FE1": "\u03C5\u0304",
  "\u1FE0": "\u03C5\u0306",
  "\u03CE": "\u03C9\u0301",
  "\u1F7C": "\u03C9\u0300",
  "\u038E": "\u03A5\u0301",
  "\u1FEA": "\u03A5\u0300",
  "\u03AB": "\u03A5\u0308",
  "\u1FE9": "\u03A5\u0304",
  "\u1FE8": "\u03A5\u0306",
  "\u038F": "\u03A9\u0301",
  "\u1FFA": "\u03A9\u0300"
};
var Parser3 = class _Parser {
  constructor(input2, settings) {
    this.mode = void 0;
    this.gullet = void 0;
    this.settings = void 0;
    this.leftrightDepth = void 0;
    this.nextToken = void 0;
    this.mode = "math";
    this.gullet = new MacroExpander(input2, settings, this.mode);
    this.settings = settings;
    this.leftrightDepth = 0;
  }
  /**
   * Checks a result to make sure it has the right type, and throws an
   * appropriate error otherwise.
   */
  expect(text3, consume) {
    if (consume === void 0) {
      consume = true;
    }
    if (this.fetch().text !== text3) {
      throw new ParseError2("Expected '" + text3 + "', got '" + this.fetch().text + "'", this.fetch());
    }
    if (consume) {
      this.consume();
    }
  }
  /**
   * Discards the current lookahead token, considering it consumed.
   */
  consume() {
    this.nextToken = null;
  }
  /**
   * Return the current lookahead token, or if there isn't one (at the
   * beginning, or if the previous lookahead token was consume()d),
   * fetch the next token as the new lookahead token and return it.
   */
  fetch() {
    if (this.nextToken == null) {
      this.nextToken = this.gullet.expandNextToken();
    }
    return this.nextToken;
  }
  /**
   * Switches between "text" and "math" modes.
   */
  switchMode(newMode) {
    this.mode = newMode;
    this.gullet.switchMode(newMode);
  }
  /**
   * Main parsing function, which parses an entire input.
   */
  parse() {
    if (!this.settings.globalGroup) {
      this.gullet.beginGroup();
    }
    if (this.settings.colorIsTextColor) {
      this.gullet.macros.set("\\color", "\\textcolor");
    }
    try {
      var parse3 = this.parseExpression(false);
      this.expect("EOF");
      if (!this.settings.globalGroup) {
        this.gullet.endGroup();
      }
      return parse3;
    } finally {
      this.gullet.endGroups();
    }
  }
  /**
   * Fully parse a separate sequence of tokens as a separate job.
   * Tokens should be specified in reverse order, as in a MacroDefinition.
   */
  subparse(tokens) {
    var oldToken = this.nextToken;
    this.consume();
    this.gullet.pushToken(new Token2("}"));
    this.gullet.pushTokens(tokens);
    var parse3 = this.parseExpression(false);
    this.expect("}");
    this.nextToken = oldToken;
    return parse3;
  }
  /**
   * Parses an "expression", which is a list of atoms.
   *
   * `breakOnInfix`: Should the parsing stop when we hit infix nodes? This
   *                 happens when functions have higher precedence han infix
   *                 nodes in implicit parses.
   *
   * `breakOnTokenText`: The text of the token that the expression should end
   *                     with, or `null` if something else should end the
   *                     expression.
   */
  parseExpression(breakOnInfix, breakOnTokenText) {
    var body = [];
    while (true) {
      if (this.mode === "math") {
        this.consumeSpaces();
      }
      var lex = this.fetch();
      if (_Parser.endOfExpression.indexOf(lex.text) !== -1) {
        break;
      }
      if (breakOnTokenText && lex.text === breakOnTokenText) {
        break;
      }
      if (breakOnInfix && functions[lex.text] && functions[lex.text].infix) {
        break;
      }
      var atom = this.parseAtom(breakOnTokenText);
      if (!atom) {
        break;
      } else if (atom.type === "internal") {
        continue;
      }
      body.push(atom);
    }
    if (this.mode === "text") {
      this.formLigatures(body);
    }
    return this.handleInfixNodes(body);
  }
  /**
   * Rewrites infix operators such as \over with corresponding commands such
   * as \frac.
   *
   * There can only be one infix operator per group.  If there's more than one
   * then the expression is ambiguous.  This can be resolved by adding {}.
   */
  handleInfixNodes(body) {
    var overIndex = -1;
    var funcName;
    for (var i = 0; i < body.length; i++) {
      if (body[i].type === "infix") {
        if (overIndex !== -1) {
          throw new ParseError2("only one infix operator per group", body[i].token);
        }
        overIndex = i;
        funcName = body[i].replaceWith;
      }
    }
    if (overIndex !== -1 && funcName) {
      var numerNode;
      var denomNode;
      var numerBody = body.slice(0, overIndex);
      var denomBody = body.slice(overIndex + 1);
      if (numerBody.length === 1 && numerBody[0].type === "ordgroup") {
        numerNode = numerBody[0];
      } else {
        numerNode = {
          type: "ordgroup",
          mode: this.mode,
          body: numerBody
        };
      }
      if (denomBody.length === 1 && denomBody[0].type === "ordgroup") {
        denomNode = denomBody[0];
      } else {
        denomNode = {
          type: "ordgroup",
          mode: this.mode,
          body: denomBody
        };
      }
      var node;
      if (funcName === "\\\\abovefrac") {
        node = this.callFunction(funcName, [numerNode, body[overIndex], denomNode], []);
      } else {
        node = this.callFunction(funcName, [numerNode, denomNode], []);
      }
      return [node];
    } else {
      return body;
    }
  }
  /**
   * Handle a subscript or superscript with nice errors.
   */
  handleSupSubscript(name) {
    var symbolToken = this.fetch();
    var symbol = symbolToken.text;
    this.consume();
    this.consumeSpaces();
    var group;
    do {
      var _group;
      group = this.parseGroup(name);
    } while (((_group = group) == null ? void 0 : _group.type) === "internal");
    if (!group) {
      throw new ParseError2("Expected group after '" + symbol + "'", symbolToken);
    }
    return group;
  }
  /**
   * Converts the textual input of an unsupported command into a text node
   * contained within a color node whose color is determined by errorColor
   */
  formatUnsupportedCmd(text3) {
    var textordArray = [];
    for (var i = 0; i < text3.length; i++) {
      textordArray.push({
        type: "textord",
        mode: "text",
        text: text3[i]
      });
    }
    var textNode = {
      type: "text",
      mode: this.mode,
      body: textordArray
    };
    var colorNode = {
      type: "color",
      mode: this.mode,
      color: this.settings.errorColor,
      body: [textNode]
    };
    return colorNode;
  }
  /**
   * Parses a group with optional super/subscripts.
   */
  parseAtom(breakOnTokenText) {
    var base = this.parseGroup("atom", breakOnTokenText);
    if ((base == null ? void 0 : base.type) === "internal") {
      return base;
    }
    if (this.mode === "text") {
      return base;
    }
    var superscript;
    var subscript;
    while (true) {
      this.consumeSpaces();
      var lex = this.fetch();
      if (lex.text === "\\limits" || lex.text === "\\nolimits") {
        if (base && base.type === "op") {
          var limits = lex.text === "\\limits";
          base.limits = limits;
          base.alwaysHandleSupSub = true;
        } else if (base && base.type === "operatorname") {
          if (base.alwaysHandleSupSub) {
            base.limits = lex.text === "\\limits";
          }
        } else {
          throw new ParseError2("Limit controls must follow a math operator", lex);
        }
        this.consume();
      } else if (lex.text === "^") {
        if (superscript) {
          throw new ParseError2("Double superscript", lex);
        }
        superscript = this.handleSupSubscript("superscript");
      } else if (lex.text === "_") {
        if (subscript) {
          throw new ParseError2("Double subscript", lex);
        }
        subscript = this.handleSupSubscript("subscript");
      } else if (lex.text === "'") {
        if (superscript) {
          throw new ParseError2("Double superscript", lex);
        }
        var prime = {
          type: "textord",
          mode: this.mode,
          text: "\\prime"
        };
        var primes = [prime];
        this.consume();
        while (this.fetch().text === "'") {
          primes.push(prime);
          this.consume();
        }
        if (this.fetch().text === "^") {
          primes.push(this.handleSupSubscript("superscript"));
        }
        superscript = {
          type: "ordgroup",
          mode: this.mode,
          body: primes
        };
      } else if (uSubsAndSups[lex.text]) {
        var isSub = unicodeSubRegEx.test(lex.text);
        var subsupTokens = [];
        subsupTokens.push(new Token2(uSubsAndSups[lex.text]));
        this.consume();
        while (true) {
          var token = this.fetch().text;
          if (!uSubsAndSups[token]) {
            break;
          }
          if (unicodeSubRegEx.test(token) !== isSub) {
            break;
          }
          subsupTokens.unshift(new Token2(uSubsAndSups[token]));
          this.consume();
        }
        var body = this.subparse(subsupTokens);
        if (isSub) {
          subscript = {
            type: "ordgroup",
            mode: "math",
            body
          };
        } else {
          superscript = {
            type: "ordgroup",
            mode: "math",
            body
          };
        }
      } else {
        break;
      }
    }
    if (superscript || subscript) {
      return {
        type: "supsub",
        mode: this.mode,
        base,
        sup: superscript,
        sub: subscript
      };
    } else {
      return base;
    }
  }
  /**
   * Parses an entire function, including its base and all of its arguments.
   */
  parseFunction(breakOnTokenText, name) {
    var token = this.fetch();
    var func = token.text;
    var funcData = functions[func];
    if (!funcData) {
      return null;
    }
    this.consume();
    if (name && name !== "atom" && !funcData.allowedInArgument) {
      throw new ParseError2("Got function '" + func + "' with no arguments" + (name ? " as " + name : ""), token);
    } else if (this.mode === "text" && !funcData.allowedInText) {
      throw new ParseError2("Can't use function '" + func + "' in text mode", token);
    } else if (this.mode === "math" && funcData.allowedInMath === false) {
      throw new ParseError2("Can't use function '" + func + "' in math mode", token);
    }
    var {
      args,
      optArgs
    } = this.parseArguments(func, funcData);
    return this.callFunction(func, args, optArgs, token, breakOnTokenText);
  }
  /**
   * Call a function handler with a suitable context and arguments.
   */
  callFunction(name, args, optArgs, token, breakOnTokenText) {
    var context = {
      funcName: name,
      parser: this,
      token,
      breakOnTokenText
    };
    var func = functions[name];
    if (func && func.handler) {
      return func.handler(context, args, optArgs);
    } else {
      throw new ParseError2("No function handler for " + name);
    }
  }
  /**
   * Parses the arguments of a function or environment
   */
  parseArguments(func, funcData) {
    var totalArgs = funcData.numArgs + funcData.numOptionalArgs;
    if (totalArgs === 0) {
      return {
        args: [],
        optArgs: []
      };
    }
    var args = [];
    var optArgs = [];
    for (var i = 0; i < totalArgs; i++) {
      var argType = funcData.argTypes && funcData.argTypes[i];
      var isOptional = i < funcData.numOptionalArgs;
      if (funcData.primitive && argType == null || // \sqrt expands into primitive if optional argument doesn't exist
      funcData.type === "sqrt" && i === 1 && optArgs[0] == null) {
        argType = "primitive";
      }
      var arg = this.parseGroupOfType("argument to '" + func + "'", argType, isOptional);
      if (isOptional) {
        optArgs.push(arg);
      } else if (arg != null) {
        args.push(arg);
      } else {
        throw new ParseError2("Null argument, please report this as a bug");
      }
    }
    return {
      args,
      optArgs
    };
  }
  /**
   * Parses a group when the mode is changing.
   */
  parseGroupOfType(name, type, optional) {
    switch (type) {
      case "color":
        return this.parseColorGroup(optional);
      case "size":
        return this.parseSizeGroup(optional);
      case "url":
        return this.parseUrlGroup(optional);
      case "math":
      case "text":
        return this.parseArgumentGroup(optional, type);
      case "hbox": {
        var group = this.parseArgumentGroup(optional, "text");
        return group != null ? {
          type: "styling",
          mode: group.mode,
          body: [group],
          style: "text"
          // simulate \textstyle
        } : null;
      }
      case "raw": {
        var token = this.parseStringGroup("raw", optional);
        return token != null ? {
          type: "raw",
          mode: "text",
          string: token.text
        } : null;
      }
      case "primitive": {
        if (optional) {
          throw new ParseError2("A primitive argument cannot be optional");
        }
        var _group2 = this.parseGroup(name);
        if (_group2 == null) {
          throw new ParseError2("Expected group as " + name, this.fetch());
        }
        return _group2;
      }
      case "original":
      case null:
      case void 0:
        return this.parseArgumentGroup(optional);
      default:
        throw new ParseError2("Unknown group type as " + name, this.fetch());
    }
  }
  /**
   * Discard any space tokens, fetching the next non-space token.
   */
  consumeSpaces() {
    while (this.fetch().text === " ") {
      this.consume();
    }
  }
  /**
   * Parses a group, essentially returning the string formed by the
   * brace-enclosed tokens plus some position information.
   */
  parseStringGroup(modeName, optional) {
    var argToken = this.gullet.scanArgument(optional);
    if (argToken == null) {
      return null;
    }
    var str = "";
    var nextToken;
    while ((nextToken = this.fetch()).text !== "EOF") {
      str += nextToken.text;
      this.consume();
    }
    this.consume();
    argToken.text = str;
    return argToken;
  }
  /**
   * Parses a regex-delimited group: the largest sequence of tokens
   * whose concatenated strings match `regex`. Returns the string
   * formed by the tokens plus some position information.
   */
  parseRegexGroup(regex, modeName) {
    var firstToken = this.fetch();
    var lastToken = firstToken;
    var str = "";
    var nextToken;
    while ((nextToken = this.fetch()).text !== "EOF" && regex.test(str + nextToken.text)) {
      lastToken = nextToken;
      str += lastToken.text;
      this.consume();
    }
    if (str === "") {
      throw new ParseError2("Invalid " + modeName + ": '" + firstToken.text + "'", firstToken);
    }
    return firstToken.range(lastToken, str);
  }
  /**
   * Parses a color description.
   */
  parseColorGroup(optional) {
    var res = this.parseStringGroup("color", optional);
    if (res == null) {
      return null;
    }
    var match2 = /^(#[a-f0-9]{3}|#?[a-f0-9]{6}|[a-z]+)$/i.exec(res.text);
    if (!match2) {
      throw new ParseError2("Invalid color: '" + res.text + "'", res);
    }
    var color = match2[0];
    if (/^[0-9a-f]{6}$/i.test(color)) {
      color = "#" + color;
    }
    return {
      type: "color-token",
      mode: this.mode,
      color
    };
  }
  /**
   * Parses a size specification, consisting of magnitude and unit.
   */
  parseSizeGroup(optional) {
    var res;
    var isBlank = false;
    this.gullet.consumeSpaces();
    if (!optional && this.gullet.future().text !== "{") {
      res = this.parseRegexGroup(/^[-+]? *(?:$|\d+|\d+\.\d*|\.\d*) *[a-z]{0,2} *$/, "size");
    } else {
      res = this.parseStringGroup("size", optional);
    }
    if (!res) {
      return null;
    }
    if (!optional && res.text.length === 0) {
      res.text = "0pt";
      isBlank = true;
    }
    var match2 = /([-+]?) *(\d+(?:\.\d*)?|\.\d+) *([a-z]{2})/.exec(res.text);
    if (!match2) {
      throw new ParseError2("Invalid size: '" + res.text + "'", res);
    }
    var data = {
      number: +(match2[1] + match2[2]),
      // sign + magnitude, cast to number
      unit: match2[3]
    };
    if (!validUnit(data)) {
      throw new ParseError2("Invalid unit: '" + data.unit + "'", res);
    }
    return {
      type: "size",
      mode: this.mode,
      value: data,
      isBlank
    };
  }
  /**
   * Parses an URL, checking escaped letters and allowed protocols,
   * and setting the catcode of % as an active character (as in \hyperref).
   */
  parseUrlGroup(optional) {
    this.gullet.lexer.setCatcode("%", 13);
    this.gullet.lexer.setCatcode("~", 12);
    var res = this.parseStringGroup("url", optional);
    this.gullet.lexer.setCatcode("%", 14);
    this.gullet.lexer.setCatcode("~", 13);
    if (res == null) {
      return null;
    }
    var url = res.text.replace(/\\([#$%&~_^{}])/g, "$1");
    return {
      type: "url",
      mode: this.mode,
      url
    };
  }
  /**
   * Parses an argument with the mode specified.
   */
  parseArgumentGroup(optional, mode) {
    var argToken = this.gullet.scanArgument(optional);
    if (argToken == null) {
      return null;
    }
    var outerMode = this.mode;
    if (mode) {
      this.switchMode(mode);
    }
    this.gullet.beginGroup();
    var expression = this.parseExpression(false, "EOF");
    this.expect("EOF");
    this.gullet.endGroup();
    var result = {
      type: "ordgroup",
      mode: this.mode,
      loc: argToken.loc,
      body: expression
    };
    if (mode) {
      this.switchMode(outerMode);
    }
    return result;
  }
  /**
   * Parses an ordinary group, which is either a single nucleus (like "x")
   * or an expression in braces (like "{x+y}") or an implicit group, a group
   * that starts at the current position, and ends right before a higher explicit
   * group ends, or at EOF.
   */
  parseGroup(name, breakOnTokenText) {
    var firstToken = this.fetch();
    var text3 = firstToken.text;
    var result;
    if (text3 === "{" || text3 === "\\begingroup") {
      this.consume();
      var groupEnd = text3 === "{" ? "}" : "\\endgroup";
      this.gullet.beginGroup();
      var expression = this.parseExpression(false, groupEnd);
      var lastToken = this.fetch();
      this.expect(groupEnd);
      this.gullet.endGroup();
      result = {
        type: "ordgroup",
        mode: this.mode,
        loc: SourceLocation.range(firstToken, lastToken),
        body: expression,
        // A group formed by \begingroup...\endgroup is a semi-simple group
        // which doesn't affect spacing in math mode, i.e., is transparent.
        // https://tex.stackexchange.com/questions/1930/when-should-one-
        // use-begingroup-instead-of-bgroup
        semisimple: text3 === "\\begingroup" || void 0
      };
    } else {
      result = this.parseFunction(breakOnTokenText, name) || this.parseSymbol();
      if (result == null && text3[0] === "\\" && !implicitCommands.hasOwnProperty(text3)) {
        if (this.settings.throwOnError) {
          throw new ParseError2("Undefined control sequence: " + text3, firstToken);
        }
        result = this.formatUnsupportedCmd(text3);
        this.consume();
      }
    }
    return result;
  }
  /**
   * Form ligature-like combinations of characters for text mode.
   * This includes inputs like "--", "---", "``" and "''".
   * The result will simply replace multiple textord nodes with a single
   * character in each value by a single textord node having multiple
   * characters in its value.  The representation is still ASCII source.
   * The group will be modified in place.
   */
  formLigatures(group) {
    var n = group.length - 1;
    for (var i = 0; i < n; ++i) {
      var a = group[i];
      var v = a.text;
      if (v === "-" && group[i + 1].text === "-") {
        if (i + 1 < n && group[i + 2].text === "-") {
          group.splice(i, 3, {
            type: "textord",
            mode: "text",
            loc: SourceLocation.range(a, group[i + 2]),
            text: "---"
          });
          n -= 2;
        } else {
          group.splice(i, 2, {
            type: "textord",
            mode: "text",
            loc: SourceLocation.range(a, group[i + 1]),
            text: "--"
          });
          n -= 1;
        }
      }
      if ((v === "'" || v === "`") && group[i + 1].text === v) {
        group.splice(i, 2, {
          type: "textord",
          mode: "text",
          loc: SourceLocation.range(a, group[i + 1]),
          text: v + v
        });
        n -= 1;
      }
    }
  }
  /**
   * Parse a single symbol out of the string. Here, we handle single character
   * symbols and special functions like \verb.
   */
  parseSymbol() {
    var nucleus = this.fetch();
    var text3 = nucleus.text;
    if (/^\\verb[^a-zA-Z]/.test(text3)) {
      this.consume();
      var arg = text3.slice(5);
      var star = arg.charAt(0) === "*";
      if (star) {
        arg = arg.slice(1);
      }
      if (arg.length < 2 || arg.charAt(0) !== arg.slice(-1)) {
        throw new ParseError2("\\verb assertion failed --\n                    please report what input caused this bug");
      }
      arg = arg.slice(1, -1);
      return {
        type: "verb",
        mode: "text",
        body: arg,
        star
      };
    }
    if (unicodeSymbols.hasOwnProperty(text3[0]) && !symbols[this.mode][text3[0]]) {
      if (this.settings.strict && this.mode === "math") {
        this.settings.reportNonstrict("unicodeTextInMathMode", 'Accented Unicode text character "' + text3[0] + '" used in math mode', nucleus);
      }
      text3 = unicodeSymbols[text3[0]] + text3.slice(1);
    }
    var match2 = combiningDiacriticalMarksEndRegex.exec(text3);
    if (match2) {
      text3 = text3.substring(0, match2.index);
      if (text3 === "i") {
        text3 = "\u0131";
      } else if (text3 === "j") {
        text3 = "\u0237";
      }
    }
    var symbol;
    if (symbols[this.mode][text3]) {
      if (this.settings.strict && this.mode === "math" && extraLatin.indexOf(text3) >= 0) {
        this.settings.reportNonstrict("unicodeTextInMathMode", 'Latin-1/Unicode text character "' + text3[0] + '" used in math mode', nucleus);
      }
      var group = symbols[this.mode][text3].group;
      var loc = SourceLocation.range(nucleus);
      var s;
      if (ATOMS.hasOwnProperty(group)) {
        var family = group;
        s = {
          type: "atom",
          mode: this.mode,
          family,
          loc,
          text: text3
        };
      } else {
        s = {
          type: group,
          mode: this.mode,
          loc,
          text: text3
        };
      }
      symbol = s;
    } else if (text3.charCodeAt(0) >= 128) {
      if (this.settings.strict) {
        if (!supportedCodepoint(text3.charCodeAt(0))) {
          this.settings.reportNonstrict("unknownSymbol", 'Unrecognized Unicode character "' + text3[0] + '"' + (" (" + text3.charCodeAt(0) + ")"), nucleus);
        } else if (this.mode === "math") {
          this.settings.reportNonstrict("unicodeTextInMathMode", 'Unicode text character "' + text3[0] + '" used in math mode', nucleus);
        }
      }
      symbol = {
        type: "textord",
        mode: "text",
        loc: SourceLocation.range(nucleus),
        text: text3
      };
    } else {
      return null;
    }
    this.consume();
    if (match2) {
      for (var i = 0; i < match2[0].length; i++) {
        var accent2 = match2[0][i];
        if (!unicodeAccents[accent2]) {
          throw new ParseError2("Unknown accent ' " + accent2 + "'", nucleus);
        }
        var command = unicodeAccents[accent2][this.mode] || unicodeAccents[accent2].text;
        if (!command) {
          throw new ParseError2("Accent " + accent2 + " unsupported in " + this.mode + " mode", nucleus);
        }
        symbol = {
          type: "accent",
          mode: this.mode,
          loc: SourceLocation.range(nucleus),
          label: command,
          isStretchy: false,
          isShifty: true,
          // $FlowFixMe
          base: symbol
        };
      }
    }
    return symbol;
  }
};
Parser3.endOfExpression = ["}", "\\endgroup", "\\end", "\\right", "&"];
var parseTree = function parseTree2(toParse, settings) {
  if (!(typeof toParse === "string" || toParse instanceof String)) {
    throw new TypeError("KaTeX can only parse string typed expression");
  }
  var parser = new Parser3(toParse, settings);
  delete parser.gullet.macros.current["\\df@tag"];
  var tree2 = parser.parse();
  delete parser.gullet.macros.current["\\current@color"];
  delete parser.gullet.macros.current["\\color"];
  if (parser.gullet.macros.get("\\df@tag")) {
    if (!settings.displayMode) {
      throw new ParseError2("\\tag works only in display equations");
    }
    tree2 = [{
      type: "tag",
      mode: "text",
      body: tree2,
      tag: parser.subparse([new Token2("\\df@tag")])
    }];
  }
  return tree2;
};
var render = function render2(expression, baseNode, options) {
  baseNode.textContent = "";
  var node = renderToDomTree(expression, options).toNode();
  baseNode.appendChild(node);
};
if (typeof document !== "undefined") {
  if (document.compatMode !== "CSS1Compat") {
    typeof console !== "undefined" && console.warn("Warning: KaTeX doesn't work in quirks mode. Make sure your website has a suitable doctype.");
    render = function render3() {
      throw new ParseError2("KaTeX doesn't work in quirks mode.");
    };
  }
}
var renderToString = function renderToString2(expression, options) {
  var markup = renderToDomTree(expression, options).toMarkup();
  return markup;
};
var renderError = function renderError2(error, expression, options) {
  if (options.throwOnError || !(error instanceof ParseError2)) {
    throw error;
  }
  var node = buildCommon.makeSpan(["katex-error"], [new SymbolNode(expression)]);
  node.setAttribute("title", error.toString());
  node.setAttribute("style", "color:" + options.errorColor);
  return node;
};
var renderToDomTree = function renderToDomTree2(expression, options) {
  var settings = new Settings(options);
  try {
    var tree2 = parseTree(expression, settings);
    return buildTree(tree2, expression, settings);
  } catch (error) {
    return renderError(error, expression, settings);
  }
};

// src/app/components/math-display/math-display.component.ts
var MathDisplayComponent = class _MathDisplayComponent {
  sanitizer;
  elementRef;
  content = "";
  allowFormatting = true;
  displayMode = false;
  throwOnError = false;
  renderedContent = "";
  constructor(sanitizer, elementRef) {
    this.sanitizer = sanitizer;
    this.elementRef = elementRef;
  }
  ngOnInit() {
    this.processContent();
  }
  ngOnChanges(changes) {
    if (changes["content"] || changes["allowFormatting"] || changes["displayMode"]) {
      this.processContent();
    }
  }
  processContent() {
    try {
      if (!this.content) {
        this.renderedContent = this.sanitizer.bypassSecurityTrustHtml("");
        return;
      }
      let processedContent = this.content;
      processedContent = this.renderMathExpressions(processedContent);
      if (this.allowFormatting) {
        processedContent = this.processTextFormatting(processedContent);
      }
      this.renderedContent = this.sanitizer.bypassSecurityTrustHtml(processedContent);
    } catch (error) {
      console.error("Error processing mathematical content:", error);
      if (this.throwOnError) {
        throw error;
      }
      const errorMessage = `<span class="math-error">Error rendering content: ${error instanceof Error ? error.message : "Unknown error"}</span>`;
      this.renderedContent = this.sanitizer.bypassSecurityTrustHtml(errorMessage);
    }
  }
  renderMathExpressions(content) {
    content = content.replace(/\\\[(.+?)\\\]/g, (match2, latex) => {
      try {
        return renderToString(latex.trim(), { displayMode: true, throwOnError: this.throwOnError });
      } catch (error) {
        return `<span class="math-error">Math Error: ${error instanceof Error ? error.message : "Invalid LaTeX"}</span>`;
      }
    });
    content = content.replace(/\$\$(.+?)\$\$/g, (match2, latex) => {
      try {
        return renderToString(latex.trim(), { displayMode: true, throwOnError: this.throwOnError });
      } catch (error) {
        return `<span class="math-error">Math Error: ${error instanceof Error ? error.message : "Invalid LaTeX"}</span>`;
      }
    });
    content = content.replace(/\\\((.+?)\\\)/g, (match2, latex) => {
      try {
        return renderToString(latex.trim(), { displayMode: false, throwOnError: this.throwOnError });
      } catch (error) {
        return `<span class="math-error">Math Error: ${error instanceof Error ? error.message : "Invalid LaTeX"}</span>`;
      }
    });
    content = content.replace(/\$(.+?)\$/g, (match2, latex) => {
      try {
        return renderToString(latex.trim(), { displayMode: false, throwOnError: this.throwOnError });
      } catch (error) {
        return `<span class="math-error">Math Error: ${error instanceof Error ? error.message : "Invalid LaTeX"}</span>`;
      }
    });
    return content;
  }
  processTextFormatting(content) {
    content = content.replace(/\*\*(.+?)\*\*/g, "<strong>$1</strong>");
    content = content.replace(/(?<!\*)\*(?!\*)(.+?)\*(?!\*)/g, "<em>$1</em>");
    content = content.replace(/^- (.+)$/gm, "<li>$1</li>");
    content = content.replace(/(<li>.*<\/li>)/s, "<ul>$1</ul>");
    return content;
  }
  refresh() {
    this.processContent();
  }
  static \u0275fac = function MathDisplayComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _MathDisplayComponent)(\u0275\u0275directiveInject(DomSanitizer), \u0275\u0275directiveInject(ElementRef));
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _MathDisplayComponent, selectors: [["app-math-display"]], inputs: { content: "content", allowFormatting: "allowFormatting", displayMode: "displayMode", throwOnError: "throwOnError" }, features: [\u0275\u0275NgOnChangesFeature], decls: 1, vars: 5, consts: [[1, "math-content-container", 3, "innerHTML"]], template: function MathDisplayComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275element(0, "div", 0);
    }
    if (rf & 2) {
      \u0275\u0275classProp("math-display-mode", ctx.displayMode)("math-inline-mode", !ctx.displayMode);
      \u0275\u0275property("innerHTML", ctx.renderedContent, \u0275\u0275sanitizeHtml);
    }
  }, dependencies: [CommonModule], styles: ['\n\n.math-content-container[_ngcontent-%COMP%] {\n  line-height: 1.6;\n  font-family:\n    -apple-system,\n    BlinkMacSystemFont,\n    "Segoe UI",\n    Roboto,\n    Oxygen,\n    Ubuntu,\n    Cantarell,\n    sans-serif;\n  color: #333;\n  word-wrap: break-word;\n  overflow-wrap: break-word;\n  hyphens: auto;\n}\n.math-display-mode[_ngcontent-%COMP%] {\n  text-align: center;\n  margin: 1em 0;\n}\n.math-inline-mode[_ngcontent-%COMP%] {\n  display: inline;\n}\n.math-content-container[_ngcontent-%COMP%]   .katex[_ngcontent-%COMP%] {\n  font-size: 1.1em;\n}\n.math-content-container[_ngcontent-%COMP%]   .katex-display[_ngcontent-%COMP%] {\n  margin: 0.5em 0;\n  text-align: center;\n}\n.math-content-container[_ngcontent-%COMP%]   strong[_ngcontent-%COMP%] {\n  font-weight: 600;\n  color: #2c3e50;\n}\n.math-content-container[_ngcontent-%COMP%]   em[_ngcontent-%COMP%] {\n  font-style: italic;\n  color: #34495e;\n}\n.math-content-container[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%] {\n  margin: 0.5em 0;\n  padding-left: 1.5em;\n}\n.math-content-container[_ngcontent-%COMP%]   li[_ngcontent-%COMP%] {\n  margin: 0.25em 0;\n  line-height: 1.4;\n}\n.math-error[_ngcontent-%COMP%] {\n  color: #e74c3c;\n  background-color: #fdf2f2;\n  padding: 2px 4px;\n  border-radius: 3px;\n  font-size: 0.9em;\n  border: 1px solid #fecaca;\n}\n@media (max-width: 768px) {\n  .math-content-container[_ngcontent-%COMP%] {\n    font-size: 0.95em;\n  }\n  .math-content-container[_ngcontent-%COMP%]   .katex[_ngcontent-%COMP%] {\n    font-size: 1em;\n  }\n}\n/*# sourceMappingURL=math-display.component.css.map */'] });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MathDisplayComponent, [{
    type: Component,
    args: [{ selector: "app-math-display", imports: [CommonModule], template: `
    <div 
      class="math-content-container"
      [class.math-display-mode]="displayMode"
      [class.math-inline-mode]="!displayMode"
      [innerHTML]="renderedContent">
    </div>
  `, styles: ['/* src/app/components/math-display/math-display.component.scss */\n.math-content-container {\n  line-height: 1.6;\n  font-family:\n    -apple-system,\n    BlinkMacSystemFont,\n    "Segoe UI",\n    Roboto,\n    Oxygen,\n    Ubuntu,\n    Cantarell,\n    sans-serif;\n  color: #333;\n  word-wrap: break-word;\n  overflow-wrap: break-word;\n  hyphens: auto;\n}\n.math-display-mode {\n  text-align: center;\n  margin: 1em 0;\n}\n.math-inline-mode {\n  display: inline;\n}\n.math-content-container .katex {\n  font-size: 1.1em;\n}\n.math-content-container .katex-display {\n  margin: 0.5em 0;\n  text-align: center;\n}\n.math-content-container strong {\n  font-weight: 600;\n  color: #2c3e50;\n}\n.math-content-container em {\n  font-style: italic;\n  color: #34495e;\n}\n.math-content-container ul {\n  margin: 0.5em 0;\n  padding-left: 1.5em;\n}\n.math-content-container li {\n  margin: 0.25em 0;\n  line-height: 1.4;\n}\n.math-error {\n  color: #e74c3c;\n  background-color: #fdf2f2;\n  padding: 2px 4px;\n  border-radius: 3px;\n  font-size: 0.9em;\n  border: 1px solid #fecaca;\n}\n@media (max-width: 768px) {\n  .math-content-container {\n    font-size: 0.95em;\n  }\n  .math-content-container .katex {\n    font-size: 1em;\n  }\n}\n/*# sourceMappingURL=math-display.component.css.map */\n'] }]
  }], () => [{ type: DomSanitizer }, { type: ElementRef }], { content: [{
    type: Input
  }], allowFormatting: [{
    type: Input
  }], displayMode: [{
    type: Input
  }], throwOnError: [{
    type: Input
  }] });
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(MathDisplayComponent, { className: "MathDisplayComponent", filePath: "src/app/components/math-display/math-display.component.ts", lineNumber: 19 });
})();

// src/app/components/add-question/add-question.component.ts
var _c04 = (a0, a1, a2, a3, a4) => ({ "text-gray-500": a0, "text-blue-600": a1, "text-yellow-600": a2, "text-green-600": a3, "text-red-600": a4 });
function AddQuestionComponent_option_39_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "option", 113);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const b_r3 = ctx.$implicit;
    \u0275\u0275property("value", b_r3._id);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(b_r3.name);
  }
}
function AddQuestionComponent_option_50_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "option", 113);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const s_r4 = ctx.$implicit;
    \u0275\u0275property("value", s_r4._id);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(s_r4.name);
  }
}
function AddQuestionComponent_option_61_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "option", 113);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const t_r5 = ctx.$implicit;
    \u0275\u0275property("value", t_r5._id);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(t_r5.name);
  }
}
function AddQuestionComponent_option_72_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "option", 113);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const st_r6 = ctx.$implicit;
    \u0275\u0275property("value", st_r6._id);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(st_r6.name);
  }
}
function AddQuestionComponent_div_87_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 114)(1, "div", 110);
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(2, "svg", 115);
    \u0275\u0275element(3, "path", 116);
    \u0275\u0275elementEnd();
    \u0275\u0275text(4, " Question is required. ");
    \u0275\u0275elementEnd()();
  }
}
function AddQuestionComponent_button_96_Template(rf, ctx) {
  if (rf & 1) {
    const _r7 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 117);
    \u0275\u0275listener("click", function AddQuestionComponent_button_96_Template_button_click_0_listener() {
      const symbol_r8 = \u0275\u0275restoreView(_r7).$implicit;
      const ctx_r8 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r8.insertSymbol(symbol_r8.latex));
    });
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const symbol_r8 = ctx.$implicit;
    \u0275\u0275property("title", symbol_r8.name);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", symbol_r8.symbol, " ");
  }
}
function AddQuestionComponent_button_101_Template(rf, ctx) {
  if (rf & 1) {
    const _r10 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 117);
    \u0275\u0275listener("click", function AddQuestionComponent_button_101_Template_button_click_0_listener() {
      const symbol_r11 = \u0275\u0275restoreView(_r10).$implicit;
      const ctx_r8 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r8.insertSymbol(symbol_r11.latex));
    });
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const symbol_r11 = ctx.$implicit;
    \u0275\u0275property("title", symbol_r11.name);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", symbol_r11.symbol, " ");
  }
}
function AddQuestionComponent_div_104_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 118)(1, "h4", 47);
    \u0275\u0275text(2, "Preview:");
    \u0275\u0275elementEnd();
    \u0275\u0275element(3, "app-math-display", 119);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r8 = \u0275\u0275nextContext();
    \u0275\u0275advance(3);
    \u0275\u0275property("content", ctx_r8.question.translations[ctx_r8.currentLang].questionText);
  }
}
function AddQuestionComponent_div_111_img_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "img", 137);
  }
  if (rf & 2) {
    const ctx_r12 = \u0275\u0275nextContext();
    const imgUrl_r14 = ctx_r12.$implicit;
    const imgIndex_r15 = ctx_r12.index;
    \u0275\u0275propertyInterpolate1("alt", "Question Image ", imgIndex_r15 + 1, "");
    \u0275\u0275property("src", imgUrl_r14, \u0275\u0275sanitizeUrl);
  }
}
function AddQuestionComponent_div_111_img_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "img", 138);
  }
  if (rf & 2) {
    const imgIndex_r15 = \u0275\u0275nextContext().index;
    const ctx_r8 = \u0275\u0275nextContext();
    \u0275\u0275propertyInterpolate1("alt", "Preview Image ", imgIndex_r15 + 1, "");
    \u0275\u0275property("src", ctx_r8.getPreviewUrl("question", imgIndex_r15), \u0275\u0275sanitizeUrl);
  }
}
function AddQuestionComponent_div_111_div_5_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 139);
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(1, "svg", 140);
    \u0275\u0275element(2, "path", 55);
    \u0275\u0275elementEnd()();
  }
}
function AddQuestionComponent_div_111_button_19_Template(rf, ctx) {
  if (rf & 1) {
    const _r16 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 141);
    \u0275\u0275listener("click", function AddQuestionComponent_div_111_button_19_Template_button_click_0_listener() {
      \u0275\u0275restoreView(_r16);
      const ctx_r12 = \u0275\u0275nextContext();
      const imgUrl_r14 = ctx_r12.$implicit;
      const imgIndex_r15 = ctx_r12.index;
      const ctx_r8 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r8.deleteImage(imgUrl_r14, "question", imgIndex_r15));
    });
    \u0275\u0275text(1, " Delete Image ");
    \u0275\u0275elementEnd();
  }
}
function AddQuestionComponent_div_111_div_22_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 142)(1, "div", 110);
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(2, "svg", 59);
    \u0275\u0275element(3, "path", 143);
    \u0275\u0275elementEnd();
    \u0275\u0275text(4, " Please complete Subject Hierarchy (Branch, Subject, Topic) to enable image upload. ");
    \u0275\u0275elementEnd()();
  }
}
function AddQuestionComponent_div_111_Template(rf, ctx) {
  if (rf & 1) {
    const _r12 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 120)(1, "div", 121)(2, "div", 122);
    \u0275\u0275template(3, AddQuestionComponent_div_111_img_3_Template, 1, 3, "img", 123)(4, AddQuestionComponent_div_111_img_4_Template, 1, 3, "img", 124)(5, AddQuestionComponent_div_111_div_5_Template, 3, 0, "div", 125);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(6, "div", 126)(7, "h4", 127);
    \u0275\u0275text(8);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(9, "div", 128);
    \u0275\u0275text(10, " Status: ");
    \u0275\u0275elementStart(11, "span", 129);
    \u0275\u0275text(12);
    \u0275\u0275elementEnd()()()();
    \u0275\u0275elementStart(13, "div", 48)(14, "div", 130)(15, "input", 131);
    \u0275\u0275listener("change", function AddQuestionComponent_div_111_Template_input_change_15_listener($event) {
      const imgIndex_r15 = \u0275\u0275restoreView(_r12).index;
      const ctx_r8 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r8.onQuestionImageFileSelected($event, imgIndex_r15));
    });
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(16, "button", 132);
    \u0275\u0275listener("click", function AddQuestionComponent_div_111_Template_button_click_16_listener() {
      const imgIndex_r15 = \u0275\u0275restoreView(_r12).index;
      const ctx_r8 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r8.uploadQuestionImage(imgIndex_r15));
    });
    \u0275\u0275text(17, " Upload ");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(18, "div", 133);
    \u0275\u0275template(19, AddQuestionComponent_div_111_button_19_Template, 2, 0, "button", 134);
    \u0275\u0275elementStart(20, "button", 135);
    \u0275\u0275listener("click", function AddQuestionComponent_div_111_Template_button_click_20_listener() {
      const imgIndex_r15 = \u0275\u0275restoreView(_r12).index;
      const ctx_r8 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r8.removeQuestionImage(imgIndex_r15));
    });
    \u0275\u0275text(21, " Remove Slot ");
    \u0275\u0275elementEnd()();
    \u0275\u0275template(22, AddQuestionComponent_div_111_div_22_Template, 5, 0, "div", 136);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const imgUrl_r14 = ctx.$implicit;
    const imgIndex_r15 = ctx.index;
    const ctx_r8 = \u0275\u0275nextContext();
    \u0275\u0275advance(3);
    \u0275\u0275property("ngIf", imgUrl_r14 && !ctx_r8.getPreviewUrl("question", imgIndex_r15));
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r8.getPreviewUrl("question", imgIndex_r15));
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", !imgUrl_r14 && !ctx_r8.getPreviewUrl("question", imgIndex_r15));
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate1("Image ", imgIndex_r15 + 1, "");
    \u0275\u0275advance(3);
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction5(9, _c04, ctx_r8.getUploadStatus("question", imgIndex_r15) === "none", ctx_r8.getUploadStatus("question", imgIndex_r15) === "selected", ctx_r8.getUploadStatus("question", imgIndex_r15) === "uploading", ctx_r8.getUploadStatus("question", imgIndex_r15) === "completed", ctx_r8.getUploadStatus("question", imgIndex_r15) === "failed"));
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r8.getUploadStatus("question", imgIndex_r15) === "none" ? "No file selected" : ctx_r8.getUploadStatus("question", imgIndex_r15) === "selected" ? "File selected" : ctx_r8.getUploadStatus("question", imgIndex_r15) === "uploading" ? "Uploading..." : ctx_r8.getUploadStatus("question", imgIndex_r15) === "completed" ? "Uploaded" : ctx_r8.getUploadStatus("question", imgIndex_r15) === "failed" ? "Upload failed" : "Unknown", " ");
    \u0275\u0275advance(4);
    \u0275\u0275property("disabled", ctx_r8.getUploadStatus("question", imgIndex_r15) !== "selected" || !ctx_r8.question.branchId || !ctx_r8.question.subjectId || !ctx_r8.question.topicId);
    \u0275\u0275advance(3);
    \u0275\u0275property("ngIf", imgUrl_r14);
    \u0275\u0275advance(3);
    \u0275\u0275property("ngIf", !ctx_r8.question.branchId || !ctx_r8.question.subjectId || !ctx_r8.question.topicId);
  }
}
function AddQuestionComponent_div_122_div_16_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 163)(1, "span", 52);
    \u0275\u0275text(2, "Preview:");
    \u0275\u0275elementEnd();
    \u0275\u0275element(3, "app-math-display", 164);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const opt_r18 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275advance(3);
    \u0275\u0275property("content", opt_r18.text);
  }
}
function AddQuestionComponent_div_122_img_22_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "img", 165);
  }
  if (rf & 2) {
    const ctx_r19 = \u0275\u0275nextContext();
    const opt_r18 = ctx_r19.$implicit;
    const i_r19 = ctx_r19.index;
    \u0275\u0275propertyInterpolate1("alt", "Option ", i_r19 + 1, " Image");
    \u0275\u0275property("src", opt_r18.img, \u0275\u0275sanitizeUrl);
  }
}
function AddQuestionComponent_div_122_img_23_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "img", 166);
  }
  if (rf & 2) {
    const i_r19 = \u0275\u0275nextContext().index;
    const ctx_r8 = \u0275\u0275nextContext();
    \u0275\u0275propertyInterpolate1("alt", "Preview Option ", i_r19 + 1, " Image");
    \u0275\u0275property("src", ctx_r8.getPreviewUrl("option", i_r19), \u0275\u0275sanitizeUrl);
  }
}
function AddQuestionComponent_div_122_div_24_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 167);
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(1, "svg", 168);
    \u0275\u0275element(2, "path", 55);
    \u0275\u0275elementEnd()();
  }
}
function AddQuestionComponent_div_122_button_36_Template(rf, ctx) {
  if (rf & 1) {
    const _r21 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 169);
    \u0275\u0275listener("click", function AddQuestionComponent_div_122_button_36_Template_button_click_0_listener() {
      \u0275\u0275restoreView(_r21);
      const ctx_r19 = \u0275\u0275nextContext();
      const opt_r18 = ctx_r19.$implicit;
      const i_r19 = ctx_r19.index;
      const ctx_r8 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r8.deleteImage(opt_r18.img, "option", i_r19));
    });
    \u0275\u0275text(1, " Delete Image ");
    \u0275\u0275elementEnd();
  }
}
function AddQuestionComponent_div_122_div_37_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 170)(1, "div", 110);
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(2, "svg", 171);
    \u0275\u0275element(3, "path", 143);
    \u0275\u0275elementEnd();
    \u0275\u0275text(4, " Complete Subject Hierarchy to enable upload. ");
    \u0275\u0275elementEnd()();
  }
}
function AddQuestionComponent_div_122_Template(rf, ctx) {
  if (rf & 1) {
    const _r17 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 144)(1, "div", 145)(2, "h4", 146);
    \u0275\u0275text(3);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(4, "div", 133)(5, "label", 147)(6, "input", 148);
    \u0275\u0275twoWayListener("ngModelChange", function AddQuestionComponent_div_122_Template_input_ngModelChange_6_listener($event) {
      const opt_r18 = \u0275\u0275restoreView(_r17).$implicit;
      \u0275\u0275twoWayBindingSet(opt_r18.isCorrect, $event) || (opt_r18.isCorrect = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(7, "span", 149);
    \u0275\u0275text(8, "Correct Answer");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(9, "button", 150);
    \u0275\u0275listener("click", function AddQuestionComponent_div_122_Template_button_click_9_listener() {
      const i_r19 = \u0275\u0275restoreView(_r17).index;
      const ctx_r8 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r8.removeOption(i_r19));
    });
    \u0275\u0275text(10, " Remove ");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(11, "div", 56)(12, "div")(13, "label", 101);
    \u0275\u0275text(14, "Option Text");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(15, "input", 151);
    \u0275\u0275twoWayListener("ngModelChange", function AddQuestionComponent_div_122_Template_input_ngModelChange_15_listener($event) {
      const opt_r18 = \u0275\u0275restoreView(_r17).$implicit;
      \u0275\u0275twoWayBindingSet(opt_r18.text, $event) || (opt_r18.text = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275elementEnd();
    \u0275\u0275template(16, AddQuestionComponent_div_122_div_16_Template, 4, 1, "div", 152);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(17, "div", 153)(18, "label", 30);
    \u0275\u0275text(19, "Option Image (Optional)");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(20, "div", 154)(21, "div", 122);
    \u0275\u0275template(22, AddQuestionComponent_div_122_img_22_Template, 1, 3, "img", 155)(23, AddQuestionComponent_div_122_img_23_Template, 1, 3, "img", 156)(24, AddQuestionComponent_div_122_div_24_Template, 3, 0, "div", 157);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(25, "div", 126)(26, "div", 128);
    \u0275\u0275text(27, " Status: ");
    \u0275\u0275elementStart(28, "span", 129);
    \u0275\u0275text(29);
    \u0275\u0275elementEnd()()()();
    \u0275\u0275elementStart(30, "div", 158)(31, "div", 133)(32, "input", 159);
    \u0275\u0275listener("change", function AddQuestionComponent_div_122_Template_input_change_32_listener($event) {
      const i_r19 = \u0275\u0275restoreView(_r17).index;
      const ctx_r8 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r8.onOptionImageFileSelected($event, i_r19));
    });
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(33, "button", 160);
    \u0275\u0275listener("click", function AddQuestionComponent_div_122_Template_button_click_33_listener() {
      const i_r19 = \u0275\u0275restoreView(_r17).index;
      const ctx_r8 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r8.uploadOptionImage(i_r19));
    });
    \u0275\u0275text(34, " Upload ");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(35, "div", 133);
    \u0275\u0275template(36, AddQuestionComponent_div_122_button_36_Template, 2, 0, "button", 161);
    \u0275\u0275elementEnd();
    \u0275\u0275template(37, AddQuestionComponent_div_122_div_37_Template, 5, 0, "div", 162);
    \u0275\u0275elementEnd()()()();
  }
  if (rf & 2) {
    const opt_r18 = ctx.$implicit;
    const i_r19 = ctx.index;
    const ctx_r8 = \u0275\u0275nextContext();
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate1("Option ", i_r19 + 1, "");
    \u0275\u0275advance(3);
    \u0275\u0275propertyInterpolate2("name", "optCorrect_", ctx_r8.currentLang, "_", i_r19, "");
    \u0275\u0275twoWayProperty("ngModel", opt_r18.isCorrect);
    \u0275\u0275advance(3);
    \u0275\u0275property("disabled", ctx_r8.langPack.options.length <= 2);
    \u0275\u0275advance(6);
    \u0275\u0275propertyInterpolate2("name", "optText_", ctx_r8.currentLang, "_", i_r19, "");
    \u0275\u0275twoWayProperty("ngModel", opt_r18.text);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", opt_r18.text);
    \u0275\u0275advance(6);
    \u0275\u0275property("ngIf", opt_r18.img && !ctx_r8.getPreviewUrl("option", i_r19));
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r8.getPreviewUrl("option", i_r19));
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", !opt_r18.img && !ctx_r8.getPreviewUrl("option", i_r19));
    \u0275\u0275advance(4);
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction5(19, _c04, ctx_r8.getUploadStatus("option", i_r19) === "none", ctx_r8.getUploadStatus("option", i_r19) === "selected", ctx_r8.getUploadStatus("option", i_r19) === "uploading", ctx_r8.getUploadStatus("option", i_r19) === "completed", ctx_r8.getUploadStatus("option", i_r19) === "failed"));
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r8.getUploadStatus("option", i_r19) === "none" ? "No file selected" : ctx_r8.getUploadStatus("option", i_r19) === "selected" ? "File selected" : ctx_r8.getUploadStatus("option", i_r19) === "uploading" ? "Uploading..." : ctx_r8.getUploadStatus("option", i_r19) === "completed" ? "Uploaded" : ctx_r8.getUploadStatus("option", i_r19) === "failed" ? "Upload failed" : "Unknown", " ");
    \u0275\u0275advance(4);
    \u0275\u0275property("disabled", ctx_r8.getUploadStatus("option", i_r19) !== "selected" || !ctx_r8.question.branchId || !ctx_r8.question.subjectId || !ctx_r8.question.topicId);
    \u0275\u0275advance(3);
    \u0275\u0275property("ngIf", opt_r18.img);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", !ctx_r8.question.branchId || !ctx_r8.question.subjectId || !ctx_r8.question.topicId);
  }
}
function AddQuestionComponent_div_133_Template(rf, ctx) {
  if (rf & 1) {
    const _r22 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 144)(1, "div", 172)(2, "h4", 146);
    \u0275\u0275text(3);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(4, "button", 173);
    \u0275\u0275listener("click", function AddQuestionComponent_div_133_Template_button_click_4_listener() {
      const j_r23 = \u0275\u0275restoreView(_r22).index;
      const ctx_r8 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r8.removeExplanation(j_r23));
    });
    \u0275\u0275text(5, " Remove ");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(6, "div", 174)(7, "div")(8, "label", 101);
    \u0275\u0275text(9, "Type");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(10, "select", 175);
    \u0275\u0275twoWayListener("ngModelChange", function AddQuestionComponent_div_133_Template_select_ngModelChange_10_listener($event) {
      const exp_r24 = \u0275\u0275restoreView(_r22).$implicit;
      \u0275\u0275twoWayBindingSet(exp_r24.type, $event) || (exp_r24.type = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275elementStart(11, "option", 176);
    \u0275\u0275text(12, "Text");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(13, "option", 177);
    \u0275\u0275text(14, "Video");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(15, "option", 178);
    \u0275\u0275text(16, "PDF");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(17, "option", 179);
    \u0275\u0275text(18, "Image");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(19, "div")(20, "label", 101);
    \u0275\u0275text(21, "Label (Optional)");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(22, "input", 180);
    \u0275\u0275twoWayListener("ngModelChange", function AddQuestionComponent_div_133_Template_input_ngModelChange_22_listener($event) {
      const exp_r24 = \u0275\u0275restoreView(_r22).$implicit;
      \u0275\u0275twoWayBindingSet(exp_r24.label, $event) || (exp_r24.label = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(23, "div")(24, "label", 101);
    \u0275\u0275text(25, "Content URL/Text");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(26, "input", 181);
    \u0275\u0275twoWayListener("ngModelChange", function AddQuestionComponent_div_133_Template_input_ngModelChange_26_listener($event) {
      const exp_r24 = \u0275\u0275restoreView(_r22).$implicit;
      \u0275\u0275twoWayBindingSet(exp_r24.content, $event) || (exp_r24.content = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275elementEnd()()()();
  }
  if (rf & 2) {
    const exp_r24 = ctx.$implicit;
    const j_r23 = ctx.index;
    const ctx_r8 = \u0275\u0275nextContext();
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate1("Explanation ", j_r23 + 1, "");
    \u0275\u0275advance(7);
    \u0275\u0275propertyInterpolate2("name", "expType_", ctx_r8.currentLang, "_", j_r23, "");
    \u0275\u0275twoWayProperty("ngModel", exp_r24.type);
    \u0275\u0275advance(12);
    \u0275\u0275propertyInterpolate2("name", "expLabel_", ctx_r8.currentLang, "_", j_r23, "");
    \u0275\u0275twoWayProperty("ngModel", exp_r24.label);
    \u0275\u0275advance(4);
    \u0275\u0275propertyInterpolate2("name", "expContent_", ctx_r8.currentLang, "_", j_r23, "");
    \u0275\u0275twoWayProperty("ngModel", exp_r24.content);
  }
}
function AddQuestionComponent_div_162_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 114)(1, "div", 110);
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(2, "svg", 115);
    \u0275\u0275element(3, "path", 116);
    \u0275\u0275elementEnd();
    \u0275\u0275text(4, " Status is required. ");
    \u0275\u0275elementEnd()();
  }
}
function AddQuestionComponent_div_193_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 114)(1, "div", 110);
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(2, "svg", 115);
    \u0275\u0275element(3, "path", 116);
    \u0275\u0275elementEnd();
    \u0275\u0275text(4, " Type is required. ");
    \u0275\u0275elementEnd()();
  }
}
function AddQuestionComponent_div_236_div_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 184)(1, "span", 185);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const h_r25 = ctx.$implicit;
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate2("", h_r25.examName, " \u2014 ", h_r25.year, "");
  }
}
function AddQuestionComponent_div_236_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 158)(1, "h4", 47);
    \u0275\u0275text(2, "Previous Appearances:");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "div", 182);
    \u0275\u0275template(4, AddQuestionComponent_div_236_div_4_Template, 3, 2, "div", 183);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r8 = \u0275\u0275nextContext();
    \u0275\u0275advance(4);
    \u0275\u0275property("ngForOf", ctx_r8.histList);
  }
}
function AddQuestionComponent_p_237_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "p", 186);
    \u0275\u0275text(1, " No appearance history recorded yet. ");
    \u0275\u0275elementEnd();
  }
}
var AddQuestionComponent = class _AddQuestionComponent {
  /* ───────── injected services ───────── */
  /** @private {BranchService} Service for educational branch management */
  branchSrv = inject(BranchService);
  /** @private {SubjectService} Service for subject management within branches */
  subjectSrv = inject(SubjectService);
  /** @private {TopicService} Service for topic management within subjects */
  topicSrv = inject(TopicService);
  /** @private {SubtopicService} Service for subtopic management within topics */
  subtopicSrv = inject(SubtopicService);
  /** @private {QuestionService} Service for question CRUD operations and validation */
  questionSrv = inject(QuestionService);
  // 👈 use this alias everywhere
  /** @private {ImageUploadService} Service for image upload functionality */
  imageUploadSrv = inject(ImageUploadService);
  /** @private {Router} Angular router for navigation between components */
  router = inject(Router);
  /** @private {AuthService} Service for authentication and user role management */
  // Added
  authService = inject(AuthService);
  // Added
  /* ───────── component state ───────── */
  /** @property {LangCode} currentLang - Currently active language for question editing */
  currentLang = "en";
  /** @property {string} tagsInputString - String representation of question tags for ngModel binding */
  tagsInputString = "";
  // ADDED for ngModel binding
  /**
   * @property {Object} question - Main question object containing all question data
   * @property {Record<LangCode, LangPack>} question.translations - Multilingual content storage
   * @property {string} question.difficulty - Question difficulty level
   * @property {string} question.type - Question type (single, multiple, etc.)
   * @property {string} question.status - Question status (Draft, Published, etc.)
   * @property {string} question.branchId - Selected educational branch ID
   * @property {string} question.subjectId - Selected subject ID within branch
   * @property {string} question.topicId - Selected topic ID within subject
   * @property {string} question.subtopicId - Selected subtopic ID within topic
   * @property {string[]} question.tags - Array of question tags for categorization
   * @property {number|undefined} question.recommendedTimeAllotment - Suggested time in minutes
   * @property {string} question.internalNotes - Internal notes for question management
   */
  question = {
    translations: {
      en: {
        questionText: "",
        options: [
          { text: "", img: "", isCorrect: false },
          { text: "", img: "", isCorrect: false }
        ],
        explanations: [],
        images: []
      },
      // Initialize images
      hi: {
        questionText: "",
        options: [
          { text: "", img: "", isCorrect: false },
          { text: "", img: "", isCorrect: false }
        ],
        explanations: [],
        images: []
      }
      // Initialize images
    },
    difficulty: "",
    type: "single",
    status: "Draft",
    // Default status
    branchId: "",
    subjectId: "",
    topicId: "",
    subtopicId: "",
    tags: [],
    // Initialize new field
    recommendedTimeAllotment: void 0,
    // Initialize new field
    internalNotes: ""
    // Initialize new field
  };
  /** @property {any[]} branches - Available educational branches for selection */
  branches = [];
  /** @property {any[]} subjects - Available subjects for the selected branch */
  subjects = [];
  /** @property {any[]} topics - Available topics for the selected subject */
  topics = [];
  /** @property {any[]} subtopics - Available subtopics for the selected topic */
  subtopics = [];
  /** @property {number} currentYear - Current year for question history tracking */
  currentYear = (/* @__PURE__ */ new Date()).getFullYear();
  /** @property {Object} histEntry - Template for new question history entry */
  histEntry = { examName: "", year: this.currentYear };
  /** @property {Array} histList - List of historical exam associations */
  histList = [];
  /* ───────── Image Upload Properties ───────── */
  /** @property {Map<string, File>} selectedFiles - Map of selected files for upload */
  selectedFiles = /* @__PURE__ */ new Map();
  /** @property {Map<string, string>} uploadStatuses - Upload status for each image */
  uploadStatuses = /* @__PURE__ */ new Map();
  /** @property {Map<string, string>} uploadProgress - Upload progress for each image */
  uploadProgress = /* @__PURE__ */ new Map();
  /** @property {Map<string, string>} previewUrls - Preview URLs for selected files */
  previewUrls = /* @__PURE__ */ new Map();
  // Mathematical symbols for toolbar
  greekSymbols = [
    { symbol: "\u03B1", latex: "\\alpha", name: "alpha" },
    { symbol: "\u03B2", latex: "\\beta", name: "beta" },
    { symbol: "\u03B3", latex: "\\gamma", name: "gamma" },
    { symbol: "\u03B4", latex: "\\delta", name: "delta" },
    { symbol: "\u03B5", latex: "\\epsilon", name: "epsilon" },
    { symbol: "\u03C0", latex: "\\pi", name: "pi" },
    { symbol: "\u03BB", latex: "\\lambda", name: "lambda" },
    { symbol: "\u03BC", latex: "\\mu", name: "mu" },
    { symbol: "\u03C3", latex: "\\sigma", name: "sigma" },
    { symbol: "\u03B8", latex: "\\theta", name: "theta" },
    { symbol: "\u03A9", latex: "\\Omega", name: "Omega" },
    { symbol: "\u0394", latex: "\\Delta", name: "Delta" }
  ];
  operators = [
    { symbol: "\u2264", latex: "\\leq", name: "less than or equal" },
    { symbol: "\u2265", latex: "\\geq", name: "greater than or equal" },
    { symbol: "\u2260", latex: "\\neq", name: "not equal" },
    { symbol: "\u221E", latex: "\\infty", name: "infinity" },
    { symbol: "\u2211", latex: "\\sum", name: "sum" },
    { symbol: "\u220F", latex: "\\prod", name: "product" },
    { symbol: "\u222B", latex: "\\int", name: "integral" },
    { symbol: "\u221A", latex: "\\sqrt{}", name: "square root" },
    { symbol: "\xB1", latex: "\\pm", name: "plus minus" },
    { symbol: "\u2208", latex: "\\in", name: "element of" },
    { symbol: "\u2282", latex: "\\subset", name: "subset" },
    { symbol: "\u2200", latex: "\\forall", name: "for all" }
  ];
  /* ───────────────────────────────────── */
  /**
   * @method ngOnInit
   * @description Angular lifecycle hook for component initialization.
   * Loads the initial data including available educational branches.
   *
   * @returns {void}
   *
   * @example
   * ```typescript
   * // Automatically called by Angular framework
   * // Fetches branches data for hierarchy dropdown population
   * ngOnInit() {
   *   this.branchSrv.getBranches().subscribe(data => {
   *     this.branches = Array.isArray(data) ? data : data.branches || [];
   *   });
   * }
   * ```
   */
  ngOnInit() {
    this.branchSrv.getBranches().subscribe({
      next: (data) => {
      },
      error: (err) => {
        this.branches = [];
      }
    });
  }
  /* --- helpers --- */
  /**
   * @method switchLanguage
   * @description Switches the active language for question editing interface.
   *
   * @param {LangCode} lang - The language code to switch to ('en' or 'hi')
   * @returns {void}
   *
   * @example
   * ```typescript
   * // Switch to Hindi language editing
   * this.switchLanguage('hi');
   *
   * // Switch to English language editing
   * this.switchLanguage('en');
   * ```
   */
  switchLanguage(lang) {
    this.currentLang = lang;
  }
  /**
   * @getter langPack
   * @description Gets the current language pack for editing, ensuring proper initialization.
   * Provides access to the translation data for the currently selected language.
   *
   * @returns {LangPack} Language-specific content package for current language
   *
   * @example
   * ```typescript
   * // Access current language question text
   * const questionText = this.langPack.questionText;
   *
   * // Add new option to current language
   * this.langPack.options.push({text: 'New option', img: '', isCorrect: false});
   * ```
   */
  get langPack() {
    if (!this.question.translations[this.currentLang]) {
      this.question.translations[this.currentLang] = {
        questionText: "",
        options: [{ text: "", img: "", isCorrect: false }, { text: "", img: "", isCorrect: false }],
        explanations: [],
        images: []
      };
    } else if (!this.question.translations[this.currentLang].images) {
      this.question.translations[this.currentLang].images = [];
    }
    return this.question.translations[this.currentLang];
  }
  /**
   * @method addOption
   * @description Adds a new empty option to the current language's question options.
   *
   * @returns {void}
   *
   * @example
   * ```typescript
   * // Add a new option to current language
   * this.addOption();
   * // Result: langPack.options gets new {text:'', img:'', isCorrect:false}
   * ```
   */
  addOption() {
    this.langPack.options.push({ text: "", img: "", isCorrect: false });
  }
  /**
   * @method removeOption
   * @description Removes an option from the current language's question options.
   * Maintains minimum of 2 options for question validity.
   *
   * @param {number} i - Index of the option to remove
   * @returns {void}
   *
   * @example
   * ```typescript
   * // Remove the third option (index 2)
   * this.removeOption(2);
   * // Note: Will not remove if only 2 options remain
   * ```
   */
  removeOption(i) {
    if (this.langPack.options.length > 2)
      this.langPack.options.splice(i, 1);
  }
  /**
   * @method addExplanation
   * @description Adds a new empty explanation to the current language's question explanations.
   *
   * @returns {void}
   *
   * @example
   * ```typescript
   * // Add a new explanation
   * this.addExplanation();
   * // Result: langPack.explanations gets new {type:'text', label:'', content:''}
   * ```
   */
  addExplanation() {
    this.langPack.explanations.push({ type: "text", label: "", content: "" });
  }
  /**
   * @method removeExplanation
   * @description Removes an explanation from the current language's question explanations.
   *
   * @param {number} i - Index of the explanation to remove
   * @returns {void}
   *
   * @example
   * ```typescript
   * // Remove the first explanation
   * this.removeExplanation(0);
   * ```
   */
  removeExplanation(i) {
    this.langPack.explanations.splice(i, 1);
  }
  // ADDED: Methods to manage question images for the current translation
  /**
   * @method addQuestionImage
   * @description Adds a new empty image URL to the current language's question images.
   * Ensures the images array is properly initialized before adding.
   *
   * @returns {void}
   *
   * @example
   * ```typescript
   * // Add an image slot for current language
   * this.addQuestionImage();
   * // User can then enter image URL in the form
   * ```
   */
  addQuestionImage() {
    if (!this.langPack.images) {
      this.langPack.images = [];
    }
    this.langPack.images.push("");
  }
  /**
   * @method removeQuestionImage
   * @description Removes an image URL from the current language's question images.
   *
   * @param {number} imgIndex - Index of the image to remove
   * @returns {void}
   *
   * @example
   * ```typescript
   * // Remove the second image (index 1)
   * this.removeQuestionImage(1);
   * ```
   */
  removeQuestionImage(imgIndex) {
    if (this.langPack.images) {
      this.langPack.images.splice(imgIndex, 1);
    }
  }
  // ADDED: Method to manage option image (sets to empty string for now)
  /**
   * @method removeOptionImage
   * @description Removes an image from a specific option by setting it to empty string.
   *
   * @param {number} optionIndex - Index of the option whose image should be removed
   * @returns {void}
   *
   * @example
   * ```typescript
   * // Remove image from the first option
   * this.removeOptionImage(0);
   * ```
   */
  removeOptionImage(optionIndex) {
    if (this.langPack.options && this.langPack.options[optionIndex]) {
      this.langPack.options[optionIndex].img = "";
    }
  }
  // ADDED: Method to handle changes to the tags input string
  /**
   * @method onTagsInputChange
   * @description Handles changes to the tags input string, converting comma-separated
   * values to an array of trimmed tags.
   *
   * @param {string} value - Comma-separated string of tags
   * @returns {void}
   *
   * @example
   * ```typescript
   * // Input: "math, algebra, equations"
   * this.onTagsInputChange("math, algebra, equations");
   * // Result: question.tags = ["math", "algebra", "equations"]
   * ```
   */
  onTagsInputChange(value) {
    this.tagsInputString = value;
    if (value && value.trim() !== "") {
      this.question.tags = value.split(",").map((tag) => tag.trim()).filter((tag) => tag !== "");
    } else {
      this.question.tags = [];
    }
  }
  /**
   * @method addHistory
   * @description Adds a new question history entry with exam name and year.
   *
   * @returns {void}
   *
   * @example
   * ```typescript
   * // Add history entry for JEE Main 2024
   * this.histEntry = { examName: 'JEE Main', year: 2024 };
   * this.addHistory();
   * ```
   */
  addHistory() {
    if (this.histEntry.examName.trim()) {
      this.histList.push(__spreadValues({}, this.histEntry));
      this.histEntry = { examName: "", year: this.currentYear };
    }
  }
  /**
   * @method insertSymbol
   * @description Inserts a mathematical symbol or LaTeX expression into the question text
   *
   * @param {string} latex - LaTeX expression to insert
   * @returns {void}
   */
  insertSymbol(latex) {
    const currentText = this.langPack.questionText || "";
    this.langPack.questionText = currentText + latex;
  }
  /* --- cascades --- */
  /**
   * @method onBranchChange
   * @description Handles educational branch selection change, triggering cascade updates
   * for dependent dropdown lists and resetting child selections.
   *
   * @param {string} id - Selected branch ID
   * @returns {void}
   *
   * @example
   * ```typescript
   * // Select Engineering branch
   * this.onBranchChange('branch_engineering_id');
   * // Loads subjects for engineering, clears subject/topic/subtopic selections
   * ```
   */
  onBranchChange(id) {
    this.question.branchId = id;
    this.subjects = this.topics = this.subtopics = [];
    this.question.subjectId = this.question.topicId = this.question.subtopicId = "";
    if (id && id !== "Not-mentioned") {
      this.subjectSrv.getSubjects(id).subscribe({
        next: (s) => this.subjects = s,
        error: (err) => {
          this.subjects = [];
        }
      });
    }
  }
  /**
   * @method onSubjectChange
   * @description Handles subject selection change, loading topics for the selected subject
   * and resetting dependent selections.
   *
   * @param {string} id - Selected subject ID
   * @returns {void}
   *
   * @example
   * ```typescript
   * // Select Mathematics subject
   * this.onSubjectChange('subject_math_id');
   * // Loads topics for mathematics, clears topic/subtopic selections
   * ```
   */
  onSubjectChange(id) {
    this.question.subjectId = id;
    this.topics = this.subtopics = [];
    this.question.topicId = this.question.subtopicId = "";
    if (id && id !== "Not-mentioned") {
      this.topicSrv.getTopics(id).subscribe({
        next: (t) => this.topics = t,
        error: (err) => {
          this.topics = [];
        }
      });
    }
  }
  /**
   * @method onTopicChange
   * @description Handles topic selection change, loading subtopics for the selected topic
   * and resetting subtopic selection.
   *
   * @param {string} id - Selected topic ID
   * @returns {void}
   *
   * @example
   * ```typescript
   * // Select Algebra topic
   * this.onTopicChange('topic_algebra_id');
   * // Loads subtopics for algebra, clears subtopic selection
   * ```
   */
  onTopicChange(id) {
    this.question.topicId = id;
    this.subtopics = [];
    this.question.subtopicId = "";
    if (id && id !== "Not-mentioned") {
      this.subtopicSrv.getSubtopics(id).subscribe({
        next: (st) => this.subtopics = st,
        error: (err) => {
          this.subtopics = [];
        }
      });
    }
  }
  /* ───────── submit ───────── */
  /**
   * @method addQuestion
   * @description Alias method for submit() to maintain backward compatibility.
   *
   * @param {NgForm} form - Angular reactive form containing question data
   * @returns {void}
   */
  addQuestion(form) {
    this.submit(form);
  }
  /**
   * @method submit
   * @description Processes and submits the question data to the backend.
   * Validates form data, processes multilingual translations, and creates
   * the final payload for question creation.
   *
   * @param {NgForm} form - Angular reactive form containing question data
   * @returns {void}
   *
   * @example
   * ```typescript
   * // Called when form is submitted
   * onSubmit(form: NgForm) {
   *   this.submit(form);
   * }
   *
   * // Process flow:
   * // 1. Validate form data
   * // 2. Create deep copy of question object
   * // 3. Process translations for each language
   * // 4. Filter out empty content
   * // 5. Submit to backend via QuestionService
   * ```
   */
  submit(form) {
    if (form.invalid) {
      form.control.markAllAsTouched();
      return;
    }
    const baseLang = "en";
    const questionCopy = JSON.parse(JSON.stringify(this.question));
    const currentUserRole = this.authService.getUserRole();
    if (currentUserRole === "admin") {
      questionCopy.status = "Pending Review";
    } else if (currentUserRole === "superadmin") {
    }
    const payload = {
      difficulty: questionCopy.difficulty,
      type: questionCopy.type,
      status: questionCopy.status,
      // Status is now dynamically set or from form
      branchId: questionCopy.branchId,
      // Use branchId for branch
      subjectId: questionCopy.subjectId,
      // Use subjectId for subject
      topicId: questionCopy.topicId,
      // Use topicId for topic
      subtopicId: questionCopy.subtopicId,
      // Use subtopicId for subTopic
      tags: questionCopy.tags,
      // Add tags
      recommendedTimeAllotment: questionCopy.recommendedTimeAllotment,
      // Add time
      internalNotes: questionCopy.internalNotes,
      // Add notes
      questionHistory: this.histList,
      // Add history
      translations: []
    };
    const filledTranslations = Object.entries(questionCopy.translations).map(([lang, packUntyped]) => {
      const pack = packUntyped;
      pack.options = Array.isArray(pack.options) ? pack.options : [];
      pack.explanations = Array.isArray(pack.explanations) ? pack.explanations : [];
      pack.images = Array.isArray(pack.images) ? pack.images : [];
      return {
        lang,
        questionText: pack.questionText,
        options: pack.options.filter((o) => o.text && o.text.trim()),
        // Filter out empty options
        explanations: pack.explanations,
        images: pack.images.filter((img) => img && img.trim() !== "")
        // Filter out empty image URLs
      };
    }).filter((p) => p.questionText && p.questionText.trim() && p.options.length >= 2);
    payload.translations = filledTranslations;
    this.questionSrv.addQuestion(payload).subscribe({
      next: () => alert("Saved!"),
      error: (err) => alert("Save failed: " + err.message)
    });
  }
  /* quick-nav */
  /**
   * @method goToAddBranch
   * @description Navigates to the add branch component for creating new educational branches.
   *
   * @returns {void}
   *
   * @example
   * ```typescript
   * // Navigate to create new branch
   * this.goToAddBranch();
   * ```
   */
  goToAddBranch() {
    this.router.navigate(["/branches/new"]);
  }
  /**
   * @method goToAddSubject
   * @description Navigates to the add subject component for creating new subjects.
   *
   * @returns {void}
   *
   * @example
   * ```typescript
   * // Navigate to create new subject
   * this.goToAddSubject();
   * ```
   */
  goToAddSubject() {
    this.router.navigate(["/subjects/new"]);
  }
  /**
   * @method goToAddTopic
   * @description Navigates to the add topic component for creating new topics.
   *
   * @returns {void}
   *
   * @example
   * ```typescript
   * // Navigate to create new topic
   * this.goToAddTopic();
   * ```
   */
  goToAddTopic() {
    this.router.navigate(["/topics/new"]);
  }
  /**
   * @method goToAddSubtopic
   * @description Navigates to the add subtopic component for creating new subtopics.
   *
   * @returns {void}
   *
   * @example
   * ```typescript
   * // Navigate to create new subtopic
   * this.goToAddSubtopic();
   * ```
   */
  goToAddSubtopic() {
    this.router.navigate(["/subtopics/new"]);
  }
  /* ───────── Image Upload Methods ───────── */
  /**
   * @method onQuestionImageFileSelected
   * @description Handles file selection for question images and generates preview
   *
   * @param {Event} event - File input change event
   * @param {number} imgIndex - Index of the image being uploaded
   * @returns {void}
   */
  onQuestionImageFileSelected(event, imgIndex) {
    const target = event.target;
    const file = target.files?.[0];
    if (!file)
      return;
    const validation = this.imageUploadSrv.validateImageFile(file);
    if (!validation.isValid) {
      alert(validation.error);
      return;
    }
    const fileKey = `question_${this.currentLang}_${imgIndex}`;
    this.selectedFiles.set(fileKey, file);
    this.uploadStatuses.set(fileKey, "selected");
    this.imageUploadSrv.generatePreviewUrl(file).then((previewUrl) => {
      this.previewUrls.set(fileKey, previewUrl);
    });
  }
  /**
   * @method onOptionImageFileSelected
   * @description Handles file selection for option images and generates preview
   *
   * @param {Event} event - File input change event
   * @param {number} optionIndex - Index of the option
   * @returns {void}
   */
  onOptionImageFileSelected(event, optionIndex) {
    const target = event.target;
    const file = target.files?.[0];
    if (!file)
      return;
    const validation = this.imageUploadSrv.validateImageFile(file);
    if (!validation.isValid) {
      alert(validation.error);
      return;
    }
    const fileKey = `option_${this.currentLang}_${optionIndex}`;
    this.selectedFiles.set(fileKey, file);
    this.uploadStatuses.set(fileKey, "selected");
    this.imageUploadSrv.generatePreviewUrl(file).then((previewUrl) => {
      this.previewUrls.set(fileKey, previewUrl);
    });
  }
  /**
   * @method uploadQuestionImage
   * @description Uploads a selected question image to the server
   *
   * @param {number} imgIndex - Index of the image being uploaded
   * @returns {void}
   */
  uploadQuestionImage(imgIndex) {
    const fileKey = `question_${this.currentLang}_${imgIndex}`;
    const file = this.selectedFiles.get(fileKey);
    if (!file || !this.question.branchId || !this.question.subjectId || !this.question.topicId) {
      alert("Please select hierarchy (Branch, Subject, Topic) before uploading images.");
      return;
    }
    this.uploadStatuses.set(fileKey, "uploading");
    this.uploadProgress.set(fileKey, "0%");
    const uploadRequest = {
      file,
      branchId: this.question.branchId,
      subjectId: this.question.subjectId,
      topicId: this.question.topicId,
      imageFor: "body"
    };
    this.imageUploadSrv.uploadQuestionImage(uploadRequest).subscribe({
      next: (response) => {
        this.langPack.images[imgIndex] = response.imageUrl;
        this.uploadStatuses.set(fileKey, "completed");
        this.uploadProgress.set(fileKey, "100%");
        this.selectedFiles.delete(fileKey);
        this.previewUrls.delete(fileKey);
      },
      error: (error) => {
        console.error("Image upload failed:", error);
        this.uploadStatuses.set(fileKey, "failed");
        alert("Image upload failed. Please try again.");
      }
    });
  }
  /**
   * @method uploadOptionImage
   * @description Uploads a selected option image to the server
   *
   * @param {number} optionIndex - Index of the option
   * @returns {void}
   */
  uploadOptionImage(optionIndex) {
    const fileKey = `option_${this.currentLang}_${optionIndex}`;
    const file = this.selectedFiles.get(fileKey);
    if (!file || !this.question.branchId || !this.question.subjectId || !this.question.topicId) {
      alert("Please select hierarchy (Branch, Subject, Topic) before uploading images.");
      return;
    }
    this.uploadStatuses.set(fileKey, "uploading");
    this.uploadProgress.set(fileKey, "0%");
    const uploadRequest = {
      file,
      branchId: this.question.branchId,
      subjectId: this.question.subjectId,
      topicId: this.question.topicId,
      imageFor: "option",
      optionIndex
    };
    this.imageUploadSrv.uploadQuestionImage(uploadRequest).subscribe({
      next: (response) => {
        this.langPack.options[optionIndex].img = response.imageUrl;
        this.uploadStatuses.set(fileKey, "completed");
        this.uploadProgress.set(fileKey, "100%");
        this.selectedFiles.delete(fileKey);
        this.previewUrls.delete(fileKey);
      },
      error: (error) => {
        this.uploadStatuses.set(fileKey, "failed");
        alert("Option image upload failed. Please try again.");
      }
    });
  }
  /**
   * @method getFileKey
   * @description Generates a unique key for file tracking
   *
   * @param {string} type - Type of image ('question' or 'option')
   * @param {number} index - Index of the image/option
   * @returns {string} Unique file key
   */
  getFileKey(type, index) {
    return `${type}_${this.currentLang}_${index}`;
  }
  /**
   * @method getUploadStatus
   * @description Gets the upload status for a specific image
   *
   * @param {string} type - Type of image ('question' or 'option')
   * @param {number} index - Index of the image/option
   * @returns {string} Upload status
   */
  getUploadStatus(type, index) {
    const fileKey = this.getFileKey(type, index);
    return this.uploadStatuses.get(fileKey) || "none";
  }
  /**
   * @method getPreviewUrl
   * @description Gets the preview URL for a selected file
   *
   * @param {string} type - Type of image ('question' or 'option')
   * @param {number} index - Index of the image/option
   * @returns {string|null} Preview URL or null
   */
  getPreviewUrl(type, index) {
    const fileKey = this.getFileKey(type, index);
    return this.previewUrls.get(fileKey) || null;
  }
  /**
   * @method deleteImage
   * @description Deletes an uploaded image from the server
   *
   * @param {string} imageUrl - URL of the image to delete
   * @param {string} type - Type of image ('question' or 'option')
   * @param {number} index - Index of the image/option
   * @returns {void}
   */
  deleteImage(imageUrl, type, index) {
    if (!imageUrl)
      return;
    this.imageUploadSrv.deleteImage(imageUrl).subscribe({
      next: () => {
        if (type === "question") {
          this.langPack.images[index] = "";
        } else if (type === "option") {
          this.langPack.options[index].img = "";
        }
        const fileKey = this.getFileKey(type, index);
        this.selectedFiles.delete(fileKey);
        this.uploadStatuses.delete(fileKey);
        this.previewUrls.delete(fileKey);
        this.uploadProgress.delete(fileKey);
      },
      error: (error) => {
        alert("Failed to delete image. Please try again.");
      }
    });
  }
  static \u0275fac = function AddQuestionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AddQuestionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _AddQuestionComponent, selectors: [["app-add-question"]], decls: 244, vars: 41, consts: [["f", "ngForm"], ["br", "ngModel"], ["su", "ngModel"], ["to", "ngModel"], ["st", "ngModel"], ["qt", "ngModel"], ["statusCtrl", "ngModel"], ["diff", "ngModel"], ["typ", "ngModel"], [1, "min-h-screen", "bg-gray-50", "py-6", "px-4", "sm:px-6", "lg:px-8"], [1, "max-w-4xl", "mx-auto"], [1, "mb-8"], [1, "text-3xl", "font-bold", "text-gray-900", "mb-2"], [1, "text-gray-600"], [1, "bg-white", "rounded-xl", "shadow-sm", "border", "border-gray-200", "p-6", "mb-6"], [1, "flex", "items-center", "justify-between", "mb-4"], [1, "text-lg", "font-semibold", "text-gray-900"], [1, "flex", "items-center", "space-x-2", "bg-gray-100", "p-1", "rounded-lg"], ["type", "button", 1, "px-4", "py-2", "text-sm", "rounded-md", "transition-all", "duration-200", 3, "click"], [1, "text-sm", "text-gray-500"], [1, "font-medium"], [1, "bg-white", "rounded-xl", "shadow-sm", "border", "border-gray-200"], ["novalidate", "", 1, "space-y-8", "p-8", 3, "ngSubmit"], [1, "form-section", "bg-gradient-to-r", "from-purple-50", "to-blue-50", "p-6", "rounded-lg", "border-2", "border-purple-200"], [1, "text-lg", "font-semibold", "text-gray-900", "mb-4", "flex", "items-center"], ["fill", "none", "stroke", "currentColor", "viewBox", "0 0 24 24", 1, "w-5", "h-5", "mr-2", "text-purple-600"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"], [1, "text-sm", "text-purple-700", "mb-4"], [1, "grid", "grid-cols-1", "md:grid-cols-2", "gap-6"], [1, "form-group"], [1, "block", "text-sm", "font-medium", "text-gray-700", "mb-2"], [1, "flex", "space-x-2"], ["name", "branchId", 1, "form-select", "flex-1", "px-3", "py-2", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-primary-500", "focus:border-primary-500", 3, "ngModelChange", "change", "ngModel"], ["value", "Not-mentioned"], [3, "value", 4, "ngFor", "ngForOf"], ["type", "button", 1, "btn-secondary", "px-3", "py-2", "bg-primary-100", "text-primary-700", "rounded-lg", "hover:bg-primary-200", "transition-colors", "whitespace-nowrap", 3, "click"], ["name", "subjectId", 1, "form-select", "flex-1", "px-3", "py-2", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-primary-500", "focus:border-primary-500", 3, "ngModelChange", "change", "ngModel"], ["name", "topicId", 1, "form-select", "flex-1", "px-3", "py-2", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-primary-500", "focus:border-primary-500", 3, "ngModelChange", "change", "ngModel"], ["name", "subtopicId", 1, "form-select", "flex-1", "px-3", "py-2", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-primary-500", "focus:border-primary-500", 3, "ngModelChange", "ngModel"], [1, "form-section"], ["fill", "none", "stroke", "currentColor", "viewBox", "0 0 24 24", 1, "w-5", "h-5", "mr-2", "text-primary-600"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"], ["for", "questionText", 1, "block", "text-sm", "font-medium", "text-gray-700", "mb-2"], [1, "text-red-500"], ["type", "text", "required", "", "placeholder", "Enter your question text here...", 1, "form-input", "w-full", "px-4", "py-3", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-primary-500", "focus:border-primary-500", "transition-colors", 3, "ngModelChange", "name", "ngModel"], ["class", "mt-2 text-sm text-red-600", 4, "ngIf"], [1, "mt-3", "p-3", "bg-gray-50", "rounded-lg", "border", "border-gray-200"], [1, "text-sm", "font-medium", "text-gray-700", "mb-2"], [1, "space-y-3"], [1, "text-xs", "font-medium", "text-gray-600", "mb-1"], [1, "flex", "flex-wrap", "gap-1"], ["type", "button", "class", "px-2 py-1 text-sm border border-gray-300 rounded hover:bg-blue-50 hover:border-blue-300 transition-colors", 3, "title", "click", 4, "ngFor", "ngForOf"], [1, "text-xs", "text-gray-500"], ["class", "mt-4 p-4 bg-gray-50 rounded-lg border border-gray-200", 4, "ngIf"], ["fill", "none", "stroke", "currentColor", "viewBox", "0 0 24 24", 1, "w-5", "h-5", "mr-2", "text-secondary-600"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"], [1, "space-y-4"], ["class", "p-4 bg-gray-50 rounded-lg border-2 border-dashed border-gray-300", 4, "ngFor", "ngForOf"], ["type", "button", 1, "btn-secondary", "w-full", "px-4", "py-2", "bg-gray-100", "text-gray-700", "rounded-lg", "hover:bg-gray-200", "transition-colors", "flex", "items-center", "justify-center", 3, "click"], ["fill", "none", "stroke", "currentColor", "viewBox", "0 0 24 24", 1, "w-4", "h-4", "mr-2"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M12 6v6m0 0v6m0-6h6m-6 0H6"], ["fill", "none", "stroke", "currentColor", "viewBox", "0 0 24 24", 1, "w-5", "h-5", "mr-2", "text-success-600"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4"], ["class", "p-4 border border-gray-200 rounded-lg bg-white", 4, "ngFor", "ngForOf"], ["fill", "none", "stroke", "currentColor", "viewBox", "0 0 24 24", 1, "w-5", "h-5", "mr-2", "text-warning-600"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"], ["fill", "none", "stroke", "currentColor", "viewBox", "0 0 24 24", 1, "w-5", "h-5", "mr-2", "text-indigo-600"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M15 12a3 3 0 11-6 0 3 3 0 016 0z"], [1, "grid", "grid-cols-1", "md:grid-cols-3", "gap-6"], ["for", "status", 1, "block", "text-sm", "font-medium", "text-gray-700", "mb-2"], ["id", "status", "name", "status", "required", "", 1, "form-select", "w-full", "px-3", "py-2", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-primary-500", "focus:border-primary-500", 3, "ngModelChange", "ngModel"], ["value", "draft"], ["value", "Published"], ["value", "Pending Review"], ["value", "active"], ["value", "inactive"], ["name", "difficulty", 1, "form-select", "w-full", "px-3", "py-2", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-primary-500", "focus:border-primary-500", 3, "ngModelChange", "ngModel"], ["value", "Easy"], ["value", "Medium"], ["value", "Hard"], ["name", "type", "required", "", 1, "form-select", "w-full", "px-3", "py-2", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-primary-500", "focus:border-primary-500", 3, "ngModelChange", "ngModel"], ["value", ""], ["value", "single"], ["value", "multiple"], ["value", "integer"], ["value", "matrix"], ["fill", "none", "stroke", "currentColor", "viewBox", "0 0 24 24", 1, "w-5", "h-5", "mr-2", "text-green-600"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"], [1, "space-y-6"], ["for", "tags", 1, "block", "text-sm", "font-medium", "text-gray-700", "mb-2"], ["type", "text", "id", "tags", "name", "tags", "placeholder", "e.g., algebra, geometry, important", 1, "form-input", "w-full", "px-4", "py-3", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-primary-500", "focus:border-primary-500", 3, "ngModelChange", "ngModel"], [1, "mt-1", "text-sm", "text-gray-500"], ["for", "recommendedTime", 1, "block", "text-sm", "font-medium", "text-gray-700", "mb-2"], ["type", "number", "id", "recommendedTime", "name", "recommendedTime", "placeholder", "e.g., 300", "min", "1", 1, "form-input", "w-full", "px-4", "py-3", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-primary-500", "focus:border-primary-500", 3, "ngModelChange", "ngModel"], ["for", "internalNotes", 1, "block", "text-sm", "font-medium", "text-gray-700", "mb-2"], ["id", "internalNotes", "name", "internalNotes", "rows", "4", "placeholder", "Internal notes or comments for this question...", 1, "form-textarea", "w-full", "px-4", "py-3", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-primary-500", "focus:border-primary-500", "resize-y", 3, "ngModelChange", "ngModel"], ["fill", "none", "stroke", "currentColor", "viewBox", "0 0 24 24", 1, "w-5", "h-5", "mr-2", "text-orange-600"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"], [1, "bg-gray-50", "rounded-lg", "p-4"], [1, "grid", "grid-cols-1", "md:grid-cols-3", "gap-4", "mb-4"], [1, "block", "text-sm", "font-medium", "text-gray-700", "mb-1"], ["name", "histExam", "type", "text", "placeholder", "e.g., JEE Main 2023", 1, "form-input", "w-full", "px-3", "py-2", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-primary-500", "focus:border-primary-500", 3, "ngModelChange", "ngModel"], ["name", "histYear", "type", "number", "placeholder", "2023", 1, "form-input", "w-full", "px-3", "py-2", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-primary-500", "focus:border-primary-500", 3, "ngModelChange", "min", "max", "ngModel"], [1, "flex", "items-end"], ["type", "button", 1, "btn-primary", "w-full", "px-4", "py-2", "bg-primary-600", "text-white", "rounded-lg", "hover:bg-primary-700", "transition-colors", 3, "click"], ["class", "space-y-2", 4, "ngIf"], ["class", "text-sm text-gray-500 italic", 4, "ngIf"], [1, "flex", "justify-end", "pt-6", "border-t", "border-gray-200"], ["type", "submit", 1, "btn-primary", "px-8", "py-3", "bg-gradient-to-r", "from-primary-600", "to-primary-700", "text-white", "font-semibold", "rounded-lg", "hover:from-primary-700", "hover:to-primary-800", "focus:ring-4", "focus:ring-primary-200", "disabled:opacity-50", "disabled:cursor-not-allowed", "transition-all", "duration-200", "transform", "hover:scale-105", 3, "disabled"], [1, "flex", "items-center"], ["fill", "none", "stroke", "currentColor", "viewBox", "0 0 24 24", 1, "w-5", "h-5", "mr-2"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M5 13l4 4L19 7"], [3, "value"], [1, "mt-2", "text-sm", "text-red-600"], ["fill", "none", "stroke", "currentColor", "viewBox", "0 0 24 24", 1, "w-4", "h-4", "mr-1"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16c-.77.833.192 2.5 1.732 2.5z"], ["type", "button", 1, "px-2", "py-1", "text-sm", "border", "border-gray-300", "rounded", "hover:bg-blue-50", "hover:border-blue-300", "transition-colors", 3, "click", "title"], [1, "mt-4", "p-4", "bg-gray-50", "rounded-lg", "border", "border-gray-200"], [1, "text-gray-900", 3, "content"], [1, "p-4", "bg-gray-50", "rounded-lg", "border-2", "border-dashed", "border-gray-300"], [1, "flex", "items-start", "space-x-4", "mb-4"], [1, "flex-shrink-0"], ["class", "w-24 h-24 object-cover rounded-lg border border-gray-200", 3, "src", "alt", 4, "ngIf"], ["class", "w-24 h-24 object-cover rounded-lg border border-blue-300", 3, "src", "alt", 4, "ngIf"], ["class", "w-24 h-24 bg-gray-200 rounded-lg flex items-center justify-center", 4, "ngIf"], [1, "flex-1"], [1, "text-sm", "font-medium", "text-gray-900", "mb-2"], [1, "text-xs", "text-gray-600", "mb-2"], [3, "ngClass"], [1, "flex", "items-center", "space-x-3"], ["type", "file", "accept", "image/jpeg,image/jpg,image/png,image/gif", 1, "block", "w-full", "text-sm", "text-gray-500", "file:mr-4", "file:py-2", "file:px-4", "file:rounded-full", "file:border-0", "file:text-sm", "file:font-semibold", "file:bg-blue-50", "file:text-blue-700", "hover:file:bg-blue-100", 3, "change"], ["type", "button", 1, "px-4", "py-2", "bg-blue-600", "text-white", "text-sm", "rounded-lg", "hover:bg-blue-700", "disabled:bg-gray-300", "disabled:cursor-not-allowed", "transition-colors", 3, "click", "disabled"], [1, "flex", "items-center", "space-x-2"], ["type", "button", "class", "px-3 py-1 bg-red-100 text-red-700 text-sm rounded-lg hover:bg-red-200 transition-colors", 3, "click", 4, "ngIf"], ["type", "button", 1, "px-3", "py-1", "bg-gray-100", "text-gray-700", "text-sm", "rounded-lg", "hover:bg-gray-200", "transition-colors", 3, "click"], ["class", "p-2 bg-yellow-50 border border-yellow-200 rounded text-sm text-yellow-800", 4, "ngIf"], [1, "w-24", "h-24", "object-cover", "rounded-lg", "border", "border-gray-200", 3, "src", "alt"], [1, "w-24", "h-24", "object-cover", "rounded-lg", "border", "border-blue-300", 3, "src", "alt"], [1, "w-24", "h-24", "bg-gray-200", "rounded-lg", "flex", "items-center", "justify-center"], ["fill", "none", "stroke", "currentColor", "viewBox", "0 0 24 24", 1, "w-8", "h-8", "text-gray-400"], ["type", "button", 1, "px-3", "py-1", "bg-red-100", "text-red-700", "text-sm", "rounded-lg", "hover:bg-red-200", "transition-colors", 3, "click"], [1, "p-2", "bg-yellow-50", "border", "border-yellow-200", "rounded", "text-sm", "text-yellow-800"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 15.5c-.77.833.192 2.5 1.732 2.5z"], [1, "p-4", "border", "border-gray-200", "rounded-lg", "bg-white"], [1, "flex", "items-start", "justify-between", "mb-3"], [1, "text-sm", "font-medium", "text-gray-900"], [1, "inline-flex", "items-center"], ["type", "checkbox", 1, "form-checkbox", "h-4", "w-4", "text-primary-600", "rounded", "focus:ring-primary-500", "border-gray-300", 3, "ngModelChange", "name", "ngModel"], [1, "ml-2", "text-sm", "text-gray-700", "font-medium"], ["type", "button", 1, "btn-danger", "px-2", "py-1", "text-xs", "bg-red-100", "text-red-700", "rounded", "disabled:opacity-50", "disabled:cursor-not-allowed", "hover:bg-red-200", "transition-colors", 3, "click", "disabled"], ["type", "text", "required", "", "placeholder", "Enter option text", 1, "form-input", "w-full", "px-3", "py-2", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-primary-500", "focus:border-primary-500", 3, "ngModelChange", "name", "ngModel"], ["class", "mt-2 p-2 bg-white rounded border border-gray-100", 4, "ngIf"], [1, "p-3", "bg-gray-50", "rounded-lg", "border", "border-gray-200"], [1, "flex", "items-start", "space-x-3", "mb-3"], ["class", "w-16 h-16 object-cover rounded-lg border border-gray-200", 3, "src", "alt", 4, "ngIf"], ["class", "w-16 h-16 object-cover rounded-lg border border-blue-300", 3, "src", "alt", 4, "ngIf"], ["class", "w-16 h-16 bg-gray-200 rounded-lg flex items-center justify-center", 4, "ngIf"], [1, "space-y-2"], ["type", "file", "accept", "image/jpeg,image/jpg,image/png,image/gif", 1, "block", "w-full", "text-xs", "text-gray-500", "file:mr-2", "file:py-1", "file:px-2", "file:rounded", "file:border-0", "file:text-xs", "file:font-medium", "file:bg-blue-50", "file:text-blue-700", "hover:file:bg-blue-100", 3, "change"], ["type", "button", 1, "px-3", "py-1", "bg-blue-600", "text-white", "text-xs", "rounded", "hover:bg-blue-700", "disabled:bg-gray-300", "disabled:cursor-not-allowed", "transition-colors", "whitespace-nowrap", 3, "click", "disabled"], ["type", "button", "class", "px-2 py-1 bg-red-100 text-red-700 text-xs rounded hover:bg-red-200 transition-colors", 3, "click", 4, "ngIf"], ["class", "p-2 bg-yellow-50 border border-yellow-200 rounded text-xs text-yellow-800", 4, "ngIf"], [1, "mt-2", "p-2", "bg-white", "rounded", "border", "border-gray-100"], [1, "text-sm", "text-gray-900", 3, "content"], [1, "w-16", "h-16", "object-cover", "rounded-lg", "border", "border-gray-200", 3, "src", "alt"], [1, "w-16", "h-16", "object-cover", "rounded-lg", "border", "border-blue-300", 3, "src", "alt"], [1, "w-16", "h-16", "bg-gray-200", "rounded-lg", "flex", "items-center", "justify-center"], ["fill", "none", "stroke", "currentColor", "viewBox", "0 0 24 24", 1, "w-6", "h-6", "text-gray-400"], ["type", "button", 1, "px-2", "py-1", "bg-red-100", "text-red-700", "text-xs", "rounded", "hover:bg-red-200", "transition-colors", 3, "click"], [1, "p-2", "bg-yellow-50", "border", "border-yellow-200", "rounded", "text-xs", "text-yellow-800"], ["fill", "none", "stroke", "currentColor", "viewBox", "0 0 24 24", 1, "w-3", "h-3", "mr-1"], [1, "flex", "items-center", "justify-between", "mb-3"], ["type", "button", 1, "btn-danger", "px-2", "py-1", "text-xs", "bg-red-100", "text-red-700", "rounded", "hover:bg-red-200", "transition-colors", 3, "click"], [1, "grid", "grid-cols-1", "md:grid-cols-3", "gap-4"], ["required", "", 1, "form-select", "w-full", "px-3", "py-2", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-primary-500", "focus:border-primary-500", 3, "ngModelChange", "name", "ngModel"], ["value", "text"], ["value", "video"], ["value", "pdf"], ["value", "image"], ["type", "text", "placeholder", "Label (optional)", 1, "form-input", "w-full", "px-3", "py-2", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-primary-500", "focus:border-primary-500", 3, "ngModelChange", "name", "ngModel"], ["type", "text", "required", "", "placeholder", "Content URL/Text", 1, "form-input", "w-full", "px-3", "py-2", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-primary-500", "focus:border-primary-500", 3, "ngModelChange", "name", "ngModel"], [1, "space-y-1"], ["class", "flex items-center justify-between bg-white px-3 py-2 rounded border", 4, "ngFor", "ngForOf"], [1, "flex", "items-center", "justify-between", "bg-white", "px-3", "py-2", "rounded", "border"], [1, "text-sm", "text-gray-700"], [1, "text-sm", "text-gray-500", "italic"]], template: function AddQuestionComponent_Template(rf, ctx) {
    if (rf & 1) {
      const _r1 = \u0275\u0275getCurrentView();
      \u0275\u0275elementStart(0, "div", 9)(1, "div", 10)(2, "div", 11)(3, "h1", 12);
      \u0275\u0275text(4, "Add New Question");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(5, "p", 13);
      \u0275\u0275text(6, "Create a comprehensive question with multiple language support");
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(7, "div", 14)(8, "div", 15)(9, "h2", 16);
      \u0275\u0275text(10, "Language Selection");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(11, "div", 17)(12, "button", 18);
      \u0275\u0275listener("click", function AddQuestionComponent_Template_button_click_12_listener() {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.switchLanguage("en"));
      });
      \u0275\u0275text(13, " English ");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(14, "button", 18);
      \u0275\u0275listener("click", function AddQuestionComponent_Template_button_click_14_listener() {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.switchLanguage("hi"));
      });
      \u0275\u0275text(15, " \u0939\u093F\u0928\u094D\u0926\u0940 ");
      \u0275\u0275elementEnd()()();
      \u0275\u0275elementStart(16, "p", 19);
      \u0275\u0275text(17, " Current editing language: ");
      \u0275\u0275elementStart(18, "span", 20);
      \u0275\u0275text(19);
      \u0275\u0275elementEnd()()();
      \u0275\u0275elementStart(20, "div", 21)(21, "form", 22, 0);
      \u0275\u0275listener("ngSubmit", function AddQuestionComponent_Template_form_ngSubmit_21_listener() {
        \u0275\u0275restoreView(_r1);
        const f_r2 = \u0275\u0275reference(22);
        return \u0275\u0275resetView(ctx.addQuestion(f_r2));
      });
      \u0275\u0275elementStart(23, "div", 23)(24, "h3", 24);
      \u0275\u0275namespaceSVG();
      \u0275\u0275elementStart(25, "svg", 25);
      \u0275\u0275element(26, "path", 26);
      \u0275\u0275elementEnd();
      \u0275\u0275text(27, " \u{1F4DA} Subject Hierarchy (Required for Content Organization) ");
      \u0275\u0275elementEnd();
      \u0275\u0275namespaceHTML();
      \u0275\u0275elementStart(28, "p", 27);
      \u0275\u0275text(29, "Complete this section first to enable image upload functionality");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(30, "div", 28)(31, "div", 29)(32, "label", 30);
      \u0275\u0275text(33, "Branch *");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(34, "div", 31)(35, "select", 32, 1);
      \u0275\u0275twoWayListener("ngModelChange", function AddQuestionComponent_Template_select_ngModelChange_35_listener($event) {
        \u0275\u0275restoreView(_r1);
        \u0275\u0275twoWayBindingSet(ctx.question.branchId, $event) || (ctx.question.branchId = $event);
        return \u0275\u0275resetView($event);
      });
      \u0275\u0275listener("change", function AddQuestionComponent_Template_select_change_35_listener() {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.onBranchChange(ctx.question.branchId));
      });
      \u0275\u0275elementStart(37, "option", 33);
      \u0275\u0275text(38, "Not-mentioned");
      \u0275\u0275elementEnd();
      \u0275\u0275template(39, AddQuestionComponent_option_39_Template, 2, 2, "option", 34);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(40, "button", 35);
      \u0275\u0275listener("click", function AddQuestionComponent_Template_button_click_40_listener() {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.goToAddBranch());
      });
      \u0275\u0275text(41, " + Add ");
      \u0275\u0275elementEnd()()();
      \u0275\u0275elementStart(42, "div", 29)(43, "label", 30);
      \u0275\u0275text(44, "Subject *");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(45, "div", 31)(46, "select", 36, 2);
      \u0275\u0275twoWayListener("ngModelChange", function AddQuestionComponent_Template_select_ngModelChange_46_listener($event) {
        \u0275\u0275restoreView(_r1);
        \u0275\u0275twoWayBindingSet(ctx.question.subjectId, $event) || (ctx.question.subjectId = $event);
        return \u0275\u0275resetView($event);
      });
      \u0275\u0275listener("change", function AddQuestionComponent_Template_select_change_46_listener() {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.onSubjectChange(ctx.question.subjectId));
      });
      \u0275\u0275elementStart(48, "option", 33);
      \u0275\u0275text(49, "Not-mentioned");
      \u0275\u0275elementEnd();
      \u0275\u0275template(50, AddQuestionComponent_option_50_Template, 2, 2, "option", 34);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(51, "button", 35);
      \u0275\u0275listener("click", function AddQuestionComponent_Template_button_click_51_listener() {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.goToAddSubject());
      });
      \u0275\u0275text(52, " + Add ");
      \u0275\u0275elementEnd()()();
      \u0275\u0275elementStart(53, "div", 29)(54, "label", 30);
      \u0275\u0275text(55, "Topic *");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(56, "div", 31)(57, "select", 37, 3);
      \u0275\u0275twoWayListener("ngModelChange", function AddQuestionComponent_Template_select_ngModelChange_57_listener($event) {
        \u0275\u0275restoreView(_r1);
        \u0275\u0275twoWayBindingSet(ctx.question.topicId, $event) || (ctx.question.topicId = $event);
        return \u0275\u0275resetView($event);
      });
      \u0275\u0275listener("change", function AddQuestionComponent_Template_select_change_57_listener() {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.onTopicChange(ctx.question.topicId));
      });
      \u0275\u0275elementStart(59, "option", 33);
      \u0275\u0275text(60, "Not-mentioned");
      \u0275\u0275elementEnd();
      \u0275\u0275template(61, AddQuestionComponent_option_61_Template, 2, 2, "option", 34);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(62, "button", 35);
      \u0275\u0275listener("click", function AddQuestionComponent_Template_button_click_62_listener() {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.goToAddTopic());
      });
      \u0275\u0275text(63, " + Add ");
      \u0275\u0275elementEnd()()();
      \u0275\u0275elementStart(64, "div", 29)(65, "label", 30);
      \u0275\u0275text(66, "Subtopic");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(67, "div", 31)(68, "select", 38, 4);
      \u0275\u0275twoWayListener("ngModelChange", function AddQuestionComponent_Template_select_ngModelChange_68_listener($event) {
        \u0275\u0275restoreView(_r1);
        \u0275\u0275twoWayBindingSet(ctx.question.subtopicId, $event) || (ctx.question.subtopicId = $event);
        return \u0275\u0275resetView($event);
      });
      \u0275\u0275elementStart(70, "option", 33);
      \u0275\u0275text(71, "Not-mentioned");
      \u0275\u0275elementEnd();
      \u0275\u0275template(72, AddQuestionComponent_option_72_Template, 2, 2, "option", 34);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(73, "button", 35);
      \u0275\u0275listener("click", function AddQuestionComponent_Template_button_click_73_listener() {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.goToAddSubtopic());
      });
      \u0275\u0275text(74, " + Add ");
      \u0275\u0275elementEnd()()()()();
      \u0275\u0275elementStart(75, "div", 39)(76, "h3", 24);
      \u0275\u0275namespaceSVG();
      \u0275\u0275elementStart(77, "svg", 40);
      \u0275\u0275element(78, "path", 41);
      \u0275\u0275elementEnd();
      \u0275\u0275text(79, " Question Text ");
      \u0275\u0275elementEnd();
      \u0275\u0275namespaceHTML();
      \u0275\u0275elementStart(80, "div", 29)(81, "label", 42);
      \u0275\u0275text(82);
      \u0275\u0275elementStart(83, "span", 43);
      \u0275\u0275text(84, "*");
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(85, "input", 44, 5);
      \u0275\u0275twoWayListener("ngModelChange", function AddQuestionComponent_Template_input_ngModelChange_85_listener($event) {
        \u0275\u0275restoreView(_r1);
        \u0275\u0275twoWayBindingSet(ctx.question.translations[ctx.currentLang].questionText, $event) || (ctx.question.translations[ctx.currentLang].questionText = $event);
        return \u0275\u0275resetView($event);
      });
      \u0275\u0275elementEnd();
      \u0275\u0275template(87, AddQuestionComponent_div_87_Template, 5, 0, "div", 45);
      \u0275\u0275elementStart(88, "div", 46)(89, "h4", 47);
      \u0275\u0275text(90, "\u{1F4D0} Mathematical Symbols");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(91, "div", 48)(92, "div")(93, "h5", 49);
      \u0275\u0275text(94, "Greek Letters");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(95, "div", 50);
      \u0275\u0275template(96, AddQuestionComponent_button_96_Template, 2, 2, "button", 51);
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(97, "div")(98, "h5", 49);
      \u0275\u0275text(99, "Operators & Symbols");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(100, "div", 50);
      \u0275\u0275template(101, AddQuestionComponent_button_101_Template, 2, 2, "button", 51);
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(102, "div", 52);
      \u0275\u0275text(103, " \u{1F4A1} Tip: Use \\(...\\) for inline math and \\[...\\] for display math ");
      \u0275\u0275elementEnd()()()();
      \u0275\u0275template(104, AddQuestionComponent_div_104_Template, 4, 1, "div", 53);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(105, "div", 39)(106, "h3", 24);
      \u0275\u0275namespaceSVG();
      \u0275\u0275elementStart(107, "svg", 54);
      \u0275\u0275element(108, "path", 55);
      \u0275\u0275elementEnd();
      \u0275\u0275text(109);
      \u0275\u0275elementEnd();
      \u0275\u0275namespaceHTML();
      \u0275\u0275elementStart(110, "div", 56);
      \u0275\u0275template(111, AddQuestionComponent_div_111_Template, 23, 15, "div", 57);
      \u0275\u0275elementStart(112, "button", 58);
      \u0275\u0275listener("click", function AddQuestionComponent_Template_button_click_112_listener() {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.addQuestionImage());
      });
      \u0275\u0275namespaceSVG();
      \u0275\u0275elementStart(113, "svg", 59);
      \u0275\u0275element(114, "path", 60);
      \u0275\u0275elementEnd();
      \u0275\u0275text(115, " Add Question Image Slot ");
      \u0275\u0275elementEnd()()();
      \u0275\u0275namespaceHTML();
      \u0275\u0275elementStart(116, "div", 39)(117, "h3", 24);
      \u0275\u0275namespaceSVG();
      \u0275\u0275elementStart(118, "svg", 61);
      \u0275\u0275element(119, "path", 62);
      \u0275\u0275elementEnd();
      \u0275\u0275text(120, " Answer Options ");
      \u0275\u0275elementEnd();
      \u0275\u0275namespaceHTML();
      \u0275\u0275elementStart(121, "div", 56);
      \u0275\u0275template(122, AddQuestionComponent_div_122_Template, 38, 25, "div", 63);
      \u0275\u0275elementStart(123, "button", 58);
      \u0275\u0275listener("click", function AddQuestionComponent_Template_button_click_123_listener() {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.addOption());
      });
      \u0275\u0275namespaceSVG();
      \u0275\u0275elementStart(124, "svg", 59);
      \u0275\u0275element(125, "path", 60);
      \u0275\u0275elementEnd();
      \u0275\u0275text(126, " Add Option ");
      \u0275\u0275elementEnd()()();
      \u0275\u0275namespaceHTML();
      \u0275\u0275elementStart(127, "div", 39)(128, "h3", 24);
      \u0275\u0275namespaceSVG();
      \u0275\u0275elementStart(129, "svg", 64);
      \u0275\u0275element(130, "path", 65);
      \u0275\u0275elementEnd();
      \u0275\u0275text(131);
      \u0275\u0275elementEnd();
      \u0275\u0275namespaceHTML();
      \u0275\u0275elementStart(132, "div", 56);
      \u0275\u0275template(133, AddQuestionComponent_div_133_Template, 27, 13, "div", 63);
      \u0275\u0275elementStart(134, "button", 58);
      \u0275\u0275listener("click", function AddQuestionComponent_Template_button_click_134_listener() {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.addExplanation());
      });
      \u0275\u0275namespaceSVG();
      \u0275\u0275elementStart(135, "svg", 59);
      \u0275\u0275element(136, "path", 60);
      \u0275\u0275elementEnd();
      \u0275\u0275text(137, " Add Explanation ");
      \u0275\u0275elementEnd()()();
      \u0275\u0275namespaceHTML();
      \u0275\u0275elementStart(138, "div", 39)(139, "h3", 24);
      \u0275\u0275namespaceSVG();
      \u0275\u0275elementStart(140, "svg", 66);
      \u0275\u0275element(141, "path", 67)(142, "path", 68);
      \u0275\u0275elementEnd();
      \u0275\u0275text(143, " Question Settings ");
      \u0275\u0275elementEnd();
      \u0275\u0275namespaceHTML();
      \u0275\u0275elementStart(144, "div", 69)(145, "div", 29)(146, "label", 70);
      \u0275\u0275text(147, " Status ");
      \u0275\u0275elementStart(148, "span", 43);
      \u0275\u0275text(149, "*");
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(150, "select", 71, 6);
      \u0275\u0275twoWayListener("ngModelChange", function AddQuestionComponent_Template_select_ngModelChange_150_listener($event) {
        \u0275\u0275restoreView(_r1);
        \u0275\u0275twoWayBindingSet(ctx.question.status, $event) || (ctx.question.status = $event);
        return \u0275\u0275resetView($event);
      });
      \u0275\u0275elementStart(152, "option", 72);
      \u0275\u0275text(153, "Draft");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(154, "option", 73);
      \u0275\u0275text(155, "Published");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(156, "option", 74);
      \u0275\u0275text(157, "Pending Review");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(158, "option", 75);
      \u0275\u0275text(159, "Active");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(160, "option", 76);
      \u0275\u0275text(161, "Inactive");
      \u0275\u0275elementEnd()();
      \u0275\u0275template(162, AddQuestionComponent_div_162_Template, 5, 0, "div", 45);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(163, "div", 29)(164, "label", 30);
      \u0275\u0275text(165, "Difficulty");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(166, "select", 77, 7);
      \u0275\u0275twoWayListener("ngModelChange", function AddQuestionComponent_Template_select_ngModelChange_166_listener($event) {
        \u0275\u0275restoreView(_r1);
        \u0275\u0275twoWayBindingSet(ctx.question.difficulty, $event) || (ctx.question.difficulty = $event);
        return \u0275\u0275resetView($event);
      });
      \u0275\u0275elementStart(168, "option", 33);
      \u0275\u0275text(169, "Not-mentioned");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(170, "option", 78);
      \u0275\u0275text(171, "Easy");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(172, "option", 79);
      \u0275\u0275text(173, "Medium");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(174, "option", 80);
      \u0275\u0275text(175, "Hard");
      \u0275\u0275elementEnd()()();
      \u0275\u0275elementStart(176, "div", 29)(177, "label", 30);
      \u0275\u0275text(178, " Type ");
      \u0275\u0275elementStart(179, "span", 43);
      \u0275\u0275text(180, "*");
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(181, "select", 81, 8);
      \u0275\u0275twoWayListener("ngModelChange", function AddQuestionComponent_Template_select_ngModelChange_181_listener($event) {
        \u0275\u0275restoreView(_r1);
        \u0275\u0275twoWayBindingSet(ctx.question.type, $event) || (ctx.question.type = $event);
        return \u0275\u0275resetView($event);
      });
      \u0275\u0275elementStart(183, "option", 82);
      \u0275\u0275text(184, "Select Type");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(185, "option", 83);
      \u0275\u0275text(186, "Single-correct");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(187, "option", 84);
      \u0275\u0275text(188, "Multiple-correct");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(189, "option", 85);
      \u0275\u0275text(190, "Integer");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(191, "option", 86);
      \u0275\u0275text(192, "Matrix");
      \u0275\u0275elementEnd()();
      \u0275\u0275template(193, AddQuestionComponent_div_193_Template, 5, 0, "div", 45);
      \u0275\u0275elementEnd()()();
      \u0275\u0275elementStart(194, "div", 39)(195, "h3", 24);
      \u0275\u0275namespaceSVG();
      \u0275\u0275elementStart(196, "svg", 87);
      \u0275\u0275element(197, "path", 88);
      \u0275\u0275elementEnd();
      \u0275\u0275text(198, " Additional Details ");
      \u0275\u0275elementEnd();
      \u0275\u0275namespaceHTML();
      \u0275\u0275elementStart(199, "div", 89)(200, "div", 29)(201, "label", 90);
      \u0275\u0275text(202, " Tags (comma-separated) ");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(203, "input", 91);
      \u0275\u0275twoWayListener("ngModelChange", function AddQuestionComponent_Template_input_ngModelChange_203_listener($event) {
        \u0275\u0275restoreView(_r1);
        \u0275\u0275twoWayBindingSet(ctx.tagsInputString, $event) || (ctx.tagsInputString = $event);
        return \u0275\u0275resetView($event);
      });
      \u0275\u0275listener("ngModelChange", function AddQuestionComponent_Template_input_ngModelChange_203_listener($event) {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.onTagsInputChange($event));
      });
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(204, "p", 92);
      \u0275\u0275text(205, " Enter keywords separated by commas to help categorize this question ");
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(206, "div", 29)(207, "label", 93);
      \u0275\u0275text(208, " Recommended Time (seconds) ");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(209, "input", 94);
      \u0275\u0275twoWayListener("ngModelChange", function AddQuestionComponent_Template_input_ngModelChange_209_listener($event) {
        \u0275\u0275restoreView(_r1);
        \u0275\u0275twoWayBindingSet(ctx.question.recommendedTimeAllotment, $event) || (ctx.question.recommendedTimeAllotment = $event);
        return \u0275\u0275resetView($event);
      });
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(210, "p", 92);
      \u0275\u0275text(211, " Suggested time for students to solve this question ");
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(212, "div", 29)(213, "label", 95);
      \u0275\u0275text(214, " Internal Notes/Author Comments ");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(215, "textarea", 96);
      \u0275\u0275twoWayListener("ngModelChange", function AddQuestionComponent_Template_textarea_ngModelChange_215_listener($event) {
        \u0275\u0275restoreView(_r1);
        \u0275\u0275twoWayBindingSet(ctx.question.internalNotes, $event) || (ctx.question.internalNotes = $event);
        return \u0275\u0275resetView($event);
      });
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(216, "p", 92);
      \u0275\u0275text(217, " Private notes visible only to content creators and administrators ");
      \u0275\u0275elementEnd()()()();
      \u0275\u0275elementStart(218, "div", 39)(219, "h3", 24);
      \u0275\u0275namespaceSVG();
      \u0275\u0275elementStart(220, "svg", 97);
      \u0275\u0275element(221, "path", 98);
      \u0275\u0275elementEnd();
      \u0275\u0275text(222, " Appearance History ");
      \u0275\u0275elementEnd();
      \u0275\u0275namespaceHTML();
      \u0275\u0275elementStart(223, "div", 99)(224, "div", 100)(225, "div")(226, "label", 101);
      \u0275\u0275text(227, "Exam Name");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(228, "input", 102);
      \u0275\u0275twoWayListener("ngModelChange", function AddQuestionComponent_Template_input_ngModelChange_228_listener($event) {
        \u0275\u0275restoreView(_r1);
        \u0275\u0275twoWayBindingSet(ctx.histEntry.examName, $event) || (ctx.histEntry.examName = $event);
        return \u0275\u0275resetView($event);
      });
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(229, "div")(230, "label", 101);
      \u0275\u0275text(231, "Year");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(232, "input", 103);
      \u0275\u0275twoWayListener("ngModelChange", function AddQuestionComponent_Template_input_ngModelChange_232_listener($event) {
        \u0275\u0275restoreView(_r1);
        \u0275\u0275twoWayBindingSet(ctx.histEntry.year, $event) || (ctx.histEntry.year = $event);
        return \u0275\u0275resetView($event);
      });
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(233, "div", 104)(234, "button", 105);
      \u0275\u0275listener("click", function AddQuestionComponent_Template_button_click_234_listener() {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.addHistory());
      });
      \u0275\u0275text(235, " Add Entry ");
      \u0275\u0275elementEnd()()();
      \u0275\u0275template(236, AddQuestionComponent_div_236_Template, 5, 1, "div", 106)(237, AddQuestionComponent_p_237_Template, 2, 0, "p", 107);
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(238, "div", 108)(239, "button", 109)(240, "span", 110);
      \u0275\u0275namespaceSVG();
      \u0275\u0275elementStart(241, "svg", 111);
      \u0275\u0275element(242, "path", 112);
      \u0275\u0275elementEnd();
      \u0275\u0275text(243, " Create Question ");
      \u0275\u0275elementEnd()()()()()()();
    }
    if (rf & 2) {
      const f_r2 = \u0275\u0275reference(22);
      const qt_r26 = \u0275\u0275reference(86);
      const statusCtrl_r27 = \u0275\u0275reference(151);
      const typ_r28 = \u0275\u0275reference(182);
      \u0275\u0275advance(12);
      \u0275\u0275classMap(ctx.currentLang === "en" ? "bg-white shadow-sm text-primary-600 font-semibold" : "text-gray-600 hover:text-gray-900");
      \u0275\u0275advance(2);
      \u0275\u0275classMap(ctx.currentLang === "hi" ? "bg-white shadow-sm text-primary-600 font-semibold" : "text-gray-600 hover:text-gray-900");
      \u0275\u0275advance(5);
      \u0275\u0275textInterpolate(ctx.currentLang === "en" ? "English" : "\u0939\u093F\u0928\u094D\u0926\u0940");
      \u0275\u0275advance(16);
      \u0275\u0275twoWayProperty("ngModel", ctx.question.branchId);
      \u0275\u0275advance(4);
      \u0275\u0275property("ngForOf", ctx.branches);
      \u0275\u0275advance(7);
      \u0275\u0275twoWayProperty("ngModel", ctx.question.subjectId);
      \u0275\u0275advance(4);
      \u0275\u0275property("ngForOf", ctx.subjects);
      \u0275\u0275advance(7);
      \u0275\u0275twoWayProperty("ngModel", ctx.question.topicId);
      \u0275\u0275advance(4);
      \u0275\u0275property("ngForOf", ctx.topics);
      \u0275\u0275advance(7);
      \u0275\u0275twoWayProperty("ngModel", ctx.question.subtopicId);
      \u0275\u0275advance(4);
      \u0275\u0275property("ngForOf", ctx.subtopics);
      \u0275\u0275advance(10);
      \u0275\u0275textInterpolate1(" Question Text (", ctx.currentLang.toUpperCase(), ") ");
      \u0275\u0275advance(3);
      \u0275\u0275propertyInterpolate1("name", "questionText_", ctx.currentLang, "");
      \u0275\u0275twoWayProperty("ngModel", ctx.question.translations[ctx.currentLang].questionText);
      \u0275\u0275advance(2);
      \u0275\u0275property("ngIf", qt_r26.invalid && (qt_r26.touched || f_r2.submitted));
      \u0275\u0275advance(9);
      \u0275\u0275property("ngForOf", ctx.greekSymbols);
      \u0275\u0275advance(5);
      \u0275\u0275property("ngForOf", ctx.operators);
      \u0275\u0275advance(3);
      \u0275\u0275property("ngIf", ctx.question.translations[ctx.currentLang].questionText);
      \u0275\u0275advance(5);
      \u0275\u0275textInterpolate1(" Question Images (", ctx.currentLang.toUpperCase(), ") ");
      \u0275\u0275advance(2);
      \u0275\u0275property("ngForOf", ctx.langPack.images);
      \u0275\u0275advance(11);
      \u0275\u0275property("ngForOf", ctx.langPack.options);
      \u0275\u0275advance(9);
      \u0275\u0275textInterpolate1(" Explanations (", ctx.currentLang.toUpperCase(), ") ");
      \u0275\u0275advance(2);
      \u0275\u0275property("ngForOf", ctx.langPack.explanations);
      \u0275\u0275advance(17);
      \u0275\u0275twoWayProperty("ngModel", ctx.question.status);
      \u0275\u0275advance(12);
      \u0275\u0275property("ngIf", statusCtrl_r27.invalid && (statusCtrl_r27.touched || f_r2.submitted));
      \u0275\u0275advance(4);
      \u0275\u0275twoWayProperty("ngModel", ctx.question.difficulty);
      \u0275\u0275advance(15);
      \u0275\u0275twoWayProperty("ngModel", ctx.question.type);
      \u0275\u0275advance(12);
      \u0275\u0275property("ngIf", typ_r28.invalid && (typ_r28.touched || f_r2.submitted));
      \u0275\u0275advance(10);
      \u0275\u0275twoWayProperty("ngModel", ctx.tagsInputString);
      \u0275\u0275advance(6);
      \u0275\u0275twoWayProperty("ngModel", ctx.question.recommendedTimeAllotment);
      \u0275\u0275advance(6);
      \u0275\u0275twoWayProperty("ngModel", ctx.question.internalNotes);
      \u0275\u0275advance(13);
      \u0275\u0275twoWayProperty("ngModel", ctx.histEntry.examName);
      \u0275\u0275advance(4);
      \u0275\u0275property("min", 1900)("max", ctx.currentYear);
      \u0275\u0275twoWayProperty("ngModel", ctx.histEntry.year);
      \u0275\u0275advance(4);
      \u0275\u0275property("ngIf", ctx.histList.length);
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", !ctx.histList.length);
      \u0275\u0275advance(2);
      \u0275\u0275property("disabled", f_r2.invalid);
    }
  }, dependencies: [CommonModule, NgClass, NgForOf, NgIf, FormsModule, \u0275NgNoValidate, NgSelectOption, \u0275NgSelectMultipleOption, DefaultValueAccessor, NumberValueAccessor, CheckboxControlValueAccessor, SelectControlValueAccessor, NgControlStatus, NgControlStatusGroup, RequiredValidator, MinValidator, MaxValidator, NgModel, NgForm, RouterModule, MathDisplayComponent], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AddQuestionComponent, [{
    type: Component,
    args: [{ selector: "app-add-question", standalone: true, imports: [CommonModule, FormsModule, RouterModule, MathDisplayComponent], template: `<!-- Modern Add Question Form with Tailwind CSS -->\r
<div class="min-h-screen bg-gray-50 py-6 px-4 sm:px-6 lg:px-8">\r
  <div class="max-w-4xl mx-auto">\r
    \r
    <!-- Page Header -->\r
    <div class="mb-8">\r
      <h1 class="text-3xl font-bold text-gray-900 mb-2">Add New Question</h1>\r
      <p class="text-gray-600">Create a comprehensive question with multiple language support</p>\r
    </div>\r
\r
    <!-- Language Switch -->\r
    <div class="bg-white rounded-xl shadow-sm border border-gray-200 p-6 mb-6">\r
      <div class="flex items-center justify-between mb-4">\r
        <h2 class="text-lg font-semibold text-gray-900">Language Selection</h2>\r
        <div class="flex items-center space-x-2 bg-gray-100 p-1 rounded-lg">\r
          <button \r
            type="button"\r
            (click)="switchLanguage('en')"\r
            [class]="currentLang === 'en' ? 'bg-white shadow-sm text-primary-600 font-semibold' : 'text-gray-600 hover:text-gray-900'"\r
            class="px-4 py-2 text-sm rounded-md transition-all duration-200"\r
          >\r
            English\r
          </button>\r
          <button \r
            type="button"\r
            (click)="switchLanguage('hi')"\r
            [class]="currentLang === 'hi' ? 'bg-white shadow-sm text-primary-600 font-semibold' : 'text-gray-600 hover:text-gray-900'"\r
            class="px-4 py-2 text-sm rounded-md transition-all duration-200"\r
          >\r
            \u0939\u093F\u0928\u094D\u0926\u0940\r
          </button>\r
        </div>\r
      </div>\r
      <p class="text-sm text-gray-500">\r
        Current editing language: <span class="font-medium">{{ currentLang === 'en' ? 'English' : '\u0939\u093F\u0928\u094D\u0926\u0940' }}</span>\r
      </p>\r
    </div>    <!-- Main Form -->\r
    <div class="bg-white rounded-xl shadow-sm border border-gray-200">\r
      <form #f="ngForm" (ngSubmit)="addQuestion(f)" novalidate class="space-y-8 p-8">\r
\r
        <!-- Subject Hierarchy Section - MOVED TO TOP -->\r
        <div class="form-section bg-gradient-to-r from-purple-50 to-blue-50 p-6 rounded-lg border-2 border-purple-200">\r
          <h3 class="text-lg font-semibold text-gray-900 mb-4 flex items-center">\r
            <svg class="w-5 h-5 mr-2 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>\r
            </svg>\r
            \u{1F4DA} Subject Hierarchy (Required for Content Organization)\r
          </h3>\r
          <p class="text-sm text-purple-700 mb-4">Complete this section first to enable image upload functionality</p>\r
          \r
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">\r
            <!-- Branch -->\r
            <div class="form-group">\r
              <label class="block text-sm font-medium text-gray-700 mb-2">Branch *</label>\r
              <div class="flex space-x-2">\r
                <select\r
                  name="branchId"\r
                  [(ngModel)]="question.branchId"\r
                  (change)="onBranchChange(question.branchId)"\r
                  #br="ngModel"\r
                  class="form-select flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"\r
                >\r
                  <option value="Not-mentioned">Not-mentioned</option>\r
                  <option *ngFor="let b of branches" [value]="b._id">{{ b.name }}</option>\r
                </select>\r
                <button \r
                  type="button" \r
                  (click)="goToAddBranch()"\r
                  class="btn-secondary px-3 py-2 bg-primary-100 text-primary-700 rounded-lg hover:bg-primary-200 transition-colors whitespace-nowrap"\r
                >\r
                  + Add\r
                </button>\r
              </div>\r
            </div>\r
\r
            <!-- Subject -->\r
            <div class="form-group">\r
              <label class="block text-sm font-medium text-gray-700 mb-2">Subject *</label>\r
              <div class="flex space-x-2">\r
                <select\r
                  name="subjectId"\r
                  [(ngModel)]="question.subjectId"\r
                  (change)="onSubjectChange(question.subjectId)"\r
                  #su="ngModel"\r
                  class="form-select flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"\r
                >\r
                  <option value="Not-mentioned">Not-mentioned</option>\r
                  <option *ngFor="let s of subjects" [value]="s._id">{{ s.name }}</option>\r
                </select>\r
                <button \r
                  type="button" \r
                  (click)="goToAddSubject()"\r
                  class="btn-secondary px-3 py-2 bg-primary-100 text-primary-700 rounded-lg hover:bg-primary-200 transition-colors whitespace-nowrap"\r
                >\r
                  + Add\r
                </button>\r
              </div>\r
            </div>\r
\r
            <!-- Topic -->\r
            <div class="form-group">\r
              <label class="block text-sm font-medium text-gray-700 mb-2">Topic *</label>\r
              <div class="flex space-x-2">\r
                <select\r
                  name="topicId"\r
                  [(ngModel)]="question.topicId"\r
                  (change)="onTopicChange(question.topicId)"\r
                  #to="ngModel"\r
                  class="form-select flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"\r
                >\r
                  <option value="Not-mentioned">Not-mentioned</option>\r
                  <option *ngFor="let t of topics" [value]="t._id">{{ t.name }}</option>\r
                </select>\r
                <button \r
                  type="button" \r
                  (click)="goToAddTopic()"\r
                  class="btn-secondary px-3 py-2 bg-primary-100 text-primary-700 rounded-lg hover:bg-primary-200 transition-colors whitespace-nowrap"\r
                >\r
                  + Add\r
                </button>\r
              </div>\r
            </div>\r
\r
            <!-- Subtopic -->\r
            <div class="form-group">\r
              <label class="block text-sm font-medium text-gray-700 mb-2">Subtopic</label>\r
              <div class="flex space-x-2">\r
                <select\r
                  name="subtopicId"\r
                  [(ngModel)]="question.subtopicId"\r
                  #st="ngModel"\r
                  class="form-select flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"\r
                >\r
                  <option value="Not-mentioned">Not-mentioned</option>\r
                  <option *ngFor="let st of subtopics" [value]="st._id">{{ st.name }}</option>\r
                </select>\r
                <button \r
                  type="button" \r
                  (click)="goToAddSubtopic()"\r
                  class="btn-secondary px-3 py-2 bg-primary-100 text-primary-700 rounded-lg hover:bg-primary-200 transition-colors whitespace-nowrap"\r
                >\r
                  + Add\r
                </button>\r
              </div>\r
            </div>\r
          </div>\r
        </div>\r
\r
        <!-- Question Text Section -->\r
        <div class="form-section">\r
          <h3 class="text-lg font-semibold text-gray-900 mb-4 flex items-center">\r
            <svg class="w-5 h-5 mr-2 text-primary-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>\r
            </svg>\r
            Question Text\r
          </h3>\r
          \r
          <div class="form-group">\r
            <label for="questionText" class="block text-sm font-medium text-gray-700 mb-2">\r
              Question Text ({{ currentLang.toUpperCase() }}) <span class="text-red-500">*</span>\r
            </label>\r
            <input\r
              name="questionText_{{currentLang}}"\r
              type="text"\r
              required\r
              [(ngModel)]="question.translations[currentLang].questionText"\r
              #qt="ngModel"\r
              placeholder="Enter your question text here..."\r
              class="form-input w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors"\r
            />            <div *ngIf="qt.invalid && (qt.touched || f.submitted)" class="mt-2 text-sm text-red-600">\r
              <div class="flex items-center">\r
                <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16c-.77.833.192 2.5 1.732 2.5z"></path>\r
                </svg>\r
                Question is required.\r
              </div>\r
            </div>\r
\r
            <!-- Mathematical Symbols Toolbar -->\r
            <div class="mt-3 p-3 bg-gray-50 rounded-lg border border-gray-200">\r
              <h4 class="text-sm font-medium text-gray-700 mb-2">\u{1F4D0} Mathematical Symbols</h4>\r
              \r
              <div class="space-y-3">\r
                <div>\r
                  <h5 class="text-xs font-medium text-gray-600 mb-1">Greek Letters</h5>\r
                  <div class="flex flex-wrap gap-1">\r
                    <button \r
                      *ngFor="let symbol of greekSymbols" \r
                      type="button"\r
                      class="px-2 py-1 text-sm border border-gray-300 rounded hover:bg-blue-50 hover:border-blue-300 transition-colors"\r
                      (click)="insertSymbol(symbol.latex)"\r
                      [title]="symbol.name">\r
                      {{ symbol.symbol }}\r
                    </button>\r
                  </div>\r
                </div>\r
                \r
                <div>\r
                  <h5 class="text-xs font-medium text-gray-600 mb-1">Operators & Symbols</h5>\r
                  <div class="flex flex-wrap gap-1">\r
                    <button \r
                      *ngFor="let symbol of operators" \r
                      type="button"\r
                      class="px-2 py-1 text-sm border border-gray-300 rounded hover:bg-blue-50 hover:border-blue-300 transition-colors"\r
                      (click)="insertSymbol(symbol.latex)"\r
                      [title]="symbol.name">\r
                      {{ symbol.symbol }}\r
                    </button>\r
                  </div>\r
                </div>\r
                \r
                <div class="text-xs text-gray-500">\r
                  \u{1F4A1} Tip: Use \\(...\\) for inline math and \\[...\\] for display math\r
                </div>\r
              </div>\r
            </div>\r
          </div>\r
\r
          <!-- Question Preview Section -->\r
          <div class="mt-4 p-4 bg-gray-50 rounded-lg border border-gray-200" *ngIf="question.translations[currentLang].questionText">\r
            <h4 class="text-sm font-medium text-gray-700 mb-2">Preview:</h4>\r
            <app-math-display \r
              [content]="question.translations[currentLang].questionText"\r
              class="text-gray-900">\r
            </app-math-display>\r
          </div>\r
        </div>        <!-- Question Images Section -->\r
        <div class="form-section">\r
          <h3 class="text-lg font-semibold text-gray-900 mb-4 flex items-center">\r
            <svg class="w-5 h-5 mr-2 text-secondary-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>\r
            </svg>\r
            Question Images ({{ currentLang.toUpperCase() }})\r
          </h3>\r
          \r
          <div class="space-y-4">\r
            <div *ngFor="let imgUrl of langPack.images; let imgIndex = index" \r
                 class="p-4 bg-gray-50 rounded-lg border-2 border-dashed border-gray-300">\r
              \r
              <!-- Image Preview Section -->\r
              <div class="flex items-start space-x-4 mb-4">\r
                <div class="flex-shrink-0">\r
                  <!-- Uploaded Image -->\r
                  <img \r
                    [src]="imgUrl" \r
                    alt="Question Image {{imgIndex + 1}}" \r
                    *ngIf="imgUrl && !getPreviewUrl('question', imgIndex)" \r
                    class="w-24 h-24 object-cover rounded-lg border border-gray-200"\r
                  />\r
                  <!-- Preview Image (selected but not uploaded) -->\r
                  <img \r
                    [src]="getPreviewUrl('question', imgIndex)" \r
                    alt="Preview Image {{imgIndex + 1}}" \r
                    *ngIf="getPreviewUrl('question', imgIndex)" \r
                    class="w-24 h-24 object-cover rounded-lg border border-blue-300"\r
                  />\r
                  <!-- Placeholder -->\r
                  <div *ngIf="!imgUrl && !getPreviewUrl('question', imgIndex)" \r
                       class="w-24 h-24 bg-gray-200 rounded-lg flex items-center justify-center">\r
                    <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>\r
                    </svg>\r
                  </div>\r
                </div>\r
                <div class="flex-1">\r
                  <h4 class="text-sm font-medium text-gray-900 mb-2">Image {{imgIndex + 1}}</h4>\r
                  <div class="text-xs text-gray-600 mb-2">\r
                    Status: \r
                    <span [ngClass]="{\r
                      'text-gray-500': getUploadStatus('question', imgIndex) === 'none',\r
                      'text-blue-600': getUploadStatus('question', imgIndex) === 'selected',\r
                      'text-yellow-600': getUploadStatus('question', imgIndex) === 'uploading',\r
                      'text-green-600': getUploadStatus('question', imgIndex) === 'completed',\r
                      'text-red-600': getUploadStatus('question', imgIndex) === 'failed'\r
                    }">\r
                      {{ getUploadStatus('question', imgIndex) === 'none' ? 'No file selected' : \r
                         getUploadStatus('question', imgIndex) === 'selected' ? 'File selected' :\r
                         getUploadStatus('question', imgIndex) === 'uploading' ? 'Uploading...' :\r
                         getUploadStatus('question', imgIndex) === 'completed' ? 'Uploaded' :\r
                         getUploadStatus('question', imgIndex) === 'failed' ? 'Upload failed' : 'Unknown' }}\r
                    </span>\r
                  </div>\r
                </div>\r
              </div>\r
\r
              <!-- File Upload Controls -->\r
              <div class="space-y-3">\r
                <!-- File Input -->\r
                <div class="flex items-center space-x-3">\r
                  <input \r
                    type="file" \r
                    accept="image/jpeg,image/jpg,image/png,image/gif"\r
                    (change)="onQuestionImageFileSelected($event, imgIndex)"\r
                    class="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"\r
                  />\r
                  <button \r
                    type="button" \r
                    (click)="uploadQuestionImage(imgIndex)"\r
                    [disabled]="getUploadStatus('question', imgIndex) !== 'selected' || !question.branchId || !question.subjectId || !question.topicId"\r
                    class="px-4 py-2 bg-blue-600 text-white text-sm rounded-lg hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors"\r
                  >\r
                    Upload\r
                  </button>\r
                </div>\r
\r
                <!-- Action Buttons -->\r
                <div class="flex items-center space-x-2">\r
                  <button \r
                    type="button" \r
                    (click)="deleteImage(imgUrl, 'question', imgIndex)"\r
                    *ngIf="imgUrl"\r
                    class="px-3 py-1 bg-red-100 text-red-700 text-sm rounded-lg hover:bg-red-200 transition-colors"\r
                  >\r
                    Delete Image\r
                  </button>\r
                  <button \r
                    type="button" \r
                    (click)="removeQuestionImage(imgIndex)"\r
                    class="px-3 py-1 bg-gray-100 text-gray-700 text-sm rounded-lg hover:bg-gray-200 transition-colors"\r
                  >\r
                    Remove Slot\r
                  </button>\r
                </div>\r
\r
                <!-- Hierarchy Warning -->\r
                <div *ngIf="!question.branchId || !question.subjectId || !question.topicId" \r
                     class="p-2 bg-yellow-50 border border-yellow-200 rounded text-sm text-yellow-800">\r
                  <div class="flex items-center">\r
                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 15.5c-.77.833.192 2.5 1.732 2.5z"></path>\r
                    </svg>\r
                    Please complete Subject Hierarchy (Branch, Subject, Topic) to enable image upload.\r
                  </div>\r
                </div>\r
              </div>\r
            </div>\r
            \r
            <button \r
              type="button" \r
              (click)="addQuestionImage()"\r
              class="btn-secondary w-full px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors flex items-center justify-center"\r
            >\r
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>\r
              </svg>\r
              Add Question Image Slot\r
            </button>\r
          </div>\r
        </div>\r
\r
        <!-- Options Section -->\r
        <div class="form-section">\r
          <h3 class="text-lg font-semibold text-gray-900 mb-4 flex items-center">\r
            <svg class="w-5 h-5 mr-2 text-success-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4"></path>\r
            </svg>\r
            Answer Options\r
          </h3>\r
          \r
          <div class="space-y-4">\r
            <div *ngFor="let opt of langPack.options; let i = index" \r
                 class="p-4 border border-gray-200 rounded-lg bg-white">\r
              <div class="flex items-start justify-between mb-3">\r
                <h4 class="text-sm font-medium text-gray-900">Option {{ i + 1 }}</h4>\r
                <div class="flex items-center space-x-2">\r
                  <label class="inline-flex items-center">\r
                    <input\r
                      name="optCorrect_{{currentLang}}_{{i}}"\r
                      type="checkbox"\r
                      [(ngModel)]="opt.isCorrect"\r
                      class="form-checkbox h-4 w-4 text-primary-600 rounded focus:ring-primary-500 border-gray-300"\r
                    />\r
                    <span class="ml-2 text-sm text-gray-700 font-medium">Correct Answer</span>\r
                  </label>\r
                  <button\r
                    type="button"\r
                    (click)="removeOption(i)"\r
                    [disabled]="langPack.options.length <= 2"\r
                    class="btn-danger px-2 py-1 text-xs bg-red-100 text-red-700 rounded disabled:opacity-50 disabled:cursor-not-allowed hover:bg-red-200 transition-colors"\r
                  >\r
                    Remove\r
                  </button>\r
                </div>\r
              </div>\r
                <div class="space-y-4">\r
                <div>\r
                  <label class="block text-sm font-medium text-gray-700 mb-1">Option Text</label>                  <input\r
                    name="optText_{{currentLang}}_{{i}}"\r
                    type="text"\r
                    required\r
                    [(ngModel)]="opt.text"\r
                    placeholder="Enter option text"\r
                    class="form-input w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"\r
                  />\r
                  \r
                  <!-- Option Preview -->\r
                  <div class="mt-2 p-2 bg-white rounded border border-gray-100" *ngIf="opt.text">\r
                    <span class="text-xs text-gray-500">Preview:</span>\r
                    <app-math-display [content]="opt.text" class="text-sm text-gray-900"></app-math-display>\r
                  </div>\r
                </div>\r
                \r
                <!-- Option Image Upload Section -->\r
                <div class="p-3 bg-gray-50 rounded-lg border border-gray-200">\r
                  <label class="block text-sm font-medium text-gray-700 mb-2">Option Image (Optional)</label>\r
                  \r
                  <!-- Image Preview Section -->\r
                  <div class="flex items-start space-x-3 mb-3">\r
                    <div class="flex-shrink-0">\r
                      <!-- Uploaded Image -->\r
                      <img \r
                        [src]="opt.img" \r
                        alt="Option {{i + 1}} Image" \r
                        *ngIf="opt.img && !getPreviewUrl('option', i)" \r
                        class="w-16 h-16 object-cover rounded-lg border border-gray-200"\r
                      />\r
                      <!-- Preview Image (selected but not uploaded) -->\r
                      <img \r
                        [src]="getPreviewUrl('option', i)" \r
                        alt="Preview Option {{i + 1}} Image" \r
                        *ngIf="getPreviewUrl('option', i)" \r
                        class="w-16 h-16 object-cover rounded-lg border border-blue-300"\r
                      />\r
                      <!-- Placeholder -->\r
                      <div *ngIf="!opt.img && !getPreviewUrl('option', i)" \r
                           class="w-16 h-16 bg-gray-200 rounded-lg flex items-center justify-center">\r
                        <svg class="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>\r
                        </svg>\r
                      </div>\r
                    </div>\r
                    <div class="flex-1">\r
                      <div class="text-xs text-gray-600 mb-2">\r
                        Status: \r
                        <span [ngClass]="{\r
                          'text-gray-500': getUploadStatus('option', i) === 'none',\r
                          'text-blue-600': getUploadStatus('option', i) === 'selected',\r
                          'text-yellow-600': getUploadStatus('option', i) === 'uploading',\r
                          'text-green-600': getUploadStatus('option', i) === 'completed',\r
                          'text-red-600': getUploadStatus('option', i) === 'failed'\r
                        }">\r
                          {{ getUploadStatus('option', i) === 'none' ? 'No file selected' : \r
                             getUploadStatus('option', i) === 'selected' ? 'File selected' :\r
                             getUploadStatus('option', i) === 'uploading' ? 'Uploading...' :\r
                             getUploadStatus('option', i) === 'completed' ? 'Uploaded' :\r
                             getUploadStatus('option', i) === 'failed' ? 'Upload failed' : 'Unknown' }}\r
                        </span>\r
                      </div>\r
                    </div>\r
                  </div>\r
\r
                  <!-- File Upload Controls -->\r
                  <div class="space-y-2">\r
                    <!-- File Input -->\r
                    <div class="flex items-center space-x-2">\r
                      <input \r
                        type="file" \r
                        accept="image/jpeg,image/jpg,image/png,image/gif"\r
                        (change)="onOptionImageFileSelected($event, i)"\r
                        class="block w-full text-xs text-gray-500 file:mr-2 file:py-1 file:px-2 file:rounded file:border-0 file:text-xs file:font-medium file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"\r
                      />\r
                      <button \r
                        type="button" \r
                        (click)="uploadOptionImage(i)"\r
                        [disabled]="getUploadStatus('option', i) !== 'selected' || !question.branchId || !question.subjectId || !question.topicId"\r
                        class="px-3 py-1 bg-blue-600 text-white text-xs rounded hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors whitespace-nowrap"\r
                      >\r
                        Upload\r
                      </button>\r
                    </div>\r
\r
                    <!-- Action Buttons -->\r
                    <div class="flex items-center space-x-2">\r
                      <button \r
                        type="button" \r
                        (click)="deleteImage(opt.img, 'option', i)"\r
                        *ngIf="opt.img"\r
                        class="px-2 py-1 bg-red-100 text-red-700 text-xs rounded hover:bg-red-200 transition-colors"\r
                      >\r
                        Delete Image\r
                      </button>\r
                    </div>\r
\r
                    <!-- Hierarchy Warning -->\r
                    <div *ngIf="!question.branchId || !question.subjectId || !question.topicId" \r
                         class="p-2 bg-yellow-50 border border-yellow-200 rounded text-xs text-yellow-800">\r
                      <div class="flex items-center">\r
                        <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 15.5c-.77.833.192 2.5 1.732 2.5z"></path>\r
                        </svg>\r
                        Complete Subject Hierarchy to enable upload.\r
                      </div>\r
                    </div>\r
                  </div>\r
                </div>\r
              </div>\r
            </div>\r
            \r
            <button \r
              type="button" \r
              (click)="addOption()"\r
              class="btn-secondary w-full px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors flex items-center justify-center"\r
            >\r
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>\r
              </svg>\r
              Add Option\r
            </button>          </div>\r
        </div>\r
\r
        <!-- Explanations Section -->\r
        <div class="form-section">\r
          <h3 class="text-lg font-semibold text-gray-900 mb-4 flex items-center">\r
            <svg class="w-5 h-5 mr-2 text-warning-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>\r
            </svg>\r
            Explanations ({{ currentLang.toUpperCase() }})\r
          </h3>\r
          \r
          <div class="space-y-4">\r
            <div *ngFor="let exp of langPack.explanations; let j = index" \r
                 class="p-4 border border-gray-200 rounded-lg bg-white">\r
              <div class="flex items-center justify-between mb-3">\r
                <h4 class="text-sm font-medium text-gray-900">Explanation {{ j + 1 }}</h4>\r
                <button\r
                  type="button"\r
                  (click)="removeExplanation(j)"\r
                  class="btn-danger px-2 py-1 text-xs bg-red-100 text-red-700 rounded hover:bg-red-200 transition-colors"\r
                >\r
                  Remove\r
                </button>\r
              </div>\r
              \r
              <div class="grid grid-cols-1 md:grid-cols-3 gap-4">\r
                <div>\r
                  <label class="block text-sm font-medium text-gray-700 mb-1">Type</label>\r
                  <select\r
                    name="expType_{{currentLang}}_{{j}}"\r
                    required\r
                    [(ngModel)]="exp.type"\r
                    class="form-select w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"\r
                  >\r
                    <option value="text">Text</option>\r
                    <option value="video">Video</option>\r
                    <option value="pdf">PDF</option>\r
                    <option value="image">Image</option>\r
                  </select>\r
                </div>\r
                <div>\r
                  <label class="block text-sm font-medium text-gray-700 mb-1">Label (Optional)</label>\r
                  <input\r
                    name="expLabel_{{currentLang}}_{{j}}"\r
                    type="text"\r
                    placeholder="Label (optional)"\r
                    [(ngModel)]="exp.label"\r
                    class="form-input w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"\r
                  />\r
                </div>\r
                <div>\r
                  <label class="block text-sm font-medium text-gray-700 mb-1">Content URL/Text</label>\r
                  <input\r
                    name="expContent_{{currentLang}}_{{j}}"\r
                    type="text"\r
                    required\r
                    placeholder="Content URL/Text"\r
                    [(ngModel)]="exp.content"\r
                    class="form-input w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"\r
                  />\r
                </div>\r
              </div>\r
            </div>\r
            \r
            <button \r
              type="button" \r
              (click)="addExplanation()"\r
              class="btn-secondary w-full px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors flex items-center justify-center"\r
            >\r
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>\r
              </svg>\r
              Add Explanation\r
            </button>\r
          </div>\r
        </div>\r
\r
        <!-- Question Metadata Section -->\r
        <div class="form-section">\r
          <h3 class="text-lg font-semibold text-gray-900 mb-4 flex items-center">\r
            <svg class="w-5 h-5 mr-2 text-indigo-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>\r
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>\r
            </svg>\r
            Question Settings\r
          </h3>\r
          \r
          <div class="grid grid-cols-1 md:grid-cols-3 gap-6">\r
            <!-- Status -->\r
            <div class="form-group">\r
              <label for="status" class="block text-sm font-medium text-gray-700 mb-2">\r
                Status <span class="text-red-500">*</span>\r
              </label>\r
              <select\r
                id="status"\r
                name="status"\r
                [(ngModel)]="question.status"\r
                required\r
                #statusCtrl="ngModel"\r
                class="form-select w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"\r
              >\r
                <option value="draft">Draft</option>\r
                <option value="Published">Published</option>\r
                <option value="Pending Review">Pending Review</option>\r
                <option value="active">Active</option>\r
                <option value="inactive">Inactive</option>\r
              </select>\r
              <div *ngIf="statusCtrl.invalid && (statusCtrl.touched || f.submitted)" class="mt-2 text-sm text-red-600">\r
                <div class="flex items-center">\r
                  <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16c-.77.833.192 2.5 1.732 2.5z"></path>\r
                  </svg>\r
                  Status is required.\r
                </div>\r
              </div>\r
            </div>\r
\r
            <!-- Difficulty -->\r
            <div class="form-group">\r
              <label class="block text-sm font-medium text-gray-700 mb-2">Difficulty</label>\r
              <select\r
                name="difficulty"\r
                [(ngModel)]="question.difficulty"\r
                #diff="ngModel"\r
                class="form-select w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"\r
              >\r
                <option value="Not-mentioned">Not-mentioned</option>\r
                <option value="Easy">Easy</option>\r
                <option value="Medium">Medium</option>\r
                <option value="Hard">Hard</option>\r
              </select>\r
            </div>\r
\r
            <!-- Type -->\r
            <div class="form-group">\r
              <label class="block text-sm font-medium text-gray-700 mb-2">\r
                Type <span class="text-red-500">*</span>\r
              </label>\r
              <select\r
                name="type"\r
                required\r
                [(ngModel)]="question.type"\r
                #typ="ngModel"\r
                class="form-select w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"\r
              >\r
                <option value="">Select Type</option>\r
                <option value="single">Single-correct</option>\r
                <option value="multiple">Multiple-correct</option>\r
                <option value="integer">Integer</option>\r
                <option value="matrix">Matrix</option>\r
              </select>\r
              <div *ngIf="typ.invalid && (typ.touched || f.submitted)" class="mt-2 text-sm text-red-600">\r
                <div class="flex items-center">\r
                  <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16c-.77.833.192 2.5 1.732 2.5z"></path>\r
                  </svg>\r
                  Type is required.\r
                </div>\r
              </div>\r
            </div>\r
          </div>\r
        </div>        <!-- Additional Details Section -->\r
        <div class="form-section">\r
          <h3 class="text-lg font-semibold text-gray-900 mb-4 flex items-center">\r
            <svg class="w-5 h-5 mr-2 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"></path>\r
            </svg>\r
            Additional Details\r
          </h3>\r
          \r
          <div class="space-y-6">\r
            <!-- Tags -->\r
            <div class="form-group">\r
              <label for="tags" class="block text-sm font-medium text-gray-700 mb-2">\r
                Tags (comma-separated)\r
              </label>\r
              <input\r
                type="text"\r
                id="tags"\r
                name="tags"\r
                [(ngModel)]="tagsInputString"\r
                (ngModelChange)="onTagsInputChange($event)"\r
                placeholder="e.g., algebra, geometry, important"\r
                class="form-input w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"\r
              />\r
              <p class="mt-1 text-sm text-gray-500">\r
                Enter keywords separated by commas to help categorize this question\r
              </p>\r
            </div>\r
\r
            <!-- Recommended Time -->\r
            <div class="form-group">\r
              <label for="recommendedTime" class="block text-sm font-medium text-gray-700 mb-2">\r
                Recommended Time (seconds)\r
              </label>\r
              <input\r
                type="number"\r
                id="recommendedTime"\r
                name="recommendedTime"\r
                [(ngModel)]="question.recommendedTimeAllotment"\r
                placeholder="e.g., 300"\r
                min="1"\r
                class="form-input w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"\r
              />\r
              <p class="mt-1 text-sm text-gray-500">\r
                Suggested time for students to solve this question\r
              </p>\r
            </div>\r
\r
            <!-- Internal Notes -->\r
            <div class="form-group">\r
              <label for="internalNotes" class="block text-sm font-medium text-gray-700 mb-2">\r
                Internal Notes/Author Comments\r
              </label>\r
              <textarea\r
                id="internalNotes"\r
                name="internalNotes"\r
                [(ngModel)]="question.internalNotes"\r
                rows="4"\r
                placeholder="Internal notes or comments for this question..."\r
                class="form-textarea w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 resize-y"\r
              ></textarea>\r
              <p class="mt-1 text-sm text-gray-500">\r
                Private notes visible only to content creators and administrators\r
              </p>\r
            </div>\r
          </div>\r
        </div>\r
\r
        <!-- Appearance History Section -->\r
        <div class="form-section">\r
          <h3 class="text-lg font-semibold text-gray-900 mb-4 flex items-center">\r
            <svg class="w-5 h-5 mr-2 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>\r
            </svg>\r
            Appearance History\r
          </h3>\r
          \r
          <div class="bg-gray-50 rounded-lg p-4">\r
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">\r
              <div>\r
                <label class="block text-sm font-medium text-gray-700 mb-1">Exam Name</label>\r
                <input\r
                  name="histExam"\r
                  type="text"\r
                  placeholder="e.g., JEE Main 2023"\r
                  [(ngModel)]="histEntry.examName"\r
                  class="form-input w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"\r
                />\r
              </div>\r
              <div>\r
                <label class="block text-sm font-medium text-gray-700 mb-1">Year</label>\r
                <input\r
                  name="histYear"\r
                  type="number"\r
                  [min]="1900"\r
                  [max]="currentYear"\r
                  [(ngModel)]="histEntry.year"\r
                  placeholder="2023"\r
                  class="form-input w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"\r
                />\r
              </div>\r
              <div class="flex items-end">\r
                <button \r
                  type="button" \r
                  (click)="addHistory()"\r
                  class="btn-primary w-full px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors"\r
                >\r
                  Add Entry\r
                </button>\r
              </div>\r
            </div>\r
            \r
            <!-- History List -->\r
            <div *ngIf="histList.length" class="space-y-2">\r
              <h4 class="text-sm font-medium text-gray-700 mb-2">Previous Appearances:</h4>\r
              <div class="space-y-1">\r
                <div *ngFor="let h of histList" \r
                     class="flex items-center justify-between bg-white px-3 py-2 rounded border">\r
                  <span class="text-sm text-gray-700">{{ h.examName }} \u2014 {{ h.year }}</span>\r
                </div>\r
              </div>\r
            </div>\r
            \r
            <p *ngIf="!histList.length" class="text-sm text-gray-500 italic">\r
              No appearance history recorded yet.\r
            </p>\r
          </div>\r
        </div>\r
\r
        <!-- Submit Button -->\r
        <div class="flex justify-end pt-6 border-t border-gray-200">\r
          <button \r
            type="submit"\r
            [disabled]="f.invalid"\r
            class="btn-primary px-8 py-3 bg-gradient-to-r from-primary-600 to-primary-700 text-white font-semibold rounded-lg hover:from-primary-700 hover:to-primary-800 focus:ring-4 focus:ring-primary-200 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 transform hover:scale-105"\r
          >\r
            <span class="flex items-center">\r
              <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>\r
              </svg>\r
              Create Question\r
            </span>\r
          </button>\r
        </div>\r
      </form>\r
    </div>\r
  </div>\r
</div>\r
` }]
  }], null, null);
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(AddQuestionComponent, { className: "AddQuestionComponent", filePath: "src/app/components/add-question/add-question.component.ts", lineNumber: 106 });
})();

// src/app/components/edit-question/edit-question.component.ts
function EditQuestionComponent_button_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 17);
    \u0275\u0275listener("click", function EditQuestionComponent_button_7_Template_button_click_0_listener() {
      const lang_r4 = \u0275\u0275restoreView(_r3).$implicit;
      const ctx_r4 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r4.switchLanguage(lang_r4));
    });
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const lang_r4 = ctx.$implicit;
    const ctx_r4 = \u0275\u0275nextContext();
    \u0275\u0275classProp("active", lang_r4 === ctx_r4.currentLang);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", lang_r4.toUpperCase(), " ");
  }
}
function EditQuestionComponent_div_16_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 47);
    \u0275\u0275text(1, " Question is required. ");
    \u0275\u0275elementEnd();
  }
}
function EditQuestionComponent_div_20_img_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "img", 51);
  }
  if (rf & 2) {
    const ctx_r6 = \u0275\u0275nextContext();
    const imgUrl_r8 = ctx_r6.$implicit;
    const imgIndex_r9 = ctx_r6.index;
    \u0275\u0275propertyInterpolate1("alt", "Question Image ", imgIndex_r9 + 1, "");
    \u0275\u0275property("src", imgUrl_r8, \u0275\u0275sanitizeUrl);
  }
}
function EditQuestionComponent_div_20_Template(rf, ctx) {
  if (rf & 1) {
    const _r6 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 48);
    \u0275\u0275template(1, EditQuestionComponent_div_20_img_1_Template, 1, 3, "img", 49);
    \u0275\u0275elementStart(2, "input", 50);
    \u0275\u0275twoWayListener("ngModelChange", function EditQuestionComponent_div_20_Template_input_ngModelChange_2_listener($event) {
      const imgIndex_r9 = \u0275\u0275restoreView(_r6).index;
      const ctx_r4 = \u0275\u0275nextContext();
      \u0275\u0275twoWayBindingSet(ctx_r4.currentQuestionImages[imgIndex_r9], $event) || (ctx_r4.currentQuestionImages[imgIndex_r9] = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "button", 17);
    \u0275\u0275listener("click", function EditQuestionComponent_div_20_Template_button_click_3_listener() {
      const imgIndex_r9 = \u0275\u0275restoreView(_r6).index;
      const ctx_r4 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r4.removeQuestionImage(imgIndex_r9));
    });
    \u0275\u0275text(4, "Remove");
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const imgUrl_r8 = ctx.$implicit;
    const imgIndex_r9 = ctx.index;
    const ctx_r4 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", imgUrl_r8);
    \u0275\u0275advance();
    \u0275\u0275propertyInterpolate2("name", "questionImage", ctx_r4.currentTranslationIndex, "_", imgIndex_r9, "");
    \u0275\u0275propertyInterpolate1("placeholder", "Image URL ", imgIndex_r9 + 1, "");
    \u0275\u0275twoWayProperty("ngModel", ctx_r4.currentQuestionImages[imgIndex_r9]);
  }
}
function EditQuestionComponent_div_23_img_9_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "img", 62);
  }
  if (rf & 2) {
    const ctx_r11 = \u0275\u0275nextContext();
    const opt_r13 = ctx_r11.$implicit;
    const i_r11 = ctx_r11.index;
    \u0275\u0275propertyInterpolate1("alt", "Option ", i_r11 + 1, " Image");
    \u0275\u0275property("src", opt_r13.img, \u0275\u0275sanitizeUrl);
  }
}
function EditQuestionComponent_div_23_button_11_Template(rf, ctx) {
  if (rf & 1) {
    const _r14 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 17);
    \u0275\u0275listener("click", function EditQuestionComponent_div_23_button_11_Template_button_click_0_listener() {
      \u0275\u0275restoreView(_r14);
      const i_r11 = \u0275\u0275nextContext().index;
      const ctx_r4 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r4.removeOptionImage(i_r11));
    });
    \u0275\u0275text(1, "Clear Img");
    \u0275\u0275elementEnd();
  }
}
function EditQuestionComponent_div_23_Template(rf, ctx) {
  if (rf & 1) {
    const _r10 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 52)(1, "label");
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "div", 53)(4, "input", 54);
    \u0275\u0275twoWayListener("ngModelChange", function EditQuestionComponent_div_23_Template_input_ngModelChange_4_listener($event) {
      const i_r11 = \u0275\u0275restoreView(_r10).index;
      const ctx_r4 = \u0275\u0275nextContext();
      \u0275\u0275twoWayBindingSet(ctx_r4.question.options[i_r11].text, $event) || (ctx_r4.question.options[i_r11].text = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(5, "label", 55)(6, "input", 56);
    \u0275\u0275twoWayListener("ngModelChange", function EditQuestionComponent_div_23_Template_input_ngModelChange_6_listener($event) {
      const i_r11 = \u0275\u0275restoreView(_r10).index;
      const ctx_r4 = \u0275\u0275nextContext();
      \u0275\u0275twoWayBindingSet(ctx_r4.question.options[i_r11].isCorrect, $event) || (ctx_r4.question.options[i_r11].isCorrect = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275elementEnd();
    \u0275\u0275text(7, " Correct ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(8, "div", 57);
    \u0275\u0275template(9, EditQuestionComponent_div_23_img_9_Template, 1, 3, "img", 58);
    \u0275\u0275elementStart(10, "input", 59);
    \u0275\u0275twoWayListener("ngModelChange", function EditQuestionComponent_div_23_Template_input_ngModelChange_10_listener($event) {
      const i_r11 = \u0275\u0275restoreView(_r10).index;
      const ctx_r4 = \u0275\u0275nextContext();
      \u0275\u0275twoWayBindingSet(ctx_r4.question.options[i_r11].img, $event) || (ctx_r4.question.options[i_r11].img = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275elementEnd();
    \u0275\u0275template(11, EditQuestionComponent_div_23_button_11_Template, 2, 0, "button", 60);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(12, "button", 61);
    \u0275\u0275listener("click", function EditQuestionComponent_div_23_Template_button_click_12_listener() {
      const i_r11 = \u0275\u0275restoreView(_r10).index;
      const ctx_r4 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r4.removeOption(i_r11));
    });
    \u0275\u0275text(13, " Remove Option ");
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const opt_r13 = ctx.$implicit;
    const i_r11 = ctx.index;
    const ctx_r4 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1("Option ", i_r11 + 1, ":");
    \u0275\u0275advance(2);
    \u0275\u0275propertyInterpolate1("name", "option", i_r11, "");
    \u0275\u0275twoWayProperty("ngModel", ctx_r4.question.options[i_r11].text);
    \u0275\u0275advance(2);
    \u0275\u0275propertyInterpolate1("name", "correct", i_r11, "");
    \u0275\u0275twoWayProperty("ngModel", ctx_r4.question.options[i_r11].isCorrect);
    \u0275\u0275advance(3);
    \u0275\u0275property("ngIf", opt_r13.img);
    \u0275\u0275advance();
    \u0275\u0275propertyInterpolate1("name", "optionImage", i_r11, "");
    \u0275\u0275twoWayProperty("ngModel", ctx_r4.question.options[i_r11].img);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", opt_r13.img);
    \u0275\u0275advance();
    \u0275\u0275property("disabled", ctx_r4.question.options.length <= 2);
  }
}
function EditQuestionComponent_div_40_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 47);
    \u0275\u0275text(1, " Difficulty is required. ");
    \u0275\u0275elementEnd();
  }
}
function EditQuestionComponent_option_48_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "option", 63);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const qt_r15 = ctx.$implicit;
    \u0275\u0275property("value", qt_r15);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(qt_r15);
  }
}
function EditQuestionComponent_div_49_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 47);
    \u0275\u0275text(1, " Type is required. ");
    \u0275\u0275elementEnd();
  }
}
function EditQuestionComponent_option_57_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "option", 63);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const qs_r16 = ctx.$implicit;
    \u0275\u0275property("value", qs_r16);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(qs_r16);
  }
}
function EditQuestionComponent_div_58_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 47);
    \u0275\u0275text(1, " Status is required. ");
    \u0275\u0275elementEnd();
  }
}
function EditQuestionComponent_option_66_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "option", 63);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const b_r17 = ctx.$implicit;
    \u0275\u0275property("value", b_r17._id);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(b_r17.name);
  }
}
function EditQuestionComponent_div_67_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 47);
    \u0275\u0275text(1, " Branch is required. ");
    \u0275\u0275elementEnd();
  }
}
function EditQuestionComponent_option_75_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "option", 63);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const s_r18 = ctx.$implicit;
    \u0275\u0275property("value", s_r18._id);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(s_r18.name);
  }
}
function EditQuestionComponent_option_83_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "option", 63);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const t_r19 = ctx.$implicit;
    \u0275\u0275property("value", t_r19._id);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(t_r19.name);
  }
}
function EditQuestionComponent_option_91_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "option", 63);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const st_r20 = ctx.$implicit;
    \u0275\u0275property("value", st_r20._id);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(st_r20.name);
  }
}
function EditQuestionComponent_div_107_textarea_20_Template(rf, ctx) {
  if (rf & 1) {
    const _r24 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "textarea", 78);
    \u0275\u0275twoWayListener("ngModelChange", function EditQuestionComponent_div_107_textarea_20_Template_textarea_ngModelChange_0_listener($event) {
      \u0275\u0275restoreView(_r24);
      const expl_r22 = \u0275\u0275nextContext().$implicit;
      \u0275\u0275twoWayBindingSet(expl_r22.content, $event) || (expl_r22.content = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r24 = \u0275\u0275nextContext();
    const expl_r22 = ctx_r24.$implicit;
    const exIndex_r23 = ctx_r24.index;
    const ctx_r4 = \u0275\u0275nextContext();
    \u0275\u0275propertyInterpolate2("id", "expContent_", ctx_r4.currentLang, "_", exIndex_r23, "");
    \u0275\u0275propertyInterpolate2("name", "expContent_", ctx_r4.currentLang, "_", exIndex_r23, "");
    \u0275\u0275twoWayProperty("ngModel", expl_r22.content);
  }
}
function EditQuestionComponent_div_107_input_21_Template(rf, ctx) {
  if (rf & 1) {
    const _r26 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "input", 79);
    \u0275\u0275twoWayListener("ngModelChange", function EditQuestionComponent_div_107_input_21_Template_input_ngModelChange_0_listener($event) {
      \u0275\u0275restoreView(_r26);
      const expl_r22 = \u0275\u0275nextContext().$implicit;
      \u0275\u0275twoWayBindingSet(expl_r22.content, $event) || (expl_r22.content = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r24 = \u0275\u0275nextContext();
    const expl_r22 = ctx_r24.$implicit;
    const exIndex_r23 = ctx_r24.index;
    const ctx_r4 = \u0275\u0275nextContext();
    \u0275\u0275propertyInterpolate2("id", "expContent_", ctx_r4.currentLang, "_", exIndex_r23, "");
    \u0275\u0275propertyInterpolate2("name", "expContent_", ctx_r4.currentLang, "_", exIndex_r23, "");
    \u0275\u0275twoWayProperty("ngModel", expl_r22.content);
    \u0275\u0275property("placeholder", expl_r22.type === "video" ? "Video URL" : expl_r22.type === "pdf" ? "PDF URL" : "Image URL");
  }
}
function EditQuestionComponent_div_107_div_22_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 47);
    \u0275\u0275text(1, " Content is required for the explanation. ");
    \u0275\u0275elementEnd();
  }
}
function EditQuestionComponent_div_107_Template(rf, ctx) {
  if (rf & 1) {
    const _r21 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 64)(1, "div", 65)(2, "label", 66);
    \u0275\u0275text(3, "Type:");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(4, "select", 67);
    \u0275\u0275twoWayListener("ngModelChange", function EditQuestionComponent_div_107_Template_select_ngModelChange_4_listener($event) {
      const expl_r22 = \u0275\u0275restoreView(_r21).$implicit;
      \u0275\u0275twoWayBindingSet(expl_r22.type, $event) || (expl_r22.type = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275elementStart(5, "option", 68);
    \u0275\u0275text(6, "Text");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(7, "option", 69);
    \u0275\u0275text(8, "Video");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(9, "option", 70);
    \u0275\u0275text(10, "PDF");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(11, "option", 71);
    \u0275\u0275text(12, "Image");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(13, "label", 72);
    \u0275\u0275text(14, "Label (optional):");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(15, "input", 73);
    \u0275\u0275twoWayListener("ngModelChange", function EditQuestionComponent_div_107_Template_input_ngModelChange_15_listener($event) {
      const expl_r22 = \u0275\u0275restoreView(_r21).$implicit;
      \u0275\u0275twoWayBindingSet(expl_r22.label, $event) || (expl_r22.label = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(16, "button", 74);
    \u0275\u0275listener("click", function EditQuestionComponent_div_107_Template_button_click_16_listener() {
      const exIndex_r23 = \u0275\u0275restoreView(_r21).index;
      const ctx_r4 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r4.removeExplanation(exIndex_r23));
    });
    \u0275\u0275text(17, "Remove");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(18, "label", 75);
    \u0275\u0275text(19, "Content:");
    \u0275\u0275elementEnd();
    \u0275\u0275template(20, EditQuestionComponent_div_107_textarea_20_Template, 1, 7, "textarea", 76)(21, EditQuestionComponent_div_107_input_21_Template, 1, 8, "input", 77)(22, EditQuestionComponent_div_107_div_22_Template, 2, 0, "div", 14);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const expl_r22 = ctx.$implicit;
    const exIndex_r23 = ctx.index;
    const ctx_r4 = \u0275\u0275nextContext();
    const form_r2 = \u0275\u0275reference(3);
    \u0275\u0275advance(2);
    \u0275\u0275propertyInterpolate2("for", "expType_", ctx_r4.currentLang, "_", exIndex_r23, "");
    \u0275\u0275advance(2);
    \u0275\u0275propertyInterpolate2("id", "expType_", ctx_r4.currentLang, "_", exIndex_r23, "");
    \u0275\u0275propertyInterpolate2("name", "expType_", ctx_r4.currentLang, "_", exIndex_r23, "");
    \u0275\u0275twoWayProperty("ngModel", expl_r22.type);
    \u0275\u0275advance(9);
    \u0275\u0275propertyInterpolate2("for", "expLabel_", ctx_r4.currentLang, "_", exIndex_r23, "");
    \u0275\u0275advance(2);
    \u0275\u0275propertyInterpolate2("id", "expLabel_", ctx_r4.currentLang, "_", exIndex_r23, "");
    \u0275\u0275propertyInterpolate2("name", "expLabel_", ctx_r4.currentLang, "_", exIndex_r23, "");
    \u0275\u0275twoWayProperty("ngModel", expl_r22.label);
    \u0275\u0275advance(3);
    \u0275\u0275propertyInterpolate2("for", "expContent_", ctx_r4.currentLang, "_", exIndex_r23, "");
    \u0275\u0275advance(2);
    \u0275\u0275property("ngIf", expl_r22.type === "text");
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", expl_r22.type !== "text");
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", (form_r2.controls["expContent_" + ctx_r4.currentLang + "_" + exIndex_r23] == null ? null : form_r2.controls["expContent_" + ctx_r4.currentLang + "_" + exIndex_r23].invalid) && ((form_r2.controls["expContent_" + ctx_r4.currentLang + "_" + exIndex_r23] == null ? null : form_r2.controls["expContent_" + ctx_r4.currentLang + "_" + exIndex_r23].touched) || form_r2.submitted));
  }
}
var EditQuestionComponent = class _EditQuestionComponent {
  questionService = inject(QuestionService);
  /** @private {ActivatedRoute} Angular router service for accessing route parameters */
  route = inject(ActivatedRoute);
  /** @private {Router} Angular navigation service for programmatic routing */
  router = inject(Router);
  /** @property {string} Question ID extracted from route parameters */
  id;
  /**
   * @property {QuestionEditForm} Main question object for editing
   * @description Extended question interface with additional UI-specific properties
   * for form binding and hierarchy management
   */
  question = {
    translations: [],
    difficulty: "",
    options: [{ text: "", isCorrect: false }, { text: "", isCorrect: false }],
    type: "MCQ",
    // Default type
    status: "Draft",
    // Default status
    tags: [],
    // Initialize new field
    recommendedTimeAllotment: void 0,
    // Initialize new field
    internalNotes: ""
    // Initialize new field
  };
  /** @property {string} String representation of tags for form input binding */
  tagsInputString = "";
  /** @property {any[]} Available educational branches for selection */
  branches = [];
  /** @property {any[]} Available subjects filtered by selected branch */
  subjects = [];
  /** @property {any[]} Available topics filtered by selected subject */
  topics = [];
  /** @property {any[]} Available subtopics filtered by selected topic */
  subtopics = [];
  /** @property {boolean} Loading state indicator for async operations */
  isLoading = false;
  /** @property {string} Current active language for translation editing */
  currentLang = "en";
  /** @property {number} Index of current translation being edited */
  currentTranslationIndex = 0;
  /** @property {string[]} Available language codes for translation support */
  availableLangs = ["en", "hi"];
  /** @property {Explanation[]} Explanations for the current translation */
  currentTranslationExplanations = [];
  /**
   * @getter currentQuestionImages
   * @description Retrieves images array for the current translation, initializing if undefined
   * @returns {string[]} Array of image URLs for the current translation
   *
   * @example
   * ```typescript
   * const images = this.currentQuestionImages;
   * // Returns: ['image1.jpg', 'image2.png'] or []
   * ```
   */
  get currentQuestionImages() {
    if (this.question && this.question.translations && this.question.translations[this.currentTranslationIndex]) {
      if (!this.question.translations[this.currentTranslationIndex].images) {
        this.question.translations[this.currentTranslationIndex].images = [];
      }
      return this.question.translations[this.currentTranslationIndex].images;
    }
    return [];
  }
  /** @property {string[]} Available question types for selection */
  questionTypes = ["MCQ", "SA", "LA", "FITB", "Matrix", "single", "multiple"];
  /** @property {string[]} Available question status options for workflow management */
  questionStatuses = ["Draft", "Published", "Archived", "Pending Review", "active", "inactive"];
  /**
   * @private
   * @method getHierarchicalId
   * @description Extracts string ID from various hierarchical field formats (string, ObjectId, populated object)
   * @param {string | { $oid: string } | PopulatedHierarchyField | undefined} field - Hierarchical field value
   * @returns {string | undefined} Extracted string ID or undefined if not found
   *
   * @example
   * ```typescript
   * const id1 = this.getHierarchicalId('507f1f77bcf86cd799439011'); // Returns: '507f1f77bcf86cd799439011'
   * const id2 = this.getHierarchicalId({ $oid: '507f1f77bcf86cd799439011' }); // Returns: '507f1f77bcf86cd799439011'
   * const id3 = this.getHierarchicalId({ _id: '507f1f77bcf86cd799439011', name: 'Branch Name' }); // Returns: '507f1f77bcf86cd799439011'
   * ```
   */
  getHierarchicalId(field) {
    if (!field) {
      return void 0;
    }
    if (typeof field === "string") {
      return field;
    }
    if (field.$oid) {
      return field.$oid;
    }
    if (field._id) {
      const idField = field._id;
      return typeof idField === "string" ? idField : idField.$oid;
    }
    return void 0;
  }
  /**
   * @method ngOnInit
   * @description Angular lifecycle hook for component initialization.
   * Extracts question ID from route parameters, loads question data, initializes
   * form state, and sets up hierarchical dropdown dependencies.
   *
   * @returns {void}
   *
   * @example
   * ```typescript
   * // Component initialization flow:
   * // 1. Extract question ID from route parameters
   * // 2. Load educational hierarchy (branches)
   * // 3. Load existing question data if editing
   * // 4. Initialize translation management
   * // 5. Set up form validation and dependencies
   * ```
   */
  ngOnInit() {
    console.log("[EditQuestionComponent] ngOnInit: Component initializing.");
    console.log("[EditQuestionComponent] ngOnInit: Route snapshot:", this.route.snapshot);
    this.id = this.route.snapshot.paramMap.get("id");
    console.log("[EditQuestionComponent] ngOnInit: Extracted question ID:", this.id);
    this.fetchBranches();
    if (this.id) {
      console.log("[EditQuestionComponent] ngOnInit: Attempting to load question with ID:", this.id);
      this.questionService.getQuestionById(this.id).subscribe({
        next: (data) => {
          console.log("[EditQuestionComponent] ngOnInit: Successfully loaded question data:", data);
          if (data.translations) {
            data.translations.forEach((t) => {
              if (t.images === void 0) {
                t.images = [];
              }
            });
          } else {
            data.translations = [];
          }
          this.question = __spreadProps(__spreadValues({}, data), {
            branchId: this.getHierarchicalId(data.branch),
            subjectId: this.getHierarchicalId(data.subject),
            topicId: this.getHierarchicalId(data.topic),
            subTopicId: this.getHierarchicalId(data.subTopic),
            options: [],
            questionText: "",
            tags: data.tags || [],
            // Load tags
            recommendedTimeAllotment: data.recommendedTimeAllotment,
            // Load time
            internalNotes: data.internalNotes || ""
            // Load notes
          });
          if (data.type)
            this.question.type = data.type;
          if (data.status)
            this.question.status = data.status;
          this.tagsInputString = this.question.tags ? this.question.tags.join(", ") : "";
          if (this.question.translations.length === 0) {
            this.question.translations = [{
              lang: "en",
              questionText: "",
              options: [{ text: "", isCorrect: false }, { text: "", isCorrect: false }],
              explanations: [{ type: "text", content: "" }],
              // Initialize with default explanation structure
              images: []
            }];
          }
          this.question.translations?.forEach((t) => {
            if (t.explanations === void 0) {
              t.explanations = [{ type: "text", content: "" }];
            } else if (t.explanations.length === 0) {
              t.explanations.push({ type: "text", content: "" });
            }
            t.explanations.forEach((ex) => {
              if (!ex.type)
                ex.type = "text";
              if (ex.content === void 0)
                ex.content = "";
            });
          });
          this.currentLang = this.question.translations[0].lang || "en";
          this.currentTranslationIndex = this.question.translations.findIndex((t) => t.lang === this.currentLang);
          if (this.currentTranslationIndex === -1) {
            this.currentTranslationIndex = 0;
          }
          const currentTranslationData = this.question.translations[this.currentTranslationIndex];
          this.question.questionText = currentTranslationData.questionText || "";
          this.question.options = currentTranslationData?.options && currentTranslationData.options.length > 0 ? currentTranslationData.options : [{ text: "", isCorrect: false }, { text: "", isCorrect: false }];
          this.currentTranslationExplanations = currentTranslationData?.explanations?.map((ex) => ({
            type: ex.type || "text",
            label: ex.label || "",
            content: ex.content || ""
          })) || [{ type: "text", content: "" }];
          if (this.question.branchId)
            this.fetchSubjects(this.question.branchId);
          if (this.question.subjectId)
            this.fetchTopics(this.question.subjectId);
          if (this.question.topicId)
            this.fetchSubtopics(this.question.topicId);
        },
        error: (err) => {
          console.error("[EditQuestionComponent] ngOnInit: Error loading question:", err);
        }
      });
    } else {
      console.log("[EditQuestionComponent] ngOnInit: No ID found, initializing for new question.");
      this.question = {
        translations: [{
          lang: "en",
          questionText: "",
          options: [{ text: "", isCorrect: false }, { text: "", isCorrect: false }],
          explanations: [{ type: "text", content: "" }],
          images: []
          /* images initialized */
        }],
        difficulty: "",
        questionText: "",
        options: [{ text: "", isCorrect: false }, { text: "", isCorrect: false }],
        type: "MCQ",
        status: "Draft",
        tags: [],
        // Initialize for new question
        recommendedTimeAllotment: void 0,
        // Initialize for new question
        internalNotes: "",
        // Initialize for new question
        // Initialize other necessary fields from Question model if not covered by Partial<Question>
        branch: void 0,
        // Or appropriate default
        subject: void 0,
        topic: void 0,
        subTopic: void 0
        // etc.
      };
      this.tagsInputString = "";
      this.currentLang = "en";
      this.currentTranslationIndex = 0;
    }
  }
  // ... fetchBranches, fetchSubjects, fetchTopics, fetchSubtopics methods remain similar ...
  // Ensure they are correctly implemented
  /**
   * @method fetchBranches
   * @description Loads available educational branches from the backend service
   * @returns {void}
   *
   * @example
   * ```typescript
   * this.fetchBranches();
   * // Populates this.branches with available educational branches
   * ```
   */
  fetchBranches() {
    this.questionService.getBranches().subscribe({
      next: (data) => this.branches = Array.isArray(data) ? data : data.branches || [],
      error: (err) => console.error("Error fetching branches:", err)
    });
  }
  /**
   * @method fetchSubjects
   * @description Loads subjects for a specific branch from the backend service
   * @param {string} branchId - The branch ID to fetch subjects for
   * @returns {void}
   *
   * @example
   * ```typescript
   * this.fetchSubjects('507f1f77bcf86cd799439011');
   * // Populates this.subjects with subjects for the specified branch
   * ```
   */
  fetchSubjects(branchId) {
    if (!branchId)
      return;
    this.questionService.getSubjects(branchId).subscribe({
      next: (data) => this.subjects = data.subjects || data || [],
      error: (err) => console.error("Error fetching subjects:", err)
    });
  }
  /**
   * @method fetchTopics
   * @description Loads topics for a specific subject from the backend service
   * @param {string} subjectId - The subject ID to fetch topics for
   * @returns {void}
   *
   * @example
   * ```typescript
   * this.fetchTopics('507f1f77bcf86cd799439012');
   * // Populates this.topics with topics for the specified subject
   * ```
   */
  fetchTopics(subjectId) {
    if (!subjectId)
      return;
    this.questionService.getTopics(subjectId).subscribe({
      next: (data) => this.topics = data.topics || data || [],
      error: (err) => console.error("Error fetching topics:", err)
    });
  }
  /**
   * @method fetchSubtopics
   * @description Loads subtopics for a specific topic from the backend service
   * @param {string} topicId - The topic ID to fetch subtopics for
   * @returns {void}
   *
   * @example
   * ```typescript
   * this.fetchSubtopics('507f1f77bcf86cd799439013');
   * // Populates this.subtopics with subtopics for the specified topic
   * ```
   */
  fetchSubtopics(topicId) {
    if (!topicId)
      return;
    this.questionService.getSubtopics(topicId).subscribe({
      next: (data) => this.subtopics = data.subtopics || data || [],
      error: (err) => console.error("Error fetching subtopics:", err)
    });
  }
  /**
   * @method onBranchChange
   * @description Handles educational branch selection change, resets dependent dropdowns and loads subjects
   * @param {string} branchIdValue - Selected branch ID
   * @returns {void}
   *
   * @example
   * ```typescript
   * this.onBranchChange('507f1f77bcf86cd799439011');
   * // Clears subjects, topics, subtopics and loads new subjects for branch
   * ```
   */
  onBranchChange(branchIdValue) {
    this.question.branchId = branchIdValue;
    this.question.subjectId = void 0;
    this.question.topicId = void 0;
    this.question.subTopicId = void 0;
    this.subjects = [];
    this.topics = [];
    this.subtopics = [];
    if (branchIdValue) {
      this.fetchSubjects(branchIdValue);
    }
  }
  /**
   * @method onSubjectChange
   * @description Handles subject selection change, resets dependent dropdowns and loads topics
   * @param {string} subjectIdValue - Selected subject ID
   * @returns {void}
   *
   * @example
   * ```typescript
   * this.onSubjectChange('507f1f77bcf86cd799439012');
   * // Clears topics, subtopics and loads new topics for subject
   * ```
   */
  onSubjectChange(subjectIdValue) {
    this.question.subjectId = subjectIdValue;
    this.question.topicId = void 0;
    this.question.subTopicId = void 0;
    this.topics = [];
    this.subtopics = [];
    if (subjectIdValue) {
      this.fetchTopics(subjectIdValue);
    }
  }
  /**
   * @method onTopicChange
   * @description Handles topic selection change, resets subtopic dropdown and loads subtopics
   * @param {string} topicIdValue - Selected topic ID
   * @returns {void}
   *
   * @example
   * ```typescript
   * this.onTopicChange('507f1f77bcf86cd799439013');
   * // Clears subtopics and loads new subtopics for topic
   * ```
   */
  onTopicChange(topicIdValue) {
    this.question.topicId = topicIdValue;
    this.question.subTopicId = void 0;
    this.subtopics = [];
    if (topicIdValue) {
      this.fetchSubtopics(topicIdValue);
    }
  }
  /**
   * @method onSubtopicChange
   * @description Handles subtopic selection change, updates question's subtopic ID
   * @param {string} subtopicIdValue - Selected subtopic ID
   * @returns {void}
   *
   * @example
   * ```typescript
   * this.onSubtopicChange('507f1f77bcf86cd799439014');
   * // Sets question's subtopic ID to selected value
   * ```
   */
  onSubtopicChange(subtopicIdValue) {
    this.question.subTopicId = subtopicIdValue;
  }
  /**
   * @method onTagsInputChange
   * @description Handles changes to the tags input string, parsing comma-separated values into tags array
   * @param {string} value - Comma-separated tags string from input field
   * @returns {void}
   *
   * @example
   * ```typescript
   * this.onTagsInputChange('physics, mechanics, kinematics');
   * // Updates question.tags to ['physics', 'mechanics', 'kinematics']
   * ```
   */
  onTagsInputChange(value) {
    this.tagsInputString = value;
    if (value && value.trim() !== "") {
      this.question.tags = value.split(",").map((tag) => tag.trim()).filter((tag) => tag !== "");
    } else {
      this.question.tags = [];
    }
  }
  /**
   * @method switchLanguage
   * @description Switches the editing interface to a different language translation,
   * saving current translation state and loading the target language content
   * @param {string} lang - Language code to switch to (e.g., 'en', 'hi')
   * @returns {void}
   *
   * @example
   * ```typescript
   * this.switchLanguage('hi');
   * // Saves current English content and loads Hindi translation for editing
   * ```
   */
  switchLanguage(lang) {
    const newIndex = this.question.translations?.findIndex((t) => t.lang === lang);
    if (newIndex !== void 0 && newIndex !== -1) {
      const oldTranslation = this.question.translations[this.currentTranslationIndex];
      oldTranslation.questionText = this.question.questionText || "";
      oldTranslation.options = this.question.options || [];
      oldTranslation.explanations = this.currentTranslationExplanations.map((ex) => ({
        type: ex.type || "text",
        label: ex.label,
        content: ex.content
      }));
      this.currentLang = lang;
      this.currentTranslationIndex = newIndex;
      const newTranslation = this.question.translations[this.currentTranslationIndex];
      if (newTranslation.images === void 0) {
        newTranslation.images = [];
      }
      if (newTranslation.explanations === void 0 || newTranslation.explanations.length === 0) {
        newTranslation.explanations = [{ type: "text", content: "" }];
      }
      newTranslation.explanations.forEach((ex) => {
        if (!ex.type)
          ex.type = "text";
        if (ex.content === void 0)
          ex.content = "";
      });
      this.question.questionText = newTranslation.questionText;
      this.question.options = newTranslation.options;
      this.currentTranslationExplanations = newTranslation.explanations.map((ex) => ({
        type: ex.type || "text",
        label: ex.label || "",
        content: ex.content || ""
      }));
    } else {
      this.addTranslation(lang);
    }
  }
  /**
   * @method addTranslation
   * @description Adds a new language translation to the question, saving current state
   * and initializing empty content for the new language
   * @param {string} lang - Language code for the new translation (e.g., 'hi', 'es')
   * @returns {void}
   *
   * @example
   * ```typescript
   * this.addTranslation('hi');
   * // Adds Hindi translation with empty content and switches to it
   * ```
   */
  addTranslation(lang) {
    if (!this.question.translations)
      this.question.translations = [];
    if (!this.question.translations.find((t) => t.lang === lang)) {
      if (this.question.translations[this.currentTranslationIndex]) {
        const oldTranslation = this.question.translations[this.currentTranslationIndex];
        oldTranslation.questionText = this.question.questionText || "";
        oldTranslation.options = this.question.options || [];
        oldTranslation.explanations = this.currentTranslationExplanations.map((ex) => ({
          type: ex.type || "text",
          label: ex.label,
          content: ex.content
        }));
      }
      this.question.translations.push({
        lang,
        questionText: "",
        options: [{ text: "", isCorrect: false }, { text: "", isCorrect: false }],
        explanations: [{ type: "text", content: "" }],
        // Initialize with default explanation structure
        images: []
      });
      this.currentLang = lang;
      this.currentTranslationIndex = this.question.translations.length - 1;
      this.question.questionText = "";
      this.question.options = [{ text: "", isCorrect: false }, { text: "", isCorrect: false }];
      this.currentTranslationExplanations = [{ type: "text", content: "" }];
    }
  }
  /**
   * @method addExplanation
   * @description Adds a new explanation entry to the current translation
   * @returns {void}
   *
   * @example
   * ```typescript
   * this.addExplanation();
   * // Adds a new explanation with default 'text' type and empty content
   * ```
   */
  addExplanation() {
    this.currentTranslationExplanations.push({ type: "text", content: "" });
  }
  /**
   * @method removeExplanation
   * @description Removes an explanation entry from the current translation
   * @param {number} index - Index of the explanation to remove
   * @returns {void}
   *
   * @example
   * ```typescript
   * this.removeExplanation(1);
   * // Removes the explanation at index 1
   * ```
   */
  removeExplanation(index) {
    if (this.currentTranslationExplanations.length > 0) {
      this.currentTranslationExplanations.splice(index, 1);
    }
  }
  /**
   * @method addQuestionImage
   * @description Adds a new image URL placeholder to the current translation
   * @returns {void}
   *
   * @example
   * ```typescript
   * this.addQuestionImage();
   * // Adds an empty image URL to the current translation's images array
   * ```
   */
  addQuestionImage() {
    if (this.question && this.question.translations && this.question.translations[this.currentTranslationIndex]) {
      if (!this.question.translations[this.currentTranslationIndex].images) {
        this.question.translations[this.currentTranslationIndex].images = [];
      }
      this.question.translations[this.currentTranslationIndex].images.push("");
    }
  }
  /**
   * @method removeQuestionImage
   * @description Removes an image URL from the current translation's images array
   * @param {number} imgIndex - Index of the image to remove from the array
   * @returns {void}
   *
   * @example
   * ```typescript
   * this.removeQuestionImage(0);
   * // Removes the first image from the current translation
   * ```
   */
  removeQuestionImage(imgIndex) {
    if (this.question && this.question.translations && this.question.translations[this.currentTranslationIndex] && this.question.translations[this.currentTranslationIndex].images) {
      this.question.translations[this.currentTranslationIndex].images.splice(imgIndex, 1);
    }
  }
  /**
   * @method removeOptionImage
   * @description Removes/clears the image from a specific option by setting it to empty string
   * @param {number} optionIndex - Index of the option to remove the image from
   * @returns {void}
   *
   * @example
   * ```typescript
   * this.removeOptionImage(1);
   * // Clears the image from the second option (index 1)
   * ```
   */
  // ADDED: Method to manage option image (sets to empty string for now)
  removeOptionImage(optionIndex) {
    if (this.question && this.question.options && this.question.options[optionIndex]) {
      this.question.options[optionIndex].img = "";
    }
  }
  /**
   * @method save
   * @description Saves the question by validating form data and sending to backend service
   * @param {NgForm} form - Angular form reference for validation
   * @returns {void}
   *
   * @description
   * This method handles both creating new questions and updating existing ones:
   * - Validates form data and marks all fields as touched if invalid
   * - Updates the current translation with form-bound properties
   * - Prepares payload with all question data including hierarchy, translations, and metadata
   * - Calls appropriate service method based on whether editing (this.id exists) or creating
   * - Handles success/error responses and navigates back to questions list
   *
   * @example
   * ```typescript
   * // Called from template on form submission
   * this.save(questionForm);
   * // Validates and saves the question, then navigates to questions list
   * ```
   */
  save(form) {
    if (form.invalid) {
      form.control.markAllAsTouched();
      return;
    }
    if (this.question.translations && this.question.translations[this.currentTranslationIndex]) {
      const translationToUpdate = this.question.translations[this.currentTranslationIndex];
      translationToUpdate.questionText = this.question.questionText || "";
      translationToUpdate.options = this.question.options || [];
      translationToUpdate.explanations = this.currentTranslationExplanations.map((ex) => ({
        type: ex.type || "text",
        label: ex.label,
        content: ex.content
      }));
    }
    const payload = {
      // _id should be handled by the service (present for update, absent for create)
      // If this.id is set, it's an update. The service method takes id as a separate param.
      translations: this.question.translations,
      difficulty: this.question.difficulty,
      branch: this.question.branchId,
      subject: this.question.subjectId,
      topic: this.question.topicId,
      subTopic: this.question.subTopicId,
      // CORRECTED: subTopic
      type: this.question.type,
      // Ensure type and status are part of the form and this.question
      status: this.question.status,
      // REMOVED: version: this.question.version, // Let backend handle version increment
      // ADDED: New fields to payload
      tags: this.question.tags,
      recommendedTimeAllotment: this.question.recommendedTimeAllotment,
      internalNotes: this.question.internalNotes
    };
    if (this.id) {
      payload._id = this.id;
    }
    this.isLoading = true;
    const saveObservable = this.id ? this.questionService.updateQuestion(this.id, payload) : this.questionService.addQuestion(payload);
    saveObservable.pipe(finalize(() => this.isLoading = false)).subscribe({
      next: (response) => {
        alert(`Question ${this.id ? "updated" : "added"} successfully!`);
        this.router.navigate(["/questions"]);
      },
      error: (err) => {
        console.error(`Failed to ${this.id ? "update" : "add"} question:`, err);
        alert(`Failed to ${this.id ? "update" : "add"} question.`);
      }
    });
  }
  /**
   * @method cancel
   * @description Cancels the current edit operation and navigates back to questions list
   * @returns {void}
   *
   * @description
   * This method provides a way to exit the edit form without saving changes.
   * All unsaved changes will be lost when navigating away.
   *
   * @example
   * ```typescript
   * this.cancel();
   * // Navigates back to /questions route, discarding any unsaved changes
   * ```
   */
  cancel() {
    this.router.navigate(["/questions"]);
  }
  /**
   * @method addOption
   * @description Adds a new blank option to the current language's options array
   * @returns {void}
   *
   * @description
   * Creates a new option with empty text and isCorrect set to false.
   * Ensures the options array exists before adding the new option.
   *
   * @example
   * ```typescript
   * this.addOption();
   * // Adds a new option: { text: '', isCorrect: false }
   * ```
   */
  /** Add a new blank option to the current language's options */
  addOption() {
    if (!this.question.options) {
      this.question.options = [];
    }
    this.question.options.push({ text: "", isCorrect: false });
  }
  /**
   * @method removeOption
   * @description Removes an option from the current language's options array
   * @param {number} index - Index of the option to remove
   * @returns {void}
   *
   * @description
   * Removes an option at the specified index while maintaining a minimum of 2 options.
   * This ensures that multiple choice questions always have at least 2 answer choices.
   *
   * @example
   * ```typescript
   * this.removeOption(2);
   * // Removes the option at index 2, if more than 2 options exist
   * ```
   */
  /** Remove an option, leave at least two */
  removeOption(index) {
    if (this.question.options && this.question.options.length > 2) {
      this.question.options.splice(index, 1);
    }
  }
  static \u0275fac = function EditQuestionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _EditQuestionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _EditQuestionComponent, selectors: [["app-edit-question"]], decls: 116, vars: 33, consts: [["form", "ngForm"], ["qt", "ngModel"], ["diff", "ngModel"], ["typeCtrl", "ngModel"], ["statusCtrl", "ngModel"], ["branchCtrl", "ngModel"], ["subjectCtrl", "ngModel"], ["topicCtrl", "ngModel"], ["subtopicCtrl", "ngModel"], [3, "ngSubmit"], [1, "language-switcher"], ["type", "button", 3, "active", "click", 4, "ngFor", "ngForOf"], ["type", "button", "title", "Add a new language (replace code)", 3, "click"], ["type", "text", "name", "questionText", "required", "", 3, "ngModelChange", "ngModel"], ["class", "error", 4, "ngIf"], [1, "form-section"], ["class", "image-item", 4, "ngFor", "ngForOf"], ["type", "button", 3, "click"], ["class", "form-section option-item", 4, "ngFor", "ngForOf"], ["for", "difficulty"], ["id", "difficulty", "name", "difficulty", "required", "", 3, "ngModelChange", "ngModel"], ["value", ""], ["value", "Easy"], ["value", "Medium"], ["value", "Hard"], ["for", "type"], ["id", "type", "name", "type", "required", "", 3, "ngModelChange", "ngModel"], [3, "value", 4, "ngFor", "ngForOf"], ["for", "status"], ["id", "status", "name", "status", "required", "", 3, "ngModelChange", "ngModel"], ["for", "branch"], ["id", "branch", "name", "branch", "required", "", 3, "ngModelChange", "change", "ngModel"], ["for", "subject"], ["id", "subject", "name", "subject", 3, "ngModelChange", "change", "ngModel", "disabled"], ["for", "topic"], ["id", "topic", "name", "topic", 3, "ngModelChange", "change", "ngModel", "disabled"], ["for", "subTopic"], ["id", "subTopic", "name", "subTopic", 3, "ngModelChange", "change", "ngModel", "disabled"], ["for", "tags"], ["type", "text", "id", "tags", "name", "tags", "placeholder", "e.g., algebra, geometry, important", 3, "ngModelChange", "ngModel"], ["for", "recommendedTime"], ["type", "number", "id", "recommendedTime", "name", "recommendedTime", "placeholder", "e.g., 300", 3, "ngModelChange", "ngModel"], ["for", "internalNotes"], ["id", "internalNotes", "name", "internalNotes", "rows", "3", "placeholder", "Internal notes or comments for this question...", 3, "ngModelChange", "ngModel"], ["for", "explanation"], ["class", "explanation-item form-section", 4, "ngFor", "ngForOf"], ["type", "submit", 3, "disabled"], [1, "error"], [1, "image-item"], ["style", "max-width: 100px; max-height: 100px; margin-right: 10px;", 3, "src", "alt", 4, "ngIf"], ["type", "text", 2, "flex-grow", "1", "margin-right", "10px", 3, "ngModelChange", "ngModel", "name", "placeholder"], [2, "max-width", "100px", "max-height", "100px", "margin-right", "10px", 3, "src", "alt"], [1, "form-section", "option-item"], [1, "option-content"], ["type", "text", "required", "", "placeholder", "Option text", 2, "flex-grow", "1", "margin-right", "10px", 3, "ngModelChange", "ngModel", "name"], [1, "checkbox-label"], ["type", "checkbox", 3, "ngModelChange", "ngModel", "name"], [1, "option-image-section", 2, "margin-left", "20px"], ["style", "max-width: 70px; max-height: 70px; margin-right: 5px;", 3, "src", "alt", 4, "ngIf"], ["type", "text", "placeholder", "Option Image URL", 2, "margin-right", "5px", 3, "ngModelChange", "ngModel", "name"], ["type", "button", 3, "click", 4, "ngIf"], ["type", "button", 1, "remove-option-btn", 3, "click", "disabled"], [2, "max-width", "70px", "max-height", "70px", "margin-right", "5px", 3, "src", "alt"], [3, "value"], [1, "explanation-item", "form-section"], [1, "explanation-controls"], [3, "for"], [3, "ngModelChange", "id", "name", "ngModel"], ["value", "text"], ["value", "video"], ["value", "pdf"], ["value", "image"], [2, "margin-left", "10px", 3, "for"], ["type", "text", "placeholder", "Label", 3, "ngModelChange", "id", "name", "ngModel"], ["type", "button", 1, "remove-explanation-btn", 2, "margin-left", "10px", 3, "click"], [2, "display", "block", "margin-top", "5px", 3, "for"], ["placeholder", "Explanation Text", "rows", "3", "style", "width: 100%;", 3, "id", "name", "ngModel", "ngModelChange", 4, "ngIf"], ["type", "text", "style", "width: 100%;", 3, "id", "name", "ngModel", "placeholder", "ngModelChange", 4, "ngIf"], ["placeholder", "Explanation Text", "rows", "3", 2, "width", "100%", 3, "ngModelChange", "id", "name", "ngModel"], ["type", "text", 2, "width", "100%", 3, "ngModelChange", "id", "name", "ngModel", "placeholder"]], template: function EditQuestionComponent_Template(rf, ctx) {
    if (rf & 1) {
      const _r1 = \u0275\u0275getCurrentView();
      \u0275\u0275elementStart(0, "h2");
      \u0275\u0275text(1, "Edit Question");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(2, "form", 9, 0);
      \u0275\u0275listener("ngSubmit", function EditQuestionComponent_Template_form_ngSubmit_2_listener() {
        \u0275\u0275restoreView(_r1);
        const form_r2 = \u0275\u0275reference(3);
        return \u0275\u0275resetView(ctx.save(form_r2));
      });
      \u0275\u0275elementStart(4, "div", 10)(5, "label");
      \u0275\u0275text(6, "Language:");
      \u0275\u0275elementEnd();
      \u0275\u0275template(7, EditQuestionComponent_button_7_Template, 2, 3, "button", 11);
      \u0275\u0275elementStart(8, "button", 12);
      \u0275\u0275listener("click", function EditQuestionComponent_Template_button_click_8_listener() {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.switchLanguage("new_lang_code_here"));
      });
      \u0275\u0275text(9, "Add Other Lang");
      \u0275\u0275elementEnd()();
      \u0275\u0275element(10, "hr");
      \u0275\u0275elementStart(11, "div")(12, "label");
      \u0275\u0275text(13, "Question:");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(14, "input", 13, 1);
      \u0275\u0275twoWayListener("ngModelChange", function EditQuestionComponent_Template_input_ngModelChange_14_listener($event) {
        \u0275\u0275restoreView(_r1);
        \u0275\u0275twoWayBindingSet(ctx.question.questionText, $event) || (ctx.question.questionText = $event);
        return \u0275\u0275resetView($event);
      });
      \u0275\u0275elementEnd();
      \u0275\u0275template(16, EditQuestionComponent_div_16_Template, 2, 0, "div", 14);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(17, "div", 15)(18, "h4");
      \u0275\u0275text(19);
      \u0275\u0275elementEnd();
      \u0275\u0275template(20, EditQuestionComponent_div_20_Template, 5, 7, "div", 16);
      \u0275\u0275elementStart(21, "button", 17);
      \u0275\u0275listener("click", function EditQuestionComponent_Template_button_click_21_listener() {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.addQuestionImage());
      });
      \u0275\u0275text(22, "+ Add Question Image URL");
      \u0275\u0275elementEnd()();
      \u0275\u0275template(23, EditQuestionComponent_div_23_Template, 14, 13, "div", 18);
      \u0275\u0275elementStart(24, "div")(25, "button", 17);
      \u0275\u0275listener("click", function EditQuestionComponent_Template_button_click_25_listener() {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.addOption());
      });
      \u0275\u0275text(26, " + Add Option ");
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(27, "div")(28, "label", 19);
      \u0275\u0275text(29, "Difficulty:");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(30, "select", 20, 2);
      \u0275\u0275twoWayListener("ngModelChange", function EditQuestionComponent_Template_select_ngModelChange_30_listener($event) {
        \u0275\u0275restoreView(_r1);
        \u0275\u0275twoWayBindingSet(ctx.question.difficulty, $event) || (ctx.question.difficulty = $event);
        return \u0275\u0275resetView($event);
      });
      \u0275\u0275elementStart(32, "option", 21);
      \u0275\u0275text(33, "Select Difficulty");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(34, "option", 22);
      \u0275\u0275text(35, "Easy");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(36, "option", 23);
      \u0275\u0275text(37, "Medium");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(38, "option", 24);
      \u0275\u0275text(39, "Hard");
      \u0275\u0275elementEnd()();
      \u0275\u0275template(40, EditQuestionComponent_div_40_Template, 2, 0, "div", 14);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(41, "div")(42, "label", 25);
      \u0275\u0275text(43, "Type:");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(44, "select", 26, 3);
      \u0275\u0275twoWayListener("ngModelChange", function EditQuestionComponent_Template_select_ngModelChange_44_listener($event) {
        \u0275\u0275restoreView(_r1);
        \u0275\u0275twoWayBindingSet(ctx.question.type, $event) || (ctx.question.type = $event);
        return \u0275\u0275resetView($event);
      });
      \u0275\u0275elementStart(46, "option", 21);
      \u0275\u0275text(47, "Select Type");
      \u0275\u0275elementEnd();
      \u0275\u0275template(48, EditQuestionComponent_option_48_Template, 2, 2, "option", 27);
      \u0275\u0275elementEnd();
      \u0275\u0275template(49, EditQuestionComponent_div_49_Template, 2, 0, "div", 14);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(50, "div")(51, "label", 28);
      \u0275\u0275text(52, "Status:");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(53, "select", 29, 4);
      \u0275\u0275twoWayListener("ngModelChange", function EditQuestionComponent_Template_select_ngModelChange_53_listener($event) {
        \u0275\u0275restoreView(_r1);
        \u0275\u0275twoWayBindingSet(ctx.question.status, $event) || (ctx.question.status = $event);
        return \u0275\u0275resetView($event);
      });
      \u0275\u0275elementStart(55, "option", 21);
      \u0275\u0275text(56, "Select Status");
      \u0275\u0275elementEnd();
      \u0275\u0275template(57, EditQuestionComponent_option_57_Template, 2, 2, "option", 27);
      \u0275\u0275elementEnd();
      \u0275\u0275template(58, EditQuestionComponent_div_58_Template, 2, 0, "div", 14);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(59, "div")(60, "label", 30);
      \u0275\u0275text(61, "Branch:");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(62, "select", 31, 5);
      \u0275\u0275twoWayListener("ngModelChange", function EditQuestionComponent_Template_select_ngModelChange_62_listener($event) {
        \u0275\u0275restoreView(_r1);
        \u0275\u0275twoWayBindingSet(ctx.question.branchId, $event) || (ctx.question.branchId = $event);
        return \u0275\u0275resetView($event);
      });
      \u0275\u0275listener("change", function EditQuestionComponent_Template_select_change_62_listener($event) {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.onBranchChange($event.target.value));
      });
      \u0275\u0275elementStart(64, "option", 21);
      \u0275\u0275text(65, "Select Branch");
      \u0275\u0275elementEnd();
      \u0275\u0275template(66, EditQuestionComponent_option_66_Template, 2, 2, "option", 27);
      \u0275\u0275elementEnd();
      \u0275\u0275template(67, EditQuestionComponent_div_67_Template, 2, 0, "div", 14);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(68, "div")(69, "label", 32);
      \u0275\u0275text(70, "Subject:");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(71, "select", 33, 6);
      \u0275\u0275twoWayListener("ngModelChange", function EditQuestionComponent_Template_select_ngModelChange_71_listener($event) {
        \u0275\u0275restoreView(_r1);
        \u0275\u0275twoWayBindingSet(ctx.question.subjectId, $event) || (ctx.question.subjectId = $event);
        return \u0275\u0275resetView($event);
      });
      \u0275\u0275listener("change", function EditQuestionComponent_Template_select_change_71_listener($event) {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.onSubjectChange($event.target.value));
      });
      \u0275\u0275elementStart(73, "option", 21);
      \u0275\u0275text(74, "Select Subject");
      \u0275\u0275elementEnd();
      \u0275\u0275template(75, EditQuestionComponent_option_75_Template, 2, 2, "option", 27);
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(76, "div")(77, "label", 34);
      \u0275\u0275text(78, "Topic:");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(79, "select", 35, 7);
      \u0275\u0275twoWayListener("ngModelChange", function EditQuestionComponent_Template_select_ngModelChange_79_listener($event) {
        \u0275\u0275restoreView(_r1);
        \u0275\u0275twoWayBindingSet(ctx.question.topicId, $event) || (ctx.question.topicId = $event);
        return \u0275\u0275resetView($event);
      });
      \u0275\u0275listener("change", function EditQuestionComponent_Template_select_change_79_listener($event) {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.onTopicChange($event.target.value));
      });
      \u0275\u0275elementStart(81, "option", 21);
      \u0275\u0275text(82, "Select Topic");
      \u0275\u0275elementEnd();
      \u0275\u0275template(83, EditQuestionComponent_option_83_Template, 2, 2, "option", 27);
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(84, "div")(85, "label", 36);
      \u0275\u0275text(86, "Subtopic:");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(87, "select", 37, 8);
      \u0275\u0275twoWayListener("ngModelChange", function EditQuestionComponent_Template_select_ngModelChange_87_listener($event) {
        \u0275\u0275restoreView(_r1);
        \u0275\u0275twoWayBindingSet(ctx.question.subTopicId, $event) || (ctx.question.subTopicId = $event);
        return \u0275\u0275resetView($event);
      });
      \u0275\u0275listener("change", function EditQuestionComponent_Template_select_change_87_listener($event) {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.onSubtopicChange($event.target.value));
      });
      \u0275\u0275elementStart(89, "option", 21);
      \u0275\u0275text(90, "Select Subtopic");
      \u0275\u0275elementEnd();
      \u0275\u0275template(91, EditQuestionComponent_option_91_Template, 2, 2, "option", 27);
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(92, "div")(93, "label", 38);
      \u0275\u0275text(94, "Tags (comma-separated):");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(95, "input", 39);
      \u0275\u0275twoWayListener("ngModelChange", function EditQuestionComponent_Template_input_ngModelChange_95_listener($event) {
        \u0275\u0275restoreView(_r1);
        \u0275\u0275twoWayBindingSet(ctx.tagsInputString, $event) || (ctx.tagsInputString = $event);
        return \u0275\u0275resetView($event);
      });
      \u0275\u0275listener("ngModelChange", function EditQuestionComponent_Template_input_ngModelChange_95_listener($event) {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.onTagsInputChange($event));
      });
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(96, "div")(97, "label", 40);
      \u0275\u0275text(98, "Recommended Time (seconds):");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(99, "input", 41);
      \u0275\u0275twoWayListener("ngModelChange", function EditQuestionComponent_Template_input_ngModelChange_99_listener($event) {
        \u0275\u0275restoreView(_r1);
        \u0275\u0275twoWayBindingSet(ctx.question.recommendedTimeAllotment, $event) || (ctx.question.recommendedTimeAllotment = $event);
        return \u0275\u0275resetView($event);
      });
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(100, "div")(101, "label", 42);
      \u0275\u0275text(102, "Internal Notes/Author Comments:");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(103, "textarea", 43);
      \u0275\u0275twoWayListener("ngModelChange", function EditQuestionComponent_Template_textarea_ngModelChange_103_listener($event) {
        \u0275\u0275restoreView(_r1);
        \u0275\u0275twoWayBindingSet(ctx.question.internalNotes, $event) || (ctx.question.internalNotes = $event);
        return \u0275\u0275resetView($event);
      });
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(104, "div")(105, "label", 44);
      \u0275\u0275text(106);
      \u0275\u0275elementEnd();
      \u0275\u0275template(107, EditQuestionComponent_div_107_Template, 23, 26, "div", 45);
      \u0275\u0275elementStart(108, "button", 17);
      \u0275\u0275listener("click", function EditQuestionComponent_Template_button_click_108_listener() {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.addExplanation());
      });
      \u0275\u0275text(109, "+ Add Explanation");
      \u0275\u0275elementEnd()();
      \u0275\u0275element(110, "hr");
      \u0275\u0275elementStart(111, "div")(112, "button", 46);
      \u0275\u0275text(113);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(114, "button", 17);
      \u0275\u0275listener("click", function EditQuestionComponent_Template_button_click_114_listener() {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.cancel());
      });
      \u0275\u0275text(115, "Cancel");
      \u0275\u0275elementEnd()()();
    }
    if (rf & 2) {
      const form_r2 = \u0275\u0275reference(3);
      const qt_r27 = \u0275\u0275reference(15);
      const diff_r28 = \u0275\u0275reference(31);
      const typeCtrl_r29 = \u0275\u0275reference(45);
      const statusCtrl_r30 = \u0275\u0275reference(54);
      const branchCtrl_r31 = \u0275\u0275reference(63);
      \u0275\u0275advance(7);
      \u0275\u0275property("ngForOf", ctx.availableLangs);
      \u0275\u0275advance(7);
      \u0275\u0275twoWayProperty("ngModel", ctx.question.questionText);
      \u0275\u0275advance(2);
      \u0275\u0275property("ngIf", qt_r27.invalid && (qt_r27.touched || form_r2.submitted));
      \u0275\u0275advance(3);
      \u0275\u0275textInterpolate1("Question Images (for ", ctx.currentLang.toUpperCase(), ")");
      \u0275\u0275advance();
      \u0275\u0275property("ngForOf", ctx.currentQuestionImages);
      \u0275\u0275advance(3);
      \u0275\u0275property("ngForOf", ctx.question.options);
      \u0275\u0275advance(7);
      \u0275\u0275twoWayProperty("ngModel", ctx.question.difficulty);
      \u0275\u0275advance(10);
      \u0275\u0275property("ngIf", diff_r28.invalid && (diff_r28.touched || form_r2.submitted));
      \u0275\u0275advance(4);
      \u0275\u0275twoWayProperty("ngModel", ctx.question.type);
      \u0275\u0275advance(4);
      \u0275\u0275property("ngForOf", ctx.questionTypes);
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", typeCtrl_r29.invalid && (typeCtrl_r29.touched || form_r2.submitted));
      \u0275\u0275advance(4);
      \u0275\u0275twoWayProperty("ngModel", ctx.question.status);
      \u0275\u0275advance(4);
      \u0275\u0275property("ngForOf", ctx.questionStatuses);
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", statusCtrl_r30.invalid && (statusCtrl_r30.touched || form_r2.submitted));
      \u0275\u0275advance(4);
      \u0275\u0275twoWayProperty("ngModel", ctx.question.branchId);
      \u0275\u0275advance(4);
      \u0275\u0275property("ngForOf", ctx.branches);
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", branchCtrl_r31.invalid && (branchCtrl_r31.touched || form_r2.submitted));
      \u0275\u0275advance(4);
      \u0275\u0275twoWayProperty("ngModel", ctx.question.subjectId);
      \u0275\u0275property("disabled", !ctx.question.branchId || ctx.subjects.length === 0);
      \u0275\u0275advance(4);
      \u0275\u0275property("ngForOf", ctx.subjects);
      \u0275\u0275advance(4);
      \u0275\u0275twoWayProperty("ngModel", ctx.question.topicId);
      \u0275\u0275property("disabled", !ctx.question.subjectId || ctx.topics.length === 0);
      \u0275\u0275advance(4);
      \u0275\u0275property("ngForOf", ctx.topics);
      \u0275\u0275advance(4);
      \u0275\u0275twoWayProperty("ngModel", ctx.question.subTopicId);
      \u0275\u0275property("disabled", !ctx.question.topicId || ctx.subtopics.length === 0);
      \u0275\u0275advance(4);
      \u0275\u0275property("ngForOf", ctx.subtopics);
      \u0275\u0275advance(4);
      \u0275\u0275twoWayProperty("ngModel", ctx.tagsInputString);
      \u0275\u0275advance(4);
      \u0275\u0275twoWayProperty("ngModel", ctx.question.recommendedTimeAllotment);
      \u0275\u0275advance(4);
      \u0275\u0275twoWayProperty("ngModel", ctx.question.internalNotes);
      \u0275\u0275advance(3);
      \u0275\u0275textInterpolate1("Explanations (for ", ctx.currentLang.toUpperCase(), "):");
      \u0275\u0275advance();
      \u0275\u0275property("ngForOf", ctx.currentTranslationExplanations);
      \u0275\u0275advance(5);
      \u0275\u0275property("disabled", ctx.isLoading);
      \u0275\u0275advance();
      \u0275\u0275textInterpolate1(" ", ctx.isLoading ? "Saving..." : "Save Changes", " ");
    }
  }, dependencies: [CommonModule, NgForOf, NgIf, FormsModule, \u0275NgNoValidate, NgSelectOption, \u0275NgSelectMultipleOption, DefaultValueAccessor, NumberValueAccessor, CheckboxControlValueAccessor, SelectControlValueAccessor, NgControlStatus, NgControlStatusGroup, RequiredValidator, NgModel, NgForm], styles: ["\n\n[_nghost-%COMP%] {\n  display: block;\n  padding: 20px;\n  font-family: Arial, sans-serif;\n}\nh2[_ngcontent-%COMP%] {\n  color: #333;\n  margin-bottom: 25px;\n  border-bottom: 2px solid #eee;\n  padding-bottom: 10px;\n}\nform[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n}\n.form-section[_ngcontent-%COMP%] {\n  background-color: #f9f9f9;\n  padding: 15px;\n  border-radius: 8px;\n  border: 1px solid #e0e0e0;\n  margin-bottom: 15px;\n}\n.form-section[_ngcontent-%COMP%]   h4[_ngcontent-%COMP%] {\n  margin-top: 0;\n  margin-bottom: 15px;\n  color: #555;\n}\nlabel[_ngcontent-%COMP%] {\n  display: block;\n  margin-bottom: 8px;\n  font-weight: bold;\n  color: #444;\n}\ninput[type=text][_ngcontent-%COMP%], \ninput[type=number][_ngcontent-%COMP%], \ninput[type=email][_ngcontent-%COMP%], \ninput[type=password][_ngcontent-%COMP%], \nselect[_ngcontent-%COMP%], \ntextarea[_ngcontent-%COMP%] {\n  width: 100%;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  box-sizing: border-box;\n  font-size: 1rem;\n  transition: border-color 0.3s ease;\n}\ninput[type=text][_ngcontent-%COMP%]:focus, \ninput[type=number][_ngcontent-%COMP%]:focus, \ninput[type=email][_ngcontent-%COMP%]:focus, \ninput[type=password][_ngcontent-%COMP%]:focus, \nselect[_ngcontent-%COMP%]:focus, \ntextarea[_ngcontent-%COMP%]:focus {\n  border-color: #007bff;\n  outline: none;\n}\ntextarea[_ngcontent-%COMP%] {\n  min-height: 80px;\n  resize: vertical;\n}\nbutton[_ngcontent-%COMP%], \ninput[type=submit][_ngcontent-%COMP%] {\n  padding: 10px 18px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 1rem;\n  font-weight: 500;\n  transition: background-color 0.3s ease, transform 0.1s ease;\n  text-transform: capitalize;\n}\nbutton[_ngcontent-%COMP%]:hover, \ninput[type=submit][_ngcontent-%COMP%]:hover {\n  opacity: 0.9;\n  transform: translateY(-1px);\n}\nbutton[_ngcontent-%COMP%]:active, \ninput[type=submit][_ngcontent-%COMP%]:active {\n  transform: translateY(0);\n}\nbutton[type=submit][_ngcontent-%COMP%], \nbutton.primary[_ngcontent-%COMP%], \nbutton[type=button][class*=add][_ngcontent-%COMP%], \n.language-switcher[_ngcontent-%COMP%]   button[type=button][_ngcontent-%COMP%] {\n  background-color: #007bff;\n  color: white;\n}\nbutton[type=submit][_ngcontent-%COMP%]:hover, \nbutton.primary[_ngcontent-%COMP%]:hover, \nbutton[type=button][class*=add][_ngcontent-%COMP%]:hover, \n.language-switcher[_ngcontent-%COMP%]   button[type=button][_ngcontent-%COMP%]:hover {\n  background-color: #0056b3;\n}\nbutton[type=submit][_ngcontent-%COMP%]:disabled, \nbutton.primary[_ngcontent-%COMP%]:disabled, \nbutton[type=button][class*=add][_ngcontent-%COMP%]:disabled, \n.language-switcher[_ngcontent-%COMP%]   button[type=button][_ngcontent-%COMP%]:disabled {\n  background-color: #a0cfff;\n  cursor: not-allowed;\n}\nbutton[type=button][_ngcontent-%COMP%]:not([class*=add]):not(.primary):not(.active), \nbutton.secondary[_ngcontent-%COMP%] {\n  background-color: #6c757d;\n  color: white;\n}\nbutton[type=button][_ngcontent-%COMP%]:not([class*=add]):not(.primary):not(.active):hover, \nbutton.secondary[_ngcontent-%COMP%]:hover {\n  background-color: #545b62;\n}\n.remove-option-btn[class*=remove][_ngcontent-%COMP%], \n.remove-option-btn[onclick*=remove][_ngcontent-%COMP%], \n.remove-explanation-btn[class*=remove][_ngcontent-%COMP%], \n.remove-explanation-btn[onclick*=remove][_ngcontent-%COMP%], \nbutton[type=button][title*=Remove][class*=remove][_ngcontent-%COMP%], \nbutton[type=button][title*=Remove][onclick*=remove][_ngcontent-%COMP%], \nbutton[type=button][class*=remove][_ngcontent-%COMP%], \nbutton[type=button][onclick*=remove][_ngcontent-%COMP%] {\n  background-color: #dc3545;\n  color: white;\n}\n.remove-option-btn[class*=remove][_ngcontent-%COMP%]:hover, \n.remove-option-btn[onclick*=remove][_ngcontent-%COMP%]:hover, \n.remove-explanation-btn[class*=remove][_ngcontent-%COMP%]:hover, \n.remove-explanation-btn[onclick*=remove][_ngcontent-%COMP%]:hover, \nbutton[type=button][title*=Remove][class*=remove][_ngcontent-%COMP%]:hover, \nbutton[type=button][title*=Remove][onclick*=remove][_ngcontent-%COMP%]:hover, \nbutton[type=button][class*=remove][_ngcontent-%COMP%]:hover, \nbutton[type=button][onclick*=remove][_ngcontent-%COMP%]:hover {\n  background-color: #c82333;\n}\n.remove-option-btn[_ngcontent-%COMP%], \n.remove-explanation-btn[_ngcontent-%COMP%] {\n  background-color: #dc3545 !important;\n  color: white !important;\n}\n.remove-option-btn[_ngcontent-%COMP%]:hover, \n.remove-explanation-btn[_ngcontent-%COMP%]:hover {\n  background-color: #c82333 !important;\n}\n.language-switcher[_ngcontent-%COMP%] {\n  display: flex;\n  gap: 10px;\n  margin-bottom: 15px;\n  align-items: center;\n}\n.language-switcher[_ngcontent-%COMP%]   label[_ngcontent-%COMP%] {\n  margin-bottom: 0;\n}\n.language-switcher[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\n  background-color: #f0f0f0;\n  color: #333;\n  border: 1px solid #ddd;\n}\n.language-switcher[_ngcontent-%COMP%]   button.active[_ngcontent-%COMP%] {\n  background-color: #007bff;\n  color: white;\n  border-color: #007bff;\n  font-weight: bold;\n}\n.language-switcher[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:hover:not(.active) {\n  background-color: #e0e0e0;\n}\n.option-item[_ngcontent-%COMP%]   .option-content[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n  gap: 15px;\n}\n.option-item[_ngcontent-%COMP%]   input[type=text][_ngcontent-%COMP%] {\n  flex-grow: 1;\n}\n.option-item[_ngcontent-%COMP%]   .checkbox-label[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n  gap: 5px;\n  margin-bottom: 0;\n  font-weight: normal;\n  white-space: nowrap;\n}\n.option-item[_ngcontent-%COMP%]   .option-image-section[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n.option-item[_ngcontent-%COMP%]   .option-image-section[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\n  border: 1px solid #eee;\n  border-radius: 4px;\n}\n.image-item[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  margin-bottom: 10px;\n}\n.image-item[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\n  border: 1px solid #eee;\n  border-radius: 4px;\n}\n.image-item[_ngcontent-%COMP%]   input[type=text][_ngcontent-%COMP%] {\n  flex-grow: 1;\n}\n.explanation-item[_ngcontent-%COMP%]   .explanation-controls[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  margin-bottom: 10px;\n  flex-wrap: wrap;\n}\n.explanation-item[_ngcontent-%COMP%]   .explanation-controls[_ngcontent-%COMP%]   label[_ngcontent-%COMP%] {\n  margin-bottom: 0;\n  white-space: nowrap;\n}\n.explanation-item[_ngcontent-%COMP%]   .explanation-controls[_ngcontent-%COMP%]   input[type=text][_ngcontent-%COMP%], \n.explanation-item[_ngcontent-%COMP%]   .explanation-controls[_ngcontent-%COMP%]   select[_ngcontent-%COMP%] {\n  width: auto;\n  min-width: 150px;\n}\n.error[_ngcontent-%COMP%] {\n  color: #dc3545;\n  font-size: 0.875rem;\n  margin-top: 5px;\n}\nhr[_ngcontent-%COMP%] {\n  border: none;\n  border-top: 1px solid #e0e0e0;\n  margin-top: 20px;\n  margin-bottom: 20px;\n}\nform[_ngcontent-%COMP%]    > div[_ngcontent-%COMP%]:last-child {\n  display: flex;\n  gap: 10px;\n  margin-top: 20px;\n  padding-top: 20px;\n  border-top: 1px solid #eee;\n}\n@media (max-width: 768px) {\n  .option-item[_ngcontent-%COMP%]   .option-content[_ngcontent-%COMP%], \n   .explanation-item[_ngcontent-%COMP%]   .explanation-controls[_ngcontent-%COMP%] {\n    flex-direction: column;\n    align-items: flex-start;\n  }\n  input[type=text][_ngcontent-%COMP%], \n   input[type=number][_ngcontent-%COMP%], \n   select[_ngcontent-%COMP%], \n   textarea[_ngcontent-%COMP%] {\n    font-size: 0.95rem;\n  }\n  button[_ngcontent-%COMP%] {\n    padding: 9px 15px;\n    font-size: 0.95rem;\n  }\n}\n/*# sourceMappingURL=edit-question.component.css.map */"] });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(EditQuestionComponent, [{
    type: Component,
    args: [{ selector: "app-edit-question", standalone: true, imports: [CommonModule, FormsModule], template: `<h2>Edit Question</h2>\r
<form #form="ngForm" (ngSubmit)="save(form)">\r
  <!-- Language Management -->\r
  <div class="language-switcher">\r
    <label>Language:</label>\r
    <button *ngFor="let lang of availableLangs"\r
            type="button"\r
            (click)="switchLanguage(lang)"\r
            [class.active]="lang === currentLang">\r
      {{ lang.toUpperCase() }}\r
    </button>\r
    <!-- Basic way to add a new language if not in availableLangs, can be improved with a dropdown/input -->\r
    <button type="button" (click)="switchLanguage('new_lang_code_here')" title="Add a new language (replace code)">Add Other Lang</button>\r
  </div>\r
  <hr>\r
\r
  <!-- Question Text with validation -->\r
  <div>\r
    <label>Question:</label>\r
    <input\r
      type="text"\r
      name="questionText"\r
      [(ngModel)]="question.questionText"\r
      required\r
      #qt="ngModel"\r
    />\r
    <div *ngIf="qt.invalid && (qt.touched || form.submitted)" class="error">\r
      Question is required.\r
    </div>\r
  </div>\r
\r
  <!-- Question Images (for current language) -->\r
  <div class="form-section">\r
    <h4>Question Images (for {{ currentLang.toUpperCase() }})</h4>\r
    <div *ngFor="let imgUrl of currentQuestionImages; let imgIndex = index" class="image-item">\r
      <img [src]="imgUrl" alt="Question Image {{imgIndex + 1}}" *ngIf="imgUrl" style="max-width: 100px; max-height: 100px; margin-right: 10px;">\r
      <input type="text" [(ngModel)]="currentQuestionImages[imgIndex]" name="questionImage{{currentTranslationIndex}}_{{imgIndex}}" placeholder="Image URL {{imgIndex + 1}}" style="flex-grow: 1; margin-right: 10px;">\r
      <button type="button" (click)="removeQuestionImage(imgIndex)">Remove</button>\r
    </div>\r
    <button type="button" (click)="addQuestionImage()">+ Add Question Image URL</button>\r
  </div>\r
\r
  <!-- Options -->\r
  <div *ngFor="let opt of question.options; let i = index" class="form-section option-item">\r
    <label>Option {{ i + 1 }}:</label>\r
    <div class="option-content">\r
      <input\r
        type="text"\r
        [(ngModel)]="question.options[i].text"\r
        name="option{{i}}"\r
        required\r
        placeholder="Option text"\r
        style="flex-grow: 1; margin-right: 10px;"\r
      />\r
      <label class="checkbox-label">\r
        <input\r
          type="checkbox"\r
          [(ngModel)]="question.options[i].isCorrect"\r
          name="correct{{i}}"\r
        />\r
        Correct\r
      </label>\r
      <!-- Option Image -->\r
      <div class="option-image-section" style="margin-left: 20px;">\r
        <img [src]="opt.img" alt="Option {{i+1}} Image" *ngIf="opt.img" style="max-width: 70px; max-height: 70px; margin-right: 5px;">\r
        <input type="text" [(ngModel)]="question.options[i].img" name="optionImage{{i}}" placeholder="Option Image URL" style="margin-right: 5px;">\r
        <button type="button" (click)="removeOptionImage(i)" *ngIf="opt.img">Clear Img</button>\r
      </div>\r
      <button type="button"\r
              (click)="removeOption(i)"\r
              [disabled]="question.options.length <= 2"\r
              class="remove-option-btn">\r
        Remove Option\r
      </button>\r
    </div>\r
  </div>\r
\r
  <!-- Add new option button -->\r
  <div>\r
    <button type="button" (click)="addOption()">\r
      + Add Option\r
    </button>\r
  </div>\r
\r
  <!-- Difficulty -->\r
  <div>\r
    <label for="difficulty">Difficulty:</label>\r
    <select\r
      id="difficulty"\r
      name="difficulty"\r
      [(ngModel)]="question.difficulty"\r
      required\r
      #diff="ngModel"\r
    >\r
      <option value="">Select Difficulty</option>\r
      <option value="Easy">Easy</option>\r
      <option value="Medium">Medium</option>\r
      <option value="Hard">Hard</option>\r
    </select>\r
    <div *ngIf="diff.invalid && (diff.touched || form.submitted)" class="error">\r
      Difficulty is required.\r
    </div>\r
  </div>\r
\r
  <!-- Type Dropdown -->\r
  <div>\r
    <label for="type">Type:</label>\r
    <select\r
      id="type"\r
      name="type"\r
      [(ngModel)]="question.type"\r
      required\r
      #typeCtrl="ngModel"\r
    >\r
      <option value="">Select Type</option>\r
      <option *ngFor="let qt of questionTypes" [value]="qt">{{ qt }}</option>\r
    </select>\r
    <div *ngIf="typeCtrl.invalid && (typeCtrl.touched || form.submitted)" class="error">\r
      Type is required.\r
    </div>\r
  </div>\r
\r
  <!-- Status Dropdown -->\r
  <div>\r
    <label for="status">Status:</label>\r
    <select\r
      id="status"\r
      name="status"\r
      [(ngModel)]="question.status"\r
      required\r
      #statusCtrl="ngModel"\r
    >\r
      <option value="">Select Status</option>\r
      <option *ngFor="let qs of questionStatuses" [value]="qs">{{ qs }}</option>\r
    </select>\r
    <div *ngIf="statusCtrl.invalid && (statusCtrl.touched || form.submitted)" class="error">\r
      Status is required.\r
    </div>\r
  </div>\r
\r
  <!-- Branch Dropdown -->\r
  <div>\r
    <label for="branch">Branch:</label>\r
    <select\r
      id="branch"\r
      name="branch"\r
      [(ngModel)]="question.branchId" \r
      (change)="onBranchChange($any($event.target).value)" \r
      required\r
      #branchCtrl="ngModel"\r
    >\r
      <option value="">Select Branch</option>\r
      <option *ngFor="let b of branches" [value]="b._id">{{ b.name }}</option>\r
    </select>\r
    <div *ngIf="branchCtrl.invalid && (branchCtrl.touched || form.submitted)" class="error">\r
      Branch is required.\r
    </div>\r
  </div>\r
\r
  <!-- Subject Dropdown -->\r
  <div>\r
    <label for="subject">Subject:</label>\r
    <select\r
      id="subject"\r
      name="subject"\r
      [(ngModel)]="question.subjectId"\r
      (change)="onSubjectChange($any($event.target).value)"\r
      [disabled]="!question.branchId || subjects.length === 0"\r
      #subjectCtrl="ngModel"\r
    >\r
      <option value="">Select Subject</option>\r
      <option *ngFor="let s of subjects" [value]="s._id">{{ s.name }}</option>\r
    </select>\r
    <!-- Subject is not always required, so no error message for missing subject unless specified -->\r
  </div>\r
\r
  <!-- Topic Dropdown -->\r
  <div>\r
    <label for="topic">Topic:</label>\r
    <select\r
      id="topic"\r
      name="topic"\r
      [(ngModel)]="question.topicId"\r
      (change)="onTopicChange($any($event.target).value)"\r
      [disabled]="!question.subjectId || topics.length === 0"\r
      #topicCtrl="ngModel"\r
    >\r
      <option value="">Select Topic</option>\r
      <option *ngFor="let t of topics" [value]="t._id">{{ t.name }}</option>\r
    </select>\r
  </div>\r
\r
  <!-- Subtopic Dropdown -->\r
  <div>\r
    <label for="subTopic">Subtopic:</label>\r
    <select\r
      id="subTopic" \r
      name="subTopic"\r
      [(ngModel)]="question.subTopicId"\r
      (change)="onSubtopicChange($any($event.target).value)" \r
      [disabled]="!question.topicId || subtopics.length === 0"\r
      #subtopicCtrl="ngModel"\r
    >\r
      <option value="">Select Subtopic</option>\r
      <option *ngFor="let st of subtopics" [value]="st._id">{{ st.name }}</option>\r
    </select>\r
  </div>\r
\r
  <!-- Tags (Keywords) -->\r
  <div>\r
    <label for="tags">Tags (comma-separated):</label>\r
    <input\r
      type="text"\r
      id="tags"\r
      name="tags"\r
      [(ngModel)]="tagsInputString"\r
      (ngModelChange)="onTagsInputChange($event)"\r
      placeholder="e.g., algebra, geometry, important"\r
    />\r
  </div>\r
\r
  <!-- Recommended Time Allotment -->\r
  <div>\r
    <label for="recommendedTime">Recommended Time (seconds):</label>\r
    <input\r
      type="number"\r
      id="recommendedTime"\r
      name="recommendedTime"\r
      [(ngModel)]="question.recommendedTimeAllotment"\r
      placeholder="e.g., 300"\r
    />\r
  </div>\r
\r
  <!-- Internal Notes -->\r
  <div>\r
    <label for="internalNotes">Internal Notes/Author Comments:</label>\r
    <textarea\r
      id="internalNotes"\r
      name="internalNotes"\r
      [(ngModel)]="question.internalNotes"\r
      rows="3"\r
      placeholder="Internal notes or comments for this question..."\r
    ></textarea>\r
  </div>\r
\r
  <!-- Explanation (optional) -->\r
  <div>\r
    <label for="explanation">Explanations (for {{ currentLang.toUpperCase() }}):</label>\r
    <div *ngFor="let expl of currentTranslationExplanations; let exIndex = index" class="explanation-item form-section">\r
      <div class="explanation-controls">\r
        <label for="expType_{{currentLang}}_{{exIndex}}">Type:</label>\r
        <select id="expType_{{currentLang}}_{{exIndex}}" \r
                name="expType_{{currentLang}}_{{exIndex}}" \r
                [(ngModel)]="expl.type">\r
          <option value="text">Text</option>\r
          <option value="video">Video</option>\r
          <option value="pdf">PDF</option>\r
          <option value="image">Image</option>\r
        </select>\r
\r
        <label for="expLabel_{{currentLang}}_{{exIndex}}" style="margin-left: 10px;">Label (optional):</label>\r
        <input type="text" \r
               id="expLabel_{{currentLang}}_{{exIndex}}" \r
               name="expLabel_{{currentLang}}_{{exIndex}}" \r
               [(ngModel)]="expl.label" \r
               placeholder="Label">\r
\r
        <button type="button" (click)="removeExplanation(exIndex)" class="remove-explanation-btn" style="margin-left: 10px;">Remove</button>\r
      </div>\r
      \r
      <label for="expContent_{{currentLang}}_{{exIndex}}" style="display: block; margin-top: 5px;">Content:</label>\r
      <textarea *ngIf="expl.type === 'text'" \r
                id="expContent_{{currentLang}}_{{exIndex}}" \r
                name="expContent_{{currentLang}}_{{exIndex}}" \r
                [(ngModel)]="expl.content" \r
                placeholder="Explanation Text"\r
                \r
                rows="3"\r
                style="width: 100%;"></textarea>\r
      <input *ngIf="expl.type !== 'text'" \r
             type="text" \r
             id="expContent_{{currentLang}}_{{exIndex}}" \r
             name="expContent_{{currentLang}}_{{exIndex}}" \r
             [(ngModel)]="expl.content" \r
             [placeholder]="expl.type === 'video' ? 'Video URL' : expl.type === 'pdf' ? 'PDF URL' : 'Image URL'" \r
             \r
             style="width: 100%;">\r
      <!-- Basic validation for content based on type -->\r
      <div *ngIf="form.controls['expContent_'+currentLang+'_'+exIndex]?.invalid && (form.controls['expContent_'+currentLang+'_'+exIndex]?.touched || form.submitted)" class="error">\r
        Content is required for the explanation.\r
      </div>\r
    </div>\r
    <button type="button" (click)="addExplanation()">+ Add Explanation</button>\r
  </div>\r
  <hr>\r
\r
  <!-- Save Button -->\r
  <div>\r
    <button type="submit" [disabled]="isLoading">\r
      {{ isLoading ? 'Saving...' : 'Save Changes' }}\r
    </button>\r
    <button type="button" (click)="cancel()">Cancel</button>\r
  </div>\r
</form>`, styles: ["/* src/app/components/edit-question/edit-question.component.scss */\n:host {\n  display: block;\n  padding: 20px;\n  font-family: Arial, sans-serif;\n}\nh2 {\n  color: #333;\n  margin-bottom: 25px;\n  border-bottom: 2px solid #eee;\n  padding-bottom: 10px;\n}\nform {\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n}\n.form-section {\n  background-color: #f9f9f9;\n  padding: 15px;\n  border-radius: 8px;\n  border: 1px solid #e0e0e0;\n  margin-bottom: 15px;\n}\n.form-section h4 {\n  margin-top: 0;\n  margin-bottom: 15px;\n  color: #555;\n}\nlabel {\n  display: block;\n  margin-bottom: 8px;\n  font-weight: bold;\n  color: #444;\n}\ninput[type=text],\ninput[type=number],\ninput[type=email],\ninput[type=password],\nselect,\ntextarea {\n  width: 100%;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  box-sizing: border-box;\n  font-size: 1rem;\n  transition: border-color 0.3s ease;\n}\ninput[type=text]:focus,\ninput[type=number]:focus,\ninput[type=email]:focus,\ninput[type=password]:focus,\nselect:focus,\ntextarea:focus {\n  border-color: #007bff;\n  outline: none;\n}\ntextarea {\n  min-height: 80px;\n  resize: vertical;\n}\nbutton,\ninput[type=submit] {\n  padding: 10px 18px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 1rem;\n  font-weight: 500;\n  transition: background-color 0.3s ease, transform 0.1s ease;\n  text-transform: capitalize;\n}\nbutton:hover,\ninput[type=submit]:hover {\n  opacity: 0.9;\n  transform: translateY(-1px);\n}\nbutton:active,\ninput[type=submit]:active {\n  transform: translateY(0);\n}\nbutton[type=submit],\nbutton.primary,\nbutton[type=button][class*=add],\n.language-switcher button[type=button] {\n  background-color: #007bff;\n  color: white;\n}\nbutton[type=submit]:hover,\nbutton.primary:hover,\nbutton[type=button][class*=add]:hover,\n.language-switcher button[type=button]:hover {\n  background-color: #0056b3;\n}\nbutton[type=submit]:disabled,\nbutton.primary:disabled,\nbutton[type=button][class*=add]:disabled,\n.language-switcher button[type=button]:disabled {\n  background-color: #a0cfff;\n  cursor: not-allowed;\n}\nbutton[type=button]:not([class*=add]):not(.primary):not(.active),\nbutton.secondary {\n  background-color: #6c757d;\n  color: white;\n}\nbutton[type=button]:not([class*=add]):not(.primary):not(.active):hover,\nbutton.secondary:hover {\n  background-color: #545b62;\n}\n.remove-option-btn[class*=remove],\n.remove-option-btn[onclick*=remove],\n.remove-explanation-btn[class*=remove],\n.remove-explanation-btn[onclick*=remove],\nbutton[type=button][title*=Remove][class*=remove],\nbutton[type=button][title*=Remove][onclick*=remove],\nbutton[type=button][class*=remove],\nbutton[type=button][onclick*=remove] {\n  background-color: #dc3545;\n  color: white;\n}\n.remove-option-btn[class*=remove]:hover,\n.remove-option-btn[onclick*=remove]:hover,\n.remove-explanation-btn[class*=remove]:hover,\n.remove-explanation-btn[onclick*=remove]:hover,\nbutton[type=button][title*=Remove][class*=remove]:hover,\nbutton[type=button][title*=Remove][onclick*=remove]:hover,\nbutton[type=button][class*=remove]:hover,\nbutton[type=button][onclick*=remove]:hover {\n  background-color: #c82333;\n}\n.remove-option-btn,\n.remove-explanation-btn {\n  background-color: #dc3545 !important;\n  color: white !important;\n}\n.remove-option-btn:hover,\n.remove-explanation-btn:hover {\n  background-color: #c82333 !important;\n}\n.language-switcher {\n  display: flex;\n  gap: 10px;\n  margin-bottom: 15px;\n  align-items: center;\n}\n.language-switcher label {\n  margin-bottom: 0;\n}\n.language-switcher button {\n  background-color: #f0f0f0;\n  color: #333;\n  border: 1px solid #ddd;\n}\n.language-switcher button.active {\n  background-color: #007bff;\n  color: white;\n  border-color: #007bff;\n  font-weight: bold;\n}\n.language-switcher button:hover:not(.active) {\n  background-color: #e0e0e0;\n}\n.option-item .option-content {\n  display: flex;\n  align-items: center;\n  gap: 15px;\n}\n.option-item input[type=text] {\n  flex-grow: 1;\n}\n.option-item .checkbox-label {\n  display: flex;\n  align-items: center;\n  gap: 5px;\n  margin-bottom: 0;\n  font-weight: normal;\n  white-space: nowrap;\n}\n.option-item .option-image-section {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n.option-item .option-image-section img {\n  border: 1px solid #eee;\n  border-radius: 4px;\n}\n.image-item {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  margin-bottom: 10px;\n}\n.image-item img {\n  border: 1px solid #eee;\n  border-radius: 4px;\n}\n.image-item input[type=text] {\n  flex-grow: 1;\n}\n.explanation-item .explanation-controls {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  margin-bottom: 10px;\n  flex-wrap: wrap;\n}\n.explanation-item .explanation-controls label {\n  margin-bottom: 0;\n  white-space: nowrap;\n}\n.explanation-item .explanation-controls input[type=text],\n.explanation-item .explanation-controls select {\n  width: auto;\n  min-width: 150px;\n}\n.error {\n  color: #dc3545;\n  font-size: 0.875rem;\n  margin-top: 5px;\n}\nhr {\n  border: none;\n  border-top: 1px solid #e0e0e0;\n  margin-top: 20px;\n  margin-bottom: 20px;\n}\nform > div:last-child {\n  display: flex;\n  gap: 10px;\n  margin-top: 20px;\n  padding-top: 20px;\n  border-top: 1px solid #eee;\n}\n@media (max-width: 768px) {\n  .option-item .option-content,\n  .explanation-item .explanation-controls {\n    flex-direction: column;\n    align-items: flex-start;\n  }\n  input[type=text],\n  input[type=number],\n  select,\n  textarea {\n    font-size: 0.95rem;\n  }\n  button {\n    padding: 9px 15px;\n    font-size: 0.95rem;\n  }\n}\n/*# sourceMappingURL=edit-question.component.css.map */\n"] }]
  }], null, null);
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(EditQuestionComponent, { className: "EditQuestionComponent", filePath: "src/app/components/edit-question/edit-question.component.ts", lineNumber: 79 });
})();

// src/app/components/question-editor/question-editor.component.ts
var QuestionEditorComponent = class _QuestionEditorComponent {
  imageUploadService;
  // Question data
  questionText = "";
  options = [
    { text: "", uploadStatus: "idle" },
    { text: "", uploadStatus: "idle" },
    { text: "", uploadStatus: "idle" },
    { text: "", uploadStatus: "idle" }
  ];
  correctAnswerIndex = 0;
  difficulty = "medium";
  points = 1;
  // Subject Hierarchy
  selectedBranchId = "";
  selectedSubjectId = "";
  selectedTopicId = "";
  // Hierarchy Data
  branches = [];
  subjects = [];
  topics = [];
  filteredSubjects = [];
  filteredTopics = [];
  // Question Image
  questionImageFile = null;
  questionImagePreviewUrl = null;
  questionImageUrl = null;
  // S3 URL after upload
  questionImageUploadStatus = "idle";
  // UI state
  showPreview = false;
  // Mathematical symbols for toolbar
  greekSymbols = [
    { symbol: "\u03B1", latex: "\\alpha", name: "Alpha" },
    { symbol: "\u03B2", latex: "\\beta", name: "Beta" },
    { symbol: "\u03B3", latex: "\\gamma", name: "Gamma" },
    { symbol: "\u03B4", latex: "\\delta", name: "Delta" },
    { symbol: "\u03B5", latex: "\\epsilon", name: "Epsilon" },
    { symbol: "\u03B8", latex: "\\theta", name: "Theta" },
    { symbol: "\u03BB", latex: "\\lambda", name: "Lambda" },
    { symbol: "\u03BC", latex: "\\mu", name: "Mu" },
    { symbol: "\u03C0", latex: "\\pi", name: "Pi" },
    { symbol: "\u03C3", latex: "\\sigma", name: "Sigma" },
    { symbol: "\u03C6", latex: "\\phi", name: "Phi" },
    { symbol: "\u03C9", latex: "\\omega", name: "Omega" }
  ];
  operators = [
    { symbol: "\xB1", latex: "\\pm", name: "Plus-minus" },
    { symbol: "\xD7", latex: "\\times", name: "Times" },
    { symbol: "\xF7", latex: "\\div", name: "Division" },
    { symbol: "\u2260", latex: "\\neq", name: "Not equal" },
    { symbol: "\u2264", latex: "\\leq", name: "Less than or equal" },
    { symbol: "\u2265", latex: "\\geq", name: "Greater than or equal" },
    { symbol: "\u221E", latex: "\\infty", name: "Infinity" },
    { symbol: "\u221A", latex: "\\sqrt{}", name: "Square root" },
    { symbol: "\u2211", latex: "\\sum", name: "Sum" },
    { symbol: "\u222B", latex: "\\int", name: "Integral" }
  ];
  relations = [
    { symbol: "\u2248", latex: "\\approx", name: "Approximately" },
    { symbol: "\u2261", latex: "\\equiv", name: "Equivalent" },
    { symbol: "\u2208", latex: "\\in", name: "Element of" },
    { symbol: "\u2209", latex: "\\notin", name: "Not element of" },
    { symbol: "\u2282", latex: "\\subset", name: "Subset" },
    { symbol: "\u2283", latex: "\\supset", name: "Superset" },
    { symbol: "\u222A", latex: "\\cup", name: "Union" },
    { symbol: "\u2229", latex: "\\cap", name: "Intersection" }
  ];
  commonExpressions = [
    { display: "x\xB2", latex: "x^2", description: "X squared" },
    { display: "x\u2081", latex: "x_1", description: "X subscript 1" },
    { display: "\xBD", latex: "\\frac{1}{2}", description: "One half" },
    { display: "a\u207F", latex: "a^n", description: "A to the power n" },
    { display: "\u221Bx", latex: "\\sqrt[3]{x}", description: "Cube root of x" },
    { display: "log\u2082", latex: "\\log_2", description: "Log base 2" }
  ];
  // Sample data (would come from API in real app)
  // These will be replaced with actual API data
  constructor(imageUploadService) {
    this.imageUploadService = imageUploadService;
  }
  ngOnInit() {
    this.loadHierarchyData();
  }
  loadHierarchyData() {
    this.branches = [
      { _id: "1", name: "Engineering" },
      { _id: "2", name: "Medical" },
      { _id: "3", name: "Arts & Science" }
    ];
    this.subjects = [
      { _id: "1", name: "Mathematics", branchId: "1" },
      { _id: "2", name: "Physics", branchId: "1" },
      { _id: "3", name: "Chemistry", branchId: "1" },
      { _id: "4", name: "Biology", branchId: "2" },
      { _id: "5", name: "Anatomy", branchId: "2" },
      { _id: "6", name: "English", branchId: "3" },
      { _id: "7", name: "History", branchId: "3" }
    ];
    this.topics = [
      { _id: "1", name: "Algebra", subjectId: "1" },
      { _id: "2", name: "Calculus", subjectId: "1" },
      { _id: "3", name: "Geometry", subjectId: "1" },
      { _id: "4", name: "Mechanics", subjectId: "2" },
      { _id: "5", name: "Thermodynamics", subjectId: "2" },
      { _id: "6", name: "Organic Chemistry", subjectId: "3" },
      { _id: "7", name: "Inorganic Chemistry", subjectId: "3" }
    ];
  }
  // Hierarchy Change Methods
  onBranchChange() {
    this.selectedSubjectId = "";
    this.selectedTopicId = "";
    this.filteredSubjects = this.subjects.filter((s) => s.branchId === this.selectedBranchId);
    this.filteredTopics = [];
  }
  onSubjectChange() {
    this.selectedTopicId = "";
    this.filteredTopics = this.topics.filter((t) => t.subjectId === this.selectedSubjectId);
  }
  onTopicChange() {
  }
  isHierarchyComplete() {
    return !!(this.selectedBranchId && this.selectedSubjectId && this.selectedTopicId);
  }
  // Image Upload Methods
  onQuestionImageSelected(event) {
    const element2 = event.currentTarget;
    const fileList = element2.files;
    if (fileList && fileList[0]) {
      const file = fileList[0];
      const validation = this.imageUploadService.validateImageFile(file);
      if (!validation.isValid) {
        alert(validation.error);
        return;
      }
      this.questionImageFile = file;
      this.imageUploadService.generatePreviewUrl(file).then((previewUrl) => {
        this.questionImagePreviewUrl = previewUrl;
      }).catch((error) => {
        console.error("Failed to generate preview:", error);
      });
      this.uploadQuestionImage();
    }
  }
  onOptionImageSelected(event, optionIndex) {
    const element2 = event.currentTarget;
    const fileList = element2.files;
    if (fileList && fileList[0]) {
      const file = fileList[0];
      const validation = this.imageUploadService.validateImageFile(file);
      if (!validation.isValid) {
        alert(validation.error);
        return;
      }
      this.options[optionIndex].imageFile = file;
      this.imageUploadService.generatePreviewUrl(file).then((previewUrl) => {
        this.options[optionIndex].imagePreviewUrl = previewUrl;
      }).catch((error) => {
        console.error("Failed to generate preview:", error);
      });
      this.uploadOptionImage(optionIndex);
    }
  }
  uploadQuestionImage() {
    if (!this.questionImageFile || !this.isHierarchyComplete())
      return;
    this.questionImageUploadStatus = "uploading";
    const uploadRequest = {
      file: this.questionImageFile,
      branchId: this.selectedBranchId,
      subjectId: this.selectedSubjectId,
      topicId: this.selectedTopicId,
      imageFor: "body"
    };
    this.imageUploadService.uploadQuestionImage(uploadRequest).subscribe({
      next: (response) => {
        this.questionImageUploadStatus = "success";
        this.questionImageUrl = response.imageUrl;
        console.log("Question image uploaded successfully:", response.imageUrl);
      },
      error: (error) => {
        this.questionImageUploadStatus = "error";
        console.error("Question image upload failed:", error);
      }
    });
  }
  uploadOptionImage(optionIndex) {
    const option = this.options[optionIndex];
    if (!option.imageFile || !this.isHierarchyComplete())
      return;
    option.uploadStatus = "uploading";
    const uploadRequest = {
      file: option.imageFile,
      branchId: this.selectedBranchId,
      subjectId: this.selectedSubjectId,
      topicId: this.selectedTopicId,
      imageFor: "option",
      optionIndex
    };
    this.imageUploadService.uploadQuestionImage(uploadRequest).subscribe({
      next: (response) => {
        option.uploadStatus = "success";
        option.imageUrl = response.imageUrl;
        console.log(`Option ${optionIndex} image uploaded successfully:`, response.imageUrl);
      },
      error: (error) => {
        option.uploadStatus = "error";
        console.error(`Option ${optionIndex} image upload failed:`, error);
      }
    });
  }
  retryQuestionImageUpload() {
    this.uploadQuestionImage();
  }
  retryOptionImageUpload(optionIndex) {
    this.uploadOptionImage(optionIndex);
  }
  removeQuestionImage() {
    this.questionImageFile = null;
    this.questionImagePreviewUrl = null;
    this.questionImageUrl = null;
    this.questionImageUploadStatus = "idle";
  }
  removeOptionImage(optionIndex) {
    const option = this.options[optionIndex];
    option.imageFile = null;
    option.imagePreviewUrl = null;
    option.imageUrl = null;
    option.uploadStatus = "idle";
  }
  togglePreview() {
    this.showPreview = !this.showPreview;
  }
  insertSymbol(latex) {
    this.questionText += ` \\(${latex}\\) `;
  }
  applyFormatting(type) {
    const formats = {
      bold: "**text**",
      italic: "*text*",
      bullet: "- item"
    };
    this.questionText += ` ${formats[type]} `;
  }
  addOption() {
    if (this.options.length < 6) {
      this.options.push({
        text: "",
        uploadStatus: "idle"
      });
    }
  }
  removeOption(index) {
    if (this.options.length > 2) {
      this.options.splice(index, 1);
      if (this.correctAnswerIndex >= this.options.length) {
        this.correctAnswerIndex = this.options.length - 1;
      }
    }
  }
  saveQuestion() {
    const questionData = {
      text: this.questionText,
      imageUrl: this.questionImageUrl,
      options: this.options.map((opt) => ({
        text: opt.text,
        imageUrl: opt.imageUrl
      })),
      correctAnswer: this.correctAnswerIndex,
      difficulty: this.difficulty,
      branchId: this.selectedBranchId,
      subjectId: this.selectedSubjectId,
      topicId: this.selectedTopicId,
      points: this.points
    };
    console.log("Saving question:", questionData);
  }
  isValid() {
    return this.questionText.trim() !== "" && this.options.every((opt) => opt.text.trim() !== "") && this.isHierarchyComplete();
  }
  // Helper to convert index to letter
  String = String;
  static \u0275fac = function QuestionEditorComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _QuestionEditorComponent)(\u0275\u0275directiveInject(ImageUploadService));
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _QuestionEditorComponent, selectors: [["app-question-editor"]], decls: 2, vars: 0, template: function QuestionEditorComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "p");
      \u0275\u0275text(1, "question-editor works!");
      \u0275\u0275elementEnd();
    }
  }, dependencies: [CommonModule, FormsModule], styles: ['\n\n.question-editor-container[_ngcontent-%COMP%] {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 2rem;\n  background: #ffffff;\n  border-radius: 12px;\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n}\n.editor-header[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 2rem;\n  padding-bottom: 1rem;\n  border-bottom: 2px solid #e5e7eb;\n}\n.editor-title[_ngcontent-%COMP%] {\n  font-size: 1.75rem;\n  font-weight: 700;\n  color: #1f2937;\n  margin: 0;\n}\n.editor-actions[_ngcontent-%COMP%] {\n  display: flex;\n  gap: 0.75rem;\n}\n.btn[_ngcontent-%COMP%] {\n  display: inline-flex;\n  align-items: center;\n  gap: 0.5rem;\n  padding: 0.75rem 1.5rem;\n  border: none;\n  border-radius: 8px;\n  font-weight: 600;\n  font-size: 0.875rem;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  text-decoration: none;\n}\n.btn[_ngcontent-%COMP%]:disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n}\n.btn.btn-primary[_ngcontent-%COMP%] {\n  background: #3b82f6;\n  color: white;\n}\n.btn.btn-primary[_ngcontent-%COMP%]:hover:not(:disabled) {\n  background: #2563eb;\n}\n.btn.btn-outline[_ngcontent-%COMP%] {\n  background: transparent;\n  color: #374151;\n  border: 2px solid #d1d5db;\n}\n.btn.btn-outline[_ngcontent-%COMP%]:hover:not(:disabled) {\n  background: #f9fafb;\n  border-color: #9ca3af;\n}\n.btn.btn-danger[_ngcontent-%COMP%] {\n  background: #ef4444;\n  color: white;\n}\n.btn.btn-danger[_ngcontent-%COMP%]:hover:not(:disabled) {\n  background: #dc2626;\n}\n.btn-icon[_ngcontent-%COMP%] {\n  padding: 0.5rem;\n  border-radius: 6px;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n}\n.editor-content[_ngcontent-%COMP%] {\n  min-height: 600px;\n}\n.editor-section[_ngcontent-%COMP%] {\n  margin-bottom: 2rem;\n}\n.editor-section[_ngcontent-%COMP%]:last-child {\n  margin-bottom: 0;\n}\n.section-label[_ngcontent-%COMP%] {\n  display: block;\n  font-size: 1.125rem;\n  font-weight: 600;\n  color: #1f2937;\n  margin-bottom: 1rem;\n}\n.textarea-container[_ngcontent-%COMP%] {\n  position: relative;\n  margin-bottom: 1rem;\n}\n.question-textarea[_ngcontent-%COMP%], \n.option-textarea[_ngcontent-%COMP%] {\n  width: 100%;\n  border: 2px solid #d1d5db;\n  border-radius: 8px;\n  padding: 0.75rem;\n  font-size: 0.875rem;\n  line-height: 1.5;\n  resize: vertical;\n  font-family:\n    -apple-system,\n    BlinkMacSystemFont,\n    "Segoe UI",\n    Roboto,\n    sans-serif;\n}\n.question-textarea[_ngcontent-%COMP%]:focus, \n.option-textarea[_ngcontent-%COMP%]:focus {\n  outline: none;\n  border-color: #3b82f6;\n  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);\n}\n.question-textarea[_ngcontent-%COMP%]::placeholder, \n.option-textarea[_ngcontent-%COMP%]::placeholder {\n  color: #9ca3af;\n}\n.math-toolbar[_ngcontent-%COMP%] {\n  background: #f8fafc;\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  padding: 1rem;\n  margin-bottom: 1rem;\n}\n.toolbar-section[_ngcontent-%COMP%] {\n  margin-bottom: 1rem;\n}\n.toolbar-section[_ngcontent-%COMP%]:last-child {\n  margin-bottom: 0;\n}\n.toolbar-title[_ngcontent-%COMP%] {\n  font-size: 0.875rem;\n  font-weight: 600;\n  color: #374151;\n  margin: 0 0 0.5rem 0;\n}\n.symbol-grid[_ngcontent-%COMP%] {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 0.5rem;\n}\n.symbol-btn[_ngcontent-%COMP%] {\n  min-width: 2.5rem;\n  height: 2.5rem;\n  border: 1px solid #d1d5db;\n  background: white;\n  border-radius: 6px;\n  cursor: pointer;\n  font-size: 1rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: all 0.2s ease;\n}\n.symbol-btn[_ngcontent-%COMP%]:hover {\n  background: #f3f4f6;\n  border-color: #9ca3af;\n}\n.symbol-btn[_ngcontent-%COMP%]:active {\n  background: #e5e7eb;\n}\n.expression-grid[_ngcontent-%COMP%] {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));\n  gap: 0.5rem;\n}\n.expression-btn[_ngcontent-%COMP%] {\n  padding: 0.5rem;\n  border: 1px solid #d1d5db;\n  background: white;\n  border-radius: 6px;\n  cursor: pointer;\n  font-size: 0.875rem;\n  text-align: center;\n  transition: all 0.2s ease;\n}\n.expression-btn[_ngcontent-%COMP%]:hover {\n  background: #f3f4f6;\n  border-color: #9ca3af;\n}\n.formatting-toolbar[_ngcontent-%COMP%] {\n  background: #f1f5f9;\n  border: 1px solid #cbd5e1;\n  border-radius: 8px;\n  padding: 1rem;\n}\n.formatting-buttons[_ngcontent-%COMP%] {\n  display: flex;\n  gap: 0.5rem;\n}\n.format-btn[_ngcontent-%COMP%] {\n  width: 2.5rem;\n  height: 2.5rem;\n  border: 1px solid #d1d5db;\n  background: white;\n  border-radius: 6px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: all 0.2s ease;\n}\n.format-btn[_ngcontent-%COMP%]:hover {\n  background: #f3f4f6;\n  border-color: #9ca3af;\n}\n.options-container[_ngcontent-%COMP%] {\n  background: #fafafa;\n  border: 1px solid #e5e7eb;\n  border-radius: 8px;\n  padding: 1rem;\n}\n.option-editor[_ngcontent-%COMP%] {\n  background: white;\n  border: 1px solid #d1d5db;\n  border-radius: 8px;\n  padding: 1rem;\n  margin-bottom: 1rem;\n}\n.option-editor[_ngcontent-%COMP%]:last-of-type {\n  margin-bottom: 0;\n}\n.option-header[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 0.75rem;\n}\n.option-label[_ngcontent-%COMP%] {\n  font-weight: 600;\n  color: #374151;\n}\n.option-controls[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n}\n.checkbox-label[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  font-size: 0.875rem;\n  color: #374151;\n  cursor: pointer;\n}\n.checkmark[_ngcontent-%COMP%] {\n  font-size: 0.75rem;\n}\n.add-option-btn[_ngcontent-%COMP%] {\n  margin-top: 1rem;\n  width: 100%;\n  justify-content: center;\n}\n.metadata-grid[_ngcontent-%COMP%] {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  gap: 1rem;\n}\n.field-group[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: column;\n}\n.field-label[_ngcontent-%COMP%] {\n  font-size: 0.875rem;\n  font-weight: 500;\n  color: #374151;\n  margin-bottom: 0.5rem;\n}\n.form-select[_ngcontent-%COMP%], \n.form-input[_ngcontent-%COMP%] {\n  padding: 0.75rem;\n  border: 2px solid #d1d5db;\n  border-radius: 6px;\n  font-size: 0.875rem;\n}\n.form-select[_ngcontent-%COMP%]:focus, \n.form-input[_ngcontent-%COMP%]:focus {\n  outline: none;\n  border-color: #3b82f6;\n  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);\n}\n.preview-container[_ngcontent-%COMP%] {\n  background: #f8fafc;\n  border: 1px solid #e2e8f0;\n  border-radius: 12px;\n  padding: 2rem;\n}\n.preview-title[_ngcontent-%COMP%] {\n  font-size: 1.25rem;\n  font-weight: 600;\n  color: #1f2937;\n  margin: 0 0 1.5rem 0;\n  text-align: center;\n}\n.preview-question[_ngcontent-%COMP%] {\n  background: white;\n  border-radius: 8px;\n  padding: 1.5rem;\n  box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);\n}\n.question-content[_ngcontent-%COMP%] {\n  margin-bottom: 1.5rem;\n  padding-bottom: 1rem;\n  border-bottom: 1px solid #e5e7eb;\n}\n.question-text[_ngcontent-%COMP%] {\n  font-size: 1rem;\n  line-height: 1.6;\n  color: #1f2937;\n}\n.preview-options[_ngcontent-%COMP%] {\n  margin-bottom: 1.5rem;\n}\n.preview-option[_ngcontent-%COMP%] {\n  display: flex;\n  gap: 1rem;\n  padding: 0.75rem;\n  margin-bottom: 0.5rem;\n  border: 1px solid #e5e7eb;\n  border-radius: 6px;\n  transition: all 0.2s ease;\n}\n.preview-option.correct-option[_ngcontent-%COMP%] {\n  background: #f0fdf4;\n  border-color: #22c55e;\n}\n.preview-option[_ngcontent-%COMP%]:last-child {\n  margin-bottom: 0;\n}\n.option-indicator[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  min-width: 2rem;\n}\n.option-letter[_ngcontent-%COMP%] {\n  width: 1.5rem;\n  height: 1.5rem;\n  background: #f3f4f6;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: 600;\n  font-size: 0.875rem;\n  color: #374151;\n}\n.correct-option[_ngcontent-%COMP%]   .option-letter[_ngcontent-%COMP%] {\n  background: #22c55e;\n  color: white;\n}\n.correct-badge[_ngcontent-%COMP%] {\n  font-size: 0.75rem;\n  color: #16a34a;\n  font-weight: 600;\n  margin-top: 0.25rem;\n}\n.option-content[_ngcontent-%COMP%] {\n  flex: 1;\n  display: flex;\n  align-items: center;\n}\n.preview-metadata[_ngcontent-%COMP%] {\n  display: flex;\n  gap: 2rem;\n  padding-top: 1rem;\n  border-top: 1px solid #e5e7eb;\n}\n.metadata-item[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n}\n.metadata-label[_ngcontent-%COMP%] {\n  font-weight: 600;\n  color: #6b7280;\n  font-size: 0.875rem;\n}\n.metadata-value[_ngcontent-%COMP%] {\n  font-weight: 500;\n  color: #1f2937;\n  font-size: 0.875rem;\n  text-transform: capitalize;\n}\n.hierarchy-section[_ngcontent-%COMP%] {\n  background: #f8fafc;\n  border: 2px solid #e2e8f0;\n  border-radius: 12px;\n  margin-bottom: 1.5rem;\n}\n.hierarchy-section[_ngcontent-%COMP%]   .section-label[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  color: #1e40af;\n  font-weight: 600;\n}\n.hierarchy-section[_ngcontent-%COMP%]   .section-label[_ngcontent-%COMP%]   .material-icons-outlined[_ngcontent-%COMP%] {\n  font-size: 1.25rem;\n}\n.hierarchy-grid[_ngcontent-%COMP%] {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: 1rem;\n  margin-top: 1rem;\n}\n.hierarchy-complete[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  margin-top: 1rem;\n  padding: 0.75rem;\n  background: #f0fdf4;\n  border-radius: 8px;\n  border: 1px solid #bbf7d0;\n}\n.field-hint[_ngcontent-%COMP%] {\n  font-size: 0.75rem;\n  color: #6b7280;\n  margin-top: 0.25rem;\n}\n.image-upload-container[_ngcontent-%COMP%] {\n  margin-top: 1rem;\n}\n.upload-area[_ngcontent-%COMP%] {\n  border: 2px dashed #d1d5db;\n  border-radius: 8px;\n  padding: 1.5rem;\n  text-align: center;\n  transition: all 0.2s ease;\n  background: #f9fafb;\n}\n.upload-area[_ngcontent-%COMP%]:hover:not(.disabled) {\n  border-color: #3b82f6;\n  background: #eff6ff;\n}\n.upload-area.disabled[_ngcontent-%COMP%] {\n  opacity: 0.5;\n  background: #f3f4f6;\n  cursor: not-allowed;\n}\n.upload-area.small[_ngcontent-%COMP%] {\n  padding: 1rem;\n  font-size: 0.875rem;\n}\n.file-input[_ngcontent-%COMP%] {\n  display: none;\n}\n.file-label[_ngcontent-%COMP%] {\n  display: inline-flex;\n  align-items: center;\n  gap: 0.5rem;\n  padding: 0.75rem 1.5rem;\n  background: #3b82f6;\n  color: white;\n  border-radius: 8px;\n  cursor: pointer;\n  font-weight: 500;\n  transition: background-color 0.2s ease;\n}\n.file-label[_ngcontent-%COMP%]:hover:not(.disabled) {\n  background: #2563eb;\n}\n.file-label.disabled[_ngcontent-%COMP%] {\n  background: #9ca3af;\n  cursor: not-allowed;\n}\n.file-label.small[_ngcontent-%COMP%] {\n  padding: 0.5rem 1rem;\n  font-size: 0.875rem;\n}\n.file-label[_ngcontent-%COMP%]   .material-icons-outlined[_ngcontent-%COMP%] {\n  font-size: 1.25rem;\n}\n.upload-disabled-message[_ngcontent-%COMP%] {\n  margin-top: 0.5rem;\n  font-size: 0.875rem;\n  color: #6b7280;\n}\n.upload-status[_ngcontent-%COMP%] {\n  margin-top: 1rem;\n  padding: 0.75rem;\n  border-radius: 8px;\n}\n.upload-status.small[_ngcontent-%COMP%] {\n  margin-top: 0.5rem;\n  padding: 0.5rem;\n  font-size: 0.875rem;\n}\n.status-uploading[_ngcontent-%COMP%] {\n  background: #fef3c7;\n  color: #92400e;\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n}\n.status-uploading[_ngcontent-%COMP%]   .spinning[_ngcontent-%COMP%] {\n  animation: _ngcontent-%COMP%_spin 1s linear infinite;\n}\n.status-success[_ngcontent-%COMP%] {\n  background: #d1fae5;\n  color: #065f46;\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n}\n.status-error[_ngcontent-%COMP%] {\n  background: #fee2e2;\n  color: #991b1b;\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n}\n.retry-btn[_ngcontent-%COMP%] {\n  background: none;\n  border: none;\n  color: #dc2626;\n  text-decoration: underline;\n  cursor: pointer;\n  font-size: inherit;\n  margin-left: 0.5rem;\n}\n.retry-btn[_ngcontent-%COMP%]:hover {\n  color: #b91c1c;\n}\n.image-preview[_ngcontent-%COMP%] {\n  margin-top: 1rem;\n  position: relative;\n  display: inline-block;\n}\n.image-preview.small[_ngcontent-%COMP%] {\n  margin-top: 0.5rem;\n}\n.preview-image[_ngcontent-%COMP%] {\n  max-width: 200px;\n  max-height: 150px;\n  border-radius: 8px;\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);\n}\n.small[_ngcontent-%COMP%]   .preview-image[_ngcontent-%COMP%] {\n  max-width: 100px;\n  max-height: 75px;\n}\n.remove-image-btn[_ngcontent-%COMP%] {\n  position: absolute;\n  top: -8px;\n  right: -8px;\n  background: #dc2626;\n  color: white;\n  border: none;\n  border-radius: 50%;\n  width: 24px;\n  height: 24px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  font-size: 0.75rem;\n  transition: background-color 0.2s ease;\n}\n.remove-image-btn[_ngcontent-%COMP%]:hover {\n  background: #b91c1c;\n}\n.remove-image-btn[_ngcontent-%COMP%]   .material-icons-outlined[_ngcontent-%COMP%] {\n  font-size: 16px;\n}\n.option-image-upload[_ngcontent-%COMP%] {\n  margin-top: 0.75rem;\n  padding-top: 0.75rem;\n  border-top: 1px solid #e5e7eb;\n}\n@keyframes _ngcontent-%COMP%_spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n.text-green-600[_ngcontent-%COMP%] {\n  color: #16a34a;\n}\n@media (max-width: 768px) {\n  .question-editor-container[_ngcontent-%COMP%] {\n    padding: 1rem;\n  }\n  .editor-header[_ngcontent-%COMP%] {\n    flex-direction: column;\n    gap: 1rem;\n    align-items: stretch;\n  }\n  .editor-actions[_ngcontent-%COMP%] {\n    justify-content: stretch;\n  }\n  .btn[_ngcontent-%COMP%] {\n    flex: 1;\n    justify-content: center;\n  }\n  .metadata-grid[_ngcontent-%COMP%] {\n    grid-template-columns: 1fr;\n  }\n  .symbol-grid[_ngcontent-%COMP%] {\n    justify-content: center;\n  }\n  .preview-metadata[_ngcontent-%COMP%] {\n    flex-direction: column;\n    gap: 0.5rem;\n  }\n  .preview-option[_ngcontent-%COMP%] {\n    flex-direction: column;\n    gap: 0.5rem;\n  }\n  .option-indicator[_ngcontent-%COMP%] {\n    flex-direction: row;\n    align-items: center;\n    min-width: auto;\n  }\n}\n@media (prefers-color-scheme: dark) {\n  .question-editor-container[_ngcontent-%COMP%] {\n    background: #1f2937;\n    color: #f9fafb;\n  }\n  .editor-title[_ngcontent-%COMP%] {\n    color: #f9fafb;\n  }\n  .section-label[_ngcontent-%COMP%] {\n    color: #f3f4f6;\n  }\n  .question-textarea[_ngcontent-%COMP%], \n   .option-textarea[_ngcontent-%COMP%], \n   .form-select[_ngcontent-%COMP%], \n   .form-input[_ngcontent-%COMP%] {\n    background: #374151;\n    border-color: #4b5563;\n    color: #f9fafb;\n  }\n  .question-textarea[_ngcontent-%COMP%]::placeholder, \n   .option-textarea[_ngcontent-%COMP%]::placeholder, \n   .form-select[_ngcontent-%COMP%]::placeholder, \n   .form-input[_ngcontent-%COMP%]::placeholder {\n    color: #9ca3af;\n  }\n  .question-textarea[_ngcontent-%COMP%]:focus, \n   .option-textarea[_ngcontent-%COMP%]:focus, \n   .form-select[_ngcontent-%COMP%]:focus, \n   .form-input[_ngcontent-%COMP%]:focus {\n    border-color: #60a5fa;\n  }\n  .math-toolbar[_ngcontent-%COMP%], \n   .formatting-toolbar[_ngcontent-%COMP%] {\n    background: #374151;\n    border-color: #4b5563;\n  }\n  .symbol-btn[_ngcontent-%COMP%], \n   .expression-btn[_ngcontent-%COMP%], \n   .format-btn[_ngcontent-%COMP%] {\n    background: #4b5563;\n    border-color: #6b7280;\n    color: #f9fafb;\n  }\n  .symbol-btn[_ngcontent-%COMP%]:hover, \n   .expression-btn[_ngcontent-%COMP%]:hover, \n   .format-btn[_ngcontent-%COMP%]:hover {\n    background: #6b7280;\n  }\n  .preview-container[_ngcontent-%COMP%] {\n    background: #374151;\n    border-color: #4b5563;\n  }\n  .preview-question[_ngcontent-%COMP%] {\n    background: #4b5563;\n  }\n}\n/*# sourceMappingURL=question-editor.component.css.map */'] });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(QuestionEditorComponent, [{
    type: Component,
    args: [{ selector: "app-question-editor", standalone: true, imports: [CommonModule, FormsModule], template: "<p>question-editor works!</p>\r\n", styles: ['/* src/app/components/question-editor/question-editor.component.scss */\n.question-editor-container {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 2rem;\n  background: #ffffff;\n  border-radius: 12px;\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n}\n.editor-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 2rem;\n  padding-bottom: 1rem;\n  border-bottom: 2px solid #e5e7eb;\n}\n.editor-title {\n  font-size: 1.75rem;\n  font-weight: 700;\n  color: #1f2937;\n  margin: 0;\n}\n.editor-actions {\n  display: flex;\n  gap: 0.75rem;\n}\n.btn {\n  display: inline-flex;\n  align-items: center;\n  gap: 0.5rem;\n  padding: 0.75rem 1.5rem;\n  border: none;\n  border-radius: 8px;\n  font-weight: 600;\n  font-size: 0.875rem;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  text-decoration: none;\n}\n.btn:disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n}\n.btn.btn-primary {\n  background: #3b82f6;\n  color: white;\n}\n.btn.btn-primary:hover:not(:disabled) {\n  background: #2563eb;\n}\n.btn.btn-outline {\n  background: transparent;\n  color: #374151;\n  border: 2px solid #d1d5db;\n}\n.btn.btn-outline:hover:not(:disabled) {\n  background: #f9fafb;\n  border-color: #9ca3af;\n}\n.btn.btn-danger {\n  background: #ef4444;\n  color: white;\n}\n.btn.btn-danger:hover:not(:disabled) {\n  background: #dc2626;\n}\n.btn-icon {\n  padding: 0.5rem;\n  border-radius: 6px;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n}\n.editor-content {\n  min-height: 600px;\n}\n.editor-section {\n  margin-bottom: 2rem;\n}\n.editor-section:last-child {\n  margin-bottom: 0;\n}\n.section-label {\n  display: block;\n  font-size: 1.125rem;\n  font-weight: 600;\n  color: #1f2937;\n  margin-bottom: 1rem;\n}\n.textarea-container {\n  position: relative;\n  margin-bottom: 1rem;\n}\n.question-textarea,\n.option-textarea {\n  width: 100%;\n  border: 2px solid #d1d5db;\n  border-radius: 8px;\n  padding: 0.75rem;\n  font-size: 0.875rem;\n  line-height: 1.5;\n  resize: vertical;\n  font-family:\n    -apple-system,\n    BlinkMacSystemFont,\n    "Segoe UI",\n    Roboto,\n    sans-serif;\n}\n.question-textarea:focus,\n.option-textarea:focus {\n  outline: none;\n  border-color: #3b82f6;\n  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);\n}\n.question-textarea::placeholder,\n.option-textarea::placeholder {\n  color: #9ca3af;\n}\n.math-toolbar {\n  background: #f8fafc;\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  padding: 1rem;\n  margin-bottom: 1rem;\n}\n.toolbar-section {\n  margin-bottom: 1rem;\n}\n.toolbar-section:last-child {\n  margin-bottom: 0;\n}\n.toolbar-title {\n  font-size: 0.875rem;\n  font-weight: 600;\n  color: #374151;\n  margin: 0 0 0.5rem 0;\n}\n.symbol-grid {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 0.5rem;\n}\n.symbol-btn {\n  min-width: 2.5rem;\n  height: 2.5rem;\n  border: 1px solid #d1d5db;\n  background: white;\n  border-radius: 6px;\n  cursor: pointer;\n  font-size: 1rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: all 0.2s ease;\n}\n.symbol-btn:hover {\n  background: #f3f4f6;\n  border-color: #9ca3af;\n}\n.symbol-btn:active {\n  background: #e5e7eb;\n}\n.expression-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));\n  gap: 0.5rem;\n}\n.expression-btn {\n  padding: 0.5rem;\n  border: 1px solid #d1d5db;\n  background: white;\n  border-radius: 6px;\n  cursor: pointer;\n  font-size: 0.875rem;\n  text-align: center;\n  transition: all 0.2s ease;\n}\n.expression-btn:hover {\n  background: #f3f4f6;\n  border-color: #9ca3af;\n}\n.formatting-toolbar {\n  background: #f1f5f9;\n  border: 1px solid #cbd5e1;\n  border-radius: 8px;\n  padding: 1rem;\n}\n.formatting-buttons {\n  display: flex;\n  gap: 0.5rem;\n}\n.format-btn {\n  width: 2.5rem;\n  height: 2.5rem;\n  border: 1px solid #d1d5db;\n  background: white;\n  border-radius: 6px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: all 0.2s ease;\n}\n.format-btn:hover {\n  background: #f3f4f6;\n  border-color: #9ca3af;\n}\n.options-container {\n  background: #fafafa;\n  border: 1px solid #e5e7eb;\n  border-radius: 8px;\n  padding: 1rem;\n}\n.option-editor {\n  background: white;\n  border: 1px solid #d1d5db;\n  border-radius: 8px;\n  padding: 1rem;\n  margin-bottom: 1rem;\n}\n.option-editor:last-of-type {\n  margin-bottom: 0;\n}\n.option-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 0.75rem;\n}\n.option-label {\n  font-weight: 600;\n  color: #374151;\n}\n.option-controls {\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n}\n.checkbox-label {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  font-size: 0.875rem;\n  color: #374151;\n  cursor: pointer;\n}\n.checkmark {\n  font-size: 0.75rem;\n}\n.add-option-btn {\n  margin-top: 1rem;\n  width: 100%;\n  justify-content: center;\n}\n.metadata-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  gap: 1rem;\n}\n.field-group {\n  display: flex;\n  flex-direction: column;\n}\n.field-label {\n  font-size: 0.875rem;\n  font-weight: 500;\n  color: #374151;\n  margin-bottom: 0.5rem;\n}\n.form-select,\n.form-input {\n  padding: 0.75rem;\n  border: 2px solid #d1d5db;\n  border-radius: 6px;\n  font-size: 0.875rem;\n}\n.form-select:focus,\n.form-input:focus {\n  outline: none;\n  border-color: #3b82f6;\n  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);\n}\n.preview-container {\n  background: #f8fafc;\n  border: 1px solid #e2e8f0;\n  border-radius: 12px;\n  padding: 2rem;\n}\n.preview-title {\n  font-size: 1.25rem;\n  font-weight: 600;\n  color: #1f2937;\n  margin: 0 0 1.5rem 0;\n  text-align: center;\n}\n.preview-question {\n  background: white;\n  border-radius: 8px;\n  padding: 1.5rem;\n  box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);\n}\n.question-content {\n  margin-bottom: 1.5rem;\n  padding-bottom: 1rem;\n  border-bottom: 1px solid #e5e7eb;\n}\n.question-text {\n  font-size: 1rem;\n  line-height: 1.6;\n  color: #1f2937;\n}\n.preview-options {\n  margin-bottom: 1.5rem;\n}\n.preview-option {\n  display: flex;\n  gap: 1rem;\n  padding: 0.75rem;\n  margin-bottom: 0.5rem;\n  border: 1px solid #e5e7eb;\n  border-radius: 6px;\n  transition: all 0.2s ease;\n}\n.preview-option.correct-option {\n  background: #f0fdf4;\n  border-color: #22c55e;\n}\n.preview-option:last-child {\n  margin-bottom: 0;\n}\n.option-indicator {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  min-width: 2rem;\n}\n.option-letter {\n  width: 1.5rem;\n  height: 1.5rem;\n  background: #f3f4f6;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: 600;\n  font-size: 0.875rem;\n  color: #374151;\n}\n.correct-option .option-letter {\n  background: #22c55e;\n  color: white;\n}\n.correct-badge {\n  font-size: 0.75rem;\n  color: #16a34a;\n  font-weight: 600;\n  margin-top: 0.25rem;\n}\n.option-content {\n  flex: 1;\n  display: flex;\n  align-items: center;\n}\n.preview-metadata {\n  display: flex;\n  gap: 2rem;\n  padding-top: 1rem;\n  border-top: 1px solid #e5e7eb;\n}\n.metadata-item {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n}\n.metadata-label {\n  font-weight: 600;\n  color: #6b7280;\n  font-size: 0.875rem;\n}\n.metadata-value {\n  font-weight: 500;\n  color: #1f2937;\n  font-size: 0.875rem;\n  text-transform: capitalize;\n}\n.hierarchy-section {\n  background: #f8fafc;\n  border: 2px solid #e2e8f0;\n  border-radius: 12px;\n  margin-bottom: 1.5rem;\n}\n.hierarchy-section .section-label {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  color: #1e40af;\n  font-weight: 600;\n}\n.hierarchy-section .section-label .material-icons-outlined {\n  font-size: 1.25rem;\n}\n.hierarchy-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: 1rem;\n  margin-top: 1rem;\n}\n.hierarchy-complete {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  margin-top: 1rem;\n  padding: 0.75rem;\n  background: #f0fdf4;\n  border-radius: 8px;\n  border: 1px solid #bbf7d0;\n}\n.field-hint {\n  font-size: 0.75rem;\n  color: #6b7280;\n  margin-top: 0.25rem;\n}\n.image-upload-container {\n  margin-top: 1rem;\n}\n.upload-area {\n  border: 2px dashed #d1d5db;\n  border-radius: 8px;\n  padding: 1.5rem;\n  text-align: center;\n  transition: all 0.2s ease;\n  background: #f9fafb;\n}\n.upload-area:hover:not(.disabled) {\n  border-color: #3b82f6;\n  background: #eff6ff;\n}\n.upload-area.disabled {\n  opacity: 0.5;\n  background: #f3f4f6;\n  cursor: not-allowed;\n}\n.upload-area.small {\n  padding: 1rem;\n  font-size: 0.875rem;\n}\n.file-input {\n  display: none;\n}\n.file-label {\n  display: inline-flex;\n  align-items: center;\n  gap: 0.5rem;\n  padding: 0.75rem 1.5rem;\n  background: #3b82f6;\n  color: white;\n  border-radius: 8px;\n  cursor: pointer;\n  font-weight: 500;\n  transition: background-color 0.2s ease;\n}\n.file-label:hover:not(.disabled) {\n  background: #2563eb;\n}\n.file-label.disabled {\n  background: #9ca3af;\n  cursor: not-allowed;\n}\n.file-label.small {\n  padding: 0.5rem 1rem;\n  font-size: 0.875rem;\n}\n.file-label .material-icons-outlined {\n  font-size: 1.25rem;\n}\n.upload-disabled-message {\n  margin-top: 0.5rem;\n  font-size: 0.875rem;\n  color: #6b7280;\n}\n.upload-status {\n  margin-top: 1rem;\n  padding: 0.75rem;\n  border-radius: 8px;\n}\n.upload-status.small {\n  margin-top: 0.5rem;\n  padding: 0.5rem;\n  font-size: 0.875rem;\n}\n.status-uploading {\n  background: #fef3c7;\n  color: #92400e;\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n}\n.status-uploading .spinning {\n  animation: spin 1s linear infinite;\n}\n.status-success {\n  background: #d1fae5;\n  color: #065f46;\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n}\n.status-error {\n  background: #fee2e2;\n  color: #991b1b;\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n}\n.retry-btn {\n  background: none;\n  border: none;\n  color: #dc2626;\n  text-decoration: underline;\n  cursor: pointer;\n  font-size: inherit;\n  margin-left: 0.5rem;\n}\n.retry-btn:hover {\n  color: #b91c1c;\n}\n.image-preview {\n  margin-top: 1rem;\n  position: relative;\n  display: inline-block;\n}\n.image-preview.small {\n  margin-top: 0.5rem;\n}\n.preview-image {\n  max-width: 200px;\n  max-height: 150px;\n  border-radius: 8px;\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);\n}\n.small .preview-image {\n  max-width: 100px;\n  max-height: 75px;\n}\n.remove-image-btn {\n  position: absolute;\n  top: -8px;\n  right: -8px;\n  background: #dc2626;\n  color: white;\n  border: none;\n  border-radius: 50%;\n  width: 24px;\n  height: 24px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  font-size: 0.75rem;\n  transition: background-color 0.2s ease;\n}\n.remove-image-btn:hover {\n  background: #b91c1c;\n}\n.remove-image-btn .material-icons-outlined {\n  font-size: 16px;\n}\n.option-image-upload {\n  margin-top: 0.75rem;\n  padding-top: 0.75rem;\n  border-top: 1px solid #e5e7eb;\n}\n@keyframes spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n.text-green-600 {\n  color: #16a34a;\n}\n@media (max-width: 768px) {\n  .question-editor-container {\n    padding: 1rem;\n  }\n  .editor-header {\n    flex-direction: column;\n    gap: 1rem;\n    align-items: stretch;\n  }\n  .editor-actions {\n    justify-content: stretch;\n  }\n  .btn {\n    flex: 1;\n    justify-content: center;\n  }\n  .metadata-grid {\n    grid-template-columns: 1fr;\n  }\n  .symbol-grid {\n    justify-content: center;\n  }\n  .preview-metadata {\n    flex-direction: column;\n    gap: 0.5rem;\n  }\n  .preview-option {\n    flex-direction: column;\n    gap: 0.5rem;\n  }\n  .option-indicator {\n    flex-direction: row;\n    align-items: center;\n    min-width: auto;\n  }\n}\n@media (prefers-color-scheme: dark) {\n  .question-editor-container {\n    background: #1f2937;\n    color: #f9fafb;\n  }\n  .editor-title {\n    color: #f9fafb;\n  }\n  .section-label {\n    color: #f3f4f6;\n  }\n  .question-textarea,\n  .option-textarea,\n  .form-select,\n  .form-input {\n    background: #374151;\n    border-color: #4b5563;\n    color: #f9fafb;\n  }\n  .question-textarea::placeholder,\n  .option-textarea::placeholder,\n  .form-select::placeholder,\n  .form-input::placeholder {\n    color: #9ca3af;\n  }\n  .question-textarea:focus,\n  .option-textarea:focus,\n  .form-select:focus,\n  .form-input:focus {\n    border-color: #60a5fa;\n  }\n  .math-toolbar,\n  .formatting-toolbar {\n    background: #374151;\n    border-color: #4b5563;\n  }\n  .symbol-btn,\n  .expression-btn,\n  .format-btn {\n    background: #4b5563;\n    border-color: #6b7280;\n    color: #f9fafb;\n  }\n  .symbol-btn:hover,\n  .expression-btn:hover,\n  .format-btn:hover {\n    background: #6b7280;\n  }\n  .preview-container {\n    background: #374151;\n    border-color: #4b5563;\n  }\n  .preview-question {\n    background: #4b5563;\n  }\n}\n/*# sourceMappingURL=question-editor.component.css.map */\n'] }]
  }], () => [{ type: ImageUploadService }], null);
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(QuestionEditorComponent, { className: "QuestionEditorComponent", filePath: "src/app/components/question-editor/question-editor.component.ts", lineNumber: 44 });
})();

// src/app/components/question-detail/question-detail.component.ts
var _c05 = (a0) => ["/questions", "edit", a0];
function QuestionDetailComponent_div_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 5)(1, "div", 6);
    \u0275\u0275element(2, "div", 7);
    \u0275\u0275elementStart(3, "p", 8);
    \u0275\u0275text(4, "Loading question details...");
    \u0275\u0275elementEnd()()();
  }
}
function QuestionDetailComponent_div_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 9)(1, "div", 10);
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(2, "svg", 11);
    \u0275\u0275element(3, "path", 12);
    \u0275\u0275elementEnd();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(4, "h3", 13);
    \u0275\u0275text(5, "Error Loading Question");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(6, "p", 14);
    \u0275\u0275text(7);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(8, "button", 15);
    \u0275\u0275text(9, " Back to Question List ");
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(7);
    \u0275\u0275textInterpolate(ctx_r0.errorMessage);
  }
}
function QuestionDetailComponent_div_4_div_46_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div")(1, "span", 33);
    \u0275\u0275text(2, "Recommended Time");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "p", 38);
    \u0275\u0275text(4);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(4);
    \u0275\u0275textInterpolate1("", ctx_r0.question.recommendedTimeAllotment, " seconds");
  }
}
function QuestionDetailComponent_div_4_div_65_span_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 61);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const tag_r2 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", tag_r2, " ");
  }
}
function QuestionDetailComponent_div_4_div_65_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 57)(1, "span", 58);
    \u0275\u0275text(2, "Tags");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "div", 59);
    \u0275\u0275template(4, QuestionDetailComponent_div_4_div_65_span_4_Template, 2, 1, "span", 60);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(4);
    \u0275\u0275property("ngForOf", ctx_r0.question.tags);
  }
}
function QuestionDetailComponent_div_4_div_66_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 57)(1, "span", 58);
    \u0275\u0275text(2, "Internal Notes");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "div", 62)(4, "p", 63);
    \u0275\u0275text(5);
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(5);
    \u0275\u0275textInterpolate(ctx_r0.question.internalNotes);
  }
}
function QuestionDetailComponent_div_4_div_93_div_6_div_11_div_4_span_5_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 83);
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(1, "svg", 84);
    \u0275\u0275element(2, "path", 85);
    \u0275\u0275elementEnd();
    \u0275\u0275text(3, " Correct Answer ");
    \u0275\u0275elementEnd();
  }
}
function QuestionDetailComponent_div_4_div_93_div_6_div_11_div_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 79)(1, "span", 80);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "div", 81);
    \u0275\u0275element(4, "div", 74);
    \u0275\u0275template(5, QuestionDetailComponent_div_4_div_93_div_6_div_11_div_4_span_5_Template, 4, 0, "span", 82);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const opt_r3 = ctx.$implicit;
    const optIndex_r4 = ctx.index;
    \u0275\u0275classMap(opt_r3.isCorrect ? "bg-green-50 border-green-200" : "bg-white border-gray-200");
    \u0275\u0275advance();
    \u0275\u0275classMap(opt_r3.isCorrect ? "bg-green-500 text-white" : "bg-gray-200 text-gray-600");
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", optIndex_r4 + 1, " ");
    \u0275\u0275advance(2);
    \u0275\u0275property("innerHTML", opt_r3.text, \u0275\u0275sanitizeHtml);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", opt_r3.isCorrect);
  }
}
function QuestionDetailComponent_div_4_div_93_div_6_div_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 71)(1, "h4", 76);
    \u0275\u0275text(2, "Answer Options");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "div", 77);
    \u0275\u0275template(4, QuestionDetailComponent_div_4_div_93_div_6_div_11_div_4_Template, 6, 7, "div", 78);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const trans_r5 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275advance(4);
    \u0275\u0275property("ngForOf", trans_r5.options);
  }
}
function QuestionDetailComponent_div_4_div_93_div_6_div_12_div_4_span_5_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 93);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const exp_r6 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(exp_r6.label);
  }
}
function QuestionDetailComponent_div_4_div_93_div_6_div_12_div_4_div_7_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "div", 74);
  }
  if (rf & 2) {
    const exp_r6 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275property("innerHTML", exp_r6.content, \u0275\u0275sanitizeHtml);
  }
}
function QuestionDetailComponent_div_4_div_93_div_6_div_12_div_4_a_8_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "a", 94);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const exp_r6 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275property("href", exp_r6.content, \u0275\u0275sanitizeUrl);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", exp_r6.content, " ");
  }
}
function QuestionDetailComponent_div_4_div_93_div_6_div_12_div_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 73)(1, "div", 87)(2, "span", 88);
    \u0275\u0275text(3);
    \u0275\u0275pipe(4, "titlecase");
    \u0275\u0275elementEnd();
    \u0275\u0275template(5, QuestionDetailComponent_div_4_div_93_div_6_div_12_div_4_span_5_Template, 2, 1, "span", 89);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(6, "div", 90);
    \u0275\u0275template(7, QuestionDetailComponent_div_4_div_93_div_6_div_12_div_4_div_7_Template, 1, 1, "div", 91)(8, QuestionDetailComponent_div_4_div_93_div_6_div_12_div_4_a_8_Template, 2, 2, "a", 92);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const exp_r6 = ctx.$implicit;
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate1(" ", \u0275\u0275pipeBind1(4, 4, exp_r6.type), " ");
    \u0275\u0275advance(2);
    \u0275\u0275property("ngIf", exp_r6.label);
    \u0275\u0275advance(2);
    \u0275\u0275property("ngIf", exp_r6.type === "text");
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", exp_r6.type === "video" || exp_r6.type === "pdf" || exp_r6.type === "image");
  }
}
function QuestionDetailComponent_div_4_div_93_div_6_div_12_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 71)(1, "h4", 76);
    \u0275\u0275text(2, "Explanations");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "div", 32);
    \u0275\u0275template(4, QuestionDetailComponent_div_4_div_93_div_6_div_12_div_4_Template, 9, 6, "div", 86);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const trans_r5 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275advance(4);
    \u0275\u0275property("ngForOf", trans_r5.explanations);
  }
}
function QuestionDetailComponent_div_4_div_93_div_6_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 67)(1, "div", 68)(2, "h3", 69)(3, "span", 70);
    \u0275\u0275text(4);
    \u0275\u0275elementEnd();
    \u0275\u0275text(5);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(6, "div", 71)(7, "h4", 72);
    \u0275\u0275text(8, "Question Text");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(9, "div", 73);
    \u0275\u0275element(10, "div", 74);
    \u0275\u0275elementEnd()();
    \u0275\u0275template(11, QuestionDetailComponent_div_4_div_93_div_6_div_11_Template, 5, 1, "div", 75)(12, QuestionDetailComponent_div_4_div_93_div_6_div_12_Template, 5, 1, "div", 75);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const trans_r5 = ctx.$implicit;
    \u0275\u0275advance(4);
    \u0275\u0275textInterpolate1(" ", trans_r5.lang.toUpperCase(), " ");
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", trans_r5.lang === "en" ? "English" : "\u0939\u093F\u0928\u094D\u0926\u0940", " ");
    \u0275\u0275advance(5);
    \u0275\u0275property("innerHTML", trans_r5.questionText, \u0275\u0275sanitizeHtml);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", trans_r5.options && trans_r5.options.length > 0);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", trans_r5.explanations && trans_r5.explanations.length > 0);
  }
}
function QuestionDetailComponent_div_4_div_93_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 17)(1, "h2", 28);
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(2, "svg", 64);
    \u0275\u0275element(3, "path", 65);
    \u0275\u0275elementEnd();
    \u0275\u0275text(4, " Translations ");
    \u0275\u0275elementEnd();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(5, "div", 16);
    \u0275\u0275template(6, QuestionDetailComponent_div_4_div_93_div_6_Template, 13, 5, "div", 66);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(6);
    \u0275\u0275property("ngForOf", ctx_r0.question.translations);
  }
}
function QuestionDetailComponent_div_4_div_94_div_6_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 98)(1, "div")(2, "span", 99);
    \u0275\u0275text(3);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(4, "span", 100);
    \u0275\u0275text(5);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(6, "span", 101);
    \u0275\u0275text(7);
    \u0275\u0275pipe(8, "date");
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const history_r7 = ctx.$implicit;
    const ctx_r0 = \u0275\u0275nextContext(3);
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate(history_r7.examName);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(history_r7.title);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", \u0275\u0275pipeBind2(8, 3, ctx_r0.formatDate(history_r7.dateAppeared), "shortDate"), " ");
  }
}
function QuestionDetailComponent_div_4_div_94_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 17)(1, "h2", 28);
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(2, "svg", 95);
    \u0275\u0275element(3, "path", 96);
    \u0275\u0275elementEnd();
    \u0275\u0275text(4, " Question History ");
    \u0275\u0275elementEnd();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(5, "div", 77);
    \u0275\u0275template(6, QuestionDetailComponent_div_4_div_94_div_6_Template, 9, 6, "div", 97);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(6);
    \u0275\u0275property("ngForOf", ctx_r0.question.questionHistory);
  }
}
function QuestionDetailComponent_div_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 16)(1, "div", 17)(2, "div", 18)(3, "div", 19)(4, "h1", 20);
    \u0275\u0275text(5, "Question Details");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(6, "p", 21);
    \u0275\u0275text(7);
    \u0275\u0275pipe(8, "slice");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(9, "div", 22)(10, "button", 23);
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(11, "svg", 24);
    \u0275\u0275element(12, "path", 25);
    \u0275\u0275elementEnd();
    \u0275\u0275text(13, " Back to List ");
    \u0275\u0275elementEnd();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(14, "button", 26);
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(15, "svg", 24);
    \u0275\u0275element(16, "path", 27);
    \u0275\u0275elementEnd();
    \u0275\u0275text(17, " Edit Question ");
    \u0275\u0275elementEnd()()()();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(18, "div", 17)(19, "h2", 28);
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(20, "svg", 29);
    \u0275\u0275element(21, "path", 30);
    \u0275\u0275elementEnd();
    \u0275\u0275text(22, " Basic Information ");
    \u0275\u0275elementEnd();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(23, "div", 31)(24, "div", 32)(25, "div")(26, "span", 33);
    \u0275\u0275text(27, "Question ID");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(28, "p", 34);
    \u0275\u0275text(29);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(30, "div")(31, "span", 33);
    \u0275\u0275text(32, "Type");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(33, "p", 35);
    \u0275\u0275text(34);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(35, "div")(36, "span", 33);
    \u0275\u0275text(37, "Status");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(38, "span", 36);
    \u0275\u0275text(39);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(40, "div", 32)(41, "div")(42, "span", 33);
    \u0275\u0275text(43, "Difficulty");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(44, "span", 36);
    \u0275\u0275text(45);
    \u0275\u0275elementEnd()();
    \u0275\u0275template(46, QuestionDetailComponent_div_4_div_46_Template, 5, 1, "div", 37);
    \u0275\u0275elementStart(47, "div")(48, "span", 33);
    \u0275\u0275text(49, "Version");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(50, "p", 38);
    \u0275\u0275text(51);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(52, "div", 32)(53, "div")(54, "span", 33);
    \u0275\u0275text(55, "Created");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(56, "p", 39);
    \u0275\u0275text(57);
    \u0275\u0275pipe(58, "date");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(59, "div")(60, "span", 33);
    \u0275\u0275text(61, "Last Updated");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(62, "p", 39);
    \u0275\u0275text(63);
    \u0275\u0275pipe(64, "date");
    \u0275\u0275elementEnd()()()();
    \u0275\u0275template(65, QuestionDetailComponent_div_4_div_65_Template, 5, 1, "div", 40)(66, QuestionDetailComponent_div_4_div_66_Template, 6, 1, "div", 40);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(67, "div", 17)(68, "h2", 28);
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(69, "svg", 41);
    \u0275\u0275element(70, "path", 42);
    \u0275\u0275elementEnd();
    \u0275\u0275text(71, " Subject Hierarchy ");
    \u0275\u0275elementEnd();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(72, "div", 43)(73, "div", 44)(74, "span", 45);
    \u0275\u0275text(75, "Branch");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(76, "p", 46);
    \u0275\u0275text(77);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(78, "div", 47)(79, "span", 48);
    \u0275\u0275text(80, "Subject");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(81, "p", 49);
    \u0275\u0275text(82);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(83, "div", 50)(84, "span", 51);
    \u0275\u0275text(85, "Topic");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(86, "p", 52);
    \u0275\u0275text(87);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(88, "div", 53)(89, "span", 54);
    \u0275\u0275text(90, "Subtopic");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(91, "p", 55);
    \u0275\u0275text(92);
    \u0275\u0275elementEnd()()()();
    \u0275\u0275template(93, QuestionDetailComponent_div_4_div_93_Template, 7, 1, "div", 56)(94, QuestionDetailComponent_div_4_div_94_Template, 7, 1, "div", 56);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(7);
    \u0275\u0275textInterpolate1("ID: ", \u0275\u0275pipeBind3(8, 22, ctx_r0.getIdString(ctx_r0.question._id), 0, 8), "...");
    \u0275\u0275advance(7);
    \u0275\u0275property("routerLink", \u0275\u0275pureFunction1(32, _c05, ctx_r0.getIdString(ctx_r0.question._id)));
    \u0275\u0275advance(15);
    \u0275\u0275textInterpolate(ctx_r0.getIdString(ctx_r0.question._id));
    \u0275\u0275advance(5);
    \u0275\u0275textInterpolate(ctx_r0.question.type);
    \u0275\u0275advance(4);
    \u0275\u0275classMap(ctx_r0.question.status === "Published" ? "bg-green-100 text-green-800" : ctx_r0.question.status === "draft" ? "bg-yellow-100 text-yellow-800" : "bg-gray-100 text-gray-800");
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.question.status, " ");
    \u0275\u0275advance(5);
    \u0275\u0275classMap(ctx_r0.question.difficulty === "Easy" ? "bg-green-100 text-green-800" : ctx_r0.question.difficulty === "Medium" ? "bg-yellow-100 text-yellow-800" : ctx_r0.question.difficulty === "Hard" ? "bg-red-100 text-red-800" : "bg-gray-100 text-gray-800");
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.question.difficulty, " ");
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.question.recommendedTimeAllotment !== void 0);
    \u0275\u0275advance(5);
    \u0275\u0275textInterpolate(ctx_r0.getDisplayVersion(ctx_r0.question.version));
    \u0275\u0275advance(6);
    \u0275\u0275textInterpolate(\u0275\u0275pipeBind2(58, 26, ctx_r0.formatDate(ctx_r0.question.createdAt), "medium"));
    \u0275\u0275advance(6);
    \u0275\u0275textInterpolate(\u0275\u0275pipeBind2(64, 29, ctx_r0.formatDate(ctx_r0.question.updatedAt), "medium"));
    \u0275\u0275advance(2);
    \u0275\u0275property("ngIf", ctx_r0.question.tags && ctx_r0.question.tags.length > 0);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.question.internalNotes);
    \u0275\u0275advance(11);
    \u0275\u0275textInterpolate(ctx_r0.getHierarchyName(ctx_r0.question.branch));
    \u0275\u0275advance(5);
    \u0275\u0275textInterpolate(ctx_r0.getHierarchyName(ctx_r0.question.subject));
    \u0275\u0275advance(5);
    \u0275\u0275textInterpolate(ctx_r0.getHierarchyName(ctx_r0.question.topic));
    \u0275\u0275advance(5);
    \u0275\u0275textInterpolate(ctx_r0.getHierarchyName(ctx_r0.question.subTopic));
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.question.translations && ctx_r0.question.translations.length > 0);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.question.questionHistory && ctx_r0.question.questionHistory.length > 0);
  }
}
var QuestionDetailComponent = class _QuestionDetailComponent {
  route;
  questionService;
  /**
   * @property {Question | undefined} question
   * @description The complete question object containing all data including translations,
   * options, explanations, hierarchical categorization, and metadata
   */
  question;
  /**
   * @property {boolean} isLoading
   * @description Loading state indicator for data fetching operations
   * @default true
   */
  isLoading = true;
  /**
   * @property {string} errorMessage
   * @description Error message to display when question loading fails
   * @default ''
   */
  errorMessage = "";
  /**
   * @constructor
   * @description Initializes the QuestionDetailComponent with required services
   *
   * @param {ActivatedRoute} route - Angular router service for accessing route parameters
   * @param {QuestionService} questionService - Service for question data operations
   */
  constructor(route, questionService) {
    this.route = route;
    this.questionService = questionService;
  }
  /**
   * @method ngOnInit
   * @description Angular lifecycle hook that initializes the component and loads question data
   * @returns {void}
   *
   * @description
   * This method executes during component initialization and handles:
   * - Extracting question ID from route parameters
   * - Fetching question data from the backend service
   * - Managing loading states and error handling
   * - Setting up the component for data display
   *
   * @workflow
   * 1. Extract question ID from route snapshot parameters
   * 2. Validate question ID existence
   * 3. Call QuestionService to fetch question data
   * 4. Handle successful data loading
   * 5. Handle errors with appropriate error messages
   * 6. Update loading state accordingly
   *
   * @example
   * ```typescript
   * // Component initialization automatically calls ngOnInit
   * // Route: /questions/64f8a1b2c3d4e5f6a7b8c9d1
   * this.ngOnInit();
   * // Loads question with ID from route parameter
   * ```
   */
  ngOnInit() {
    const questionId = this.route.snapshot.paramMap.get("id");
    if (questionId) {
      this.questionService.getQuestionById(questionId).subscribe({
        next: (data) => {
          this.question = data;
          this.isLoading = false;
        },
        error: (err) => {
          this.errorMessage = "Failed to load question details.";
          console.error(err);
          this.isLoading = false;
        }
      });
    } else {
      this.errorMessage = "Question ID not found.";
      this.isLoading = false;
    }
  }
  /**
   * @method getTranslation
   * @description Retrieves a specific translation from the question's translations array
   * @param {string} langCode - Language code to search for (e.g., 'en', 'hi', 'te')
   * @returns {object | undefined} Translation object if found, undefined otherwise
   *
   * @description
   * This utility method searches through the question's translations array to find
   * a translation matching the specified language code. Used for displaying
   * question content in different languages within the detail view.
   *
   * @example
   * ```typescript
   * const englishTranslation = this.getTranslation('en');
   * const hindiTranslation = this.getTranslation('hi');
   * // Returns translation object or undefined if not found
   * ```
   */
  // Helper to get a specific translation
  getTranslation(langCode) {
    return this.question?.translations?.find((t) => t.lang === langCode);
  }
  /**
   * @method getOptionText
   * @description Safely extracts text content from a question option object
   * @param {any} option - Option object containing text property
   * @returns {string} Option text or 'N/A' if not available
   *
   * @description
   * This utility method provides safe access to option text with fallback handling.
   * Prevents errors when displaying options that may have missing or undefined text.
   *
   * @example
   * ```typescript
   * const optionText = this.getOptionText(question.options[0]);
   * // Returns "Option A text" or "N/A" if text is missing
   * ```
   */
  // Helper to get option text
  getOptionText(option) {
    return option?.text || "N/A";
  }
  /**
   * @method getIdString
   * @description Converts various ID formats to display-ready string representation
   * @param {any} idValue - ID value in various formats (string, ObjectId, $oid object)
   * @returns {string} String representation of the ID or empty string if invalid
   *
   * @description
   * This utility method handles the complexity of MongoDB ObjectId formats that may
   * appear in different representations (plain string, $oid object, ObjectId instance).
   * Provides consistent string output for display purposes.
   *
   * @example
   * ```typescript
   * const id1 = this.getIdString("64f8a1b2c3d4e5f6a7b8c9d1"); // Direct string
   * const id2 = this.getIdString({ $oid: "64f8a1b2c3d4e5f6a7b8c9d1" }); // MongoDB format
   * // Both return: "64f8a1b2c3d4e5f6a7b8c9d1"
   * ```
   */
  // Helper to get string ID for display
  getIdString(idValue) {
    if (!idValue)
      return "";
    if (typeof idValue === "string")
      return idValue;
    if (idValue.$oid)
      return idValue.$oid;
    return String(idValue);
  }
  /**
   * @method formatDate
   * @description Converts various date formats to JavaScript Date objects for display
   * @param {any} dateValue - Date value in various formats (Date, string, MongoDB $date, timestamp)
   * @returns {Date | null} JavaScript Date object or null if invalid
   *
   * @description
   * This comprehensive date formatting utility handles multiple date representations
   * commonly encountered when working with MongoDB data and JSON serialization.
   * Supports standard JavaScript dates, ISO strings, MongoDB $date formats, and timestamps.
   *
   * @supported_formats
   * - JavaScript Date objects
   * - ISO date strings
   * - MongoDB $date format with $numberLong
   * - MongoDB $date format (standard)
   * - Unix timestamps (numbers)
   *
   * @example
   * ```typescript
   * const date1 = this.formatDate("2024-01-01T00:00:00.000Z"); // ISO string
   * const date2 = this.formatDate({ $date: { $numberLong: "1704067200000" } }); // MongoDB format
   * const date3 = this.formatDate(1704067200000); // Timestamp
   * // All return valid Date objects for Angular date pipe
   * ```
   */
  // Helper to format date for the date pipe
  formatDate(dateValue) {
    if (!dateValue)
      return null;
    if (dateValue instanceof Date)
      return dateValue;
    if (typeof dateValue === "string")
      return new Date(dateValue);
    if (dateValue.$date && dateValue.$date.$numberLong) {
      return new Date(parseInt(dateValue.$date.$numberLong, 10));
    }
    if (dateValue.$date) {
      return new Date(dateValue.$date);
    }
    if (typeof dateValue === "number")
      return new Date(dateValue);
    return null;
  }
  /**
   * @method getHierarchyName
   * @description Extracts display name from hierarchical field objects (Branch/Subject/Topic/Subtopic)
   * @param {string | PopulatedHierarchyField | { $oid: string } | undefined} field - Hierarchy field in various formats
   * @returns {string} Display name or ID string or 'N/A' if invalid
   *
   * @description
   * This utility method handles the complexity of hierarchical field references that may
   * appear as populated objects (with name property), ObjectId references, or plain strings.
   * Provides consistent name extraction for displaying Branch, Subject, Topic, and Subtopic
   * information in the question detail view.
   *
   * @field_types
   * - PopulatedHierarchyField: Object with name property (preferred for display)
   * - ObjectId string: Direct ID reference
   * - $oid object: MongoDB ObjectId format
   * - undefined/null: Missing or invalid data
   *
   * @example
   * ```typescript
   * const branchName = this.getHierarchyName(question.branch);
   * // Returns "Engineering" if populated, or ObjectId if not populated
   * const subjectName = this.getHierarchyName(question.subject);
   * // Returns "Physics" if populated, or ObjectId if not populated
   * ```
   */
  // Helper to get name from populated hierarchy field or return the ID string
  getHierarchyName(field) {
    if (!field)
      return "N/A";
    if (typeof field === "string")
      return field;
    if (field.$oid)
      return field.$oid;
    if (field.name)
      return field.name;
    return "Invalid Data";
  }
  /**
   * @method getDisplayVersion
   * @description Converts version numbers from various formats to display-ready strings
   * @param {any} version - Version value in various formats (number, $numberInt object, undefined)
   * @returns {string} String representation of version number or 'N/A' if invalid
   *
   * @description
   * This utility method handles MongoDB's numeric representation formats, particularly
   * the $numberInt wrapper that may appear in serialized data. Provides consistent
   * version number display for question versioning information.
   *
   * @supported_formats
   * - $numberInt object: MongoDB integer format
   * - Number: Direct numeric value
   * - undefined/null: Missing version data
   * - Other types: Converted to string representation
   *
   * @example
   * ```typescript
   * const version1 = this.getDisplayVersion({ $numberInt: "2" }); // Returns "2"
   * const version2 = this.getDisplayVersion(3); // Returns "3"
   * const version3 = this.getDisplayVersion(undefined); // Returns "N/A"
   * ```
   */
  // ADDED: Helper method to get display version
  getDisplayVersion(version) {
    if (typeof version === "object" && version !== null && version.hasOwnProperty("$numberInt")) {
      return version.$numberInt;
    }
    if (version === void 0 || version === null) {
      return "N/A";
    }
    return String(version);
  }
  static \u0275fac = function QuestionDetailComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _QuestionDetailComponent)(\u0275\u0275directiveInject(ActivatedRoute), \u0275\u0275directiveInject(QuestionService));
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _QuestionDetailComponent, selectors: [["app-question-detail"]], decls: 5, vars: 3, consts: [[1, "min-h-screen", "bg-gray-50", "py-6", "px-4", "sm:px-6", "lg:px-8"], [1, "max-w-6xl", "mx-auto"], ["class", "flex items-center justify-center py-20", 4, "ngIf"], ["class", "max-w-2xl mx-auto", 4, "ngIf"], ["class", "space-y-6", 4, "ngIf"], [1, "flex", "items-center", "justify-center", "py-20"], [1, "text-center"], [1, "animate-spin", "rounded-full", "h-12", "w-12", "border-b-2", "border-primary-600", "mx-auto", "mb-4"], [1, "text-gray-600", "text-lg"], [1, "max-w-2xl", "mx-auto"], [1, "bg-red-50", "border", "border-red-200", "rounded-lg", "p-6", "text-center"], ["fill", "none", "stroke", "currentColor", "viewBox", "0 0 24 24", 1, "w-12", "h-12", "text-red-500", "mx-auto", "mb-4"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16c-.77.833.192 2.5 1.732 2.5z"], [1, "text-lg", "font-semibold", "text-red-800", "mb-2"], [1, "text-red-700", "mb-4"], ["routerLink", "/questions", 1, "btn-primary", "px-6", "py-3", "bg-primary-600", "text-white", "rounded-lg", "hover:bg-primary-700", "transition-colors"], [1, "space-y-6"], [1, "bg-white", "rounded-xl", "shadow-sm", "border", "border-gray-200", "p-6"], [1, "flex", "flex-col", "sm:flex-row", "sm:items-center", "sm:justify-between"], [1, "mb-4", "sm:mb-0"], [1, "text-2xl", "font-bold", "text-gray-900"], [1, "text-gray-600", "mt-1"], [1, "flex", "flex-col", "sm:flex-row", "gap-3"], ["routerLink", "/questions", 1, "btn-secondary", "px-4", "py-2", "bg-gray-100", "text-gray-700", "rounded-lg", "hover:bg-gray-200", "transition-colors", "flex", "items-center", "justify-center"], ["fill", "none", "stroke", "currentColor", "viewBox", "0 0 24 24", 1, "w-4", "h-4", "mr-2"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M10 19l-7-7m0 0l7-7m-7 7h18"], [1, "btn-primary", "px-4", "py-2", "bg-primary-600", "text-white", "rounded-lg", "hover:bg-primary-700", "transition-colors", "flex", "items-center", "justify-center", 3, "routerLink"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"], [1, "text-lg", "font-semibold", "text-gray-900", "mb-4", "flex", "items-center"], ["fill", "none", "stroke", "currentColor", "viewBox", "0 0 24 24", 1, "w-5", "h-5", "mr-2", "text-primary-600"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"], [1, "grid", "grid-cols-1", "md:grid-cols-2", "lg:grid-cols-3", "gap-6"], [1, "space-y-3"], [1, "text-sm", "font-medium", "text-gray-500"], [1, "text-gray-900", "font-mono", "text-sm"], [1, "text-gray-900", "capitalize"], [1, "inline-flex", "px-2", "py-1", "text-xs", "font-semibold", "rounded-full"], [4, "ngIf"], [1, "text-gray-900"], [1, "text-gray-900", "text-sm"], ["class", "mt-6 pt-6 border-t border-gray-200", 4, "ngIf"], ["fill", "none", "stroke", "currentColor", "viewBox", "0 0 24 24", 1, "w-5", "h-5", "mr-2", "text-purple-600"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"], [1, "grid", "grid-cols-1", "md:grid-cols-2", "lg:grid-cols-4", "gap-4"], [1, "bg-gradient-to-br", "from-blue-50", "to-blue-100", "rounded-lg", "p-4"], [1, "text-sm", "font-medium", "text-blue-600", "block", "mb-1"], [1, "text-blue-900", "font-medium"], [1, "bg-gradient-to-br", "from-green-50", "to-green-100", "rounded-lg", "p-4"], [1, "text-sm", "font-medium", "text-green-600", "block", "mb-1"], [1, "text-green-900", "font-medium"], [1, "bg-gradient-to-br", "from-yellow-50", "to-yellow-100", "rounded-lg", "p-4"], [1, "text-sm", "font-medium", "text-yellow-600", "block", "mb-1"], [1, "text-yellow-900", "font-medium"], [1, "bg-gradient-to-br", "from-purple-50", "to-purple-100", "rounded-lg", "p-4"], [1, "text-sm", "font-medium", "text-purple-600", "block", "mb-1"], [1, "text-purple-900", "font-medium"], ["class", "bg-white rounded-xl shadow-sm border border-gray-200 p-6", 4, "ngIf"], [1, "mt-6", "pt-6", "border-t", "border-gray-200"], [1, "text-sm", "font-medium", "text-gray-500", "block", "mb-2"], [1, "flex", "flex-wrap", "gap-2"], ["class", "inline-flex px-3 py-1 text-xs font-medium bg-blue-100 text-blue-800 rounded-full", 4, "ngFor", "ngForOf"], [1, "inline-flex", "px-3", "py-1", "text-xs", "font-medium", "bg-blue-100", "text-blue-800", "rounded-full"], [1, "bg-gray-50", "rounded-lg", "p-4"], [1, "text-gray-700", "text-sm"], ["fill", "none", "stroke", "currentColor", "viewBox", "0 0 24 24", 1, "w-5", "h-5", "mr-2", "text-indigo-600"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M3 5h12M9 3v2m1.048 9.5A18.022 18.022 0 016.412 9m6.088 9h7M11 21l5-10 5 10M12.751 5C11.783 10.77 8.07 15.61 3 18.129"], ["class", "border border-gray-200 rounded-lg p-6 bg-gray-50", 4, "ngFor", "ngForOf"], [1, "border", "border-gray-200", "rounded-lg", "p-6", "bg-gray-50"], [1, "flex", "items-center", "justify-between", "mb-4"], [1, "text-lg", "font-semibold", "text-gray-900", "flex", "items-center"], [1, "inline-flex", "px-3", "py-1", "text-sm", "font-medium", "bg-indigo-100", "text-indigo-800", "rounded-full", "mr-3"], [1, "mb-6"], [1, "text-sm", "font-medium", "text-gray-700", "mb-2"], [1, "bg-white", "rounded-lg", "p-4", "border", "border-gray-200"], [1, "prose", "prose-sm", "max-w-none", 3, "innerHTML"], ["class", "mb-6", 4, "ngIf"], [1, "text-sm", "font-medium", "text-gray-700", "mb-3"], [1, "space-y-2"], ["class", "flex items-start p-3 rounded-lg border", 3, "class", 4, "ngFor", "ngForOf"], [1, "flex", "items-start", "p-3", "rounded-lg", "border"], [1, "inline-flex", "items-center", "justify-center", "w-6", "h-6", "text-sm", "font-medium", "rounded-full", "mr-3"], [1, "flex-1"], ["class", "inline-flex items-center px-2 py-1 text-xs font-medium bg-green-100 text-green-800 rounded-full mt-2", 4, "ngIf"], [1, "inline-flex", "items-center", "px-2", "py-1", "text-xs", "font-medium", "bg-green-100", "text-green-800", "rounded-full", "mt-2"], ["fill", "none", "stroke", "currentColor", "viewBox", "0 0 24 24", 1, "w-3", "h-3", "mr-1"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M5 13l4 4L19 7"], ["class", "bg-white rounded-lg p-4 border border-gray-200", 4, "ngFor", "ngForOf"], [1, "flex", "items-center", "justify-between", "mb-2"], [1, "inline-flex", "px-2", "py-1", "text-xs", "font-medium", "bg-gray-100", "text-gray-800", "rounded-full"], ["class", "text-sm text-gray-600", 4, "ngIf"], [1, "mt-2"], ["class", "prose prose-sm max-w-none", 3, "innerHTML", 4, "ngIf"], ["target", "_blank", "class", "text-primary-600 hover:text-primary-800 underline break-all", 3, "href", 4, "ngIf"], [1, "text-sm", "text-gray-600"], ["target", "_blank", 1, "text-primary-600", "hover:text-primary-800", "underline", "break-all", 3, "href"], ["fill", "none", "stroke", "currentColor", "viewBox", "0 0 24 24", 1, "w-5", "h-5", "mr-2", "text-orange-600"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"], ["class", "flex items-center justify-between p-3 bg-gray-50 rounded-lg", 4, "ngFor", "ngForOf"], [1, "flex", "items-center", "justify-between", "p-3", "bg-gray-50", "rounded-lg"], [1, "font-medium", "text-gray-900"], [1, "text-gray-600", "ml-2"], [1, "text-sm", "text-gray-500"]], template: function QuestionDetailComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
      \u0275\u0275template(2, QuestionDetailComponent_div_2_Template, 5, 0, "div", 2)(3, QuestionDetailComponent_div_3_Template, 10, 1, "div", 3)(4, QuestionDetailComponent_div_4_Template, 95, 34, "div", 4);
      \u0275\u0275elementEnd()();
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("ngIf", ctx.isLoading);
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", ctx.errorMessage);
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", !ctx.isLoading && !ctx.errorMessage && ctx.question);
    }
  }, dependencies: [CommonModule, NgForOf, NgIf, SlicePipe, TitleCasePipe, DatePipe, RouterModule, RouterLink], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(QuestionDetailComponent, [{
    type: Component,
    args: [{ selector: "app-question-detail", standalone: true, imports: [CommonModule, RouterModule], template: `<!-- Modern Question Detail View with Tailwind CSS -->\r
<div class="min-h-screen bg-gray-50 py-6 px-4 sm:px-6 lg:px-8">\r
  <div class="max-w-6xl mx-auto">\r
\r
    <!-- Loading State -->\r
    <div *ngIf="isLoading" class="flex items-center justify-center py-20">\r
      <div class="text-center">\r
        <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600 mx-auto mb-4"></div>\r
        <p class="text-gray-600 text-lg">Loading question details...</p>\r
      </div>\r
    </div>\r
\r
    <!-- Error State -->\r
    <div *ngIf="errorMessage" class="max-w-2xl mx-auto">\r
      <div class="bg-red-50 border border-red-200 rounded-lg p-6 text-center">\r
        <svg class="w-12 h-12 text-red-500 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16c-.77.833.192 2.5 1.732 2.5z"></path>\r
        </svg>\r
        <h3 class="text-lg font-semibold text-red-800 mb-2">Error Loading Question</h3>\r
        <p class="text-red-700 mb-4">{{ errorMessage }}</p>\r
        <button \r
          routerLink="/questions" \r
          class="btn-primary px-6 py-3 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors"\r
        >\r
          Back to Question List\r
        </button>\r
      </div>\r
    </div>\r
\r
    <!-- Question Detail Content -->\r
    <div *ngIf="!isLoading && !errorMessage && question" class="space-y-6">\r
      \r
      <!-- Header with Actions -->\r
      <div class="bg-white rounded-xl shadow-sm border border-gray-200 p-6">\r
        <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between">\r
          <div class="mb-4 sm:mb-0">\r
            <h1 class="text-2xl font-bold text-gray-900">Question Details</h1>\r
            <p class="text-gray-600 mt-1">ID: {{ getIdString(question._id) | slice:0:8 }}...</p>\r
          </div>\r
          <div class="flex flex-col sm:flex-row gap-3">\r
            <button \r
              routerLink="/questions" \r
              class="btn-secondary px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors flex items-center justify-center"\r
            >\r
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>\r
              </svg>\r
              Back to List\r
            </button>\r
            <button \r
              [routerLink]="['/questions', 'edit', getIdString(question._id)]" \r
              class="btn-primary px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors flex items-center justify-center"\r
            >\r
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>\r
              </svg>\r
              Edit Question\r
            </button>\r
          </div>\r
        </div>\r
      </div>\r
\r
      <!-- Basic Information Section -->\r
      <div class="bg-white rounded-xl shadow-sm border border-gray-200 p-6">\r
        <h2 class="text-lg font-semibold text-gray-900 mb-4 flex items-center">\r
          <svg class="w-5 h-5 mr-2 text-primary-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>\r
          </svg>\r
          Basic Information\r
        </h2>\r
        \r
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">\r
          <div class="space-y-3">\r
            <div>\r
              <span class="text-sm font-medium text-gray-500">Question ID</span>\r
              <p class="text-gray-900 font-mono text-sm">{{ getIdString(question._id) }}</p>\r
            </div>\r
            <div>\r
              <span class="text-sm font-medium text-gray-500">Type</span>\r
              <p class="text-gray-900 capitalize">{{ question.type }}</p>\r
            </div>\r
            <div>\r
              <span class="text-sm font-medium text-gray-500">Status</span>\r
              <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full"\r
                    [class]="question.status === 'Published' ? 'bg-green-100 text-green-800' : \r
                            question.status === 'draft' ? 'bg-yellow-100 text-yellow-800' : \r
                            'bg-gray-100 text-gray-800'">\r
                {{ question.status }}\r
              </span>\r
            </div>\r
          </div>\r
          \r
          <div class="space-y-3">\r
            <div>\r
              <span class="text-sm font-medium text-gray-500">Difficulty</span>\r
              <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full"\r
                    [class]="question.difficulty === 'Easy' ? 'bg-green-100 text-green-800' : \r
                            question.difficulty === 'Medium' ? 'bg-yellow-100 text-yellow-800' : \r
                            question.difficulty === 'Hard' ? 'bg-red-100 text-red-800' : \r
                            'bg-gray-100 text-gray-800'">\r
                {{ question.difficulty }}\r
              </span>\r
            </div>\r
            <div *ngIf="question.recommendedTimeAllotment !== undefined">\r
              <span class="text-sm font-medium text-gray-500">Recommended Time</span>\r
              <p class="text-gray-900">{{ question.recommendedTimeAllotment }} seconds</p>\r
            </div>\r
            <div>\r
              <span class="text-sm font-medium text-gray-500">Version</span>\r
              <p class="text-gray-900">{{ getDisplayVersion(question.version) }}</p>\r
            </div>\r
          </div>\r
          \r
          <div class="space-y-3">\r
            <div>\r
              <span class="text-sm font-medium text-gray-500">Created</span>\r
              <p class="text-gray-900 text-sm">{{ formatDate(question.createdAt) | date:'medium' }}</p>\r
            </div>\r
            <div>\r
              <span class="text-sm font-medium text-gray-500">Last Updated</span>\r
              <p class="text-gray-900 text-sm">{{ formatDate(question.updatedAt) | date:'medium' }}</p>\r
            </div>\r
          </div>\r
        </div>\r
\r
        <!-- Tags -->\r
        <div *ngIf="question.tags && question.tags.length > 0" class="mt-6 pt-6 border-t border-gray-200">\r
          <span class="text-sm font-medium text-gray-500 block mb-2">Tags</span>\r
          <div class="flex flex-wrap gap-2">\r
            <span *ngFor="let tag of question.tags" \r
                  class="inline-flex px-3 py-1 text-xs font-medium bg-blue-100 text-blue-800 rounded-full">\r
              {{ tag }}\r
            </span>\r
          </div>\r
        </div>\r
\r
        <!-- Internal Notes -->\r
        <div *ngIf="question.internalNotes" class="mt-6 pt-6 border-t border-gray-200">\r
          <span class="text-sm font-medium text-gray-500 block mb-2">Internal Notes</span>\r
          <div class="bg-gray-50 rounded-lg p-4">\r
            <p class="text-gray-700 text-sm">{{ question.internalNotes }}</p>\r
          </div>\r
        </div>\r
      </div>\r
\r
      <!-- Hierarchy Section -->\r
      <div class="bg-white rounded-xl shadow-sm border border-gray-200 p-6">\r
        <h2 class="text-lg font-semibold text-gray-900 mb-4 flex items-center">\r
          <svg class="w-5 h-5 mr-2 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>\r
          </svg>\r
          Subject Hierarchy\r
        </h2>\r
        \r
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">\r
          <div class="bg-gradient-to-br from-blue-50 to-blue-100 rounded-lg p-4">\r
            <span class="text-sm font-medium text-blue-600 block mb-1">Branch</span>\r
            <p class="text-blue-900 font-medium">{{ getHierarchyName(question.branch) }}</p>\r
          </div>\r
          <div class="bg-gradient-to-br from-green-50 to-green-100 rounded-lg p-4">\r
            <span class="text-sm font-medium text-green-600 block mb-1">Subject</span>\r
            <p class="text-green-900 font-medium">{{ getHierarchyName(question.subject) }}</p>\r
          </div>\r
          <div class="bg-gradient-to-br from-yellow-50 to-yellow-100 rounded-lg p-4">\r
            <span class="text-sm font-medium text-yellow-600 block mb-1">Topic</span>\r
            <p class="text-yellow-900 font-medium">{{ getHierarchyName(question.topic) }}</p>\r
          </div>\r
          <div class="bg-gradient-to-br from-purple-50 to-purple-100 rounded-lg p-4">\r
            <span class="text-sm font-medium text-purple-600 block mb-1">Subtopic</span>\r
            <p class="text-purple-900 font-medium">{{ getHierarchyName(question.subTopic) }}</p>\r
          </div>\r
        </div>\r
      </div>\r
\r
      <!-- Translations Section -->\r
      <div *ngIf="question.translations && question.translations.length > 0" \r
           class="bg-white rounded-xl shadow-sm border border-gray-200 p-6">\r
        <h2 class="text-lg font-semibold text-gray-900 mb-4 flex items-center">\r
          <svg class="w-5 h-5 mr-2 text-indigo-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5h12M9 3v2m1.048 9.5A18.022 18.022 0 016.412 9m6.088 9h7M11 21l5-10 5 10M12.751 5C11.783 10.77 8.07 15.61 3 18.129"></path>\r
          </svg>\r
          Translations\r
        </h2>\r
        \r
        <div class="space-y-6">\r
          <div *ngFor="let trans of question.translations; let i = index" \r
               class="border border-gray-200 rounded-lg p-6 bg-gray-50">\r
            <!-- Language Header -->\r
            <div class="flex items-center justify-between mb-4">\r
              <h3 class="text-lg font-semibold text-gray-900 flex items-center">\r
                <span class="inline-flex px-3 py-1 text-sm font-medium bg-indigo-100 text-indigo-800 rounded-full mr-3">\r
                  {{ trans.lang.toUpperCase() }}\r
                </span>\r
                {{ trans.lang === 'en' ? 'English' : '\u0939\u093F\u0928\u094D\u0926\u0940' }}\r
              </h3>\r
            </div>\r
            \r
            <!-- Question Text -->\r
            <div class="mb-6">\r
              <h4 class="text-sm font-medium text-gray-700 mb-2">Question Text</h4>\r
              <div class="bg-white rounded-lg p-4 border border-gray-200">\r
                <div [innerHTML]="trans.questionText" class="prose prose-sm max-w-none"></div>\r
              </div>\r
            </div>\r
            \r
            <!-- Options -->\r
            <div *ngIf="trans.options && trans.options.length > 0" class="mb-6">\r
              <h4 class="text-sm font-medium text-gray-700 mb-3">Answer Options</h4>\r
              <div class="space-y-2">\r
                <div *ngFor="let opt of trans.options; let optIndex = index" \r
                     class="flex items-start p-3 rounded-lg border"\r
                     [class]="opt.isCorrect ? 'bg-green-50 border-green-200' : 'bg-white border-gray-200'">\r
                  <span class="inline-flex items-center justify-center w-6 h-6 text-sm font-medium rounded-full mr-3"\r
                        [class]="opt.isCorrect ? 'bg-green-500 text-white' : 'bg-gray-200 text-gray-600'">\r
                    {{ optIndex + 1 }}\r
                  </span>\r
                  <div class="flex-1">\r
                    <div [innerHTML]="opt.text" class="prose prose-sm max-w-none"></div>\r
                    <span *ngIf="opt.isCorrect" \r
                          class="inline-flex items-center px-2 py-1 text-xs font-medium bg-green-100 text-green-800 rounded-full mt-2">\r
                      <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>\r
                      </svg>\r
                      Correct Answer\r
                    </span>\r
                  </div>\r
                </div>\r
              </div>\r
            </div>\r
\r
            <!-- Explanations -->\r
            <div *ngIf="trans.explanations && trans.explanations.length > 0" class="mb-6">\r
              <h4 class="text-sm font-medium text-gray-700 mb-3">Explanations</h4>\r
              <div class="space-y-3">\r
                <div *ngFor="let exp of trans.explanations" \r
                     class="bg-white rounded-lg p-4 border border-gray-200">\r
                  <div class="flex items-center justify-between mb-2">\r
                    <span class="inline-flex px-2 py-1 text-xs font-medium bg-gray-100 text-gray-800 rounded-full">\r
                      {{ exp.type | titlecase }}\r
                    </span>\r
                    <span *ngIf="exp.label" class="text-sm text-gray-600">{{ exp.label }}</span>\r
                  </div>\r
                  <div class="mt-2">\r
                    <div *ngIf="exp.type === 'text'" [innerHTML]="exp.content" class="prose prose-sm max-w-none"></div>\r
                    <a *ngIf="exp.type === 'video' || exp.type === 'pdf' || exp.type === 'image'" \r
                       [href]="exp.content" \r
                       target="_blank"\r
                       class="text-primary-600 hover:text-primary-800 underline break-all">\r
                      {{ exp.content }}\r
                    </a>\r
                  </div>\r
                </div>\r
              </div>\r
            </div>\r
          </div>\r
        </div>\r
      </div>\r
\r
      <!-- Question History Section -->\r
      <div *ngIf="question.questionHistory && question.questionHistory.length > 0" \r
           class="bg-white rounded-xl shadow-sm border border-gray-200 p-6">\r
        <h2 class="text-lg font-semibold text-gray-900 mb-4 flex items-center">\r
          <svg class="w-5 h-5 mr-2 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>\r
          </svg>\r
          Question History\r
        </h2>\r
        \r
        <div class="space-y-2">\r
          <div *ngFor="let history of question.questionHistory" \r
               class="flex items-center justify-between p-3 bg-gray-50 rounded-lg">\r
            <div>\r
              <span class="font-medium text-gray-900">{{ history.examName }}</span>\r
              <span class="text-gray-600 ml-2">{{ history.title }}</span>\r
            </div>\r
            <span class="text-sm text-gray-500">\r
              {{ formatDate(history.dateAppeared) | date:'shortDate' }}\r
            </span>\r
          </div>\r
        </div>\r
      </div>\r
    </div>\r
  </div>\r
</div>\r
` }]
  }], () => [{ type: ActivatedRoute }, { type: QuestionService }], null);
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(QuestionDetailComponent, { className: "QuestionDetailComponent", filePath: "src/app/components/question-detail/question-detail.component.ts", lineNumber: 81 });
})();

// src/app/components/question-review/question-review.component.ts
var _c06 = (a0, a1, a2, a3) => ({ "bg-red-100 text-red-800": a0, "bg-yellow-100 text-yellow-800": a1, "bg-green-100 text-green-800": a2, "bg-gray-100 text-gray-800": a3 });
var _c12 = (a0, a1) => ({ "bg-green-100 border-green-300": a0, "bg-white border-gray-200": a1 });
var _c2 = (a0, a1) => ({ "bg-green-600 text-white": a0, "bg-gray-400 text-white": a1 });
var _c3 = () => [];
var _c4 = (a0, a1) => ({ "z-10 bg-indigo-600 text-white focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600": a0, "text-gray-900 hover:bg-gray-50": a1 });
function QuestionReviewComponent_div_7_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 9)(1, "div", 10);
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(2, "svg", 11);
    \u0275\u0275element(3, "circle", 12)(4, "path", 13);
    \u0275\u0275elementEnd();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(5, "span", 14);
    \u0275\u0275text(6, "Loading questions...");
    \u0275\u0275elementEnd()()();
  }
}
function QuestionReviewComponent_div_8_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 15)(1, "div", 16);
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(2, "svg", 17);
    \u0275\u0275element(3, "path", 18);
    \u0275\u0275elementEnd();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(4, "span", 19);
    \u0275\u0275text(5);
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(5);
    \u0275\u0275textInterpolate(ctx_r0.errorMessage);
  }
}
function QuestionReviewComponent_div_9_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 9)(1, "div", 20);
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(2, "svg", 21);
    \u0275\u0275element(3, "path", 22);
    \u0275\u0275elementEnd();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(4, "p", 23);
    \u0275\u0275text(5, "No questions are currently pending review.");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(6, "p", 24);
    \u0275\u0275text(7, "All questions have been reviewed and processed.");
    \u0275\u0275elementEnd()()();
  }
}
function QuestionReviewComponent_div_10_ng_container_20_tr_30_div_24_div_1_span_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 37);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const tag_r4 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", tag_r4, " ");
  }
}
function QuestionReviewComponent_div_10_ng_container_20_tr_30_div_24_div_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 69)(1, "p", 70);
    \u0275\u0275text(2, "Tags");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "div", 71);
    \u0275\u0275template(4, QuestionReviewComponent_div_10_ng_container_20_tr_30_div_24_div_1_span_4_Template, 2, 1, "span", 72);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const q_r3 = \u0275\u0275nextContext(3).$implicit;
    \u0275\u0275advance(4);
    \u0275\u0275property("ngForOf", q_r3.tags);
  }
}
function QuestionReviewComponent_div_10_ng_container_20_tr_30_div_24_div_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 73)(1, "p", 74);
    \u0275\u0275text(2, "Recommended Time");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "p", 75);
    \u0275\u0275text(4);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const q_r3 = \u0275\u0275nextContext(3).$implicit;
    \u0275\u0275advance(4);
    \u0275\u0275textInterpolate1("", q_r3.recommendedTimeAllotment, " minutes");
  }
}
function QuestionReviewComponent_div_10_ng_container_20_tr_30_div_24_div_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 76)(1, "p", 77);
    \u0275\u0275text(2, "Internal Notes");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "p", 78);
    \u0275\u0275text(4);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const q_r3 = \u0275\u0275nextContext(3).$implicit;
    \u0275\u0275advance(4);
    \u0275\u0275textInterpolate(q_r3.internalNotes);
  }
}
function QuestionReviewComponent_div_10_ng_container_20_tr_30_div_24_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 65);
    \u0275\u0275template(1, QuestionReviewComponent_div_10_ng_container_20_tr_30_div_24_div_1_Template, 5, 1, "div", 66)(2, QuestionReviewComponent_div_10_ng_container_20_tr_30_div_24_div_2_Template, 5, 1, "div", 67)(3, QuestionReviewComponent_div_10_ng_container_20_tr_30_div_24_div_3_Template, 5, 1, "div", 68);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const q_r3 = \u0275\u0275nextContext(2).$implicit;
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", q_r3.tags && q_r3.tags.length > 0);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", q_r3.recommendedTimeAllotment);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", q_r3.internalNotes);
  }
}
function QuestionReviewComponent_div_10_ng_container_20_tr_30_div_25_div_9_div_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 92);
    \u0275\u0275element(1, "img", 93);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const img_r5 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275property("src", img_r5, \u0275\u0275sanitizeUrl);
  }
}
function QuestionReviewComponent_div_10_ng_container_20_tr_30_div_25_div_9_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 69)(1, "p", 89);
    \u0275\u0275text(2, "Question Images");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "div", 90);
    \u0275\u0275template(4, QuestionReviewComponent_div_10_ng_container_20_tr_30_div_25_div_9_div_4_Template, 2, 1, "div", 91);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const translation_r6 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275advance(4);
    \u0275\u0275property("ngForOf", translation_r6.images);
  }
}
function QuestionReviewComponent_div_10_ng_container_20_tr_30_div_25_div_14_span_5_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 99);
    \u0275\u0275element(1, "i", 47);
    \u0275\u0275text(2, " Correct Answer ");
    \u0275\u0275elementEnd();
  }
}
function QuestionReviewComponent_div_10_ng_container_20_tr_30_div_25_div_14_div_6_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 100);
    \u0275\u0275element(1, "img", 101);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const option_r7 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275advance();
    \u0275\u0275property("src", option_r7.img, \u0275\u0275sanitizeUrl);
  }
}
function QuestionReviewComponent_div_10_ng_container_20_tr_30_div_25_div_14_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 94)(1, "span", 95);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "div", 96);
    \u0275\u0275element(4, "div", 84);
    \u0275\u0275template(5, QuestionReviewComponent_div_10_ng_container_20_tr_30_div_25_div_14_span_5_Template, 3, 0, "span", 97)(6, QuestionReviewComponent_div_10_ng_container_20_tr_30_div_25_div_14_div_6_Template, 2, 1, "div", 98);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const option_r7 = ctx.$implicit;
    const oi_r8 = ctx.index;
    const ctx_r0 = \u0275\u0275nextContext(5);
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction2(6, _c12, option_r7.isCorrect, !option_r7.isCorrect));
    \u0275\u0275advance();
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction2(9, _c2, option_r7.isCorrect, !option_r7.isCorrect));
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.String.fromCharCode(65 + oi_r8), " ");
    \u0275\u0275advance(2);
    \u0275\u0275property("innerHTML", option_r7.text, \u0275\u0275sanitizeHtml);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", option_r7.isCorrect);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", option_r7.img);
  }
}
function QuestionReviewComponent_div_10_ng_container_20_tr_30_div_25_div_15_div_4_div_6_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "div", 84);
  }
  if (rf & 2) {
    const expl_r9 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275property("innerHTML", expl_r9.content, \u0275\u0275sanitizeHtml);
  }
}
function QuestionReviewComponent_div_10_ng_container_20_tr_30_div_25_div_15_div_4_a_7_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "a", 112);
    \u0275\u0275element(1, "i", 113);
    \u0275\u0275text(2, " View Video ");
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const expl_r9 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275property("href", expl_r9.content, \u0275\u0275sanitizeUrl);
  }
}
function QuestionReviewComponent_div_10_ng_container_20_tr_30_div_25_div_15_div_4_a_8_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "a", 112);
    \u0275\u0275element(1, "i", 114);
    \u0275\u0275text(2, " View PDF ");
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const expl_r9 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275property("href", expl_r9.content, \u0275\u0275sanitizeUrl);
  }
}
function QuestionReviewComponent_div_10_ng_container_20_tr_30_div_25_div_15_div_4_img_9_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "img", 115);
  }
  if (rf & 2) {
    const expl_r9 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275property("src", expl_r9.content, \u0275\u0275sanitizeUrl);
  }
}
function QuestionReviewComponent_div_10_ng_container_20_tr_30_div_25_div_15_div_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 105)(1, "p", 106);
    \u0275\u0275text(2);
    \u0275\u0275elementStart(3, "span", 107);
    \u0275\u0275text(4);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(5, "div", 108);
    \u0275\u0275template(6, QuestionReviewComponent_div_10_ng_container_20_tr_30_div_25_div_15_div_4_div_6_Template, 1, 1, "div", 109)(7, QuestionReviewComponent_div_10_ng_container_20_tr_30_div_25_div_15_div_4_a_7_Template, 3, 1, "a", 110)(8, QuestionReviewComponent_div_10_ng_container_20_tr_30_div_25_div_15_div_4_a_8_Template, 3, 1, "a", 110)(9, QuestionReviewComponent_div_10_ng_container_20_tr_30_div_25_div_15_div_4_img_9_Template, 1, 1, "img", 111);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const expl_r9 = ctx.$implicit;
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", expl_r9.label || "General", " ");
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", expl_r9.type, " ");
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitch", expl_r9.type);
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "text");
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "video");
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "pdf");
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "image");
  }
}
function QuestionReviewComponent_div_10_ng_container_20_tr_30_div_25_div_15_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 102)(1, "p", 103);
    \u0275\u0275text(2, "Explanations");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "div", 86);
    \u0275\u0275template(4, QuestionReviewComponent_div_10_ng_container_20_tr_30_div_25_div_15_div_4_Template, 10, 7, "div", 104);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const translation_r6 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275advance(4);
    \u0275\u0275property("ngForOf", translation_r6.explanations);
  }
}
function QuestionReviewComponent_div_10_ng_container_20_tr_30_div_25_hr_16_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "hr", 116);
  }
}
function QuestionReviewComponent_div_10_ng_container_20_tr_30_div_25_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 79)(1, "div", 80)(2, "h6", 81);
    \u0275\u0275text(3);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(4, "div", 82)(5, "div", 59)(6, "p", 83);
    \u0275\u0275text(7, "Question Text");
    \u0275\u0275elementEnd();
    \u0275\u0275element(8, "div", 84);
    \u0275\u0275elementEnd();
    \u0275\u0275template(9, QuestionReviewComponent_div_10_ng_container_20_tr_30_div_25_div_9_Template, 5, 1, "div", 66);
    \u0275\u0275elementStart(10, "div", 73)(11, "p", 85);
    \u0275\u0275text(12, "Answer Options");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(13, "div", 86);
    \u0275\u0275template(14, QuestionReviewComponent_div_10_ng_container_20_tr_30_div_25_div_14_Template, 7, 12, "div", 87);
    \u0275\u0275elementEnd()();
    \u0275\u0275template(15, QuestionReviewComponent_div_10_ng_container_20_tr_30_div_25_div_15_Template, 5, 1, "div", 64);
    \u0275\u0275elementEnd();
    \u0275\u0275template(16, QuestionReviewComponent_div_10_ng_container_20_tr_30_div_25_hr_16_Template, 1, 0, "hr", 88);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const translation_r6 = ctx.$implicit;
    const ti_r10 = ctx.index;
    const q_r3 = \u0275\u0275nextContext(2).$implicit;
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate1("Translation (", translation_r6.lang, ")");
    \u0275\u0275advance(5);
    \u0275\u0275property("innerHTML", translation_r6.questionText, \u0275\u0275sanitizeHtml);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", translation_r6.images && translation_r6.images.length > 0);
    \u0275\u0275advance(5);
    \u0275\u0275property("ngForOf", translation_r6.options);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", translation_r6.explanations && translation_r6.explanations.length > 0);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ti_r10 < q_r3.translations.length - 1);
  }
}
function QuestionReviewComponent_div_10_ng_container_20_tr_30_div_26_div_4_div_6_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "div", 84);
  }
  if (rf & 2) {
    const expl_r11 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275property("innerHTML", expl_r11.content, \u0275\u0275sanitizeHtml);
  }
}
function QuestionReviewComponent_div_10_ng_container_20_tr_30_div_26_div_4_a_7_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "a", 112);
    \u0275\u0275element(1, "i", 113);
    \u0275\u0275text(2, " View Video ");
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const expl_r11 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275property("href", expl_r11.content, \u0275\u0275sanitizeUrl);
  }
}
function QuestionReviewComponent_div_10_ng_container_20_tr_30_div_26_div_4_a_8_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "a", 112);
    \u0275\u0275element(1, "i", 114);
    \u0275\u0275text(2, " View PDF ");
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const expl_r11 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275property("href", expl_r11.content, \u0275\u0275sanitizeUrl);
  }
}
function QuestionReviewComponent_div_10_ng_container_20_tr_30_div_26_div_4_img_9_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "img", 115);
  }
  if (rf & 2) {
    const expl_r11 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275property("src", expl_r11.content, \u0275\u0275sanitizeUrl);
  }
}
function QuestionReviewComponent_div_10_ng_container_20_tr_30_div_26_div_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 105)(1, "p", 106);
    \u0275\u0275text(2);
    \u0275\u0275elementStart(3, "span", 107);
    \u0275\u0275text(4);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(5, "div", 108);
    \u0275\u0275template(6, QuestionReviewComponent_div_10_ng_container_20_tr_30_div_26_div_4_div_6_Template, 1, 1, "div", 109)(7, QuestionReviewComponent_div_10_ng_container_20_tr_30_div_26_div_4_a_7_Template, 3, 1, "a", 110)(8, QuestionReviewComponent_div_10_ng_container_20_tr_30_div_26_div_4_a_8_Template, 3, 1, "a", 110)(9, QuestionReviewComponent_div_10_ng_container_20_tr_30_div_26_div_4_img_9_Template, 1, 1, "img", 111);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const expl_r11 = ctx.$implicit;
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", expl_r11.label || "General", " ");
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", expl_r11.type, " ");
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitch", expl_r11.type);
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "text");
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "video");
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "pdf");
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "image");
  }
}
function QuestionReviewComponent_div_10_ng_container_20_tr_30_div_26_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 102)(1, "h6", 117);
    \u0275\u0275text(2, "General Explanations (No specific translation)");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "div", 86);
    \u0275\u0275template(4, QuestionReviewComponent_div_10_ng_container_20_tr_30_div_26_div_4_Template, 10, 7, "div", 104);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const q_r3 = \u0275\u0275nextContext(2).$implicit;
    \u0275\u0275advance(4);
    \u0275\u0275property("ngForOf", q_r3.explanations);
  }
}
function QuestionReviewComponent_div_10_ng_container_20_tr_30_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "tr", 51)(1, "td", 52)(2, "div", 53)(3, "div", 54)(4, "h5", 55);
    \u0275\u0275element(5, "i", 56);
    \u0275\u0275text(6, " Full Question Details ");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(7, "div", 57)(8, "div", 58)(9, "div", 59)(10, "p", 60);
    \u0275\u0275text(11, "Status");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(12, "p", 61);
    \u0275\u0275text(13);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(14, "div", 59)(15, "p", 60);
    \u0275\u0275text(16, "Difficulty");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(17, "p", 61);
    \u0275\u0275text(18);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(19, "div", 59)(20, "p", 60);
    \u0275\u0275text(21, "Type");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(22, "p", 61);
    \u0275\u0275text(23);
    \u0275\u0275elementEnd()()();
    \u0275\u0275template(24, QuestionReviewComponent_div_10_ng_container_20_tr_30_div_24_Template, 4, 3, "div", 62)(25, QuestionReviewComponent_div_10_ng_container_20_tr_30_div_25_Template, 17, 6, "div", 63)(26, QuestionReviewComponent_div_10_ng_container_20_tr_30_div_26_Template, 5, 1, "div", 64);
    \u0275\u0275elementEnd()()()();
  }
  if (rf & 2) {
    const q_r3 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275advance(13);
    \u0275\u0275textInterpolate(q_r3.status);
    \u0275\u0275advance(5);
    \u0275\u0275textInterpolate(q_r3.difficulty);
    \u0275\u0275advance(5);
    \u0275\u0275textInterpolate(q_r3.type || "N/A");
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", q_r3.tags || q_r3.recommendedTimeAllotment || q_r3.internalNotes);
    \u0275\u0275advance();
    \u0275\u0275property("ngForOf", q_r3.translations);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", q_r3.explanations && q_r3.explanations.length > 0 && q_r3.translations.length === 0);
  }
}
function QuestionReviewComponent_div_10_ng_container_20_Template(rf, ctx) {
  if (rf & 1) {
    const _r2 = \u0275\u0275getCurrentView();
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "tr", 34)(2, "td", 35);
    \u0275\u0275text(3);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(4, "td", 36)(5, "span", 37);
    \u0275\u0275text(6);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(7, "td", 36)(8, "span", 38);
    \u0275\u0275text(9);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(10, "td", 36)(11, "span", 39);
    \u0275\u0275text(12);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(13, "td", 36)(14, "span", 40);
    \u0275\u0275text(15);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(16, "td", 36)(17, "span", 41);
    \u0275\u0275text(18);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(19, "td", 42)(20, "div", 43)(21, "button", 44);
    \u0275\u0275listener("click", function QuestionReviewComponent_div_10_ng_container_20_Template_button_click_21_listener() {
      const q_r3 = \u0275\u0275restoreView(_r2).$implicit;
      const ctx_r0 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r0.toggleDetails(q_r3));
    });
    \u0275\u0275element(22, "i", 45);
    \u0275\u0275text(23);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(24, "button", 46);
    \u0275\u0275listener("click", function QuestionReviewComponent_div_10_ng_container_20_Template_button_click_24_listener() {
      const q_r3 = \u0275\u0275restoreView(_r2).$implicit;
      const ctx_r0 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r0.approveQuestion(ctx_r0.getQuestionId(q_r3)));
    });
    \u0275\u0275element(25, "i", 47);
    \u0275\u0275text(26, " Approve ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(27, "button", 48);
    \u0275\u0275listener("click", function QuestionReviewComponent_div_10_ng_container_20_Template_button_click_27_listener() {
      const q_r3 = \u0275\u0275restoreView(_r2).$implicit;
      const ctx_r0 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r0.rejectQuestion(ctx_r0.getQuestionId(q_r3)));
    });
    \u0275\u0275element(28, "i", 49);
    \u0275\u0275text(29, " Reject ");
    \u0275\u0275elementEnd()()()();
    \u0275\u0275template(30, QuestionReviewComponent_div_10_ng_container_20_tr_30_Template, 27, 6, "tr", 50);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const q_r3 = ctx.$implicit;
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate1(" ", ctx_r0.getQuestionText(q_r3, "en"), " ");
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate1(" ", ctx_r0.getHierarchyName(q_r3.branch), " ");
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate1(" ", ctx_r0.getHierarchyName(q_r3.subject), " ");
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate1(" ", ctx_r0.getHierarchyName(q_r3.topic), " ");
    \u0275\u0275advance(2);
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction4(18, _c06, q_r3.difficulty === "Hard", q_r3.difficulty === "Medium", q_r3.difficulty === "Easy", !q_r3.difficulty));
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", q_r3.difficulty || "N/A", " ");
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate1(" ", q_r3.type || "N/A", " ");
    \u0275\u0275advance(3);
    \u0275\u0275property("title", q_r3.expanded ? "Hide Details" : "View Details");
    \u0275\u0275advance();
    \u0275\u0275classProp("fas", true)("fa-eye", !q_r3.expanded)("fa-eye-slash", q_r3.expanded);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", q_r3.expanded ? "Hide" : "Details", " ");
    \u0275\u0275advance();
    \u0275\u0275property("disabled", !ctx_r0.getQuestionId(q_r3));
    \u0275\u0275advance(3);
    \u0275\u0275property("disabled", !ctx_r0.getQuestionId(q_r3));
    \u0275\u0275advance(3);
    \u0275\u0275property("ngIf", q_r3.expanded);
  }
}
function QuestionReviewComponent_div_10_nav_21_button_23_Template(rf, ctx) {
  if (rf & 1) {
    const _r13 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 134);
    \u0275\u0275listener("click", function QuestionReviewComponent_div_10_nav_21_button_23_Template_button_click_0_listener() {
      const i_r14 = \u0275\u0275restoreView(_r13).index;
      const ctx_r0 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r0.goToPage(i_r14 + 1));
    });
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const i_r14 = ctx.index;
    const ctx_r0 = \u0275\u0275nextContext(3);
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction2(2, _c4, ctx_r0.currentPage === i_r14 + 1, ctx_r0.currentPage !== i_r14 + 1));
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", i_r14 + 1, " ");
  }
}
function QuestionReviewComponent_div_10_nav_21_Template(rf, ctx) {
  if (rf & 1) {
    const _r12 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "nav", 118)(1, "div", 119)(2, "div", 120)(3, "button", 121);
    \u0275\u0275listener("click", function QuestionReviewComponent_div_10_nav_21_Template_button_click_3_listener() {
      \u0275\u0275restoreView(_r12);
      const ctx_r0 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r0.previousPage());
    });
    \u0275\u0275text(4, " Previous ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(5, "button", 122);
    \u0275\u0275listener("click", function QuestionReviewComponent_div_10_nav_21_Template_button_click_5_listener() {
      \u0275\u0275restoreView(_r12);
      const ctx_r0 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r0.nextPage());
    });
    \u0275\u0275text(6, " Next ");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(7, "div", 123)(8, "div")(9, "p", 124);
    \u0275\u0275text(10, " Showing page ");
    \u0275\u0275elementStart(11, "span", 125);
    \u0275\u0275text(12);
    \u0275\u0275elementEnd();
    \u0275\u0275text(13, " of ");
    \u0275\u0275elementStart(14, "span", 125);
    \u0275\u0275text(15);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(16, "div")(17, "nav", 126)(18, "button", 127);
    \u0275\u0275listener("click", function QuestionReviewComponent_div_10_nav_21_Template_button_click_18_listener() {
      \u0275\u0275restoreView(_r12);
      const ctx_r0 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r0.previousPage());
    });
    \u0275\u0275elementStart(19, "span", 128);
    \u0275\u0275text(20, "Previous");
    \u0275\u0275elementEnd();
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(21, "svg", 129);
    \u0275\u0275element(22, "path", 130);
    \u0275\u0275elementEnd()();
    \u0275\u0275template(23, QuestionReviewComponent_div_10_nav_21_button_23_Template, 2, 5, "button", 131);
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(24, "button", 132);
    \u0275\u0275listener("click", function QuestionReviewComponent_div_10_nav_21_Template_button_click_24_listener() {
      \u0275\u0275restoreView(_r12);
      const ctx_r0 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r0.nextPage());
    });
    \u0275\u0275elementStart(25, "span", 128);
    \u0275\u0275text(26, "Next");
    \u0275\u0275elementEnd();
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(27, "svg", 129);
    \u0275\u0275element(28, "path", 133);
    \u0275\u0275elementEnd()()()()()()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(3);
    \u0275\u0275classProp("disabled", ctx_r0.currentPage === 1);
    \u0275\u0275property("disabled", ctx_r0.currentPage === 1);
    \u0275\u0275advance(2);
    \u0275\u0275classProp("disabled", ctx_r0.currentPage === ctx_r0.totalPages);
    \u0275\u0275property("disabled", ctx_r0.currentPage === ctx_r0.totalPages);
    \u0275\u0275advance(7);
    \u0275\u0275textInterpolate(ctx_r0.currentPage);
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate(ctx_r0.totalPages);
    \u0275\u0275advance(3);
    \u0275\u0275property("disabled", ctx_r0.currentPage === 1);
    \u0275\u0275advance(5);
    \u0275\u0275property("ngForOf", \u0275\u0275pureFunction0(11, _c3).constructor(ctx_r0.totalPages));
    \u0275\u0275advance();
    \u0275\u0275property("disabled", ctx_r0.currentPage === ctx_r0.totalPages);
  }
}
function QuestionReviewComponent_div_10_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 25)(1, "div", 26)(2, "table", 27)(3, "thead", 28)(4, "tr")(5, "th", 29);
    \u0275\u0275text(6, " Question Text ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(7, "th", 29);
    \u0275\u0275text(8, " Branch ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(9, "th", 29);
    \u0275\u0275text(10, " Subject ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(11, "th", 29);
    \u0275\u0275text(12, " Topic ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(13, "th", 29);
    \u0275\u0275text(14, " Difficulty ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(15, "th", 29);
    \u0275\u0275text(16, " Type ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(17, "th", 30);
    \u0275\u0275text(18, " Actions ");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(19, "tbody", 31);
    \u0275\u0275template(20, QuestionReviewComponent_div_10_ng_container_20_Template, 31, 23, "ng-container", 32);
    \u0275\u0275elementEnd()()();
    \u0275\u0275template(21, QuestionReviewComponent_div_10_nav_21_Template, 29, 12, "nav", 33);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(20);
    \u0275\u0275property("ngForOf", ctx_r0.questions);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.totalPages > 1);
  }
}
var QuestionReviewComponent = class _QuestionReviewComponent {
  questionService = inject(QuestionService);
  // Make String available in template
  String = String;
  questions = [];
  isLoading = false;
  errorMessage = "";
  // Pagination properties
  currentPage = 1;
  itemsPerPage = 10;
  // Or any default you prefer
  totalItems = 0;
  ngOnInit() {
    this.loadPendingQuestions();
  }
  loadPendingQuestions() {
    this.isLoading = true;
    this.errorMessage = "";
    this.questionService.getQuestionsByStatus("Pending Review", this.currentPage, this.itemsPerPage).subscribe({
      next: (response) => {
        this.questions = response.questions.map((q) => {
          if (q._id && typeof q._id === "object" && q._id.$oid) {
            q._id = q._id.$oid;
          }
          ["branch", "subject", "topic", "subTopic"].forEach((key) => {
            if (q[key] && typeof q[key] === "object" && q[key]._id) {
              if (q[key].$oid) {
                q[key] = q[key].$oid;
              }
            }
          });
          return q;
        });
        this.totalItems = response.totalCount;
        this.isLoading = false;
      },
      error: (err) => {
        this.errorMessage = "Failed to load questions. Please try again later.";
        console.error("Error fetching pending questions:", err);
        this.isLoading = false;
      }
    });
  }
  approveQuestion(questionId) {
    this.updateQuestionStatus(questionId, "Published");
  }
  rejectQuestion(questionId) {
    this.updateQuestionStatus(questionId, "draft");
  }
  updateQuestionStatus(questionId, status) {
    this.isLoading = true;
    this.questionService.updateQuestionStatus(questionId, status).subscribe({
      next: () => {
        this.loadPendingQuestions();
      },
      error: (err) => {
        this.errorMessage = `Failed to update question status to ${status}.`;
        console.error(`Error updating question ${questionId} to ${status}:`, err);
        this.isLoading = false;
      }
    });
  }
  // Helper methods for template
  getQuestionText(question, lang = "en") {
    if (!question || !question.translations)
      return question.questionText || "N/A";
    const translation = question.translations.find((t) => t.lang === lang);
    return translation?.questionText || question.questionText || "N/A";
  }
  getHierarchyName(field) {
    if (typeof field === "object" && field !== null && "name" in field) {
      return field.name;
    }
    return "N/A";
  }
  getQuestionId(question) {
    if (typeof question._id === "string") {
      return question._id;
    } else if (question._id && typeof question._id === "object" && "$oid" in question._id) {
      return question._id.$oid;
    }
    console.warn("Question ID is not in expected format (string or {$oid: string}):", question._id);
    return "";
  }
  toggleDetails(question) {
    question.expanded = !question.expanded;
  }
  // Pagination methods
  goToPage(page) {
    if (page >= 1 && page <= this.totalPages) {
      this.currentPage = page;
      this.loadPendingQuestions();
    }
  }
  nextPage() {
    if (this.currentPage < this.totalPages) {
      this.currentPage++;
      this.loadPendingQuestions();
    }
  }
  previousPage() {
    if (this.currentPage > 1) {
      this.currentPage--;
      this.loadPendingQuestions();
    }
  }
  get totalPages() {
    return Math.ceil(this.totalItems / this.itemsPerPage);
  }
  static \u0275fac = function QuestionReviewComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _QuestionReviewComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _QuestionReviewComponent, selectors: [["app-question-review"]], decls: 11, vars: 4, consts: [[1, "min-h-screen", "bg-gradient-to-br", "from-indigo-50", "to-blue-100", "p-6"], [1, "max-w-7xl", "mx-auto"], [1, "bg-gradient-to-r", "from-purple-600", "to-blue-600", "rounded-t-2xl", "px-8", "py-6", "shadow-lg"], [1, "text-3xl", "font-bold", "text-white", "text-center"], [1, "bg-white", "rounded-b-2xl", "shadow-xl", "overflow-hidden"], [1, "p-8"], ["class", "text-center py-16", 4, "ngIf"], ["class", "bg-red-50 border border-red-200 rounded-lg p-4 mb-6", 4, "ngIf"], ["class", "overflow-hidden", 4, "ngIf"], [1, "text-center", "py-16"], [1, "inline-flex", "items-center", "space-x-2"], ["fill", "none", "viewBox", "0 0 24 24", 1, "animate-spin", "h-8", "w-8", "text-blue-600"], ["cx", "12", "cy", "12", "r", "10", "stroke", "currentColor", "stroke-width", "4", 1, "opacity-25"], ["fill", "currentColor", "d", "M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z", 1, "opacity-75"], [1, "text-lg", "text-gray-600"], [1, "bg-red-50", "border", "border-red-200", "rounded-lg", "p-4", "mb-6"], [1, "flex", "items-center"], ["fill", "currentColor", "viewBox", "0 0 20 20", 1, "w-6", "h-6", "text-red-500", "mr-3"], ["fill-rule", "evenodd", "d", "M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z", "clip-rule", "evenodd"], [1, "text-red-800", "font-medium"], [1, "bg-blue-50", "border", "border-blue-200", "rounded-lg", "p-8"], ["fill", "none", "stroke", "currentColor", "viewBox", "0 0 24 24", 1, "w-16", "h-16", "text-blue-400", "mx-auto", "mb-4"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"], [1, "text-blue-800", "text-lg", "font-medium"], [1, "text-blue-600", "mt-2"], [1, "overflow-hidden"], [1, "overflow-x-auto", "shadow-lg", "rounded-lg", "border", "border-gray-200"], [1, "min-w-full", "divide-y", "divide-gray-200"], [1, "bg-gradient-to-r", "from-gray-50", "to-gray-100"], [1, "px-6", "py-4", "text-left", "text-xs", "font-semibold", "text-gray-700", "uppercase", "tracking-wider", "border-b", "border-gray-200"], [1, "px-6", "py-4", "text-center", "text-xs", "font-semibold", "text-gray-700", "uppercase", "tracking-wider", "border-b", "border-gray-200"], [1, "bg-white", "divide-y", "divide-gray-200"], [4, "ngFor", "ngForOf"], ["aria-label", "Page navigation", "class", "mt-8", 4, "ngIf"], [1, "hover:bg-gray-50", "transition-colors", "duration-200"], [1, "px-6", "py-4", "text-sm", "text-gray-900", "max-w-xs", "truncate"], [1, "px-6", "py-4", "text-sm", "text-gray-600"], [1, "inline-flex", "items-center", "px-2.5", "py-0.5", "rounded-full", "text-xs", "font-medium", "bg-blue-100", "text-blue-800"], [1, "inline-flex", "items-center", "px-2.5", "py-0.5", "rounded-full", "text-xs", "font-medium", "bg-green-100", "text-green-800"], [1, "inline-flex", "items-center", "px-2.5", "py-0.5", "rounded-full", "text-xs", "font-medium", "bg-purple-100", "text-purple-800"], [1, "inline-flex", "items-center", "px-2.5", "py-0.5", "rounded-full", "text-xs", "font-medium", 3, "ngClass"], [1, "inline-flex", "items-center", "px-2.5", "py-0.5", "rounded-full", "text-xs", "font-medium", "bg-indigo-100", "text-indigo-800"], [1, "px-6", "py-4", "text-center"], [1, "flex", "items-center", "justify-center", "space-x-2"], [1, "inline-flex", "items-center", "px-3", "py-1.5", "border", "border-blue-300", "text-xs", "font-medium", "rounded-md", "text-blue-700", "bg-blue-50", "hover:bg-blue-100", "focus:outline-none", "focus:ring-2", "focus:ring-offset-2", "focus:ring-blue-500", "transition-colors", "duration-200", 3, "click", "title"], [1, "mr-1"], ["title", "Approve", 1, "inline-flex", "items-center", "px-3", "py-1.5", "border", "border-green-300", "text-xs", "font-medium", "rounded-md", "text-green-700", "bg-green-50", "hover:bg-green-100", "focus:outline-none", "focus:ring-2", "focus:ring-offset-2", "focus:ring-green-500", "transition-colors", "duration-200", "disabled:opacity-50", "disabled:cursor-not-allowed", 3, "click", "disabled"], [1, "fas", "fa-check", "mr-1"], ["title", "Reject", 1, "inline-flex", "items-center", "px-3", "py-1.5", "border", "border-red-300", "text-xs", "font-medium", "rounded-md", "text-red-700", "bg-red-50", "hover:bg-red-100", "focus:outline-none", "focus:ring-2", "focus:ring-offset-2", "focus:ring-red-500", "transition-colors", "duration-200", "disabled:opacity-50", "disabled:cursor-not-allowed", 3, "click", "disabled"], [1, "fas", "fa-times", "mr-1"], ["class", "bg-gradient-to-r from-blue-50 to-indigo-50", 4, "ngIf"], [1, "bg-gradient-to-r", "from-blue-50", "to-indigo-50"], ["colspan", "7", 1, "px-0", "py-0"], [1, "mx-6", "my-4", "bg-white", "rounded-lg", "shadow-md", "border", "border-blue-200", "overflow-hidden"], [1, "bg-gradient-to-r", "from-blue-600", "to-indigo-600", "px-6", "py-4"], [1, "text-xl", "font-bold", "text-white", "flex", "items-center"], [1, "fas", "fa-info-circle", "mr-3"], [1, "p-6", "space-y-6"], [1, "grid", "grid-cols-1", "md:grid-cols-3", "gap-4"], [1, "bg-gray-50", "rounded-lg", "p-4"], [1, "text-sm", "font-semibold", "text-gray-600", "uppercase", "tracking-wide"], [1, "text-lg", "font-medium", "text-gray-900", "mt-1"], ["class", "space-y-4", 4, "ngIf"], ["class", "border border-gray-200 rounded-lg overflow-hidden", 4, "ngFor", "ngForOf"], ["class", "bg-indigo-50 rounded-lg p-4", 4, "ngIf"], [1, "space-y-4"], ["class", "bg-blue-50 rounded-lg p-4", 4, "ngIf"], ["class", "bg-green-50 rounded-lg p-4", 4, "ngIf"], ["class", "bg-yellow-50 rounded-lg p-4", 4, "ngIf"], [1, "bg-blue-50", "rounded-lg", "p-4"], [1, "text-sm", "font-semibold", "text-blue-700", "uppercase", "tracking-wide", "mb-2"], [1, "flex", "flex-wrap", "gap-2"], ["class", "inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800", 4, "ngFor", "ngForOf"], [1, "bg-green-50", "rounded-lg", "p-4"], [1, "text-sm", "font-semibold", "text-green-700", "uppercase", "tracking-wide"], [1, "text-lg", "font-medium", "text-green-900", "mt-1"], [1, "bg-yellow-50", "rounded-lg", "p-4"], [1, "text-sm", "font-semibold", "text-yellow-700", "uppercase", "tracking-wide"], [1, "text-gray-800", "mt-1"], [1, "border", "border-gray-200", "rounded-lg", "overflow-hidden"], [1, "bg-gradient-to-r", "from-purple-100", "to-blue-100", "px-4", "py-3", "border-b"], [1, "text-lg", "font-semibold", "text-purple-800"], [1, "p-4", "space-y-4"], [1, "text-sm", "font-semibold", "text-gray-600", "uppercase", "tracking-wide", "mb-2"], [1, "prose", "max-w-none", 3, "innerHTML"], [1, "text-sm", "font-semibold", "text-green-700", "uppercase", "tracking-wide", "mb-3"], [1, "space-y-3"], ["class", "flex items-start space-x-3 p-3 rounded-lg border", 3, "ngClass", 4, "ngFor", "ngForOf"], ["class", "border-gray-200", 4, "ngIf"], [1, "text-sm", "font-semibold", "text-blue-700", "uppercase", "tracking-wide", "mb-3"], [1, "grid", "grid-cols-2", "md:grid-cols-4", "gap-4"], ["class", "relative", 4, "ngFor", "ngForOf"], [1, "relative"], ["alt", "Question Image", 1, "w-full", "h-32", "object-cover", "rounded-lg", "border-2", "border-blue-200", "shadow-sm", "hover:shadow-md", "transition-shadow", "duration-200", 3, "src"], [1, "flex", "items-start", "space-x-3", "p-3", "rounded-lg", "border", 3, "ngClass"], [1, "inline-flex", "items-center", "justify-center", "w-6", "h-6", "rounded-full", "text-sm", "font-semibold", 3, "ngClass"], [1, "flex-1"], ["class", "inline-flex items-center mt-2 px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-200 text-green-800", 4, "ngIf"], ["class", "mt-3", 4, "ngIf"], [1, "inline-flex", "items-center", "mt-2", "px-2.5", "py-0.5", "rounded-full", "text-xs", "font-medium", "bg-green-200", "text-green-800"], [1, "mt-3"], ["alt", "Option Image", 1, "max-w-24", "h-20", "object-cover", "rounded", "border", "border-gray-300", "shadow-sm", 3, "src"], [1, "bg-indigo-50", "rounded-lg", "p-4"], [1, "text-sm", "font-semibold", "text-indigo-700", "uppercase", "tracking-wide", "mb-3"], ["class", "bg-white rounded-lg border border-indigo-200 p-4", 4, "ngFor", "ngForOf"], [1, "bg-white", "rounded-lg", "border", "border-indigo-200", "p-4"], [1, "text-sm", "font-semibold", "text-indigo-600", "mb-2"], [1, "inline-flex", "items-center", "px-2", "py-0.5", "rounded", "text-xs", "font-medium", "bg-indigo-100", "text-indigo-800", "ml-2"], [3, "ngSwitch"], ["class", "prose max-w-none", 3, "innerHTML", 4, "ngSwitchCase"], ["target", "_blank", "class", "inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-red-600 hover:bg-red-700", 3, "href", 4, "ngSwitchCase"], ["alt", "Explanation Image", "class", "max-w-sm h-auto rounded-lg border border-gray-300 shadow-sm", 3, "src", 4, "ngSwitchCase"], ["target", "_blank", 1, "inline-flex", "items-center", "px-4", "py-2", "border", "border-transparent", "text-sm", "font-medium", "rounded-md", "text-white", "bg-red-600", "hover:bg-red-700", 3, "href"], [1, "fas", "fa-play", "mr-2"], [1, "fas", "fa-file-pdf", "mr-2"], ["alt", "Explanation Image", 1, "max-w-sm", "h-auto", "rounded-lg", "border", "border-gray-300", "shadow-sm", 3, "src"], [1, "border-gray-200"], [1, "text-lg", "font-semibold", "text-indigo-800", "mb-4"], ["aria-label", "Page navigation", 1, "mt-8"], [1, "flex", "items-center", "justify-between", "border-t", "border-gray-200", "bg-white", "px-4", "py-3", "sm:px-6", "rounded-lg", "shadow"], [1, "flex", "flex-1", "justify-between", "sm:hidden"], [1, "relative", "inline-flex", "items-center", "rounded-md", "border", "border-gray-300", "bg-white", "px-4", "py-2", "text-sm", "font-medium", "text-gray-700", "hover:bg-gray-50", "disabled:opacity-50", "disabled:cursor-not-allowed", 3, "click", "disabled"], [1, "relative", "ml-3", "inline-flex", "items-center", "rounded-md", "border", "border-gray-300", "bg-white", "px-4", "py-2", "text-sm", "font-medium", "text-gray-700", "hover:bg-gray-50", "disabled:opacity-50", "disabled:cursor-not-allowed", 3, "click", "disabled"], [1, "hidden", "sm:flex", "sm:flex-1", "sm:items-center", "sm:justify-between"], [1, "text-sm", "text-gray-700"], [1, "font-medium"], ["aria-label", "Pagination", 1, "isolate", "inline-flex", "-space-x-px", "rounded-md", "shadow-sm"], [1, "relative", "inline-flex", "items-center", "rounded-l-md", "px-2", "py-2", "text-gray-400", "ring-1", "ring-inset", "ring-gray-300", "hover:bg-gray-50", "focus:z-20", "focus:outline-offset-0", "disabled:opacity-50", "disabled:cursor-not-allowed", 3, "click", "disabled"], [1, "sr-only"], ["viewBox", "0 0 20 20", "fill", "currentColor", "aria-hidden", "true", 1, "h-5", "w-5"], ["fill-rule", "evenodd", "d", "M12.79 5.23a.75.75 0 01-.02 1.06L8.832 10l3.938 3.71a.75.75 0 11-1.04 1.08l-4.5-4.25a.75.75 0 010-1.08l4.5-4.25a.75.75 0 011.06.02z", "clip-rule", "evenodd"], ["class", "relative inline-flex items-center px-4 py-2 text-sm font-semibold ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0 transition-colors duration-200", 3, "ngClass", "click", 4, "ngFor", "ngForOf"], [1, "relative", "inline-flex", "items-center", "rounded-r-md", "px-2", "py-2", "text-gray-400", "ring-1", "ring-inset", "ring-gray-300", "hover:bg-gray-50", "focus:z-20", "focus:outline-offset-0", "disabled:opacity-50", "disabled:cursor-not-allowed", 3, "click", "disabled"], ["fill-rule", "evenodd", "d", "M7.21 14.77a.75.75 0 01.02-1.06L11.168 10 7.23 6.29a.75.75 0 111.04-1.08l4.5 4.25a.75.75 0 010 1.08l-4.5 4.25a.75.75 0 01-1.06-.02z", "clip-rule", "evenodd"], [1, "relative", "inline-flex", "items-center", "px-4", "py-2", "text-sm", "font-semibold", "ring-1", "ring-inset", "ring-gray-300", "hover:bg-gray-50", "focus:z-20", "focus:outline-offset-0", "transition-colors", "duration-200", 3, "click", "ngClass"]], template: function QuestionReviewComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1)(2, "div", 2)(3, "h2", 3);
      \u0275\u0275text(4, "Questions Pending Review");
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(5, "div", 4)(6, "div", 5);
      \u0275\u0275template(7, QuestionReviewComponent_div_7_Template, 7, 0, "div", 6)(8, QuestionReviewComponent_div_8_Template, 6, 1, "div", 7)(9, QuestionReviewComponent_div_9_Template, 8, 0, "div", 6)(10, QuestionReviewComponent_div_10_Template, 22, 2, "div", 8);
      \u0275\u0275elementEnd()()()();
    }
    if (rf & 2) {
      \u0275\u0275advance(7);
      \u0275\u0275property("ngIf", ctx.isLoading);
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", ctx.errorMessage);
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", !ctx.isLoading && !ctx.errorMessage && ctx.questions.length === 0);
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", !ctx.isLoading && !ctx.errorMessage && ctx.questions.length > 0);
    }
  }, dependencies: [CommonModule, NgClass, NgForOf, NgIf, NgSwitch, NgSwitchCase, RouterModule], styles: ["\n\n[_nghost-%COMP%]     .prose {\n  color: inherit;\n  max-width: none;\n}\n[_nghost-%COMP%]     .prose p {\n  margin-bottom: 0.5rem;\n}\n[_nghost-%COMP%]     .prose img {\n  max-width: 100%;\n  height: auto;\n  border-radius: 0.25rem;\n}\n[_nghost-%COMP%]     img {\n  object-fit: cover;\n}\n.question-details-row[_ngcontent-%COMP%] {\n  animation: _ngcontent-%COMP%_slideDown 0.3s ease-out;\n}\n@keyframes _ngcontent-%COMP%_slideDown {\n  from {\n    opacity: 0;\n    transform: translateY(-10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n/*# sourceMappingURL=question-review.component.css.map */"] });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(QuestionReviewComponent, [{
    type: Component,
    args: [{ selector: "app-question-review", standalone: true, imports: [CommonModule, RouterModule], template: `<div class="min-h-screen bg-gradient-to-br from-indigo-50 to-blue-100 p-6">\r
  <div class="max-w-7xl mx-auto">\r
    <!-- Header Section -->\r
    <div class="bg-gradient-to-r from-purple-600 to-blue-600 rounded-t-2xl px-8 py-6 shadow-lg">\r
      <h2 class="text-3xl font-bold text-white text-center">Questions Pending Review</h2>\r
    </div>\r
\r
    <!-- Content Card -->\r
    <div class="bg-white rounded-b-2xl shadow-xl overflow-hidden">\r
      <div class="p-8">\r
        <!-- Loading State -->\r
        <div *ngIf="isLoading" class="text-center py-16">\r
          <div class="inline-flex items-center space-x-2">\r
            <svg class="animate-spin h-8 w-8 text-blue-600" fill="none" viewBox="0 0 24 24">\r
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>\r
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>\r
            </svg>\r
            <span class="text-lg text-gray-600">Loading questions...</span>\r
          </div>\r
        </div>\r
\r
        <!-- Error State -->\r
        <div *ngIf="errorMessage" class="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">\r
          <div class="flex items-center">\r
            <svg class="w-6 h-6 text-red-500 mr-3" fill="currentColor" viewBox="0 0 20 20">\r
              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"/>\r
            </svg>\r
            <span class="text-red-800 font-medium">{{ errorMessage }}</span>\r
          </div>\r
        </div>\r
\r
        <!-- Empty State -->\r
        <div *ngIf="!isLoading && !errorMessage && questions.length === 0" class="text-center py-16">\r
          <div class="bg-blue-50 border border-blue-200 rounded-lg p-8">\r
            <svg class="w-16 h-16 text-blue-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>\r
            </svg>\r
            <p class="text-blue-800 text-lg font-medium">No questions are currently pending review.</p>\r
            <p class="text-blue-600 mt-2">All questions have been reviewed and processed.</p>\r
          </div>\r
        </div>\r
        <!-- Questions Table -->\r
        <div *ngIf="!isLoading && !errorMessage && questions.length > 0" class="overflow-hidden">\r
          <div class="overflow-x-auto shadow-lg rounded-lg border border-gray-200">\r
            <table class="min-w-full divide-y divide-gray-200">\r
              <thead class="bg-gradient-to-r from-gray-50 to-gray-100">\r
                <tr>\r
                  <th class="px-6 py-4 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider border-b border-gray-200">\r
                    Question Text\r
                  </th>\r
                  <th class="px-6 py-4 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider border-b border-gray-200">\r
                    Branch\r
                  </th>\r
                  <th class="px-6 py-4 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider border-b border-gray-200">\r
                    Subject\r
                  </th>\r
                  <th class="px-6 py-4 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider border-b border-gray-200">\r
                    Topic\r
                  </th>\r
                  <th class="px-6 py-4 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider border-b border-gray-200">\r
                    Difficulty\r
                  </th>\r
                  <th class="px-6 py-4 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider border-b border-gray-200">\r
                    Type\r
                  </th>\r
                  <th class="px-6 py-4 text-center text-xs font-semibold text-gray-700 uppercase tracking-wider border-b border-gray-200">\r
                    Actions\r
                  </th>\r
                </tr>\r
              </thead>\r
              <tbody class="bg-white divide-y divide-gray-200">\r
                <ng-container *ngFor="let q of questions; let i = index">\r
                  <tr class="hover:bg-gray-50 transition-colors duration-200">\r
                    <td class="px-6 py-4 text-sm text-gray-900 max-w-xs truncate">\r
                      {{ getQuestionText(q, 'en') }}\r
                    </td>\r
                    <td class="px-6 py-4 text-sm text-gray-600">\r
                      <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">\r
                        {{ getHierarchyName(q.branch) }}\r
                      </span>\r
                    </td>\r
                    <td class="px-6 py-4 text-sm text-gray-600">\r
                      <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">\r
                        {{ getHierarchyName(q.subject) }}\r
                      </span>\r
                    </td>\r
                    <td class="px-6 py-4 text-sm text-gray-600">\r
                      <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-purple-100 text-purple-800">\r
                        {{ getHierarchyName(q.topic) }}\r
                      </span>\r
                    </td>\r
                    <td class="px-6 py-4 text-sm text-gray-600">\r
                      <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium" \r
                            [ngClass]="{\r
                              'bg-red-100 text-red-800': q.difficulty === 'Hard',\r
                              'bg-yellow-100 text-yellow-800': q.difficulty === 'Medium',\r
                              'bg-green-100 text-green-800': q.difficulty === 'Easy',\r
                              'bg-gray-100 text-gray-800': !q.difficulty\r
                            }">\r
                        {{ q.difficulty || 'N/A' }}\r
                      </span>\r
                    </td>\r
                    <td class="px-6 py-4 text-sm text-gray-600">\r
                      <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-indigo-100 text-indigo-800">\r
                        {{ q.type || 'N/A' }}\r
                      </span>\r
                    </td>\r
                    <td class="px-6 py-4 text-center">\r
                      <div class="flex items-center justify-center space-x-2">\r
                        <button \r
                          class="inline-flex items-center px-3 py-1.5 border border-blue-300 text-xs font-medium rounded-md text-blue-700 bg-blue-50 hover:bg-blue-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200"\r
                          (click)="toggleDetails(q)" \r
                          [title]="q.expanded ? 'Hide Details' : 'View Details'">\r
                          <i [class.fas]="true" [class.fa-eye]="!q.expanded" [class.fa-eye-slash]="q.expanded" class="mr-1"></i>\r
                          {{ q.expanded ? 'Hide' : 'Details' }}\r
                        </button>\r
                        <button \r
                          class="inline-flex items-center px-3 py-1.5 border border-green-300 text-xs font-medium rounded-md text-green-700 bg-green-50 hover:bg-green-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition-colors duration-200 disabled:opacity-50 disabled:cursor-not-allowed"\r
                          (click)="approveQuestion(getQuestionId(q))" \r
                          [disabled]="!getQuestionId(q)" \r
                          title="Approve">\r
                          <i class="fas fa-check mr-1"></i>\r
                          Approve\r
                        </button>\r
                        <button \r
                          class="inline-flex items-center px-3 py-1.5 border border-red-300 text-xs font-medium rounded-md text-red-700 bg-red-50 hover:bg-red-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition-colors duration-200 disabled:opacity-50 disabled:cursor-not-allowed"\r
                          (click)="rejectQuestion(getQuestionId(q))" \r
                          [disabled]="!getQuestionId(q)" \r
                          title="Reject">\r
                          <i class="fas fa-times mr-1"></i>\r
                          Reject\r
                        </button>\r
                      </div>\r
                    </td>\r
                  </tr>                  <!-- Expanded Details Row -->\r
                  <tr *ngIf="q.expanded" class="bg-gradient-to-r from-blue-50 to-indigo-50">\r
                    <td colspan="7" class="px-0 py-0">\r
                      <div class="mx-6 my-4 bg-white rounded-lg shadow-md border border-blue-200 overflow-hidden">\r
                        <div class="bg-gradient-to-r from-blue-600 to-indigo-600 px-6 py-4">\r
                          <h5 class="text-xl font-bold text-white flex items-center">\r
                            <i class="fas fa-info-circle mr-3"></i>\r
                            Full Question Details\r
                          </h5>\r
                        </div>\r
                        \r
                        <div class="p-6 space-y-6">\r
                          <!-- Basic Info Section -->\r
                          <div class="grid grid-cols-1 md:grid-cols-3 gap-4">\r
                            <div class="bg-gray-50 rounded-lg p-4">\r
                              <p class="text-sm font-semibold text-gray-600 uppercase tracking-wide">Status</p>\r
                              <p class="text-lg font-medium text-gray-900 mt-1">{{ q.status }}</p>\r
                            </div>\r
                            <div class="bg-gray-50 rounded-lg p-4">\r
                              <p class="text-sm font-semibold text-gray-600 uppercase tracking-wide">Difficulty</p>\r
                              <p class="text-lg font-medium text-gray-900 mt-1">{{ q.difficulty }}</p>\r
                            </div>\r
                            <div class="bg-gray-50 rounded-lg p-4">\r
                              <p class="text-sm font-semibold text-gray-600 uppercase tracking-wide">Type</p>\r
                              <p class="text-lg font-medium text-gray-900 mt-1">{{ q.type || 'N/A' }}</p>\r
                            </div>\r
                          </div>\r
\r
                          <!-- Additional Info -->\r
                          <div class="space-y-4" *ngIf="q.tags || q.recommendedTimeAllotment || q.internalNotes">\r
                            <div *ngIf="q.tags && q.tags.length > 0" class="bg-blue-50 rounded-lg p-4">\r
                              <p class="text-sm font-semibold text-blue-700 uppercase tracking-wide mb-2">Tags</p>\r
                              <div class="flex flex-wrap gap-2">\r
                                <span *ngFor="let tag of q.tags" class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">\r
                                  {{ tag }}\r
                                </span>\r
                              </div>\r
                            </div>\r
                            <div *ngIf="q.recommendedTimeAllotment" class="bg-green-50 rounded-lg p-4">\r
                              <p class="text-sm font-semibold text-green-700 uppercase tracking-wide">Recommended Time</p>\r
                              <p class="text-lg font-medium text-green-900 mt-1">{{ q.recommendedTimeAllotment }} minutes</p>\r
                            </div>\r
                            <div *ngIf="q.internalNotes" class="bg-yellow-50 rounded-lg p-4">\r
                              <p class="text-sm font-semibold text-yellow-700 uppercase tracking-wide">Internal Notes</p>\r
                              <p class="text-gray-800 mt-1">{{ q.internalNotes }}</p>\r
                            </div>\r
                          </div>\r
\r
                          <!-- Translations Section -->\r
                          <div *ngFor="let translation of q.translations; let ti = index" class="border border-gray-200 rounded-lg overflow-hidden">\r
                            <div class="bg-gradient-to-r from-purple-100 to-blue-100 px-4 py-3 border-b">\r
                              <h6 class="text-lg font-semibold text-purple-800">Translation ({{ translation.lang }})</h6>\r
                            </div>\r
                            \r
                            <div class="p-4 space-y-4">\r
                              <!-- Question Text -->\r
                              <div class="bg-gray-50 rounded-lg p-4">\r
                                <p class="text-sm font-semibold text-gray-600 uppercase tracking-wide mb-2">Question Text</p>\r
                                <div class="prose max-w-none" [innerHTML]="translation.questionText"></div>\r
                              </div>\r
\r
                              <!-- Question Images -->\r
                              <div *ngIf="translation.images && translation.images.length > 0" class="bg-blue-50 rounded-lg p-4">\r
                                <p class="text-sm font-semibold text-blue-700 uppercase tracking-wide mb-3">Question Images</p>\r
                                <div class="grid grid-cols-2 md:grid-cols-4 gap-4">\r
                                  <div *ngFor="let img of translation.images" class="relative">\r
                                    <img [src]="img" alt="Question Image" \r
                                         class="w-full h-32 object-cover rounded-lg border-2 border-blue-200 shadow-sm hover:shadow-md transition-shadow duration-200">\r
                                  </div>\r
                                </div>\r
                              </div>\r
\r
                              <!-- Options -->\r
                              <div class="bg-green-50 rounded-lg p-4">\r
                                <p class="text-sm font-semibold text-green-700 uppercase tracking-wide mb-3">Answer Options</p>\r
                                <div class="space-y-3">\r
                                  <div *ngFor="let option of translation.options; let oi = index" \r
                                       class="flex items-start space-x-3 p-3 rounded-lg border"\r
                                       [ngClass]="{\r
                                         'bg-green-100 border-green-300': option.isCorrect,\r
                                         'bg-white border-gray-200': !option.isCorrect\r
                                       }">\r
                                    <span class="inline-flex items-center justify-center w-6 h-6 rounded-full text-sm font-semibold"\r
                                          [ngClass]="{\r
                                            'bg-green-600 text-white': option.isCorrect,\r
                                            'bg-gray-400 text-white': !option.isCorrect\r
                                          }">\r
                                      {{ String.fromCharCode(65 + oi) }}\r
                                    </span>\r
                                    <div class="flex-1">\r
                                      <div class="prose max-w-none" [innerHTML]="option.text"></div>\r
                                      <span *ngIf="option.isCorrect" class="inline-flex items-center mt-2 px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-200 text-green-800">\r
                                        <i class="fas fa-check mr-1"></i>\r
                                        Correct Answer\r
                                      </span>\r
                                      <div *ngIf="option.img" class="mt-3">\r
                                        <img [src]="option.img" alt="Option Image" \r
                                             class="max-w-24 h-20 object-cover rounded border border-gray-300 shadow-sm">\r
                                      </div>\r
                                    </div>\r
                                  </div>\r
                                </div>\r
                              </div>\r
\r
                              <!-- Explanations -->\r
                              <div *ngIf="translation.explanations && translation.explanations.length > 0" class="bg-indigo-50 rounded-lg p-4">\r
                                <p class="text-sm font-semibold text-indigo-700 uppercase tracking-wide mb-3">Explanations</p>\r
                                <div class="space-y-3">\r
                                  <div *ngFor="let expl of translation.explanations" class="bg-white rounded-lg border border-indigo-200 p-4">\r
                                    <p class="text-sm font-semibold text-indigo-600 mb-2">\r
                                      {{ expl.label || 'General' }} \r
                                      <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-indigo-100 text-indigo-800 ml-2">\r
                                        {{ expl.type }}\r
                                      </span>\r
                                    </p>\r
                                    <div [ngSwitch]="expl.type">\r
                                      <div *ngSwitchCase="'text'" class="prose max-w-none" [innerHTML]="expl.content"></div>\r
                                      <a *ngSwitchCase="'video'" [href]="expl.content" target="_blank" \r
                                         class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-red-600 hover:bg-red-700">\r
                                        <i class="fas fa-play mr-2"></i>\r
                                        View Video\r
                                      </a>\r
                                      <a *ngSwitchCase="'pdf'" [href]="expl.content" target="_blank"\r
                                         class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-red-600 hover:bg-red-700">\r
                                        <i class="fas fa-file-pdf mr-2"></i>\r
                                        View PDF\r
                                      </a>\r
                                      <img *ngSwitchCase="'image'" [src]="expl.content" alt="Explanation Image" \r
                                           class="max-w-sm h-auto rounded-lg border border-gray-300 shadow-sm">\r
                                    </div>\r
                                  </div>\r
                                </div>\r
                              </div>\r
                            </div>\r
                            \r
                            <hr *ngIf="ti < q.translations.length - 1" class="border-gray-200">\r
                          </div>\r
\r
                          <!-- General Explanations (fallback) -->\r
                          <div *ngIf="q.explanations && q.explanations.length > 0 && q.translations.length === 0" class="bg-indigo-50 rounded-lg p-4">\r
                            <h6 class="text-lg font-semibold text-indigo-800 mb-4">General Explanations (No specific translation)</h6>\r
                            <div class="space-y-3">\r
                              <div *ngFor="let expl of q.explanations" class="bg-white rounded-lg border border-indigo-200 p-4">\r
                                <p class="text-sm font-semibold text-indigo-600 mb-2">\r
                                  {{ expl.label || 'General' }} \r
                                  <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-indigo-100 text-indigo-800 ml-2">\r
                                    {{ expl.type }}\r
                                  </span>\r
                                </p>\r
                                <div [ngSwitch]="expl.type">\r
                                  <div *ngSwitchCase="'text'" class="prose max-w-none" [innerHTML]="expl.content"></div>\r
                                  <a *ngSwitchCase="'video'" [href]="expl.content" target="_blank"\r
                                     class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-red-600 hover:bg-red-700">\r
                                    <i class="fas fa-play mr-2"></i>\r
                                    View Video\r
                                  </a>\r
                                  <a *ngSwitchCase="'pdf'" [href]="expl.content" target="_blank"\r
                                     class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-red-600 hover:bg-red-700">\r
                                    <i class="fas fa-file-pdf mr-2"></i>\r
                                    View PDF\r
                                  </a>\r
                                  <img *ngSwitchCase="'image'" [src]="expl.content" alt="Explanation Image" \r
                                       class="max-w-sm h-auto rounded-lg border border-gray-300 shadow-sm">\r
                                </div>\r
                              </div>\r
                            </div>\r
                          </div>\r
                        </div>\r
                      </div>\r
                    </td>\r
                  </tr>\r
                </ng-container>\r
              </tbody>\r
            </table>\r
          </div>          <!-- Pagination Controls -->\r
          <nav *ngIf="totalPages > 1" aria-label="Page navigation" class="mt-8">\r
            <div class="flex items-center justify-between border-t border-gray-200 bg-white px-4 py-3 sm:px-6 rounded-lg shadow">\r
              <div class="flex flex-1 justify-between sm:hidden">\r
                <button \r
                  class="relative inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"\r
                  [class.disabled]="currentPage === 1"\r
                  [disabled]="currentPage === 1"\r
                  (click)="previousPage()">\r
                  Previous\r
                </button>\r
                <button \r
                  class="relative ml-3 inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"\r
                  [class.disabled]="currentPage === totalPages"\r
                  [disabled]="currentPage === totalPages"\r
                  (click)="nextPage()">\r
                  Next\r
                </button>\r
              </div>\r
              <div class="hidden sm:flex sm:flex-1 sm:items-center sm:justify-between">\r
                <div>\r
                  <p class="text-sm text-gray-700">\r
                    Showing page <span class="font-medium">{{ currentPage }}</span> of <span class="font-medium">{{ totalPages }}</span>\r
                  </p>\r
                </div>\r
                <div>\r
                  <nav class="isolate inline-flex -space-x-px rounded-md shadow-sm" aria-label="Pagination">\r
                    <button \r
                      class="relative inline-flex items-center rounded-l-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0 disabled:opacity-50 disabled:cursor-not-allowed"\r
                      [disabled]="currentPage === 1"\r
                      (click)="previousPage()">\r
                      <span class="sr-only">Previous</span>\r
                      <svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">\r
                        <path fill-rule="evenodd" d="M12.79 5.23a.75.75 0 01-.02 1.06L8.832 10l3.938 3.71a.75.75 0 11-1.04 1.08l-4.5-4.25a.75.75 0 010-1.08l4.5-4.25a.75.75 0 011.06.02z" clip-rule="evenodd" />\r
                      </svg>\r
                    </button>\r
                    \r
                    <button \r
                      *ngFor="let pageNum of [].constructor(totalPages); let i = index"\r
                      class="relative inline-flex items-center px-4 py-2 text-sm font-semibold ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0 transition-colors duration-200"\r
                      [ngClass]="{\r
                        'z-10 bg-indigo-600 text-white focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600': currentPage === i + 1,\r
                        'text-gray-900 hover:bg-gray-50': currentPage !== i + 1\r
                      }"\r
                      (click)="goToPage(i + 1)">\r
                      {{ i + 1 }}\r
                    </button>\r
                    \r
                    <button \r
                      class="relative inline-flex items-center rounded-r-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0 disabled:opacity-50 disabled:cursor-not-allowed"\r
                      [disabled]="currentPage === totalPages"\r
                      (click)="nextPage()">\r
                      <span class="sr-only">Next</span>\r
                      <svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">\r
                        <path fill-rule="evenodd" d="M7.21 14.77a.75.75 0 01.02-1.06L11.168 10 7.23 6.29a.75.75 0 111.04-1.08l4.5 4.25a.75.75 0 010 1.08l-4.5 4.25a.75.75 0 01-1.06-.02z" clip-rule="evenodd" />\r
                      </svg>\r
                    </button>\r
                  </nav>\r
                </div>\r
              </div>\r
            </div>\r
          </nav>\r
        </div>\r
      </div>\r
    </div>\r
  </div>\r
</div>\r
`, styles: ["/* src/app/components/question-review/question-review.component.scss */\n:host ::ng-deep .prose {\n  color: inherit;\n  max-width: none;\n}\n:host ::ng-deep .prose p {\n  margin-bottom: 0.5rem;\n}\n:host ::ng-deep .prose img {\n  max-width: 100%;\n  height: auto;\n  border-radius: 0.25rem;\n}\n:host ::ng-deep img {\n  object-fit: cover;\n}\n.question-details-row {\n  animation: slideDown 0.3s ease-out;\n}\n@keyframes slideDown {\n  from {\n    opacity: 0;\n    transform: translateY(-10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n/*# sourceMappingURL=question-review.component.css.map */\n"] }]
  }], null, null);
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(QuestionReviewComponent, { className: "QuestionReviewComponent", filePath: "src/app/components/question-review/question-review.component.ts", lineNumber: 14 });
})();

// src/app/components/add-branch/add-branch.component.ts
function AddBranchComponent_div_16_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 22)(1, "div", 23);
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(2, "svg", 24);
    \u0275\u0275element(3, "path", 25);
    \u0275\u0275elementEnd();
    \u0275\u0275text(4, " Branch name is required. ");
    \u0275\u0275elementEnd()();
  }
}
function AddBranchComponent__svg_svg_22_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(0, "svg", 26);
    \u0275\u0275element(1, "circle", 27)(2, "path", 28);
    \u0275\u0275elementEnd();
  }
}
function AddBranchComponent__svg_svg_23_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(0, "svg", 20);
    \u0275\u0275element(1, "path", 29);
    \u0275\u0275elementEnd();
  }
}
var AddBranchComponent = class _AddBranchComponent {
  branchService;
  router;
  // Holds the new branch name entered by admin
  branchName = "";
  // Manages UI loading state
  isLoading = false;
  constructor(branchService, router) {
    this.branchService = branchService;
    this.router = router;
  }
  // Called on form submission
  addBranch(form) {
    if (form.invalid) {
      form.control.markAllAsTouched();
      return;
    }
    this.isLoading = true;
    this.branchService.createBranch(this.branchName).subscribe({
      next: () => {
        alert("Branch created successfully!");
        this.router.navigate(["/questions"]);
      },
      error: (error) => {
        console.error("Error creating branch:", error);
        alert("Error creating branch. Please try again.");
        this.isLoading = false;
      }
    });
  }
  // Allows the admin to cancel and return to question list
  cancel() {
    this.router.navigate(["/questions"]);
  }
  static \u0275fac = function AddBranchComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AddBranchComponent)(\u0275\u0275directiveInject(BranchService), \u0275\u0275directiveInject(Router));
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _AddBranchComponent, selectors: [["app-add-branch"]], decls: 30, vars: 6, consts: [["branchForm", "ngForm"], [1, "min-h-screen", "bg-gray-50", "py-6", "px-4", "sm:px-6", "lg:px-8"], [1, "max-w-2xl", "mx-auto"], [1, "mb-8"], [1, "text-3xl", "font-bold", "text-gray-900", "mb-2"], [1, "text-gray-600"], [1, "bg-white", "rounded-xl", "shadow-sm", "border", "border-gray-200"], [1, "p-8", "space-y-6", 3, "ngSubmit"], [1, "form-group"], ["for", "branchName", 1, "block", "text-sm", "font-medium", "text-gray-700", "mb-2"], [1, "text-red-500"], ["type", "text", "id", "branchName", "name", "branchName", "required", "", "placeholder", "Enter Branch Name (e.g., Engineering, Medical, Commerce)", 1, "form-input", "w-full", "px-4", "py-3", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-primary-500", "focus:border-primary-500", "transition-colors", 3, "ngModelChange", "ngModel"], ["class", "mt-2 text-sm text-red-600", 4, "ngIf"], [1, "mt-1", "text-sm", "text-gray-500"], [1, "flex", "flex-col", "sm:flex-row", "gap-3", "pt-6", "border-t", "border-gray-200"], ["type", "submit", 1, "btn-primary", "flex-1", "px-6", "py-3", "bg-gradient-to-r", "from-primary-600", "to-primary-700", "text-white", "font-semibold", "rounded-lg", "hover:from-primary-700", "hover:to-primary-800", "focus:ring-4", "focus:ring-primary-200", "disabled:opacity-50", "disabled:cursor-not-allowed", "transition-all", "duration-200", "transform", "hover:scale-105", 3, "disabled"], [1, "flex", "items-center", "justify-center"], ["class", "animate-spin -ml-1 mr-2 h-4 w-4 text-white", "fill", "none", "viewBox", "0 0 24 24", 4, "ngIf"], ["class", "w-5 h-5 mr-2", "fill", "none", "stroke", "currentColor", "viewBox", "0 0 24 24", 4, "ngIf"], ["type", "button", 1, "btn-secondary", "flex-1", "px-6", "py-3", "bg-gray-100", "text-gray-700", "font-semibold", "rounded-lg", "hover:bg-gray-200", "focus:ring-4", "focus:ring-gray-200", "transition-all", "duration-200", 3, "click"], ["fill", "none", "stroke", "currentColor", "viewBox", "0 0 24 24", 1, "w-5", "h-5", "mr-2"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M6 18L18 6M6 6l12 12"], [1, "mt-2", "text-sm", "text-red-600"], [1, "flex", "items-center"], ["fill", "none", "stroke", "currentColor", "viewBox", "0 0 24 24", 1, "w-4", "h-4", "mr-1"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16c-.77.833.192 2.5 1.732 2.5z"], ["fill", "none", "viewBox", "0 0 24 24", 1, "animate-spin", "-ml-1", "mr-2", "h-4", "w-4", "text-white"], ["cx", "12", "cy", "12", "r", "10", "stroke", "currentColor", "stroke-width", "4", 1, "opacity-25"], ["fill", "currentColor", "d", "M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z", 1, "opacity-75"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M5 13l4 4L19 7"]], template: function AddBranchComponent_Template(rf, ctx) {
    if (rf & 1) {
      const _r1 = \u0275\u0275getCurrentView();
      \u0275\u0275elementStart(0, "div", 1)(1, "div", 2)(2, "div", 3)(3, "h1", 4);
      \u0275\u0275text(4, "Add New Branch");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(5, "p", 5);
      \u0275\u0275text(6, "Create a new academic branch in the system");
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(7, "div", 6)(8, "form", 7, 0);
      \u0275\u0275listener("ngSubmit", function AddBranchComponent_Template_form_ngSubmit_8_listener() {
        \u0275\u0275restoreView(_r1);
        const branchForm_r2 = \u0275\u0275reference(9);
        return \u0275\u0275resetView(ctx.addBranch(branchForm_r2));
      });
      \u0275\u0275elementStart(10, "div", 8)(11, "label", 9);
      \u0275\u0275text(12, " Branch Name ");
      \u0275\u0275elementStart(13, "span", 10);
      \u0275\u0275text(14, "*");
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(15, "input", 11);
      \u0275\u0275twoWayListener("ngModelChange", function AddBranchComponent_Template_input_ngModelChange_15_listener($event) {
        \u0275\u0275restoreView(_r1);
        \u0275\u0275twoWayBindingSet(ctx.branchName, $event) || (ctx.branchName = $event);
        return \u0275\u0275resetView($event);
      });
      \u0275\u0275elementEnd();
      \u0275\u0275template(16, AddBranchComponent_div_16_Template, 5, 0, "div", 12);
      \u0275\u0275elementStart(17, "p", 13);
      \u0275\u0275text(18, " Enter a descriptive name for the academic branch ");
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(19, "div", 14)(20, "button", 15)(21, "span", 16);
      \u0275\u0275template(22, AddBranchComponent__svg_svg_22_Template, 3, 0, "svg", 17)(23, AddBranchComponent__svg_svg_23_Template, 2, 0, "svg", 18);
      \u0275\u0275text(24);
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(25, "button", 19);
      \u0275\u0275listener("click", function AddBranchComponent_Template_button_click_25_listener() {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.cancel());
      });
      \u0275\u0275elementStart(26, "span", 16);
      \u0275\u0275namespaceSVG();
      \u0275\u0275elementStart(27, "svg", 20);
      \u0275\u0275element(28, "path", 21);
      \u0275\u0275elementEnd();
      \u0275\u0275text(29, " Cancel ");
      \u0275\u0275elementEnd()()()()()()();
    }
    if (rf & 2) {
      const branchForm_r2 = \u0275\u0275reference(9);
      \u0275\u0275advance(15);
      \u0275\u0275twoWayProperty("ngModel", ctx.branchName);
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", (branchForm_r2.controls["branchName"] == null ? null : branchForm_r2.controls["branchName"].invalid) && ((branchForm_r2.controls["branchName"] == null ? null : branchForm_r2.controls["branchName"].touched) || branchForm_r2.submitted));
      \u0275\u0275advance(4);
      \u0275\u0275property("disabled", ctx.isLoading || branchForm_r2.invalid);
      \u0275\u0275advance(2);
      \u0275\u0275property("ngIf", ctx.isLoading);
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", !ctx.isLoading);
      \u0275\u0275advance();
      \u0275\u0275textInterpolate1(" ", ctx.isLoading ? "Creating Branch..." : "Create Branch", " ");
    }
  }, dependencies: [CommonModule, NgIf, FormsModule, \u0275NgNoValidate, DefaultValueAccessor, NgControlStatus, NgControlStatusGroup, RequiredValidator, NgModel, NgForm], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AddBranchComponent, [{
    type: Component,
    args: [{ selector: "app-add-branch", standalone: true, imports: [CommonModule, FormsModule], template: `<!-- Modern Add Branch Form with Tailwind CSS -->\r
<div class="min-h-screen bg-gray-50 py-6 px-4 sm:px-6 lg:px-8">\r
  <div class="max-w-2xl mx-auto">\r
    \r
    <!-- Page Header -->\r
    <div class="mb-8">\r
      <h1 class="text-3xl font-bold text-gray-900 mb-2">Add New Branch</h1>\r
      <p class="text-gray-600">Create a new academic branch in the system</p>\r
    </div>\r
\r
    <!-- Main Form -->\r
    <div class="bg-white rounded-xl shadow-sm border border-gray-200">\r
      <form #branchForm="ngForm" (ngSubmit)="addBranch(branchForm)" class="p-8 space-y-6">\r
        \r
        <!-- Branch Name Input -->\r
        <div class="form-group">\r
          <label for="branchName" class="block text-sm font-medium text-gray-700 mb-2">\r
            Branch Name <span class="text-red-500">*</span>\r
          </label>\r
          <input\r
            type="text"\r
            id="branchName"\r
            name="branchName"\r
            [(ngModel)]="branchName"\r
            required\r
            placeholder="Enter Branch Name (e.g., Engineering, Medical, Commerce)"\r
            class="form-input w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors"\r
          />\r
          <div *ngIf="branchForm.controls['branchName']?.invalid && (branchForm.controls['branchName']?.touched || branchForm.submitted)" \r
               class="mt-2 text-sm text-red-600">\r
            <div class="flex items-center">\r
              <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16c-.77.833.192 2.5 1.732 2.5z"></path>\r
              </svg>\r
              Branch name is required.\r
            </div>\r
          </div>\r
          <p class="mt-1 text-sm text-gray-500">\r
            Enter a descriptive name for the academic branch\r
          </p>\r
        </div>\r
\r
        <!-- Action Buttons -->\r
        <div class="flex flex-col sm:flex-row gap-3 pt-6 border-t border-gray-200">\r
          <button \r
            type="submit" \r
            [disabled]="isLoading || branchForm.invalid"\r
            class="btn-primary flex-1 px-6 py-3 bg-gradient-to-r from-primary-600 to-primary-700 text-white font-semibold rounded-lg hover:from-primary-700 hover:to-primary-800 focus:ring-4 focus:ring-primary-200 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 transform hover:scale-105"\r
          >\r
            <span class="flex items-center justify-center">\r
              <svg *ngIf="isLoading" class="animate-spin -ml-1 mr-2 h-4 w-4 text-white" fill="none" viewBox="0 0 24 24">\r
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>\r
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>\r
              </svg>\r
              <svg *ngIf="!isLoading" class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>\r
              </svg>\r
              {{ isLoading ? 'Creating Branch...' : 'Create Branch' }}\r
            </span>\r
          </button>\r
\r
          <button \r
            type="button" \r
            (click)="cancel()"\r
            class="btn-secondary flex-1 px-6 py-3 bg-gray-100 text-gray-700 font-semibold rounded-lg hover:bg-gray-200 focus:ring-4 focus:ring-gray-200 transition-all duration-200"\r
          >\r
            <span class="flex items-center justify-center">\r
              <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>\r
              </svg>\r
              Cancel\r
            </span>\r
          </button>\r
        </div>\r
      </form>\r
    </div>\r
  </div>\r
</div>\r
` }]
  }], () => [{ type: BranchService }, { type: Router }], null);
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(AddBranchComponent, { className: "AddBranchComponent", filePath: "src/app/components/add-branch/add-branch.component.ts", lineNumber: 14 });
})();

// src/app/components/add-subject.component.ts
function AddSubjectComponent_option_21_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "option", 29);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const branch_r3 = ctx.$implicit;
    \u0275\u0275property("value", branch_r3._id);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", branch_r3.name, " ");
  }
}
function AddSubjectComponent_span_33_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275text(1, "Create Subject");
    \u0275\u0275elementEnd();
  }
}
function AddSubjectComponent_span_34_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 30);
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(1, "svg", 31);
    \u0275\u0275element(2, "circle", 32)(3, "path", 33);
    \u0275\u0275elementEnd();
    \u0275\u0275text(4, " Saving... ");
    \u0275\u0275elementEnd();
  }
}
var AddSubjectComponent = class _AddSubjectComponent {
  questionService;
  router;
  branches = [];
  selectedBranchId = "";
  subjectName = "";
  isLoading = false;
  constructor(questionService, router) {
    this.questionService = questionService;
    this.router = router;
  }
  ngOnInit() {
    this.questionService.getBranches().subscribe({
      next: (res) => {
        this.branches = Array.isArray(res) ? res : res.branches || [];
      },
      error: (err) => {
        console.error("Failed to load branches", err);
      }
    });
  }
  submitSubject(form) {
    if (form.invalid) {
      form.control.markAllAsTouched();
      return;
    }
    this.isLoading = true;
    const payload = {
      name: this.subjectName,
      branchId: this.selectedBranchId === "none" ? null : this.selectedBranchId
    };
    this.questionService.createSubject(payload).subscribe({
      next: () => {
        alert("Subject created successfully!");
        this.router.navigate(["/questions"]);
      },
      error: (err) => {
        console.error("Error creating subject:", err);
        alert("Error creating subject. Please try again.");
        this.isLoading = false;
      }
    });
  }
  cancel() {
    this.router.navigate(["/questions"]);
  }
  static \u0275fac = function AddSubjectComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AddSubjectComponent)(\u0275\u0275directiveInject(QuestionService), \u0275\u0275directiveInject(Router));
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _AddSubjectComponent, selectors: [["app-add-subject"]], decls: 42, vars: 6, consts: [["subjectForm", "ngForm"], [1, "min-h-screen", "bg-gradient-to-br", "from-primary-50", "to-primary-100", "py-6", "px-4", "sm:px-6", "lg:px-8"], [1, "max-w-md", "mx-auto"], [1, "text-center", "mb-8"], [1, "text-3xl", "font-bold", "text-gray-900", "mb-2"], [1, "text-gray-600"], [1, "bg-white", "rounded-2xl", "shadow-lg", "p-8"], [1, "space-y-6", 3, "ngSubmit"], [1, "form-group"], ["for", "branch", 1, "block", "text-sm", "font-semibold", "text-gray-700", "mb-2"], [1, "text-red-500"], [1, "relative"], ["id", "branch", "name", "branch", "required", "", "ngModel", "", 1, "form-select", "w-full", "px-4", "py-3", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-primary-500", "focus:border-primary-500", "transition-colors", "appearance-none", "bg-white", 3, "ngModelChange", "ngModel"], ["value", ""], ["value", "none"], [3, "value", 4, "ngFor", "ngForOf"], [1, "absolute", "inset-y-0", "right-0", "flex", "items-center", "px-2", "pointer-events-none"], ["fill", "none", "stroke", "currentColor", "viewBox", "0 0 24 24", 1, "w-5", "h-5", "text-gray-400"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M19 9l-7 7-7-7"], ["for", "subject", 1, "block", "text-sm", "font-semibold", "text-gray-700", "mb-2"], ["type", "text", "id", "subject", "name", "subject", "required", "", "placeholder", "Enter subject name", 1, "form-input", "w-full", "px-4", "py-3", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-primary-500", "focus:border-primary-500", "transition-colors", 3, "ngModelChange", "ngModel"], [1, "flex", "flex-col", "sm:flex-row", "gap-3", "pt-4"], ["type", "submit", 1, "btn-primary", "flex-1", "px-6", "py-3", "bg-primary-600", "text-white", "rounded-lg", "font-semibold", "hover:bg-primary-700", "focus:outline-none", "focus:ring-2", "focus:ring-primary-500", "focus:ring-offset-2", "disabled:opacity-50", "disabled:cursor-not-allowed", "transition-colors", 3, "disabled"], [4, "ngIf"], ["class", "flex items-center justify-center", 4, "ngIf"], ["type", "button", 1, "btn-secondary", "flex-1", "px-6", "py-3", "bg-gray-100", "text-gray-700", "rounded-lg", "font-semibold", "hover:bg-gray-200", "focus:outline-none", "focus:ring-2", "focus:ring-gray-500", "focus:ring-offset-2", "transition-colors", 3, "click"], [1, "mt-6", "text-center"], [1, "text-sm", "text-gray-500"], ["href", "#", 1, "text-primary-600", "hover:text-primary-500", "font-medium"], [3, "value"], [1, "flex", "items-center", "justify-center"], ["xmlns", "http://www.w3.org/2000/svg", "fill", "none", "viewBox", "0 0 24 24", 1, "animate-spin", "-ml-1", "mr-3", "h-5", "w-5", "text-white"], ["cx", "12", "cy", "12", "r", "10", "stroke", "currentColor", "stroke-width", "4", 1, "opacity-25"], ["fill", "currentColor", "d", "M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z", 1, "opacity-75"]], template: function AddSubjectComponent_Template(rf, ctx) {
    if (rf & 1) {
      const _r1 = \u0275\u0275getCurrentView();
      \u0275\u0275elementStart(0, "div", 1)(1, "div", 2)(2, "div", 3)(3, "h2", 4);
      \u0275\u0275text(4, "Add New Subject");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(5, "p", 5);
      \u0275\u0275text(6, "Create a new subject for your curriculum");
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(7, "div", 6)(8, "form", 7, 0);
      \u0275\u0275listener("ngSubmit", function AddSubjectComponent_Template_form_ngSubmit_8_listener() {
        \u0275\u0275restoreView(_r1);
        const subjectForm_r2 = \u0275\u0275reference(9);
        return \u0275\u0275resetView(ctx.submitSubject(subjectForm_r2));
      });
      \u0275\u0275elementStart(10, "div", 8)(11, "label", 9);
      \u0275\u0275text(12, " Select Branch ");
      \u0275\u0275elementStart(13, "span", 10);
      \u0275\u0275text(14, "*");
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(15, "div", 11)(16, "select", 12);
      \u0275\u0275twoWayListener("ngModelChange", function AddSubjectComponent_Template_select_ngModelChange_16_listener($event) {
        \u0275\u0275restoreView(_r1);
        \u0275\u0275twoWayBindingSet(ctx.selectedBranchId, $event) || (ctx.selectedBranchId = $event);
        return \u0275\u0275resetView($event);
      });
      \u0275\u0275elementStart(17, "option", 13);
      \u0275\u0275text(18, "-- Select Branch --");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(19, "option", 14);
      \u0275\u0275text(20, "None");
      \u0275\u0275elementEnd();
      \u0275\u0275template(21, AddSubjectComponent_option_21_Template, 2, 2, "option", 15);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(22, "div", 16);
      \u0275\u0275namespaceSVG();
      \u0275\u0275elementStart(23, "svg", 17);
      \u0275\u0275element(24, "path", 18);
      \u0275\u0275elementEnd()()()();
      \u0275\u0275namespaceHTML();
      \u0275\u0275elementStart(25, "div", 8)(26, "label", 19);
      \u0275\u0275text(27, " Subject Name ");
      \u0275\u0275elementStart(28, "span", 10);
      \u0275\u0275text(29, "*");
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(30, "input", 20);
      \u0275\u0275twoWayListener("ngModelChange", function AddSubjectComponent_Template_input_ngModelChange_30_listener($event) {
        \u0275\u0275restoreView(_r1);
        \u0275\u0275twoWayBindingSet(ctx.subjectName, $event) || (ctx.subjectName = $event);
        return \u0275\u0275resetView($event);
      });
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(31, "div", 21)(32, "button", 22);
      \u0275\u0275template(33, AddSubjectComponent_span_33_Template, 2, 0, "span", 23)(34, AddSubjectComponent_span_34_Template, 5, 0, "span", 24);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(35, "button", 25);
      \u0275\u0275listener("click", function AddSubjectComponent_Template_button_click_35_listener() {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.cancel());
      });
      \u0275\u0275text(36, " Cancel ");
      \u0275\u0275elementEnd()()()();
      \u0275\u0275elementStart(37, "div", 26)(38, "p", 27);
      \u0275\u0275text(39, " Need help? Check our ");
      \u0275\u0275elementStart(40, "a", 28);
      \u0275\u0275text(41, "documentation");
      \u0275\u0275elementEnd()()()()();
    }
    if (rf & 2) {
      \u0275\u0275advance(16);
      \u0275\u0275twoWayProperty("ngModel", ctx.selectedBranchId);
      \u0275\u0275advance(5);
      \u0275\u0275property("ngForOf", ctx.branches);
      \u0275\u0275advance(9);
      \u0275\u0275twoWayProperty("ngModel", ctx.subjectName);
      \u0275\u0275advance(2);
      \u0275\u0275property("disabled", ctx.isLoading);
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", !ctx.isLoading);
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", ctx.isLoading);
    }
  }, dependencies: [CommonModule, NgForOf, NgIf, FormsModule, \u0275NgNoValidate, NgSelectOption, \u0275NgSelectMultipleOption, DefaultValueAccessor, SelectControlValueAccessor, NgControlStatus, NgControlStatusGroup, RequiredValidator, NgModel, NgForm], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AddSubjectComponent, [{
    type: Component,
    args: [{ selector: "app-add-subject", standalone: true, imports: [CommonModule, FormsModule], template: '<!-- Modern Add Subject Form with Tailwind CSS -->\r\n<div class="min-h-screen bg-gradient-to-br from-primary-50 to-primary-100 py-6 px-4 sm:px-6 lg:px-8">\r\n  <div class="max-w-md mx-auto">\r\n    <!-- Form Header -->\r\n    <div class="text-center mb-8">\r\n      <h2 class="text-3xl font-bold text-gray-900 mb-2">Add New Subject</h2>\r\n      <p class="text-gray-600">Create a new subject for your curriculum</p>\r\n    </div>\r\n\r\n    <!-- Form Card -->\r\n    <div class="bg-white rounded-2xl shadow-lg p-8">\r\n      <form #subjectForm="ngForm" (ngSubmit)="submitSubject(subjectForm)" class="space-y-6">\r\n        \r\n        <!-- Branch Selection -->\r\n        <div class="form-group">\r\n          <label for="branch" class="block text-sm font-semibold text-gray-700 mb-2">\r\n            Select Branch <span class="text-red-500">*</span>\r\n          </label>\r\n          <div class="relative">\r\n            <select\r\n              id="branch"\r\n              name="branch"\r\n              required\r\n              [(ngModel)]="selectedBranchId"\r\n              ngModel\r\n              class="form-select w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors appearance-none bg-white"\r\n            >\r\n              <option value="">-- Select Branch --</option>\r\n              <option value="none">None</option>\r\n              <option *ngFor="let branch of branches" [value]="branch._id">\r\n                {{ branch.name }}\r\n              </option>\r\n            </select>\r\n            <!-- Custom dropdown arrow -->\r\n            <div class="absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none">\r\n              <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r\n                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>\r\n              </svg>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Subject Name Input -->\r\n        <div class="form-group">\r\n          <label for="subject" class="block text-sm font-semibold text-gray-700 mb-2">\r\n            Subject Name <span class="text-red-500">*</span>\r\n          </label>\r\n          <input\r\n            type="text"\r\n            id="subject"\r\n            name="subject"\r\n            required\r\n            [(ngModel)]="subjectName"\r\n            placeholder="Enter subject name"\r\n            class="form-input w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors"\r\n          />\r\n        </div>\r\n\r\n        <!-- Action Buttons -->\r\n        <div class="flex flex-col sm:flex-row gap-3 pt-4">\r\n          <button \r\n            type="submit" \r\n            [disabled]="isLoading"\r\n            class="btn-primary flex-1 px-6 py-3 bg-primary-600 text-white rounded-lg font-semibold hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"\r\n          >\r\n            <span *ngIf="!isLoading">Create Subject</span>\r\n            <span *ngIf="isLoading" class="flex items-center justify-center">\r\n              <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">\r\n                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>\r\n                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>\r\n              </svg>\r\n              Saving...\r\n            </span>\r\n          </button>\r\n\r\n          <button \r\n            type="button" \r\n            (click)="cancel()"\r\n            class="btn-secondary flex-1 px-6 py-3 bg-gray-100 text-gray-700 rounded-lg font-semibold hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 transition-colors"\r\n          >\r\n            Cancel\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n\r\n    <!-- Help Text -->\r\n    <div class="mt-6 text-center">\r\n      <p class="text-sm text-gray-500">\r\n        Need help? Check our \r\n        <a href="#" class="text-primary-600 hover:text-primary-500 font-medium">documentation</a>\r\n      </p>\r\n    </div>\r\n  </div>\r\n</div>\r\n' }]
  }], () => [{ type: QuestionService }, { type: Router }], null);
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(AddSubjectComponent, { className: "AddSubjectComponent", filePath: "src/app/components/add-subject.component.ts", lineNumber: 14 });
})();

// src/app/components/add-topic.component.ts
function AddTopicComponent_option_21_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "option", 30);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const branch_r3 = ctx.$implicit;
    \u0275\u0275property("value", branch_r3._id);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", branch_r3.name, " ");
  }
}
function AddTopicComponent_option_36_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "option", 30);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const subject_r4 = ctx.$implicit;
    \u0275\u0275property("value", subject_r4._id);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", subject_r4.name, " ");
  }
}
function AddTopicComponent_span_48_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275text(1, "Create Topic");
    \u0275\u0275elementEnd();
  }
}
function AddTopicComponent_span_49_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 31);
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(1, "svg", 32);
    \u0275\u0275element(2, "circle", 33)(3, "path", 34);
    \u0275\u0275elementEnd();
    \u0275\u0275text(4, " Saving... ");
    \u0275\u0275elementEnd();
  }
}
var AddTopicComponent = class _AddTopicComponent {
  questionService;
  router;
  branches = [];
  subjects = [];
  selectedBranchId = "";
  selectedSubjectId = "";
  topicName = "";
  isLoading = false;
  constructor(questionService, router) {
    this.questionService = questionService;
    this.router = router;
  }
  ngOnInit() {
    this.questionService.getBranches().subscribe({
      next: (res) => {
        this.branches = Array.isArray(res) ? res : res.branches || [];
      },
      error: (err) => {
        console.error("Failed to load branches", err);
      }
    });
  }
  onBranchChange() {
    if (this.selectedBranchId === "none") {
      this.subjects = [];
      this.selectedSubjectId = "";
      return;
    }
    this.questionService.getSubjects(this.selectedBranchId).subscribe({
      next: (res) => {
        this.subjects = res.subjects || res;
      },
      error: (err) => {
        console.error("Failed to load subjects", err);
      }
    });
  }
  submitTopic(form) {
    if (form.invalid) {
      form.control.markAllAsTouched();
      return;
    }
    this.isLoading = true;
    const payload = {
      name: this.topicName,
      subjectId: this.selectedSubjectId === "none" ? null : this.selectedSubjectId
    };
    this.questionService.createTopic(payload).subscribe({
      next: () => {
        alert("Topic created successfully!");
        this.router.navigate(["/questions"]);
      },
      error: (err) => {
        console.error("Error creating topic:", err);
        alert("Error creating topic. Please try again.");
        this.isLoading = false;
      }
    });
  }
  cancel() {
    this.router.navigate(["/questions"]);
  }
  static \u0275fac = function AddTopicComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AddTopicComponent)(\u0275\u0275directiveInject(QuestionService), \u0275\u0275directiveInject(Router));
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _AddTopicComponent, selectors: [["app-add-topic"]], decls: 55, vars: 8, consts: [["topicForm", "ngForm"], [1, "min-h-screen", "bg-gradient-to-br", "from-secondary-50", "to-secondary-100", "py-6", "px-4", "sm:px-6", "lg:px-8"], [1, "max-w-md", "mx-auto"], [1, "text-center", "mb-8"], [1, "text-3xl", "font-bold", "text-gray-900", "mb-2"], [1, "text-gray-600"], [1, "bg-white", "rounded-2xl", "shadow-lg", "p-8"], [1, "space-y-6", 3, "ngSubmit"], [1, "form-group"], ["for", "branch", 1, "block", "text-sm", "font-semibold", "text-gray-700", "mb-2"], [1, "text-red-500"], [1, "relative"], ["id", "branch", "name", "branch", "required", "", "ngModel", "", 1, "form-select", "w-full", "px-4", "py-3", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-secondary-500", "focus:border-secondary-500", "transition-colors", "appearance-none", "bg-white", 3, "ngModelChange", "change", "ngModel"], ["value", ""], ["value", "none"], [3, "value", 4, "ngFor", "ngForOf"], [1, "absolute", "inset-y-0", "right-0", "flex", "items-center", "px-2", "pointer-events-none"], ["fill", "none", "stroke", "currentColor", "viewBox", "0 0 24 24", 1, "w-5", "h-5", "text-gray-400"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M19 9l-7 7-7-7"], ["for", "subject", 1, "block", "text-sm", "font-semibold", "text-gray-700", "mb-2"], ["id", "subject", "name", "subject", "required", "", "ngModel", "", 1, "form-select", "w-full", "px-4", "py-3", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-secondary-500", "focus:border-secondary-500", "transition-colors", "appearance-none", "bg-white", 3, "ngModelChange", "ngModel"], ["for", "topic", 1, "block", "text-sm", "font-semibold", "text-gray-700", "mb-2"], ["type", "text", "id", "topic", "name", "topic", "required", "", "placeholder", "Enter topic name", 1, "form-input", "w-full", "px-4", "py-3", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-secondary-500", "focus:border-secondary-500", "transition-colors", 3, "ngModelChange", "ngModel"], [1, "flex", "flex-col", "sm:flex-row", "gap-3", "pt-4"], ["type", "submit", 1, "btn-primary", "flex-1", "px-6", "py-3", "bg-secondary-600", "text-white", "rounded-lg", "font-semibold", "hover:bg-secondary-700", "focus:outline-none", "focus:ring-2", "focus:ring-secondary-500", "focus:ring-offset-2", "disabled:opacity-50", "disabled:cursor-not-allowed", "transition-colors", 3, "disabled"], [4, "ngIf"], ["class", "flex items-center justify-center", 4, "ngIf"], ["type", "button", 1, "btn-secondary", "flex-1", "px-6", "py-3", "bg-gray-100", "text-gray-700", "rounded-lg", "font-semibold", "hover:bg-gray-200", "focus:outline-none", "focus:ring-2", "focus:ring-gray-500", "focus:ring-offset-2", "transition-colors", 3, "click"], [1, "mt-6", "text-center"], [1, "text-sm", "text-gray-500"], [3, "value"], [1, "flex", "items-center", "justify-center"], ["xmlns", "http://www.w3.org/2000/svg", "fill", "none", "viewBox", "0 0 24 24", 1, "animate-spin", "-ml-1", "mr-3", "h-5", "w-5", "text-white"], ["cx", "12", "cy", "12", "r", "10", "stroke", "currentColor", "stroke-width", "4", 1, "opacity-25"], ["fill", "currentColor", "d", "M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z", 1, "opacity-75"]], template: function AddTopicComponent_Template(rf, ctx) {
    if (rf & 1) {
      const _r1 = \u0275\u0275getCurrentView();
      \u0275\u0275elementStart(0, "div", 1)(1, "div", 2)(2, "div", 3)(3, "h2", 4);
      \u0275\u0275text(4, "Add New Topic");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(5, "p", 5);
      \u0275\u0275text(6, "Create a new topic under a subject");
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(7, "div", 6)(8, "form", 7, 0);
      \u0275\u0275listener("ngSubmit", function AddTopicComponent_Template_form_ngSubmit_8_listener() {
        \u0275\u0275restoreView(_r1);
        const topicForm_r2 = \u0275\u0275reference(9);
        return \u0275\u0275resetView(ctx.submitTopic(topicForm_r2));
      });
      \u0275\u0275elementStart(10, "div", 8)(11, "label", 9);
      \u0275\u0275text(12, " Select Branch ");
      \u0275\u0275elementStart(13, "span", 10);
      \u0275\u0275text(14, "*");
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(15, "div", 11)(16, "select", 12);
      \u0275\u0275twoWayListener("ngModelChange", function AddTopicComponent_Template_select_ngModelChange_16_listener($event) {
        \u0275\u0275restoreView(_r1);
        \u0275\u0275twoWayBindingSet(ctx.selectedBranchId, $event) || (ctx.selectedBranchId = $event);
        return \u0275\u0275resetView($event);
      });
      \u0275\u0275listener("change", function AddTopicComponent_Template_select_change_16_listener() {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.onBranchChange());
      });
      \u0275\u0275elementStart(17, "option", 13);
      \u0275\u0275text(18, "-- Select Branch --");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(19, "option", 14);
      \u0275\u0275text(20, "None");
      \u0275\u0275elementEnd();
      \u0275\u0275template(21, AddTopicComponent_option_21_Template, 2, 2, "option", 15);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(22, "div", 16);
      \u0275\u0275namespaceSVG();
      \u0275\u0275elementStart(23, "svg", 17);
      \u0275\u0275element(24, "path", 18);
      \u0275\u0275elementEnd()()()();
      \u0275\u0275namespaceHTML();
      \u0275\u0275elementStart(25, "div", 8)(26, "label", 19);
      \u0275\u0275text(27, " Select Subject ");
      \u0275\u0275elementStart(28, "span", 10);
      \u0275\u0275text(29, "*");
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(30, "div", 11)(31, "select", 20);
      \u0275\u0275twoWayListener("ngModelChange", function AddTopicComponent_Template_select_ngModelChange_31_listener($event) {
        \u0275\u0275restoreView(_r1);
        \u0275\u0275twoWayBindingSet(ctx.selectedSubjectId, $event) || (ctx.selectedSubjectId = $event);
        return \u0275\u0275resetView($event);
      });
      \u0275\u0275elementStart(32, "option", 13);
      \u0275\u0275text(33, "-- Select Subject --");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(34, "option", 14);
      \u0275\u0275text(35, "None");
      \u0275\u0275elementEnd();
      \u0275\u0275template(36, AddTopicComponent_option_36_Template, 2, 2, "option", 15);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(37, "div", 16);
      \u0275\u0275namespaceSVG();
      \u0275\u0275elementStart(38, "svg", 17);
      \u0275\u0275element(39, "path", 18);
      \u0275\u0275elementEnd()()()();
      \u0275\u0275namespaceHTML();
      \u0275\u0275elementStart(40, "div", 8)(41, "label", 21);
      \u0275\u0275text(42, " Topic Name ");
      \u0275\u0275elementStart(43, "span", 10);
      \u0275\u0275text(44, "*");
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(45, "input", 22);
      \u0275\u0275twoWayListener("ngModelChange", function AddTopicComponent_Template_input_ngModelChange_45_listener($event) {
        \u0275\u0275restoreView(_r1);
        \u0275\u0275twoWayBindingSet(ctx.topicName, $event) || (ctx.topicName = $event);
        return \u0275\u0275resetView($event);
      });
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(46, "div", 23)(47, "button", 24);
      \u0275\u0275template(48, AddTopicComponent_span_48_Template, 2, 0, "span", 25)(49, AddTopicComponent_span_49_Template, 5, 0, "span", 26);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(50, "button", 27);
      \u0275\u0275listener("click", function AddTopicComponent_Template_button_click_50_listener() {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.cancel());
      });
      \u0275\u0275text(51, " Cancel ");
      \u0275\u0275elementEnd()()()();
      \u0275\u0275elementStart(52, "div", 28)(53, "p", 29);
      \u0275\u0275text(54, " Topics help organize content within subjects for better structure ");
      \u0275\u0275elementEnd()()()();
    }
    if (rf & 2) {
      \u0275\u0275advance(16);
      \u0275\u0275twoWayProperty("ngModel", ctx.selectedBranchId);
      \u0275\u0275advance(5);
      \u0275\u0275property("ngForOf", ctx.branches);
      \u0275\u0275advance(10);
      \u0275\u0275twoWayProperty("ngModel", ctx.selectedSubjectId);
      \u0275\u0275advance(5);
      \u0275\u0275property("ngForOf", ctx.subjects);
      \u0275\u0275advance(9);
      \u0275\u0275twoWayProperty("ngModel", ctx.topicName);
      \u0275\u0275advance(2);
      \u0275\u0275property("disabled", ctx.isLoading);
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", !ctx.isLoading);
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", ctx.isLoading);
    }
  }, dependencies: [CommonModule, NgForOf, NgIf, FormsModule, \u0275NgNoValidate, NgSelectOption, \u0275NgSelectMultipleOption, DefaultValueAccessor, SelectControlValueAccessor, NgControlStatus, NgControlStatusGroup, RequiredValidator, NgModel, NgForm], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AddTopicComponent, [{
    type: Component,
    args: [{ selector: "app-add-topic", standalone: true, imports: [CommonModule, FormsModule], template: '<!-- Modern Add Topic Form with Tailwind CSS -->\r\n<div class="min-h-screen bg-gradient-to-br from-secondary-50 to-secondary-100 py-6 px-4 sm:px-6 lg:px-8">\r\n  <div class="max-w-md mx-auto">\r\n    <!-- Form Header -->\r\n    <div class="text-center mb-8">\r\n      <h2 class="text-3xl font-bold text-gray-900 mb-2">Add New Topic</h2>\r\n      <p class="text-gray-600">Create a new topic under a subject</p>\r\n    </div>\r\n\r\n    <!-- Form Card -->\r\n    <div class="bg-white rounded-2xl shadow-lg p-8">\r\n      <form #topicForm="ngForm" (ngSubmit)="submitTopic(topicForm)" class="space-y-6">\r\n        \r\n        <!-- Branch Selection -->\r\n        <div class="form-group">\r\n          <label for="branch" class="block text-sm font-semibold text-gray-700 mb-2">\r\n            Select Branch <span class="text-red-500">*</span>\r\n          </label>\r\n          <div class="relative">\r\n            <select\r\n              id="branch"\r\n              name="branch"\r\n              required\r\n              [(ngModel)]="selectedBranchId"\r\n              (change)="onBranchChange()"\r\n              ngModel\r\n              class="form-select w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-secondary-500 focus:border-secondary-500 transition-colors appearance-none bg-white"\r\n            >\r\n              <option value="">-- Select Branch --</option>\r\n              <option value="none">None</option>\r\n              <option *ngFor="let branch of branches" [value]="branch._id">\r\n                {{ branch.name }}\r\n              </option>\r\n            </select>\r\n            <!-- Custom dropdown arrow -->\r\n            <div class="absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none">\r\n              <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r\n                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>\r\n              </svg>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Subject Selection -->\r\n        <div class="form-group">\r\n          <label for="subject" class="block text-sm font-semibold text-gray-700 mb-2">\r\n            Select Subject <span class="text-red-500">*</span>\r\n          </label>\r\n          <div class="relative">\r\n            <select\r\n              id="subject"\r\n              name="subject"\r\n              required\r\n              [(ngModel)]="selectedSubjectId"\r\n              ngModel\r\n              class="form-select w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-secondary-500 focus:border-secondary-500 transition-colors appearance-none bg-white"\r\n            >\r\n              <option value="">-- Select Subject --</option>\r\n              <option value="none">None</option>\r\n              <option *ngFor="let subject of subjects" [value]="subject._id">\r\n                {{ subject.name }}\r\n              </option>\r\n            </select>\r\n            <!-- Custom dropdown arrow -->\r\n            <div class="absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none">\r\n              <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r\n                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>\r\n              </svg>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Topic Name Input -->\r\n        <div class="form-group">\r\n          <label for="topic" class="block text-sm font-semibold text-gray-700 mb-2">\r\n            Topic Name <span class="text-red-500">*</span>\r\n          </label>\r\n          <input\r\n            type="text"\r\n            id="topic"\r\n            name="topic"\r\n            required\r\n            [(ngModel)]="topicName"\r\n            placeholder="Enter topic name"\r\n            class="form-input w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-secondary-500 focus:border-secondary-500 transition-colors"\r\n          />\r\n        </div>\r\n\r\n        <!-- Action Buttons -->\r\n        <div class="flex flex-col sm:flex-row gap-3 pt-4">\r\n          <button \r\n            type="submit" \r\n            [disabled]="isLoading"\r\n            class="btn-primary flex-1 px-6 py-3 bg-secondary-600 text-white rounded-lg font-semibold hover:bg-secondary-700 focus:outline-none focus:ring-2 focus:ring-secondary-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"\r\n          >\r\n            <span *ngIf="!isLoading">Create Topic</span>\r\n            <span *ngIf="isLoading" class="flex items-center justify-center">\r\n              <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">\r\n                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>\r\n                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>\r\n              </svg>\r\n              Saving...\r\n            </span>\r\n          </button>\r\n\r\n          <button \r\n            type="button" \r\n            (click)="cancel()"\r\n            class="btn-secondary flex-1 px-6 py-3 bg-gray-100 text-gray-700 rounded-lg font-semibold hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 transition-colors"\r\n          >\r\n            Cancel\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n\r\n    <!-- Help Text -->\r\n    <div class="mt-6 text-center">\r\n      <p class="text-sm text-gray-500">\r\n        Topics help organize content within subjects for better structure\r\n      </p>\r\n    </div>\r\n  </div>\r\n</div>\r\n' }]
  }], () => [{ type: QuestionService }, { type: Router }], null);
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(AddTopicComponent, { className: "AddTopicComponent", filePath: "src/app/components/add-topic.component.ts", lineNumber: 14 });
})();

// src/app/components/add-subtopic.component.ts
function AddSubtopicComponent_option_21_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "option", 32);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const branch_r3 = ctx.$implicit;
    \u0275\u0275property("value", branch_r3._id);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", branch_r3.name, " ");
  }
}
function AddSubtopicComponent_option_36_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "option", 32);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const subject_r4 = ctx.$implicit;
    \u0275\u0275property("value", subject_r4._id);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", subject_r4.name, " ");
  }
}
function AddSubtopicComponent_option_51_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "option", 32);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const topic_r5 = ctx.$implicit;
    \u0275\u0275property("value", topic_r5._id);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", topic_r5.name, " ");
  }
}
function AddSubtopicComponent_span_63_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275text(1, "Create Subtopic");
    \u0275\u0275elementEnd();
  }
}
function AddSubtopicComponent_span_64_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 33);
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(1, "svg", 34);
    \u0275\u0275element(2, "circle", 35)(3, "path", 36);
    \u0275\u0275elementEnd();
    \u0275\u0275text(4, " Saving... ");
    \u0275\u0275elementEnd();
  }
}
var AddSubtopicComponent = class _AddSubtopicComponent {
  questionService;
  router;
  branches = [];
  subjects = [];
  topics = [];
  selectedBranchId = "";
  selectedSubjectId = "";
  selectedTopicId = "";
  subtopicName = "";
  isLoading = false;
  constructor(questionService, router) {
    this.questionService = questionService;
    this.router = router;
  }
  ngOnInit() {
    this.questionService.getBranches().subscribe({
      next: (res) => {
        this.branches = Array.isArray(res) ? res : res.branches || [];
      },
      error: (err) => {
        console.error("Failed to load branches", err);
      }
    });
  }
  onBranchChange() {
    if (this.selectedBranchId === "none") {
      this.subjects = [];
      this.selectedSubjectId = "";
      return;
    }
    this.questionService.getSubjects(this.selectedBranchId).subscribe({
      next: (res) => {
        this.subjects = res.subjects || res;
      },
      error: (err) => {
        console.error("Failed to load subjects", err);
      }
    });
  }
  onSubjectChange() {
    if (this.selectedSubjectId === "none") {
      this.topics = [];
      this.selectedTopicId = "";
      return;
    }
    this.questionService.getTopics(this.selectedSubjectId).subscribe({
      next: (res) => {
        this.topics = res.topics || res;
      },
      error: (err) => {
        console.error("Failed to load topics", err);
      }
    });
  }
  submitSubtopic(form) {
    if (form.invalid) {
      form.control.markAllAsTouched();
      return;
    }
    this.isLoading = true;
    const payload = {
      name: this.subtopicName,
      topicId: this.selectedTopicId === "none" ? null : this.selectedTopicId
    };
    this.questionService.createSubtopic(payload).subscribe({
      next: () => {
        alert("Subtopic created successfully!");
        this.router.navigate(["/questions"]);
      },
      error: (err) => {
        console.error("Error creating subtopic:", err);
        alert("Error creating subtopic. Please try again.");
        this.isLoading = false;
      }
    });
  }
  cancel() {
    this.router.navigate(["/questions"]);
  }
  static \u0275fac = function AddSubtopicComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AddSubtopicComponent)(\u0275\u0275directiveInject(QuestionService), \u0275\u0275directiveInject(Router));
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _AddSubtopicComponent, selectors: [["app-add-subtopic"]], decls: 70, vars: 10, consts: [["subtopicForm", "ngForm"], [1, "min-h-screen", "bg-gradient-to-br", "from-success-50", "to-success-100", "py-6", "px-4", "sm:px-6", "lg:px-8"], [1, "max-w-md", "mx-auto"], [1, "text-center", "mb-8"], [1, "text-3xl", "font-bold", "text-gray-900", "mb-2"], [1, "text-gray-600"], [1, "bg-white", "rounded-2xl", "shadow-lg", "p-8"], [1, "space-y-6", 3, "ngSubmit"], [1, "form-group"], ["for", "branch", 1, "block", "text-sm", "font-semibold", "text-gray-700", "mb-2"], [1, "text-red-500"], [1, "relative"], ["id", "branch", "name", "branch", "required", "", "ngModel", "", 1, "form-select", "w-full", "px-4", "py-3", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-success-500", "focus:border-success-500", "transition-colors", "appearance-none", "bg-white", 3, "ngModelChange", "change", "ngModel"], ["value", ""], ["value", "none"], [3, "value", 4, "ngFor", "ngForOf"], [1, "absolute", "inset-y-0", "right-0", "flex", "items-center", "px-2", "pointer-events-none"], ["fill", "none", "stroke", "currentColor", "viewBox", "0 0 24 24", 1, "w-5", "h-5", "text-gray-400"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M19 9l-7 7-7-7"], ["for", "subject", 1, "block", "text-sm", "font-semibold", "text-gray-700", "mb-2"], ["id", "subject", "name", "subject", "required", "", "ngModel", "", 1, "form-select", "w-full", "px-4", "py-3", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-success-500", "focus:border-success-500", "transition-colors", "appearance-none", "bg-white", 3, "ngModelChange", "change", "ngModel"], ["for", "topic", 1, "block", "text-sm", "font-semibold", "text-gray-700", "mb-2"], ["id", "topic", "name", "topic", "required", "", "ngModel", "", 1, "form-select", "w-full", "px-4", "py-3", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-success-500", "focus:border-success-500", "transition-colors", "appearance-none", "bg-white", 3, "ngModelChange", "ngModel"], ["for", "subtopic", 1, "block", "text-sm", "font-semibold", "text-gray-700", "mb-2"], ["type", "text", "id", "subtopic", "name", "subtopic", "required", "", "placeholder", "Enter subtopic name", 1, "form-input", "w-full", "px-4", "py-3", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-success-500", "focus:border-success-500", "transition-colors", 3, "ngModelChange", "ngModel"], [1, "flex", "flex-col", "sm:flex-row", "gap-3", "pt-4"], ["type", "submit", 1, "btn-primary", "flex-1", "px-6", "py-3", "bg-success-600", "text-white", "rounded-lg", "font-semibold", "hover:bg-success-700", "focus:outline-none", "focus:ring-2", "focus:ring-success-500", "focus:ring-offset-2", "disabled:opacity-50", "disabled:cursor-not-allowed", "transition-colors", 3, "disabled"], [4, "ngIf"], ["class", "flex items-center justify-center", 4, "ngIf"], ["type", "button", 1, "btn-secondary", "flex-1", "px-6", "py-3", "bg-gray-100", "text-gray-700", "rounded-lg", "font-semibold", "hover:bg-gray-200", "focus:outline-none", "focus:ring-2", "focus:ring-gray-500", "focus:ring-offset-2", "transition-colors", 3, "click"], [1, "mt-6", "text-center"], [1, "text-sm", "text-gray-500"], [3, "value"], [1, "flex", "items-center", "justify-center"], ["xmlns", "http://www.w3.org/2000/svg", "fill", "none", "viewBox", "0 0 24 24", 1, "animate-spin", "-ml-1", "mr-3", "h-5", "w-5", "text-white"], ["cx", "12", "cy", "12", "r", "10", "stroke", "currentColor", "stroke-width", "4", 1, "opacity-25"], ["fill", "currentColor", "d", "M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z", 1, "opacity-75"]], template: function AddSubtopicComponent_Template(rf, ctx) {
    if (rf & 1) {
      const _r1 = \u0275\u0275getCurrentView();
      \u0275\u0275elementStart(0, "div", 1)(1, "div", 2)(2, "div", 3)(3, "h2", 4);
      \u0275\u0275text(4, "Add New Subtopic");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(5, "p", 5);
      \u0275\u0275text(6, "Create a new subtopic under a topic");
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(7, "div", 6)(8, "form", 7, 0);
      \u0275\u0275listener("ngSubmit", function AddSubtopicComponent_Template_form_ngSubmit_8_listener() {
        \u0275\u0275restoreView(_r1);
        const subtopicForm_r2 = \u0275\u0275reference(9);
        return \u0275\u0275resetView(ctx.submitSubtopic(subtopicForm_r2));
      });
      \u0275\u0275elementStart(10, "div", 8)(11, "label", 9);
      \u0275\u0275text(12, " Select Branch ");
      \u0275\u0275elementStart(13, "span", 10);
      \u0275\u0275text(14, "*");
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(15, "div", 11)(16, "select", 12);
      \u0275\u0275twoWayListener("ngModelChange", function AddSubtopicComponent_Template_select_ngModelChange_16_listener($event) {
        \u0275\u0275restoreView(_r1);
        \u0275\u0275twoWayBindingSet(ctx.selectedBranchId, $event) || (ctx.selectedBranchId = $event);
        return \u0275\u0275resetView($event);
      });
      \u0275\u0275listener("change", function AddSubtopicComponent_Template_select_change_16_listener() {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.onBranchChange());
      });
      \u0275\u0275elementStart(17, "option", 13);
      \u0275\u0275text(18, "-- Select Branch --");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(19, "option", 14);
      \u0275\u0275text(20, "None");
      \u0275\u0275elementEnd();
      \u0275\u0275template(21, AddSubtopicComponent_option_21_Template, 2, 2, "option", 15);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(22, "div", 16);
      \u0275\u0275namespaceSVG();
      \u0275\u0275elementStart(23, "svg", 17);
      \u0275\u0275element(24, "path", 18);
      \u0275\u0275elementEnd()()()();
      \u0275\u0275namespaceHTML();
      \u0275\u0275elementStart(25, "div", 8)(26, "label", 19);
      \u0275\u0275text(27, " Select Subject ");
      \u0275\u0275elementStart(28, "span", 10);
      \u0275\u0275text(29, "*");
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(30, "div", 11)(31, "select", 20);
      \u0275\u0275twoWayListener("ngModelChange", function AddSubtopicComponent_Template_select_ngModelChange_31_listener($event) {
        \u0275\u0275restoreView(_r1);
        \u0275\u0275twoWayBindingSet(ctx.selectedSubjectId, $event) || (ctx.selectedSubjectId = $event);
        return \u0275\u0275resetView($event);
      });
      \u0275\u0275listener("change", function AddSubtopicComponent_Template_select_change_31_listener() {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.onSubjectChange());
      });
      \u0275\u0275elementStart(32, "option", 13);
      \u0275\u0275text(33, "-- Select Subject --");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(34, "option", 14);
      \u0275\u0275text(35, "None");
      \u0275\u0275elementEnd();
      \u0275\u0275template(36, AddSubtopicComponent_option_36_Template, 2, 2, "option", 15);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(37, "div", 16);
      \u0275\u0275namespaceSVG();
      \u0275\u0275elementStart(38, "svg", 17);
      \u0275\u0275element(39, "path", 18);
      \u0275\u0275elementEnd()()()();
      \u0275\u0275namespaceHTML();
      \u0275\u0275elementStart(40, "div", 8)(41, "label", 21);
      \u0275\u0275text(42, " Select Topic ");
      \u0275\u0275elementStart(43, "span", 10);
      \u0275\u0275text(44, "*");
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(45, "div", 11)(46, "select", 22);
      \u0275\u0275twoWayListener("ngModelChange", function AddSubtopicComponent_Template_select_ngModelChange_46_listener($event) {
        \u0275\u0275restoreView(_r1);
        \u0275\u0275twoWayBindingSet(ctx.selectedTopicId, $event) || (ctx.selectedTopicId = $event);
        return \u0275\u0275resetView($event);
      });
      \u0275\u0275elementStart(47, "option", 13);
      \u0275\u0275text(48, "-- Select Topic --");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(49, "option", 14);
      \u0275\u0275text(50, "None");
      \u0275\u0275elementEnd();
      \u0275\u0275template(51, AddSubtopicComponent_option_51_Template, 2, 2, "option", 15);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(52, "div", 16);
      \u0275\u0275namespaceSVG();
      \u0275\u0275elementStart(53, "svg", 17);
      \u0275\u0275element(54, "path", 18);
      \u0275\u0275elementEnd()()()();
      \u0275\u0275namespaceHTML();
      \u0275\u0275elementStart(55, "div", 8)(56, "label", 23);
      \u0275\u0275text(57, " Subtopic Name ");
      \u0275\u0275elementStart(58, "span", 10);
      \u0275\u0275text(59, "*");
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(60, "input", 24);
      \u0275\u0275twoWayListener("ngModelChange", function AddSubtopicComponent_Template_input_ngModelChange_60_listener($event) {
        \u0275\u0275restoreView(_r1);
        \u0275\u0275twoWayBindingSet(ctx.subtopicName, $event) || (ctx.subtopicName = $event);
        return \u0275\u0275resetView($event);
      });
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(61, "div", 25)(62, "button", 26);
      \u0275\u0275template(63, AddSubtopicComponent_span_63_Template, 2, 0, "span", 27)(64, AddSubtopicComponent_span_64_Template, 5, 0, "span", 28);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(65, "button", 29);
      \u0275\u0275listener("click", function AddSubtopicComponent_Template_button_click_65_listener() {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.cancel());
      });
      \u0275\u0275text(66, " Cancel ");
      \u0275\u0275elementEnd()()()();
      \u0275\u0275elementStart(67, "div", 30)(68, "p", 31);
      \u0275\u0275text(69, " Subtopics provide granular organization within topics ");
      \u0275\u0275elementEnd()()()();
    }
    if (rf & 2) {
      \u0275\u0275advance(16);
      \u0275\u0275twoWayProperty("ngModel", ctx.selectedBranchId);
      \u0275\u0275advance(5);
      \u0275\u0275property("ngForOf", ctx.branches);
      \u0275\u0275advance(10);
      \u0275\u0275twoWayProperty("ngModel", ctx.selectedSubjectId);
      \u0275\u0275advance(5);
      \u0275\u0275property("ngForOf", ctx.subjects);
      \u0275\u0275advance(10);
      \u0275\u0275twoWayProperty("ngModel", ctx.selectedTopicId);
      \u0275\u0275advance(5);
      \u0275\u0275property("ngForOf", ctx.topics);
      \u0275\u0275advance(9);
      \u0275\u0275twoWayProperty("ngModel", ctx.subtopicName);
      \u0275\u0275advance(2);
      \u0275\u0275property("disabled", ctx.isLoading);
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", !ctx.isLoading);
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", ctx.isLoading);
    }
  }, dependencies: [CommonModule, NgForOf, NgIf, FormsModule, \u0275NgNoValidate, NgSelectOption, \u0275NgSelectMultipleOption, DefaultValueAccessor, SelectControlValueAccessor, NgControlStatus, NgControlStatusGroup, RequiredValidator, NgModel, NgForm], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AddSubtopicComponent, [{
    type: Component,
    args: [{ selector: "app-add-subtopic", standalone: true, imports: [CommonModule, FormsModule], template: '<!-- Modern Add Subtopic Form with Tailwind CSS -->\r\n<div class="min-h-screen bg-gradient-to-br from-success-50 to-success-100 py-6 px-4 sm:px-6 lg:px-8">\r\n  <div class="max-w-md mx-auto">\r\n    <!-- Form Header -->\r\n    <div class="text-center mb-8">\r\n      <h2 class="text-3xl font-bold text-gray-900 mb-2">Add New Subtopic</h2>\r\n      <p class="text-gray-600">Create a new subtopic under a topic</p>\r\n    </div>\r\n\r\n    <!-- Form Card -->\r\n    <div class="bg-white rounded-2xl shadow-lg p-8">\r\n      <form #subtopicForm="ngForm" (ngSubmit)="submitSubtopic(subtopicForm)" class="space-y-6">\r\n        \r\n        <!-- Branch Selection -->\r\n        <div class="form-group">\r\n          <label for="branch" class="block text-sm font-semibold text-gray-700 mb-2">\r\n            Select Branch <span class="text-red-500">*</span>\r\n          </label>\r\n          <div class="relative">\r\n            <select\r\n              id="branch"\r\n              name="branch"\r\n              required\r\n              [(ngModel)]="selectedBranchId"\r\n              (change)="onBranchChange()"\r\n              ngModel\r\n              class="form-select w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-success-500 focus:border-success-500 transition-colors appearance-none bg-white"\r\n            >\r\n              <option value="">-- Select Branch --</option>\r\n              <option value="none">None</option>\r\n              <option *ngFor="let branch of branches" [value]="branch._id">\r\n                {{ branch.name }}\r\n              </option>\r\n            </select>\r\n            <!-- Custom dropdown arrow -->\r\n            <div class="absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none">\r\n              <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r\n                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>\r\n              </svg>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Subject Selection -->\r\n        <div class="form-group">\r\n          <label for="subject" class="block text-sm font-semibold text-gray-700 mb-2">\r\n            Select Subject <span class="text-red-500">*</span>\r\n          </label>\r\n          <div class="relative">\r\n            <select\r\n              id="subject"\r\n              name="subject"\r\n              required\r\n              [(ngModel)]="selectedSubjectId"\r\n              (change)="onSubjectChange()"\r\n              ngModel\r\n              class="form-select w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-success-500 focus:border-success-500 transition-colors appearance-none bg-white"\r\n            >\r\n              <option value="">-- Select Subject --</option>\r\n              <option value="none">None</option>\r\n              <option *ngFor="let subject of subjects" [value]="subject._id">\r\n                {{ subject.name }}\r\n              </option>\r\n            </select>\r\n            <!-- Custom dropdown arrow -->\r\n            <div class="absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none">\r\n              <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r\n                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>\r\n              </svg>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Topic Selection -->\r\n        <div class="form-group">\r\n          <label for="topic" class="block text-sm font-semibold text-gray-700 mb-2">\r\n            Select Topic <span class="text-red-500">*</span>\r\n          </label>\r\n          <div class="relative">\r\n            <select\r\n              id="topic"\r\n              name="topic"\r\n              required\r\n              [(ngModel)]="selectedTopicId"\r\n              ngModel\r\n              class="form-select w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-success-500 focus:border-success-500 transition-colors appearance-none bg-white"\r\n            >\r\n              <option value="">-- Select Topic --</option>\r\n              <option value="none">None</option>\r\n              <option *ngFor="let topic of topics" [value]="topic._id">\r\n                {{ topic.name }}\r\n              </option>\r\n            </select>\r\n            <!-- Custom dropdown arrow -->\r\n            <div class="absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none">\r\n              <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r\n                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>\r\n              </svg>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Subtopic Name Input -->\r\n        <div class="form-group">\r\n          <label for="subtopic" class="block text-sm font-semibold text-gray-700 mb-2">\r\n            Subtopic Name <span class="text-red-500">*</span>\r\n          </label>\r\n          <input\r\n            type="text"\r\n            id="subtopic"\r\n            name="subtopic"\r\n            required\r\n            [(ngModel)]="subtopicName"\r\n            placeholder="Enter subtopic name"\r\n            class="form-input w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-success-500 focus:border-success-500 transition-colors"\r\n          />\r\n        </div>\r\n\r\n        <!-- Action Buttons -->\r\n        <div class="flex flex-col sm:flex-row gap-3 pt-4">\r\n          <button \r\n            type="submit" \r\n            [disabled]="isLoading"\r\n            class="btn-primary flex-1 px-6 py-3 bg-success-600 text-white rounded-lg font-semibold hover:bg-success-700 focus:outline-none focus:ring-2 focus:ring-success-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"\r\n          >\r\n            <span *ngIf="!isLoading">Create Subtopic</span>\r\n            <span *ngIf="isLoading" class="flex items-center justify-center">\r\n              <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">\r\n                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>\r\n                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>\r\n              </svg>\r\n              Saving...\r\n            </span>\r\n          </button>\r\n\r\n          <button \r\n            type="button" \r\n            (click)="cancel()"\r\n            class="btn-secondary flex-1 px-6 py-3 bg-gray-100 text-gray-700 rounded-lg font-semibold hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 transition-colors"\r\n          >\r\n            Cancel\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n\r\n    <!-- Help Text -->\r\n    <div class="mt-6 text-center">\r\n      <p class="text-sm text-gray-500">\r\n        Subtopics provide granular organization within topics\r\n      </p>\r\n    </div>\r\n  </div>\r\n</div>\r\n' }]
  }], () => [{ type: QuestionService }, { type: Router }], null);
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(AddSubtopicComponent, { className: "AddSubtopicComponent", filePath: "src/app/components/add-subtopic.component.ts", lineNumber: 14 });
})();

// src/app/components/csv-upload/csv-upload.component.ts
var Papa = __toESM(require_papaparse_min());
function CsvUploadComponent_div_19_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 18)(1, "div", 19);
    \u0275\u0275element(2, "i", 20);
    \u0275\u0275elementStart(3, "span", 21);
    \u0275\u0275text(4, "No questions parsed yet");
    \u0275\u0275elementEnd()()();
  }
}
function CsvUploadComponent_div_20_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 22)(1, "div", 23)(2, "div", 19);
    \u0275\u0275element(3, "i", 24);
    \u0275\u0275elementStart(4, "span", 25);
    \u0275\u0275text(5);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(6, "div", 26)(7, "button", 27);
    \u0275\u0275listener("click", function CsvUploadComponent_div_20_Template_button_click_7_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.submitToBackend());
    });
    \u0275\u0275element(8, "i", 28);
    \u0275\u0275text(9, " Submit to Backend ");
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(5);
    \u0275\u0275textInterpolate1(" ", ctx_r1.parsedQuestions.length, " questions successfully parsed ");
  }
}
function CsvUploadComponent_div_21_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 29)(1, "div", 30)(2, "div", 19);
    \u0275\u0275element(3, "i", 31);
    \u0275\u0275elementStart(4, "span", 32);
    \u0275\u0275text(5);
    \u0275\u0275elementEnd()()()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(5);
    \u0275\u0275textInterpolate(ctx_r1.uploadMessage);
  }
}
var CsvUploadComponent = class _CsvUploadComponent {
  questionService;
  parsedQuestions = [];
  uploadMessage = "";
  constructor(questionService) {
    this.questionService = questionService;
  }
  onFileSelected(event) {
    const file = event.target.files[0];
    if (file) {
      console.log("\u{1F4DD} Selected file:", file.name);
      Papa.parse(file, {
        header: true,
        skipEmptyLines: true,
        complete: (result) => {
          console.log("\u{1F9FE} Raw CSV result:", result);
          const cleanedData = result.data.map((row) => {
            const cleanedRow = {};
            Object.keys(row).forEach((key) => {
              const trimmedKey = key.trim();
              const trimmedValue = row[key]?.trim?.() ?? row[key];
              cleanedRow[trimmedKey] = trimmedValue;
            });
            return cleanedRow;
          });
          console.log("\u{1F9F9} Cleaned Data:", cleanedData);
          this.parsedQuestions = cleanedData;
        },
        error: (error) => {
          console.error("\u274C Parsing error:", error);
        }
      });
    }
  }
  submitToBackend() {
    if (this.parsedQuestions.length === 0) {
      this.uploadMessage = "No data to upload.";
      return;
    }
    const formattedQuestions = this.parsedQuestions.map((q) => {
      const optionTexts = (q.options || "").split("|").map((s) => s.trim());
      const correctTexts = (q.correctOptions || "").split("|").map((s) => s.trim());
      const options = optionTexts.map((text3) => ({
        text: text3,
        isCorrect: correctTexts.includes(text3)
      }));
      let explanations = [];
      try {
        explanations = q.explanations ? JSON.parse(q.explanations) : [];
      } catch {
        console.warn("Invalid explanations JSON:", q.explanations);
      }
      let askedIn = [];
      try {
        askedIn = q.askedIn ? JSON.parse(q.askedIn) : [];
      } catch {
        console.warn("Invalid askedIn JSON:", q.askedIn);
      }
      return {
        questionText: q.questionText?.trim(),
        options,
        correctOptions: correctTexts,
        explanation: q.explanation?.trim(),
        difficulty: this.validateEnum(q.difficulty, ["Easy", "Medium", "Hard"], "Medium"),
        marks: parseFloat(q.marks) || 1,
        branch: q.branch?.trim(),
        subject: q.subject?.trim(),
        topic: q.topic?.trim(),
        subtopic: q.subtopic?.trim(),
        examType: q.examType?.trim(),
        explanations,
        askedIn,
        status: this.validateEnum(q.status, ["active", "inactive"], "active"),
        version: parseInt(q.version) || 1
      };
    });
    this.questionService.importQuestions(formattedQuestions).subscribe({
      next: (res) => {
        this.uploadMessage = "CSV uploaded successfully!";
        this.parsedQuestions = [];
      },
      error: (err) => {
        this.uploadMessage = "Upload failed. Check console.";
        console.error(err);
      }
    });
  }
  validateEnum(value, allowed, fallback) {
    const cleaned = value?.trim();
    return allowed.includes(cleaned) ? cleaned : fallback;
  }
  static \u0275fac = function CsvUploadComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _CsvUploadComponent)(\u0275\u0275directiveInject(QuestionService));
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _CsvUploadComponent, selectors: [["app-csv-upload"]], decls: 22, vars: 3, consts: [[1, "min-h-screen", "bg-gradient-to-br", "from-purple-50", "via-blue-50", "to-indigo-100", "p-4", "lg:p-6"], [1, "max-w-4xl", "mx-auto"], [1, "bg-white", "rounded-2xl", "shadow-xl", "border", "border-gray-200", "p-6", "mb-8"], [1, "text-3xl", "font-bold", "text-gray-900", "flex", "items-center", "gap-3"], [1, "fas", "fa-file-csv", "text-green-500"], [1, "text-gray-600", "mt-2"], [1, "bg-white", "rounded-2xl", "shadow-xl", "border", "border-gray-200", "p-6", "lg:p-8"], [1, "border-2", "border-dashed", "border-gray-300", "rounded-lg", "p-8", "text-center", "hover:border-gray-400", "transition-colors", "duration-200"], [1, "flex", "flex-col", "items-center"], [1, "fas", "fa-cloud-upload-alt", "text-4xl", "text-gray-400", "mb-4"], [1, "cursor-pointer"], [1, "bg-gradient-to-r", "from-blue-500", "to-blue-600", "hover:from-blue-600", "hover:to-blue-700", "text-white", "px-6", "py-3", "rounded-lg", "font-semibold", "transition-all", "duration-200", "transform", "hover:scale-105", "shadow-lg", "inline-flex", "items-center", "gap-2"], [1, "fas", "fa-file-upload"], ["type", "file", "accept", ".csv", 1, "hidden", 3, "change"], [1, "text-gray-500", "mt-2"], ["class", "mt-6 bg-yellow-50 border border-yellow-200 rounded-lg p-4", 4, "ngIf"], ["class", "mt-8", 4, "ngIf"], ["class", "mt-6", 4, "ngIf"], [1, "mt-6", "bg-yellow-50", "border", "border-yellow-200", "rounded-lg", "p-4"], [1, "flex", "items-center"], [1, "fas", "fa-exclamation-triangle", "text-yellow-500", "mr-3"], [1, "text-yellow-800", "font-medium"], [1, "mt-8"], [1, "bg-green-50", "border", "border-green-200", "rounded-lg", "p-4", "mb-6"], [1, "fas", "fa-check-circle", "text-green-500", "mr-3"], [1, "text-green-800", "font-semibold"], [1, "flex", "justify-center"], [1, "bg-gradient-to-r", "from-green-500", "to-green-600", "hover:from-green-600", "hover:to-green-700", "text-white", "px-8", "py-3", "rounded-lg", "font-semibold", "transition-all", "duration-200", "transform", "hover:scale-105", "shadow-lg", "flex", "items-center", "gap-2", 3, "click"], [1, "fas", "fa-upload"], [1, "mt-6"], [1, "bg-blue-50", "border", "border-blue-200", "rounded-lg", "p-4"], [1, "fas", "fa-info-circle", "text-blue-500", "mr-3"], [1, "text-blue-800"]], template: function CsvUploadComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1)(2, "div", 2)(3, "h3", 3);
      \u0275\u0275element(4, "i", 4);
      \u0275\u0275text(5, " CSV Import Questions ");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(6, "p", 5);
      \u0275\u0275text(7, "Upload and import questions from CSV files");
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(8, "div", 6)(9, "div", 7)(10, "div", 8);
      \u0275\u0275element(11, "i", 9);
      \u0275\u0275elementStart(12, "label", 10)(13, "span", 11);
      \u0275\u0275element(14, "i", 12);
      \u0275\u0275text(15, " Choose CSV File ");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(16, "input", 13);
      \u0275\u0275listener("change", function CsvUploadComponent_Template_input_change_16_listener($event) {
        return ctx.onFileSelected($event);
      });
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(17, "p", 14);
      \u0275\u0275text(18, "Select a CSV file to upload questions");
      \u0275\u0275elementEnd()()();
      \u0275\u0275template(19, CsvUploadComponent_div_19_Template, 5, 0, "div", 15)(20, CsvUploadComponent_div_20_Template, 10, 1, "div", 16)(21, CsvUploadComponent_div_21_Template, 6, 1, "div", 17);
      \u0275\u0275elementEnd()()();
    }
    if (rf & 2) {
      \u0275\u0275advance(19);
      \u0275\u0275property("ngIf", ctx.parsedQuestions.length === 0);
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", ctx.parsedQuestions.length > 0);
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", ctx.uploadMessage);
    }
  }, dependencies: [CommonModule, NgIf, FormsModule], styles: ["\n\n.border-dashed[_ngcontent-%COMP%]:hover {\n  background-color: rgba(59, 130, 246, 0.02);\n}\n/*# sourceMappingURL=csv-upload.component.css.map */"] });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CsvUploadComponent, [{
    type: Component,
    args: [{ selector: "app-csv-upload", standalone: true, imports: [CommonModule, FormsModule], template: '<div class="min-h-screen bg-gradient-to-br from-purple-50 via-blue-50 to-indigo-100 p-4 lg:p-6">\r\n  <div class="max-w-4xl mx-auto">\r\n    <!-- Header Section -->\r\n    <div class="bg-white rounded-2xl shadow-xl border border-gray-200 p-6 mb-8">\r\n      <h3 class="text-3xl font-bold text-gray-900 flex items-center gap-3">\r\n        <i class="fas fa-file-csv text-green-500"></i>\r\n        CSV Import Questions\r\n      </h3>\r\n      <p class="text-gray-600 mt-2">Upload and import questions from CSV files</p>\r\n    </div>\r\n\r\n    <!-- Upload Section -->\r\n    <div class="bg-white rounded-2xl shadow-xl border border-gray-200 p-6 lg:p-8">\r\n      <!-- File Upload Area -->\r\n      <div class="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center hover:border-gray-400 transition-colors duration-200">\r\n        <div class="flex flex-col items-center">\r\n          <i class="fas fa-cloud-upload-alt text-4xl text-gray-400 mb-4"></i>\r\n          <label class="cursor-pointer">\r\n            <span class="bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white px-6 py-3 rounded-lg font-semibold transition-all duration-200 transform hover:scale-105 shadow-lg inline-flex items-center gap-2">\r\n              <i class="fas fa-file-upload"></i>\r\n              Choose CSV File\r\n            </span>\r\n            <input \r\n              type="file" \r\n              (change)="onFileSelected($event)" \r\n              accept=".csv" \r\n              class="hidden" />\r\n          </label>\r\n          <p class="text-gray-500 mt-2">Select a CSV file to upload questions</p>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- No Questions Warning -->\r\n      <div *ngIf="parsedQuestions.length === 0" class="mt-6 bg-yellow-50 border border-yellow-200 rounded-lg p-4">\r\n        <div class="flex items-center">\r\n          <i class="fas fa-exclamation-triangle text-yellow-500 mr-3"></i>\r\n          <span class="text-yellow-800 font-medium">No questions parsed yet</span>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Parsed Questions Summary -->\r\n      <div *ngIf="parsedQuestions.length > 0" class="mt-8">\r\n        <!-- Success Message -->\r\n        <div class="bg-green-50 border border-green-200 rounded-lg p-4 mb-6">\r\n          <div class="flex items-center">\r\n            <i class="fas fa-check-circle text-green-500 mr-3"></i>\r\n            <span class="text-green-800 font-semibold">\r\n              {{ parsedQuestions.length }} questions successfully parsed\r\n            </span>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Submit Button -->\r\n        <div class="flex justify-center">\r\n          <button \r\n            (click)="submitToBackend()"\r\n            class="bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white px-8 py-3 rounded-lg font-semibold transition-all duration-200 transform hover:scale-105 shadow-lg flex items-center gap-2">\r\n            <i class="fas fa-upload"></i>\r\n            Submit to Backend\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Upload Message -->\r\n      <div *ngIf="uploadMessage" class="mt-6">\r\n        <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">\r\n          <div class="flex items-center">\r\n            <i class="fas fa-info-circle text-blue-500 mr-3"></i>\r\n            <span class="text-blue-800">{{ uploadMessage }}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n', styles: ["/* src/app/components/csv-upload/csv-upload.component.scss */\n.border-dashed:hover {\n  background-color: rgba(59, 130, 246, 0.02);\n}\n/*# sourceMappingURL=csv-upload.component.css.map */\n"] }]
  }], () => [{ type: QuestionService }], null);
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(CsvUploadComponent, { className: "CsvUploadComponent", filePath: "src/app/components/csv-upload/csv-upload.component.ts", lineNumber: 14 });
})();

// src/app/components/exam-family/exam-family-list/exam-family-list.component.ts
var _c07 = () => ["/exam-families/new"];
function ExamFamilyListComponent_tr_28_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "tr", 19)(1, "td", 20);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "td", 21)(4, "span", 22);
    \u0275\u0275text(5);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(6, "td", 23);
    \u0275\u0275text(7);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const f_r1 = ctx.$implicit;
    const i_r2 = ctx.index;
    \u0275\u0275classProp("bg-gray-50", i_r2 % 2 === 1);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(f_r1.name);
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate1(" ", f_r1.code, " ");
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(f_r1.description);
  }
}
function ExamFamilyListComponent_div_29_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 24)(1, "div", 25);
    \u0275\u0275element(2, "i", 26);
    \u0275\u0275elementStart(3, "h3", 27);
    \u0275\u0275text(4, "No Families Found");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(5, "p", 28);
    \u0275\u0275text(6, "Get started by creating your first exam family");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(7, "button", 7);
    \u0275\u0275element(8, "i", 8);
    \u0275\u0275text(9, " Add First Family ");
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    \u0275\u0275advance(7);
    \u0275\u0275property("routerLink", \u0275\u0275pureFunction0(1, _c07));
  }
}
var ExamFamilyListComponent = class _ExamFamilyListComponent {
  svc;
  families = [];
  constructor(svc) {
    this.svc = svc;
  }
  ngOnInit() {
    this.svc.getAll().subscribe((data) => this.families = data);
  }
  static \u0275fac = function ExamFamilyListComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _ExamFamilyListComponent)(\u0275\u0275directiveInject(ExamFamilyService));
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _ExamFamilyListComponent, selectors: [["app-exam-family-list"]], decls: 30, vars: 4, consts: [[1, "min-h-screen", "bg-gradient-to-br", "from-purple-50", "via-blue-50", "to-indigo-100", "p-4", "lg:p-6"], [1, "max-w-7xl", "mx-auto"], [1, "bg-white", "rounded-2xl", "shadow-xl", "border", "border-gray-200", "p-6", "mb-8"], [1, "flex", "flex-col", "sm:flex-row", "sm:items-center", "sm:justify-between", "gap-4"], [1, "text-3xl", "font-bold", "text-gray-900", "flex", "items-center", "gap-3"], [1, "fas", "fa-sitemap", "text-indigo-500"], [1, "text-gray-600", "mt-2"], [1, "bg-gradient-to-r", "from-indigo-500", "to-indigo-600", "hover:from-indigo-600", "hover:to-indigo-700", "text-white", "px-6", "py-3", "rounded-lg", "font-semibold", "transition-all", "duration-200", "transform", "hover:scale-105", "shadow-lg", "flex", "items-center", "gap-2", 3, "routerLink"], [1, "fas", "fa-plus"], [1, "bg-white", "rounded-2xl", "shadow-xl", "border", "border-gray-200", "overflow-hidden"], [1, "overflow-x-auto"], [1, "w-full"], [1, "bg-gradient-to-r", "from-gray-800", "to-gray-900", "text-white"], [1, "px-6", "py-4", "text-left", "font-semibold"], [1, "fas", "fa-tag", "mr-2"], [1, "fas", "fa-code", "mr-2"], [1, "fas", "fa-align-left", "mr-2"], ["class", "border-b border-gray-100 hover:bg-gray-50 transition-colors duration-200", 3, "bg-gray-50", 4, "ngFor", "ngForOf"], ["class", "text-center py-16", 4, "ngIf"], [1, "border-b", "border-gray-100", "hover:bg-gray-50", "transition-colors", "duration-200"], [1, "px-6", "py-4", "text-gray-900", "font-semibold"], [1, "px-6", "py-4", "text-gray-700"], [1, "bg-gray-100", "text-gray-800", "px-3", "py-1", "rounded-full", "text-sm", "font-mono"], [1, "px-6", "py-4", "text-gray-600"], [1, "text-center", "py-16"], [1, "flex", "flex-col", "items-center"], [1, "fas", "fa-sitemap", "text-6xl", "text-gray-300", "mb-4"], [1, "text-xl", "font-semibold", "text-gray-600", "mb-2"], [1, "text-gray-500", "mb-6"]], template: function ExamFamilyListComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1)(2, "div", 2)(3, "div", 3)(4, "div")(5, "h2", 4);
      \u0275\u0275element(6, "i", 5);
      \u0275\u0275text(7, " Exam Families ");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "p", 6);
      \u0275\u0275text(9, "Manage top-level exam family categories");
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(10, "button", 7);
      \u0275\u0275element(11, "i", 8);
      \u0275\u0275text(12, " Add Family ");
      \u0275\u0275elementEnd()()();
      \u0275\u0275elementStart(13, "div", 9)(14, "div", 10)(15, "table", 11)(16, "thead")(17, "tr", 12)(18, "th", 13);
      \u0275\u0275element(19, "i", 14);
      \u0275\u0275text(20, "Name ");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(21, "th", 13);
      \u0275\u0275element(22, "i", 15);
      \u0275\u0275text(23, "Code ");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(24, "th", 13);
      \u0275\u0275element(25, "i", 16);
      \u0275\u0275text(26, "Description ");
      \u0275\u0275elementEnd()()();
      \u0275\u0275elementStart(27, "tbody");
      \u0275\u0275template(28, ExamFamilyListComponent_tr_28_Template, 8, 5, "tr", 17);
      \u0275\u0275elementEnd()();
      \u0275\u0275template(29, ExamFamilyListComponent_div_29_Template, 10, 2, "div", 18);
      \u0275\u0275elementEnd()()()();
    }
    if (rf & 2) {
      \u0275\u0275advance(10);
      \u0275\u0275property("routerLink", \u0275\u0275pureFunction0(3, _c07));
      \u0275\u0275advance(18);
      \u0275\u0275property("ngForOf", ctx.families);
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", ctx.families.length === 0);
    }
  }, dependencies: [CommonModule, NgForOf, NgIf, RouterModule, RouterLink], styles: ["\n\n.overflow-x-auto[_ngcontent-%COMP%] {\n  scrollbar-width: thin;\n  scrollbar-color: #cbd5e0 #f7fafc;\n}\n.overflow-x-auto[_ngcontent-%COMP%]::-webkit-scrollbar {\n  height: 6px;\n}\n.overflow-x-auto[_ngcontent-%COMP%]::-webkit-scrollbar-track {\n  background: #f7fafc;\n  border-radius: 3px;\n}\n.overflow-x-auto[_ngcontent-%COMP%]::-webkit-scrollbar-thumb {\n  background: #cbd5e0;\n  border-radius: 3px;\n}\n.overflow-x-auto[_ngcontent-%COMP%]::-webkit-scrollbar-thumb:hover {\n  background: #a0aec0;\n}\n/*# sourceMappingURL=exam-family-list.component.css.map */"] });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ExamFamilyListComponent, [{
    type: Component,
    args: [{ standalone: true, selector: "app-exam-family-list", imports: [CommonModule, RouterModule], template: `<div class="min-h-screen bg-gradient-to-br from-purple-50 via-blue-50 to-indigo-100 p-4 lg:p-6">\r
  <div class="max-w-7xl mx-auto">\r
    <!-- Header Section -->\r
    <div class="bg-white rounded-2xl shadow-xl border border-gray-200 p-6 mb-8">\r
      <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">\r
        <div>\r
          <h2 class="text-3xl font-bold text-gray-900 flex items-center gap-3">\r
            <i class="fas fa-sitemap text-indigo-500"></i>\r
            Exam Families\r
          </h2>\r
          <p class="text-gray-600 mt-2">Manage top-level exam family categories</p>\r
        </div>\r
        \r
        <button \r
          [routerLink]="['/exam-families/new']" \r
          class="bg-gradient-to-r from-indigo-500 to-indigo-600 hover:from-indigo-600 hover:to-indigo-700 text-white px-6 py-3 rounded-lg font-semibold transition-all duration-200 transform hover:scale-105 shadow-lg flex items-center gap-2">\r
          <i class="fas fa-plus"></i>\r
          Add Family\r
        </button>\r
      </div>\r
    </div>\r
\r
    <!-- Table Section -->\r
    <div class="bg-white rounded-2xl shadow-xl border border-gray-200 overflow-hidden">\r
      <div class="overflow-x-auto">\r
        <table class="w-full">\r
          <thead>\r
            <tr class="bg-gradient-to-r from-gray-800 to-gray-900 text-white">\r
              <th class="px-6 py-4 text-left font-semibold">\r
                <i class="fas fa-tag mr-2"></i>Name\r
              </th>\r
              <th class="px-6 py-4 text-left font-semibold">\r
                <i class="fas fa-code mr-2"></i>Code\r
              </th>\r
              <th class="px-6 py-4 text-left font-semibold">\r
                <i class="fas fa-align-left mr-2"></i>Description\r
              </th>\r
            </tr>\r
          </thead>\r
          <tbody>\r
            <tr *ngFor="let f of families; let i = index" \r
                class="border-b border-gray-100 hover:bg-gray-50 transition-colors duration-200"\r
                [class.bg-gray-50]="i % 2 === 1">\r
              <td class="px-6 py-4 text-gray-900 font-semibold">{{ f.name }}</td>\r
              <td class="px-6 py-4 text-gray-700">\r
                <span class="bg-gray-100 text-gray-800 px-3 py-1 rounded-full text-sm font-mono">\r
                  {{ f.code }}\r
                </span>\r
              </td>\r
              <td class="px-6 py-4 text-gray-600">{{ f.description }}</td>\r
            </tr>\r
          </tbody>\r
        </table>\r
\r
        <!-- Empty State -->\r
        <div *ngIf="families.length === 0" class="text-center py-16">\r
          <div class="flex flex-col items-center">\r
            <i class="fas fa-sitemap text-6xl text-gray-300 mb-4"></i>\r
            <h3 class="text-xl font-semibold text-gray-600 mb-2">No Families Found</h3>\r
            <p class="text-gray-500 mb-6">Get started by creating your first exam family</p>\r
            <button \r
              [routerLink]="['/exam-families/new']"\r
              class="bg-gradient-to-r from-indigo-500 to-indigo-600 hover:from-indigo-600 hover:to-indigo-700 text-white px-6 py-3 rounded-lg font-semibold transition-all duration-200 transform hover:scale-105 shadow-lg flex items-center gap-2">\r
              <i class="fas fa-plus"></i>\r
              Add First Family\r
            </button>\r
          </div>\r
        </div>\r
      </div>\r
    </div>\r
  </div>\r
</div>\r
`, styles: ["/* src/app/components/exam-family/exam-family-list/exam-family-list.component.scss */\n.overflow-x-auto {\n  scrollbar-width: thin;\n  scrollbar-color: #cbd5e0 #f7fafc;\n}\n.overflow-x-auto::-webkit-scrollbar {\n  height: 6px;\n}\n.overflow-x-auto::-webkit-scrollbar-track {\n  background: #f7fafc;\n  border-radius: 3px;\n}\n.overflow-x-auto::-webkit-scrollbar-thumb {\n  background: #cbd5e0;\n  border-radius: 3px;\n}\n.overflow-x-auto::-webkit-scrollbar-thumb:hover {\n  background: #a0aec0;\n}\n/*# sourceMappingURL=exam-family-list.component.css.map */\n"] }]
  }], () => [{ type: ExamFamilyService }], null);
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(ExamFamilyListComponent, { className: "ExamFamilyListComponent", filePath: "src/app/components/exam-family/exam-family-list/exam-family-list.component.ts", lineNumber: 13 });
})();

// src/app/components/exam-family/add-exam-family/add-exam-family.component.ts
var AddExamFamilyComponent = class _AddExamFamilyComponent {
  fb;
  svc;
  router;
  form;
  constructor(fb, svc, router) {
    this.fb = fb;
    this.svc = svc;
    this.router = router;
  }
  ngOnInit() {
    this.form = this.fb.group({
      name: ["", Validators.required],
      code: ["", Validators.required],
      // ← make code required
      description: [""]
    });
  }
  onSubmit() {
    if (this.form.invalid)
      return;
    this.svc.create(this.form.value).subscribe({
      next: (family) => {
        window.alert(`\u2705 Exam Family "${family.name}" added successfully.`);
        this.router.navigate(["/exam-families"]);
      },
      error: (err) => {
        const msg = err.error?.message || err.message || "Unknown error";
        window.alert(`\u274C Failed to add Exam Family: ${msg}`);
      }
    });
  }
  static \u0275fac = function AddExamFamilyComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AddExamFamilyComponent)(\u0275\u0275directiveInject(FormBuilder), \u0275\u0275directiveInject(ExamFamilyService), \u0275\u0275directiveInject(Router));
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _AddExamFamilyComponent, selectors: [["app-add-exam-family"]], decls: 24, vars: 2, consts: [[1, "min-h-screen", "bg-gradient-to-br", "from-purple-50", "via-blue-50", "to-indigo-100", "p-4", "lg:p-6"], [1, "max-w-4xl", "mx-auto"], [1, "bg-white", "rounded-2xl", "shadow-xl", "border", "border-gray-200", "p-6", "mb-8"], [1, "text-3xl", "font-bold", "text-gray-900", "flex", "items-center", "gap-3"], [1, "fas", "fa-plus-circle", "text-indigo-500"], [1, "text-gray-600", "mt-2"], [1, "bg-white", "rounded-2xl", "shadow-xl", "border", "border-gray-200", "p-6", "lg:p-8"], [1, "space-y-6", 3, "ngSubmit", "formGroup"], [1, "form-group"], [1, "flex", "items-center", "gap-2", "text-sm", "font-semibold", "text-gray-700", "mb-2"], [1, "fas", "fa-tag", "text-indigo-500"], ["formControlName", "name", "placeholder", "e.g. Medical Exams", 1, "w-full", "px-4", "py-3", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-indigo-500", "focus:border-indigo-500", "transition-colors", "duration-200", "placeholder-gray-400"], [1, "fas", "fa-code", "text-green-500"], ["formControlName", "code", "placeholder", "e.g. medical-exams", 1, "w-full", "px-4", "py-3", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-indigo-500", "focus:border-indigo-500", "transition-colors", "duration-200", "placeholder-gray-400"], [1, "flex", "justify-end", "pt-4"], ["type", "submit", 1, "bg-gradient-to-r", "from-indigo-500", "to-indigo-600", "hover:from-indigo-600", "hover:to-indigo-700", "text-white", "px-8", "py-3", "rounded-lg", "font-semibold", "transition-all", "duration-200", "transform", "hover:scale-105", "shadow-lg", "disabled:from-gray-400", "disabled:to-gray-500", "disabled:cursor-not-allowed", "disabled:transform-none", "disabled:shadow-none", "flex", "items-center", "gap-2", 3, "disabled"], [1, "fas", "fa-save"]], template: function AddExamFamilyComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1)(2, "div", 2)(3, "h2", 3);
      \u0275\u0275element(4, "i", 4);
      \u0275\u0275text(5, " Add Exam Family ");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(6, "p", 5);
      \u0275\u0275text(7, "Create a new top-level exam family category");
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(8, "div", 6)(9, "form", 7);
      \u0275\u0275listener("ngSubmit", function AddExamFamilyComponent_Template_form_ngSubmit_9_listener() {
        return ctx.onSubmit();
      });
      \u0275\u0275elementStart(10, "div", 8)(11, "label", 9);
      \u0275\u0275element(12, "i", 10);
      \u0275\u0275text(13, " Name ");
      \u0275\u0275elementEnd();
      \u0275\u0275element(14, "input", 11);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(15, "div", 8)(16, "label", 9);
      \u0275\u0275element(17, "i", 12);
      \u0275\u0275text(18, " Code ");
      \u0275\u0275elementEnd();
      \u0275\u0275element(19, "input", 13);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(20, "div", 14)(21, "button", 15);
      \u0275\u0275element(22, "i", 16);
      \u0275\u0275text(23, " Save Family ");
      \u0275\u0275elementEnd()()()()()();
    }
    if (rf & 2) {
      \u0275\u0275advance(9);
      \u0275\u0275property("formGroup", ctx.form);
      \u0275\u0275advance(12);
      \u0275\u0275property("disabled", ctx.form.invalid);
    }
  }, dependencies: [CommonModule, ReactiveFormsModule, \u0275NgNoValidate, DefaultValueAccessor, NgControlStatus, NgControlStatusGroup, FormGroupDirective, FormControlName, RouterModule], styles: ["\n\n.form-group[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]:focus {\n  box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);\n}\nbutton[type=submit][_ngcontent-%COMP%]:hover:not(:disabled) {\n  box-shadow: 0 10px 25px rgba(99, 102, 241, 0.3);\n}\n/*# sourceMappingURL=add-exam-family.component.css.map */"] });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AddExamFamilyComponent, [{
    type: Component,
    args: [{ standalone: true, selector: "app-add-exam-family", imports: [CommonModule, ReactiveFormsModule, RouterModule], template: '<div class="min-h-screen bg-gradient-to-br from-purple-50 via-blue-50 to-indigo-100 p-4 lg:p-6">\r\n  <div class="max-w-4xl mx-auto">\r\n    <!-- Header Section -->\r\n    <div class="bg-white rounded-2xl shadow-xl border border-gray-200 p-6 mb-8">\r\n      <h2 class="text-3xl font-bold text-gray-900 flex items-center gap-3">\r\n        <i class="fas fa-plus-circle text-indigo-500"></i>\r\n        Add Exam Family\r\n      </h2>\r\n      <p class="text-gray-600 mt-2">Create a new top-level exam family category</p>\r\n    </div>\r\n\r\n    <!-- Form Section -->\r\n    <div class="bg-white rounded-2xl shadow-xl border border-gray-200 p-6 lg:p-8">\r\n      <form [formGroup]="form" (ngSubmit)="onSubmit()" class="space-y-6">\r\n        <!-- Name Input -->        <div class="form-group">\r\n          <label class="flex items-center gap-2 text-sm font-semibold text-gray-700 mb-2">\r\n            <i class="fas fa-tag text-indigo-500"></i>\r\n            Name\r\n          </label>\r\n          <input \r\n            formControlName="name" \r\n            placeholder="e.g. Medical Exams"\r\n            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-colors duration-200 placeholder-gray-400" />\r\n        </div>\r\n\r\n        <!-- Code Input -->\r\n        <div class="form-group">\r\n          <label class="flex items-center gap-2 text-sm font-semibold text-gray-700 mb-2">\r\n            <i class="fas fa-code text-green-500"></i>\r\n            Code\r\n          </label>\r\n          <input \r\n            formControlName="code" \r\n            placeholder="e.g. medical-exams"\r\n            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-colors duration-200 placeholder-gray-400" />\r\n        </div>\r\n\r\n        <!-- Submit Button -->\r\n        <div class="flex justify-end pt-4">\r\n          <button \r\n            type="submit" \r\n            [disabled]="form.invalid"\r\n            class="bg-gradient-to-r from-indigo-500 to-indigo-600 hover:from-indigo-600 hover:to-indigo-700 text-white px-8 py-3 rounded-lg font-semibold transition-all duration-200 transform hover:scale-105 shadow-lg disabled:from-gray-400 disabled:to-gray-500 disabled:cursor-not-allowed disabled:transform-none disabled:shadow-none flex items-center gap-2">\r\n            <i class="fas fa-save"></i>\r\n            Save Family\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</div>\r\n', styles: ["/* src/app/components/exam-family/add-exam-family/add-exam-family.component.scss */\n.form-group input:focus {\n  box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);\n}\nbutton[type=submit]:hover:not(:disabled) {\n  box-shadow: 0 10px 25px rgba(99, 102, 241, 0.3);\n}\n/*# sourceMappingURL=add-exam-family.component.css.map */\n"] }]
  }], () => [{ type: FormBuilder }, { type: ExamFamilyService }, { type: Router }], null);
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(AddExamFamilyComponent, { className: "AddExamFamilyComponent", filePath: "src/app/components/exam-family/add-exam-family/add-exam-family.component.ts", lineNumber: 14 });
})();

// src/app/components/exam-stream/exam-stream-list/exam-stream-list.component.ts
var _c08 = () => ["/exam-streams", "new"];
function ExamStreamListComponent_tr_28_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "tr", 19)(1, "td", 20)(2, "span", 21);
    \u0275\u0275text(3);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(4, "td", 22)(5, "span", 23);
    \u0275\u0275text(6);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(7, "td", 20);
    \u0275\u0275text(8);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const s_r1 = ctx.$implicit;
    const i_r2 = ctx.index;
    \u0275\u0275classProp("bg-gray-50", i_r2 % 2 === 1);
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate1(" ", s_r1.family, " ");
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate1(" ", s_r1.code, " ");
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(s_r1.name);
  }
}
function ExamStreamListComponent_div_29_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 24)(1, "div", 25);
    \u0275\u0275element(2, "i", 26);
    \u0275\u0275elementStart(3, "h3", 27);
    \u0275\u0275text(4, "No Streams Found");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(5, "p", 28);
    \u0275\u0275text(6, "Get started by creating your first exam stream");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(7, "button", 7);
    \u0275\u0275element(8, "i", 8);
    \u0275\u0275text(9, " Add First Stream ");
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    \u0275\u0275advance(7);
    \u0275\u0275property("routerLink", \u0275\u0275pureFunction0(1, _c08));
  }
}
var ExamStreamListComponent = class _ExamStreamListComponent {
  svc;
  streams = [];
  constructor(svc) {
    this.svc = svc;
  }
  ngOnInit() {
    this.svc.getAll().subscribe((data) => this.streams = data);
  }
  static \u0275fac = function ExamStreamListComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _ExamStreamListComponent)(\u0275\u0275directiveInject(ExamStreamService));
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _ExamStreamListComponent, selectors: [["app-exam-stream-list"]], decls: 30, vars: 4, consts: [[1, "min-h-screen", "bg-gradient-to-br", "from-purple-50", "via-blue-50", "to-indigo-100", "p-4", "lg:p-6"], [1, "max-w-7xl", "mx-auto"], [1, "bg-white", "rounded-2xl", "shadow-xl", "border", "border-gray-200", "p-6", "mb-8"], [1, "flex", "flex-col", "sm:flex-row", "sm:items-center", "sm:justify-between", "gap-4"], [1, "text-3xl", "font-bold", "text-gray-900", "flex", "items-center", "gap-3"], [1, "fas", "fa-stream", "text-blue-500"], [1, "text-gray-600", "mt-2"], [1, "bg-gradient-to-r", "from-blue-500", "to-blue-600", "hover:from-blue-600", "hover:to-blue-700", "text-white", "px-6", "py-3", "rounded-lg", "font-semibold", "transition-all", "duration-200", "transform", "hover:scale-105", "shadow-lg", "flex", "items-center", "gap-2", 3, "routerLink"], [1, "fas", "fa-plus"], [1, "bg-white", "rounded-2xl", "shadow-xl", "border", "border-gray-200", "overflow-hidden"], [1, "overflow-x-auto"], [1, "w-full"], [1, "bg-gradient-to-r", "from-gray-800", "to-gray-900", "text-white"], [1, "px-6", "py-4", "text-left", "font-semibold"], [1, "fas", "fa-users", "mr-2"], [1, "fas", "fa-code", "mr-2"], [1, "fas", "fa-tag", "mr-2"], ["class", "border-b border-gray-100 hover:bg-gray-50 transition-colors duration-200", 3, "bg-gray-50", 4, "ngFor", "ngForOf"], ["class", "text-center py-16", 4, "ngIf"], [1, "border-b", "border-gray-100", "hover:bg-gray-50", "transition-colors", "duration-200"], [1, "px-6", "py-4", "text-gray-700", "font-medium"], [1, "bg-purple-100", "text-purple-800", "px-3", "py-1", "rounded-full", "text-sm", "font-semibold"], [1, "px-6", "py-4"], [1, "text-gray-900", "font-mono", "bg-gray-100", "rounded", "px-2", "py-1", "inline-block"], [1, "text-center", "py-16"], [1, "flex", "flex-col", "items-center"], [1, "fas", "fa-stream", "text-6xl", "text-gray-300", "mb-4"], [1, "text-xl", "font-semibold", "text-gray-600", "mb-2"], [1, "text-gray-500", "mb-6"]], template: function ExamStreamListComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1)(2, "div", 2)(3, "div", 3)(4, "div")(5, "h2", 4);
      \u0275\u0275element(6, "i", 5);
      \u0275\u0275text(7, " Exam Streams ");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "p", 6);
      \u0275\u0275text(9, "Manage exam streams within each family category");
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(10, "button", 7);
      \u0275\u0275element(11, "i", 8);
      \u0275\u0275text(12, " Add Stream ");
      \u0275\u0275elementEnd()()();
      \u0275\u0275elementStart(13, "div", 9)(14, "div", 10)(15, "table", 11)(16, "thead")(17, "tr", 12)(18, "th", 13);
      \u0275\u0275element(19, "i", 14);
      \u0275\u0275text(20, "Family ID ");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(21, "th", 13);
      \u0275\u0275element(22, "i", 15);
      \u0275\u0275text(23, "Code ");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(24, "th", 13);
      \u0275\u0275element(25, "i", 16);
      \u0275\u0275text(26, "Name ");
      \u0275\u0275elementEnd()()();
      \u0275\u0275elementStart(27, "tbody");
      \u0275\u0275template(28, ExamStreamListComponent_tr_28_Template, 9, 5, "tr", 17);
      \u0275\u0275elementEnd()();
      \u0275\u0275template(29, ExamStreamListComponent_div_29_Template, 10, 2, "div", 18);
      \u0275\u0275elementEnd()()()();
    }
    if (rf & 2) {
      \u0275\u0275advance(10);
      \u0275\u0275property("routerLink", \u0275\u0275pureFunction0(3, _c08));
      \u0275\u0275advance(18);
      \u0275\u0275property("ngForOf", ctx.streams);
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", ctx.streams.length === 0);
    }
  }, dependencies: [CommonModule, NgForOf, NgIf, RouterModule, RouterLink], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ExamStreamListComponent, [{
    type: Component,
    args: [{ standalone: true, selector: "app-exam-stream-list", imports: [CommonModule, RouterModule], template: `<div class="min-h-screen bg-gradient-to-br from-purple-50 via-blue-50 to-indigo-100 p-4 lg:p-6">\r
  <div class="max-w-7xl mx-auto">\r
    <!-- Header Section -->\r
    <div class="bg-white rounded-2xl shadow-xl border border-gray-200 p-6 mb-8">\r
      <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">\r
        <div>\r
          <h2 class="text-3xl font-bold text-gray-900 flex items-center gap-3">\r
            <i class="fas fa-stream text-blue-500"></i>\r
            Exam Streams\r
          </h2>\r
          <p class="text-gray-600 mt-2">Manage exam streams within each family category</p>\r
        </div>\r
        \r
        <button \r
          [routerLink]="['/exam-streams','new']" \r
          class="bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white px-6 py-3 rounded-lg font-semibold transition-all duration-200 transform hover:scale-105 shadow-lg flex items-center gap-2">\r
          <i class="fas fa-plus"></i>\r
          Add Stream\r
        </button>\r
      </div>\r
    </div>\r
\r
    <!-- Table Section -->\r
    <div class="bg-white rounded-2xl shadow-xl border border-gray-200 overflow-hidden">\r
      <div class="overflow-x-auto">\r
        <table class="w-full">\r
          <thead>\r
            <tr class="bg-gradient-to-r from-gray-800 to-gray-900 text-white">\r
              <th class="px-6 py-4 text-left font-semibold">\r
                <i class="fas fa-users mr-2"></i>Family ID\r
              </th>\r
              <th class="px-6 py-4 text-left font-semibold">\r
                <i class="fas fa-code mr-2"></i>Code\r
              </th>\r
              <th class="px-6 py-4 text-left font-semibold">\r
                <i class="fas fa-tag mr-2"></i>Name\r
              </th>\r
            </tr>\r
          </thead>\r
          <tbody>\r
            <tr *ngFor="let s of streams; let i = index" \r
                class="border-b border-gray-100 hover:bg-gray-50 transition-colors duration-200"\r
                [class.bg-gray-50]="i % 2 === 1">\r
              <td class="px-6 py-4 text-gray-700 font-medium">\r
                <span class="bg-purple-100 text-purple-800 px-3 py-1 rounded-full text-sm font-semibold">\r
                  {{ s.family }}\r
                </span>\r
              </td>              <td class="px-6 py-4">\r
                <span class="text-gray-900 font-mono bg-gray-100 rounded px-2 py-1 inline-block">\r
                  {{ s.code }}\r
                </span>\r
              </td>\r
              <td class="px-6 py-4 text-gray-700 font-medium">{{ s.name }}</td>\r
            </tr>\r
          </tbody>\r
        </table>\r
\r
        <!-- Empty State -->\r
        <div *ngIf="streams.length === 0" class="text-center py-16">\r
          <div class="flex flex-col items-center">\r
            <i class="fas fa-stream text-6xl text-gray-300 mb-4"></i>\r
            <h3 class="text-xl font-semibold text-gray-600 mb-2">No Streams Found</h3>\r
            <p class="text-gray-500 mb-6">Get started by creating your first exam stream</p>\r
            <button \r
              [routerLink]="['/exam-streams','new']"\r
              class="bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white px-6 py-3 rounded-lg font-semibold transition-all duration-200 transform hover:scale-105 shadow-lg flex items-center gap-2">\r
              <i class="fas fa-plus"></i>\r
              Add First Stream\r
            </button>\r
          </div>\r
        </div>\r
      </div>\r
    </div>\r
  </div>\r
</div>\r
` }]
  }], () => [{ type: ExamStreamService }], null);
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(ExamStreamListComponent, { className: "ExamStreamListComponent", filePath: "src/app/components/exam-stream/exam-stream-list/exam-stream-list.component.ts", lineNumber: 13 });
})();

// src/app/components/exam-stream/add-exam-stream/add-exam-stream.component.ts
function AddExamStreamComponent_option_17_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "option", 23);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const f_r1 = ctx.$implicit;
    \u0275\u0275property("value", f_r1._id);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(f_r1.name);
  }
}
var AddExamStreamComponent = class _AddExamStreamComponent {
  fb;
  svc;
  familySvc;
  router;
  form;
  families = [];
  constructor(fb, svc, familySvc, router) {
    this.fb = fb;
    this.svc = svc;
    this.familySvc = familySvc;
    this.router = router;
  }
  ngOnInit() {
    this.form = this.fb.group({
      family: ["", Validators.required],
      code: ["", Validators.required],
      name: ["", Validators.required]
    });
    this.familySvc.getAll().subscribe((data) => this.families = data);
  }
  onSubmit() {
    if (this.form.invalid)
      return;
    this.svc.create(this.form.value).subscribe({
      next: (stream) => {
        window.alert(`\u2705 Stream "${stream.name}" added.`);
        this.router.navigate(["/exam-streams"]);
      },
      error: (err) => {
        const msg = err.error?.message || err.message || "Unknown error";
        window.alert(`\u274C Failed to add stream: ${msg}`);
      }
    });
  }
  static \u0275fac = function AddExamStreamComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AddExamStreamComponent)(\u0275\u0275directiveInject(FormBuilder), \u0275\u0275directiveInject(ExamStreamService), \u0275\u0275directiveInject(ExamFamilyService), \u0275\u0275directiveInject(Router));
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _AddExamStreamComponent, selectors: [["app-add-exam-stream"]], decls: 32, vars: 3, consts: [[1, "min-h-screen", "bg-gradient-to-br", "from-purple-50", "via-blue-50", "to-indigo-100", "p-4", "lg:p-6"], [1, "max-w-4xl", "mx-auto"], [1, "bg-white", "rounded-2xl", "shadow-xl", "border", "border-gray-200", "p-6", "mb-8"], [1, "text-3xl", "font-bold", "text-gray-900", "flex", "items-center", "gap-3"], [1, "fas", "fa-plus-circle", "text-blue-500"], [1, "text-gray-600", "mt-2"], [1, "bg-white", "rounded-2xl", "shadow-xl", "border", "border-gray-200", "p-6", "lg:p-8"], [1, "space-y-6", 3, "ngSubmit", "formGroup"], [1, "form-group"], ["for", "family", 1, "flex", "items-center", "gap-2", "text-sm", "font-semibold", "text-gray-700", "mb-2"], [1, "fas", "fa-users", "text-purple-500"], ["id", "family", "formControlName", "family", 1, "w-full", "px-4", "py-3", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-blue-500", "focus:border-blue-500", "transition-colors", "duration-200", "bg-white", "appearance-none", "bg-[url('data:image/svg+xml;charset=UTF-8,%3csvg", "xmlns=\\'http://www.w3.org/2000/svg\\'", "viewBox=\\'0", "0", "24", "24\\'", "fill=\\'none\\'", "stroke=\\'currentColor\\'", "stroke-width=\\'2\\'", "stroke-linecap=\\'round\\'", "stroke-linejoin=\\'round\\'%3e%3cpolyline", "points=\\'6", "9", "12", "15", "18", "9\\'%3e%3c/polyline%3e%3c/svg%3e')]", "bg-no-repeat", "bg-right-4", "bg-[length:1em]"], ["value", "", "disabled", ""], [3, "value", 4, "ngFor", "ngForOf"], ["for", "code", 1, "flex", "items-center", "gap-2", "text-sm", "font-semibold", "text-gray-700", "mb-2"], [1, "fas", "fa-code", "text-green-500"], ["id", "code", "formControlName", "code", "placeholder", "e.g. medical-stream", 1, "w-full", "px-4", "py-3", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-blue-500", "focus:border-blue-500", "transition-colors", "duration-200", "placeholder-gray-400"], ["for", "name", 1, "flex", "items-center", "gap-2", "text-sm", "font-semibold", "text-gray-700", "mb-2"], [1, "fas", "fa-tag", "text-indigo-500"], ["id", "name", "formControlName", "name", "placeholder", "Stream Name", 1, "w-full", "px-4", "py-3", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-blue-500", "focus:border-blue-500", "transition-colors", "duration-200", "placeholder-gray-400"], [1, "flex", "justify-end", "pt-4"], ["type", "submit", 1, "bg-gradient-to-r", "from-blue-500", "to-blue-600", "hover:from-blue-600", "hover:to-blue-700", "text-white", "px-8", "py-3", "rounded-lg", "font-semibold", "transition-all", "duration-200", "transform", "hover:scale-105", "shadow-lg", "disabled:from-gray-400", "disabled:to-gray-500", "disabled:cursor-not-allowed", "disabled:transform-none", "disabled:shadow-none", "flex", "items-center", "gap-2", 3, "disabled"], [1, "fas", "fa-save"], [3, "value"]], template: function AddExamStreamComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1)(2, "div", 2)(3, "h2", 3);
      \u0275\u0275element(4, "i", 4);
      \u0275\u0275text(5, " Add Exam Stream ");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(6, "p", 5);
      \u0275\u0275text(7, "Create a new exam stream within a family category");
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(8, "div", 6)(9, "form", 7);
      \u0275\u0275listener("ngSubmit", function AddExamStreamComponent_Template_form_ngSubmit_9_listener() {
        return ctx.onSubmit();
      });
      \u0275\u0275elementStart(10, "div", 8)(11, "label", 9);
      \u0275\u0275element(12, "i", 10);
      \u0275\u0275text(13, " Family ");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(14, "select", 11)(15, "option", 12);
      \u0275\u0275text(16, "Select Family");
      \u0275\u0275elementEnd();
      \u0275\u0275template(17, AddExamStreamComponent_option_17_Template, 2, 2, "option", 13);
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(18, "div", 8)(19, "label", 14);
      \u0275\u0275element(20, "i", 15);
      \u0275\u0275text(21, " Code ");
      \u0275\u0275elementEnd();
      \u0275\u0275element(22, "input", 16);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(23, "div", 8)(24, "label", 17);
      \u0275\u0275element(25, "i", 18);
      \u0275\u0275text(26, " Name ");
      \u0275\u0275elementEnd();
      \u0275\u0275element(27, "input", 19);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(28, "div", 20)(29, "button", 21);
      \u0275\u0275element(30, "i", 22);
      \u0275\u0275text(31, " Save Stream ");
      \u0275\u0275elementEnd()()()()()();
    }
    if (rf & 2) {
      \u0275\u0275advance(9);
      \u0275\u0275property("formGroup", ctx.form);
      \u0275\u0275advance(8);
      \u0275\u0275property("ngForOf", ctx.families);
      \u0275\u0275advance(12);
      \u0275\u0275property("disabled", ctx.form.invalid);
    }
  }, dependencies: [CommonModule, NgForOf, ReactiveFormsModule, \u0275NgNoValidate, NgSelectOption, \u0275NgSelectMultipleOption, DefaultValueAccessor, SelectControlValueAccessor, NgControlStatus, NgControlStatusGroup, FormGroupDirective, FormControlName, RouterModule], styles: ["\n\n.form-group[_ngcontent-%COMP%]   select[_ngcontent-%COMP%]:focus, \n.form-group[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]:focus {\n  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);\n}\nbutton[type=submit][_ngcontent-%COMP%]:hover:not(:disabled) {\n  box-shadow: 0 10px 25px rgba(59, 130, 246, 0.3);\n}\n/*# sourceMappingURL=add-exam-stream.component.css.map */"] });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AddExamStreamComponent, [{
    type: Component,
    args: [{ standalone: true, selector: "app-add-exam-stream", imports: [CommonModule, ReactiveFormsModule, RouterModule], template: `<div class="min-h-screen bg-gradient-to-br from-purple-50 via-blue-50 to-indigo-100 p-4 lg:p-6">\r
  <div class="max-w-4xl mx-auto">\r
    <!-- Header Section -->\r
    <div class="bg-white rounded-2xl shadow-xl border border-gray-200 p-6 mb-8">\r
      <h2 class="text-3xl font-bold text-gray-900 flex items-center gap-3">\r
        <i class="fas fa-plus-circle text-blue-500"></i>\r
        Add Exam Stream\r
      </h2>\r
      <p class="text-gray-600 mt-2">Create a new exam stream within a family category</p>\r
    </div>\r
\r
    <!-- Form Section -->\r
    <div class="bg-white rounded-2xl shadow-xl border border-gray-200 p-6 lg:p-8">\r
      <form [formGroup]="form" (ngSubmit)="onSubmit()" class="space-y-6">\r
        <!-- Family Selection -->        <div class="form-group">\r
          <label for="family" class="flex items-center gap-2 text-sm font-semibold text-gray-700 mb-2">\r
            <i class="fas fa-users text-purple-500"></i>\r
            Family\r
          </label>\r
          <select \r
            id="family" \r
            formControlName="family"\r
            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors duration-200 bg-white appearance-none bg-[url('data:image/svg+xml;charset=UTF-8,%3csvg xmlns=\\'http://www.w3.org/2000/svg\\' viewBox=\\'0 0 24 24\\' fill=\\'none\\' stroke=\\'currentColor\\' stroke-width=\\'2\\' stroke-linecap=\\'round\\' stroke-linejoin=\\'round\\'%3e%3cpolyline points=\\'6 9 12 15 18 9\\'%3e%3c/polyline%3e%3c/svg%3e')] bg-no-repeat bg-right-4 bg-[length:1em]">\r
            <option value="" disabled>Select Family</option>\r
            <option *ngFor="let f of families" [value]="f._id">{{ f.name }}</option>\r
          </select>\r
        </div>\r
\r
        <!-- Code Input -->\r
        <div class="form-group">\r
          <label for="code" class="flex items-center gap-2 text-sm font-semibold text-gray-700 mb-2">\r
            <i class="fas fa-code text-green-500"></i>\r
            Code\r
          </label>\r
          <input \r
            id="code" \r
            formControlName="code" \r
            placeholder="e.g. medical-stream"\r
            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors duration-200 placeholder-gray-400" />\r
        </div>\r
\r
        <!-- Name Input -->\r
        <div class="form-group">\r
          <label for="name" class="flex items-center gap-2 text-sm font-semibold text-gray-700 mb-2">\r
            <i class="fas fa-tag text-indigo-500"></i>\r
            Name\r
          </label>\r
          <input \r
            id="name" \r
            formControlName="name" \r
            placeholder="Stream Name"\r
            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors duration-200 placeholder-gray-400" />\r
        </div>\r
\r
        <!-- Submit Button -->\r
        <div class="flex justify-end pt-4">\r
          <button \r
            type="submit" \r
            [disabled]="form.invalid"\r
            class="bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white px-8 py-3 rounded-lg font-semibold transition-all duration-200 transform hover:scale-105 shadow-lg disabled:from-gray-400 disabled:to-gray-500 disabled:cursor-not-allowed disabled:transform-none disabled:shadow-none flex items-center gap-2">\r
            <i class="fas fa-save"></i>\r
            Save Stream\r
          </button>\r
        </div>\r
      </form>\r
    </div>\r
  </div>\r
</div>\r
`, styles: ["/* src/app/components/exam-stream/add-exam-stream/add-exam-stream.component.scss */\n.form-group select:focus,\n.form-group input:focus {\n  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);\n}\nbutton[type=submit]:hover:not(:disabled) {\n  box-shadow: 0 10px 25px rgba(59, 130, 246, 0.3);\n}\n/*# sourceMappingURL=add-exam-stream.component.css.map */\n"] }]
  }], () => [{ type: FormBuilder }, { type: ExamStreamService }, { type: ExamFamilyService }, { type: Router }], null);
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(AddExamStreamComponent, { className: "AddExamStreamComponent", filePath: "src/app/components/exam-stream/add-exam-stream/add-exam-stream.component.ts", lineNumber: 15 });
})();

// src/app/components/exam-paper/exam-paper-list/exam-paper-list.component.ts
var _c09 = () => ["/exam-papers", "new"];
function ExamPaperListComponent_tr_31_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "tr", 20)(1, "td", 21);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "td", 22);
    \u0275\u0275text(4);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(5, "td", 23)(6, "span", 24);
    \u0275\u0275text(7);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(8, "td", 21);
    \u0275\u0275text(9);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const p_r1 = ctx.$implicit;
    const i_r2 = ctx.index;
    \u0275\u0275classProp("bg-purple-50", i_r2 % 2 === 0);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(p_r1.family);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(p_r1.stream);
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate1(" ", p_r1.code, " ");
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(p_r1.name);
  }
}
function ExamPaperListComponent_div_32_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 25);
    \u0275\u0275element(1, "i", 26);
    \u0275\u0275elementStart(2, "h3", 27);
    \u0275\u0275text(3, "No Exam Papers Found");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(4, "p", 28);
    \u0275\u0275text(5, "Get started by creating your first exam paper");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(6, "button", 29);
    \u0275\u0275element(7, "i", 30);
    \u0275\u0275text(8, " Add Your First Paper ");
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance(6);
    \u0275\u0275property("routerLink", \u0275\u0275pureFunction0(1, _c09));
  }
}
var ExamPaperListComponent = class _ExamPaperListComponent {
  svc;
  papers = [];
  constructor(svc) {
    this.svc = svc;
  }
  ngOnInit() {
    this.svc.getAll().subscribe((data) => this.papers = data);
  }
  static \u0275fac = function ExamPaperListComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _ExamPaperListComponent)(\u0275\u0275directiveInject(ExamPaperService));
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _ExamPaperListComponent, selectors: [["app-exam-paper-list"]], decls: 33, vars: 4, consts: [[1, "min-h-screen", "bg-gradient-to-br", "from-purple-50", "via-blue-50", "to-indigo-100", "p-4", "lg:p-6"], [1, "max-w-7xl", "mx-auto"], [1, "bg-white", "rounded-2xl", "shadow-xl", "border", "border-gray-200", "p-6", "mb-8"], [1, "flex", "flex-col", "sm:flex-row", "sm:items-center", "sm:justify-between", "gap-4"], [1, "text-3xl", "font-bold", "text-gray-900", "flex", "items-center", "gap-3"], [1, "fas", "fa-file-alt", "text-purple-500"], [1, "text-gray-600", "mt-2"], [1, "bg-gradient-to-r", "from-purple-500", "to-purple-600", "hover:from-purple-600", "hover:to-purple-700", "text-white", "px-6", "py-3", "rounded-lg", "font-semibold", "transition-all", "duration-200", "transform", "hover:scale-105", "shadow-lg", "flex", "items-center", "gap-2", 3, "routerLink"], [1, "fas", "fa-plus"], [1, "bg-white", "rounded-2xl", "shadow-xl", "border", "border-gray-200", "overflow-hidden"], [1, "overflow-x-auto"], [1, "w-full"], [1, "bg-gradient-to-r", "from-gray-800", "to-gray-900", "text-white"], [1, "px-6", "py-4", "text-left", "font-semibold"], [1, "fas", "fa-users", "mr-2"], [1, "fas", "fa-stream", "mr-2"], [1, "fas", "fa-code", "mr-2"], [1, "fas", "fa-file-signature", "mr-2"], ["class", "border-b border-gray-100 hover:bg-gray-50 transition-all duration-200", 3, "bg-purple-50", 4, "ngFor", "ngForOf"], ["class", "text-center py-12", 4, "ngIf"], [1, "border-b", "border-gray-100", "hover:bg-gray-50", "transition-all", "duration-200"], [1, "px-6", "py-4", "text-gray-800", "font-medium"], [1, "px-6", "py-4", "text-gray-700"], [1, "px-6", "py-4"], [1, "bg-blue-100", "text-blue-800", "px-3", "py-1", "rounded-full", "text-sm", "font-medium"], [1, "text-center", "py-12"], [1, "fas", "fa-file-alt", "text-4xl", "text-gray-400", "mb-4"], [1, "text-xl", "font-semibold", "text-gray-600", "mb-2"], [1, "text-gray-500", "mb-6"], [1, "bg-gradient-to-r", "from-purple-500", "to-purple-600", "hover:from-purple-600", "hover:to-purple-700", "text-white", "px-6", "py-3", "rounded-lg", "font-semibold", "transition-all", "duration-200", "transform", "hover:scale-105", "shadow-lg", 3, "routerLink"], [1, "fas", "fa-plus", "mr-2"]], template: function ExamPaperListComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1)(2, "div", 2)(3, "div", 3)(4, "div")(5, "h2", 4);
      \u0275\u0275element(6, "i", 5);
      \u0275\u0275text(7, " Exam Papers ");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "p", 6);
      \u0275\u0275text(9, "Manage and organize exam papers by family and stream");
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(10, "button", 7);
      \u0275\u0275element(11, "i", 8);
      \u0275\u0275text(12, " Add Paper ");
      \u0275\u0275elementEnd()()();
      \u0275\u0275elementStart(13, "div", 9)(14, "div", 10)(15, "table", 11)(16, "thead")(17, "tr", 12)(18, "th", 13);
      \u0275\u0275element(19, "i", 14);
      \u0275\u0275text(20, "Family ");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(21, "th", 13);
      \u0275\u0275element(22, "i", 15);
      \u0275\u0275text(23, "Stream ");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(24, "th", 13);
      \u0275\u0275element(25, "i", 16);
      \u0275\u0275text(26, "Code ");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(27, "th", 13);
      \u0275\u0275element(28, "i", 17);
      \u0275\u0275text(29, "Name ");
      \u0275\u0275elementEnd()()();
      \u0275\u0275elementStart(30, "tbody");
      \u0275\u0275template(31, ExamPaperListComponent_tr_31_Template, 10, 6, "tr", 18);
      \u0275\u0275elementEnd()();
      \u0275\u0275template(32, ExamPaperListComponent_div_32_Template, 9, 2, "div", 19);
      \u0275\u0275elementEnd()()()();
    }
    if (rf & 2) {
      \u0275\u0275advance(10);
      \u0275\u0275property("routerLink", \u0275\u0275pureFunction0(3, _c09));
      \u0275\u0275advance(21);
      \u0275\u0275property("ngForOf", ctx.papers);
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", !ctx.papers || ctx.papers.length === 0);
    }
  }, dependencies: [CommonModule, NgForOf, NgIf, RouterModule, RouterLink], styles: ["\n\n.overflow-x-auto[_ngcontent-%COMP%] {\n  scrollbar-width: thin;\n  scrollbar-color: #cbd5e0 #f7fafc;\n}\n.overflow-x-auto[_ngcontent-%COMP%]::-webkit-scrollbar {\n  height: 6px;\n}\n.overflow-x-auto[_ngcontent-%COMP%]::-webkit-scrollbar-track {\n  background: #f7fafc;\n  border-radius: 3px;\n}\n.overflow-x-auto[_ngcontent-%COMP%]::-webkit-scrollbar-thumb {\n  background: #cbd5e0;\n  border-radius: 3px;\n}\n.overflow-x-auto[_ngcontent-%COMP%]::-webkit-scrollbar-thumb:hover {\n  background: #a0aec0;\n}\n/*# sourceMappingURL=exam-paper-list.component.css.map */"] });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ExamPaperListComponent, [{
    type: Component,
    args: [{ standalone: true, selector: "app-exam-paper-list", imports: [CommonModule, RouterModule], template: `<div class="min-h-screen bg-gradient-to-br from-purple-50 via-blue-50 to-indigo-100 p-4 lg:p-6">\r
  <div class="max-w-7xl mx-auto">\r
    <!-- Header Section -->\r
    <div class="bg-white rounded-2xl shadow-xl border border-gray-200 p-6 mb-8">\r
      <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">\r
        <div>\r
          <h2 class="text-3xl font-bold text-gray-900 flex items-center gap-3">\r
            <i class="fas fa-file-alt text-purple-500"></i>\r
            Exam Papers\r
          </h2>\r
          <p class="text-gray-600 mt-2">Manage and organize exam papers by family and stream</p>\r
        </div>\r
        \r
        <button \r
          [routerLink]="['/exam-papers','new']" \r
          class="bg-gradient-to-r from-purple-500 to-purple-600 hover:from-purple-600 hover:to-purple-700 text-white px-6 py-3 rounded-lg font-semibold transition-all duration-200 transform hover:scale-105 shadow-lg flex items-center gap-2">\r
          <i class="fas fa-plus"></i>\r
          Add Paper\r
        </button>\r
      </div>\r
    </div>\r
\r
    <!-- Table Section -->\r
    <div class="bg-white rounded-2xl shadow-xl border border-gray-200 overflow-hidden">\r
      <div class="overflow-x-auto">\r
        <table class="w-full">\r
          <thead>\r
            <tr class="bg-gradient-to-r from-gray-800 to-gray-900 text-white">\r
              <th class="px-6 py-4 text-left font-semibold">\r
                <i class="fas fa-users mr-2"></i>Family\r
              </th>\r
              <th class="px-6 py-4 text-left font-semibold">\r
                <i class="fas fa-stream mr-2"></i>Stream\r
              </th>\r
              <th class="px-6 py-4 text-left font-semibold">\r
                <i class="fas fa-code mr-2"></i>Code\r
              </th>\r
              <th class="px-6 py-4 text-left font-semibold">\r
                <i class="fas fa-file-signature mr-2"></i>Name\r
              </th>\r
            </tr>\r
          </thead>\r
          <tbody>\r
            <tr *ngFor="let p of papers; let i = index" \r
                class="border-b border-gray-100 hover:bg-gray-50 transition-all duration-200"\r
                [class.bg-purple-50]="i % 2 === 0">\r
              <td class="px-6 py-4 text-gray-800 font-medium">{{ p.family }}</td>\r
              <td class="px-6 py-4 text-gray-700">{{ p.stream }}</td>\r
              <td class="px-6 py-4">\r
                <span class="bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm font-medium">\r
                  {{ p.code }}\r
                </span>\r
              </td>\r
              <td class="px-6 py-4 text-gray-800 font-medium">{{ p.name }}</td>\r
            </tr>\r
          </tbody>\r
        </table>\r
        \r
        <!-- Empty State -->\r
        <div *ngIf="!papers || papers.length === 0" class="text-center py-12">\r
          <i class="fas fa-file-alt text-4xl text-gray-400 mb-4"></i>\r
          <h3 class="text-xl font-semibold text-gray-600 mb-2">No Exam Papers Found</h3>\r
          <p class="text-gray-500 mb-6">Get started by creating your first exam paper</p>\r
          <button \r
            [routerLink]="['/exam-papers','new']" \r
            class="bg-gradient-to-r from-purple-500 to-purple-600 hover:from-purple-600 hover:to-purple-700 text-white px-6 py-3 rounded-lg font-semibold transition-all duration-200 transform hover:scale-105 shadow-lg">\r
            <i class="fas fa-plus mr-2"></i>\r
            Add Your First Paper\r
          </button>\r
        </div>\r
      </div>\r
    </div>\r
  </div>\r
</div>\r
`, styles: ["/* src/app/components/exam-paper/exam-paper-list/exam-paper-list.component.scss */\n.overflow-x-auto {\n  scrollbar-width: thin;\n  scrollbar-color: #cbd5e0 #f7fafc;\n}\n.overflow-x-auto::-webkit-scrollbar {\n  height: 6px;\n}\n.overflow-x-auto::-webkit-scrollbar-track {\n  background: #f7fafc;\n  border-radius: 3px;\n}\n.overflow-x-auto::-webkit-scrollbar-thumb {\n  background: #cbd5e0;\n  border-radius: 3px;\n}\n.overflow-x-auto::-webkit-scrollbar-thumb:hover {\n  background: #a0aec0;\n}\n/*# sourceMappingURL=exam-paper-list.component.css.map */\n"] }]
  }], () => [{ type: ExamPaperService }], null);
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(ExamPaperListComponent, { className: "ExamPaperListComponent", filePath: "src/app/components/exam-paper/exam-paper-list/exam-paper-list.component.ts", lineNumber: 13 });
})();

// src/app/components/exam-paper/add-exam-paper/add-exam-paper.component.ts
function AddExamPaperComponent_option_17_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "option", 25);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const f_r1 = ctx.$implicit;
    \u0275\u0275property("value", f_r1._id);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(f_r1.name);
  }
}
function AddExamPaperComponent_option_25_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "option", 25);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const s_r2 = ctx.$implicit;
    \u0275\u0275property("value", s_r2._id);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(s_r2.name);
  }
}
var AddExamPaperComponent = class _AddExamPaperComponent {
  fb;
  paperSvc;
  familySvc;
  streamSvc;
  router;
  form;
  families = [];
  streams = [];
  constructor(fb, paperSvc, familySvc, streamSvc, router) {
    this.fb = fb;
    this.paperSvc = paperSvc;
    this.familySvc = familySvc;
    this.streamSvc = streamSvc;
    this.router = router;
  }
  ngOnInit() {
    this.form = this.fb.group({
      family: ["", Validators.required],
      stream: ["", Validators.required],
      code: ["", Validators.required],
      name: ["", Validators.required],
      description: [""]
    });
    this.familySvc.getAll().subscribe((f) => this.families = f);
    this.form.get("family")?.valueChanges.subscribe((familyId) => {
      this.streams = [];
      this.form.get("stream")?.reset("");
      this.streamSvc.getByFamily(familyId).subscribe((s) => this.streams = s);
    });
  }
  onSubmit() {
    if (this.form.invalid)
      return;
    this.paperSvc.create(this.form.value).subscribe({
      next: (paper) => {
        window.alert(`\u2705 Paper "${paper.name}" added.`);
        this.router.navigate(["/exam-papers"]);
      },
      error: (err) => {
        const msg = err.error?.message || err.message || "Unknown";
        window.alert(`\u274C Failed to add paper: ${msg}`);
      }
    });
  }
  static \u0275fac = function AddExamPaperComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AddExamPaperComponent)(\u0275\u0275directiveInject(FormBuilder), \u0275\u0275directiveInject(ExamPaperService), \u0275\u0275directiveInject(ExamFamilyService), \u0275\u0275directiveInject(ExamStreamService), \u0275\u0275directiveInject(Router));
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _AddExamPaperComponent, selectors: [["app-add-exam-paper"]], decls: 45, vars: 5, consts: [[1, "min-h-screen", "bg-gradient-to-br", "from-purple-50", "via-blue-50", "to-indigo-100", "p-4", "lg:p-6"], [1, "max-w-4xl", "mx-auto"], [1, "bg-white", "rounded-2xl", "shadow-xl", "border", "border-gray-200", "p-6", "mb-8"], [1, "text-3xl", "font-bold", "text-gray-900", "flex", "items-center", "gap-3"], [1, "fas", "fa-plus-circle", "text-purple-500"], [1, "text-gray-600", "mt-2"], [1, "bg-white", "rounded-2xl", "shadow-xl", "border", "border-gray-200", "p-6", "lg:p-8"], [1, "space-y-6", 3, "ngSubmit", "formGroup"], [1, "form-group"], [1, "flex", "items-center", "gap-2", "text-sm", "font-semibold", "text-gray-700", "mb-2"], [1, "fas", "fa-users", "text-purple-500"], ["formControlName", "family", 1, "w-full", "px-4", "py-3", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-purple-500", "focus:border-purple-500", "transition-colors", "duration-200", "bg-white", "appearance-none", "bg-[url('data:image/svg+xml;charset=UTF-8,%3csvg", "xmlns=\\'http://www.w3.org/2000/svg\\'", "viewBox=\\'0", "0", "24", "24\\'", "fill=\\'none\\'", "stroke=\\'currentColor\\'", "stroke-width=\\'2\\'", "stroke-linecap=\\'round\\'", "stroke-linejoin=\\'round\\'%3e%3cpolyline", "points=\\'6", "9", "12", "15", "18", "9\\'%3e%3c/polyline%3e%3c/svg%3e')]", "bg-no-repeat", "bg-right-4", "bg-[length:1em]"], ["value", "", "disabled", ""], [3, "value", 4, "ngFor", "ngForOf"], [1, "fas", "fa-stream", "text-blue-500"], ["formControlName", "stream", 1, "w-full", "px-4", "py-3", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-purple-500", "focus:border-purple-500", "transition-colors", "duration-200", "bg-white", "appearance-none", "bg-[url('data:image/svg+xml;charset=UTF-8,%3csvg", "xmlns=\\'http://www.w3.org/2000/svg\\'", "viewBox=\\'0", "0", "24", "24\\'", "fill=\\'none\\'", "stroke=\\'currentColor\\'", "stroke-width=\\'2\\'", "stroke-linecap=\\'round\\'", "stroke-linejoin=\\'round\\'%3e%3cpolyline", "points=\\'6", "9", "12", "15", "18", "9\\'%3e%3c/polyline%3e%3c/svg%3e')]", "bg-no-repeat", "bg-right-4", "bg-[length:1em]", "disabled:bg-gray-100", "disabled:cursor-not-allowed", 3, "disabled"], [1, "fas", "fa-code", "text-green-500"], ["formControlName", "code", "placeholder", "e.g. neet-2025-paper1", 1, "w-full", "px-4", "py-3", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-purple-500", "focus:border-purple-500", "transition-colors", "duration-200", "placeholder-gray-400"], [1, "fas", "fa-file-signature", "text-indigo-500"], ["formControlName", "name", "placeholder", "Paper Name", 1, "w-full", "px-4", "py-3", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-purple-500", "focus:border-purple-500", "transition-colors", "duration-200", "placeholder-gray-400"], [1, "fas", "fa-align-left", "text-yellow-500"], ["formControlName", "description", "rows", "4", "placeholder", "Enter exam paper description...", 1, "w-full", "px-4", "py-3", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-purple-500", "focus:border-purple-500", "transition-colors", "duration-200", "placeholder-gray-400", "resize-vertical"], [1, "flex", "justify-end", "pt-4"], ["type", "submit", 1, "bg-gradient-to-r", "from-purple-500", "to-purple-600", "hover:from-purple-600", "hover:to-purple-700", "text-white", "px-8", "py-3", "rounded-lg", "font-semibold", "transition-all", "duration-200", "transform", "hover:scale-105", "shadow-lg", "disabled:from-gray-400", "disabled:to-gray-500", "disabled:cursor-not-allowed", "disabled:transform-none", "disabled:shadow-none", "flex", "items-center", "gap-2", 3, "disabled"], [1, "fas", "fa-save"], [3, "value"]], template: function AddExamPaperComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1)(2, "div", 2)(3, "h2", 3);
      \u0275\u0275element(4, "i", 4);
      \u0275\u0275text(5, " Add Exam Paper ");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(6, "p", 5);
      \u0275\u0275text(7, "Create a new exam paper for a specific family and stream");
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(8, "div", 6)(9, "form", 7);
      \u0275\u0275listener("ngSubmit", function AddExamPaperComponent_Template_form_ngSubmit_9_listener() {
        return ctx.onSubmit();
      });
      \u0275\u0275elementStart(10, "div", 8)(11, "label", 9);
      \u0275\u0275element(12, "i", 10);
      \u0275\u0275text(13, " Family ");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(14, "select", 11)(15, "option", 12);
      \u0275\u0275text(16, "Select Family");
      \u0275\u0275elementEnd();
      \u0275\u0275template(17, AddExamPaperComponent_option_17_Template, 2, 2, "option", 13);
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(18, "div", 8)(19, "label", 9);
      \u0275\u0275element(20, "i", 14);
      \u0275\u0275text(21, " Stream ");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(22, "select", 15)(23, "option", 12);
      \u0275\u0275text(24, "Select Stream");
      \u0275\u0275elementEnd();
      \u0275\u0275template(25, AddExamPaperComponent_option_25_Template, 2, 2, "option", 13);
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(26, "div", 8)(27, "label", 9);
      \u0275\u0275element(28, "i", 16);
      \u0275\u0275text(29, " Code ");
      \u0275\u0275elementEnd();
      \u0275\u0275element(30, "input", 17);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(31, "div", 8)(32, "label", 9);
      \u0275\u0275element(33, "i", 18);
      \u0275\u0275text(34, " Name ");
      \u0275\u0275elementEnd();
      \u0275\u0275element(35, "input", 19);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(36, "div", 8)(37, "label", 9);
      \u0275\u0275element(38, "i", 20);
      \u0275\u0275text(39, " Description ");
      \u0275\u0275elementEnd();
      \u0275\u0275element(40, "textarea", 21);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(41, "div", 22)(42, "button", 23);
      \u0275\u0275element(43, "i", 24);
      \u0275\u0275text(44, " Save Exam Paper ");
      \u0275\u0275elementEnd()()()()()();
    }
    if (rf & 2) {
      \u0275\u0275advance(9);
      \u0275\u0275property("formGroup", ctx.form);
      \u0275\u0275advance(8);
      \u0275\u0275property("ngForOf", ctx.families);
      \u0275\u0275advance(5);
      \u0275\u0275property("disabled", !ctx.streams.length);
      \u0275\u0275advance(3);
      \u0275\u0275property("ngForOf", ctx.streams);
      \u0275\u0275advance(17);
      \u0275\u0275property("disabled", ctx.form.invalid);
    }
  }, dependencies: [CommonModule, NgForOf, ReactiveFormsModule, \u0275NgNoValidate, NgSelectOption, \u0275NgSelectMultipleOption, DefaultValueAccessor, SelectControlValueAccessor, NgControlStatus, NgControlStatusGroup, FormGroupDirective, FormControlName, RouterModule], styles: ["\n\n.form-group[_ngcontent-%COMP%]   select[_ngcontent-%COMP%]:focus, \n.form-group[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]:focus, \n.form-group[_ngcontent-%COMP%]   textarea[_ngcontent-%COMP%]:focus {\n  box-shadow: 0 0 0 3px rgba(147, 51, 234, 0.1);\n}\nbutton[type=submit][_ngcontent-%COMP%]:hover:not(:disabled) {\n  box-shadow: 0 10px 25px rgba(147, 51, 234, 0.3);\n}\n/*# sourceMappingURL=add-exam-paper.component.css.map */"] });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AddExamPaperComponent, [{
    type: Component,
    args: [{ standalone: true, selector: "app-add-exam-paper", imports: [CommonModule, ReactiveFormsModule, RouterModule], template: `<div class="min-h-screen bg-gradient-to-br from-purple-50 via-blue-50 to-indigo-100 p-4 lg:p-6">\r
  <div class="max-w-4xl mx-auto">\r
    <!-- Header Section -->\r
    <div class="bg-white rounded-2xl shadow-xl border border-gray-200 p-6 mb-8">\r
      <h2 class="text-3xl font-bold text-gray-900 flex items-center gap-3">\r
        <i class="fas fa-plus-circle text-purple-500"></i>\r
        Add Exam Paper\r
      </h2>\r
      <p class="text-gray-600 mt-2">Create a new exam paper for a specific family and stream</p>\r
    </div>\r
\r
    <!-- Form Section -->\r
    <div class="bg-white rounded-2xl shadow-xl border border-gray-200 p-6 lg:p-8">\r
      <form [formGroup]="form" (ngSubmit)="onSubmit()" class="space-y-6">\r
        <!-- Family Selection -->        <div class="form-group">\r
          <label class="flex items-center gap-2 text-sm font-semibold text-gray-700 mb-2">\r
            <i class="fas fa-users text-purple-500"></i>\r
            Family\r
          </label>\r
          <select \r
            formControlName="family"\r
            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-colors duration-200 bg-white appearance-none bg-[url('data:image/svg+xml;charset=UTF-8,%3csvg xmlns=\\'http://www.w3.org/2000/svg\\' viewBox=\\'0 0 24 24\\' fill=\\'none\\' stroke=\\'currentColor\\' stroke-width=\\'2\\' stroke-linecap=\\'round\\' stroke-linejoin=\\'round\\'%3e%3cpolyline points=\\'6 9 12 15 18 9\\'%3e%3c/polyline%3e%3c/svg%3e')] bg-no-repeat bg-right-4 bg-[length:1em]">\r
            <option value="" disabled>Select Family</option>\r
            <option *ngFor="let f of families" [value]="f._id">{{ f.name }}</option>\r
          </select>\r
        </div>\r
\r
        <!-- Stream Selection -->\r
        <div class="form-group">\r
          <label class="flex items-center gap-2 text-sm font-semibold text-gray-700 mb-2">\r
            <i class="fas fa-stream text-blue-500"></i>\r
            Stream\r
          </label>\r
          <select \r
            formControlName="stream" \r
            [disabled]="!streams.length"\r
            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-colors duration-200 bg-white appearance-none bg-[url('data:image/svg+xml;charset=UTF-8,%3csvg xmlns=\\'http://www.w3.org/2000/svg\\' viewBox=\\'0 0 24 24\\' fill=\\'none\\' stroke=\\'currentColor\\' stroke-width=\\'2\\' stroke-linecap=\\'round\\' stroke-linejoin=\\'round\\'%3e%3cpolyline points=\\'6 9 12 15 18 9\\'%3e%3c/polyline%3e%3c/svg%3e')] bg-no-repeat bg-right-4 bg-[length:1em] disabled:bg-gray-100 disabled:cursor-not-allowed">\r
            <option value="" disabled>Select Stream</option>\r
            <option *ngFor="let s of streams" [value]="s._id">{{ s.name }}</option>\r
          </select>\r
        </div>\r
\r
        <!-- Code Input -->\r
        <div class="form-group">\r
          <label class="flex items-center gap-2 text-sm font-semibold text-gray-700 mb-2">\r
            <i class="fas fa-code text-green-500"></i>\r
            Code\r
          </label>\r
          <input \r
            formControlName="code" \r
            placeholder="e.g. neet-2025-paper1"\r
            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-colors duration-200 placeholder-gray-400" />\r
        </div>\r
\r
        <!-- Name Input -->\r
        <div class="form-group">\r
          <label class="flex items-center gap-2 text-sm font-semibold text-gray-700 mb-2">\r
            <i class="fas fa-file-signature text-indigo-500"></i>\r
            Name\r
          </label>\r
          <input \r
            formControlName="name" \r
            placeholder="Paper Name"\r
            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-colors duration-200 placeholder-gray-400" />\r
        </div>\r
\r
        <!-- Description Input -->\r
        <div class="form-group">\r
          <label class="flex items-center gap-2 text-sm font-semibold text-gray-700 mb-2">\r
            <i class="fas fa-align-left text-yellow-500"></i>\r
            Description\r
          </label>\r
          <textarea \r
            formControlName="description" \r
            rows="4"\r
            placeholder="Enter exam paper description..."\r
            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-colors duration-200 placeholder-gray-400 resize-vertical"></textarea>\r
        </div>\r
\r
        <!-- Submit Button -->\r
        <div class="flex justify-end pt-4">\r
          <button \r
            type="submit" \r
            [disabled]="form.invalid"\r
            class="bg-gradient-to-r from-purple-500 to-purple-600 hover:from-purple-600 hover:to-purple-700 text-white px-8 py-3 rounded-lg font-semibold transition-all duration-200 transform hover:scale-105 shadow-lg disabled:from-gray-400 disabled:to-gray-500 disabled:cursor-not-allowed disabled:transform-none disabled:shadow-none flex items-center gap-2">\r
            <i class="fas fa-save"></i>\r
            Save Exam Paper\r
          </button>\r
        </div>\r
      </form>\r
    </div>\r
  </div>\r
</div>\r
`, styles: ["/* src/app/components/exam-paper/add-exam-paper/add-exam-paper.component.scss */\n.form-group select:focus,\n.form-group input:focus,\n.form-group textarea:focus {\n  box-shadow: 0 0 0 3px rgba(147, 51, 234, 0.1);\n}\nbutton[type=submit]:hover:not(:disabled) {\n  box-shadow: 0 10px 25px rgba(147, 51, 234, 0.3);\n}\n/*# sourceMappingURL=add-exam-paper.component.css.map */\n"] }]
  }], () => [{ type: FormBuilder }, { type: ExamPaperService }, { type: ExamFamilyService }, { type: ExamStreamService }, { type: Router }], null);
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(AddExamPaperComponent, { className: "AddExamPaperComponent", filePath: "src/app/components/exam-paper/add-exam-paper/add-exam-paper.component.ts", lineNumber: 23 });
})();

// src/app/components/exam-shift/exam-shift-list/exam-shift-list.component.ts
var _c010 = () => ["/exam-shifts", "new"];
function ExamShiftListComponent_div_15_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 13)(1, "div", 14);
    \u0275\u0275element(2, "i", 15);
    \u0275\u0275elementStart(3, "h3", 16);
    \u0275\u0275text(4, "No Exam Shifts");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(5, "p", 17);
    \u0275\u0275text(6, "Get started by creating your first exam shift");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(7, "button", 18);
    \u0275\u0275element(8, "i", 8);
    \u0275\u0275text(9, " Create First Shift ");
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    \u0275\u0275advance(7);
    \u0275\u0275property("routerLink", \u0275\u0275pureFunction0(1, _c010));
  }
}
function ExamShiftListComponent_div_16_tr_18_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "tr", 31)(1, "td", 32)(2, "div", 33)(3, "div", 34);
    \u0275\u0275element(4, "i", 35);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(5, "div", 36)(6, "div", 37);
    \u0275\u0275text(7);
    \u0275\u0275elementEnd()()()();
    \u0275\u0275elementStart(8, "td", 32)(9, "span", 38);
    \u0275\u0275text(10);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(11, "td", 32)(12, "div", 37);
    \u0275\u0275text(13);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(14, "td", 39)(15, "div", 40)(16, "button", 41);
    \u0275\u0275element(17, "i", 42);
    \u0275\u0275text(18, " View ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(19, "button", 43);
    \u0275\u0275element(20, "i", 44);
    \u0275\u0275text(21, " Edit ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(22, "button", 45);
    \u0275\u0275element(23, "i", 46);
    \u0275\u0275text(24, " Delete ");
    \u0275\u0275elementEnd()()()();
  }
  if (rf & 2) {
    const s_r1 = ctx.$implicit;
    \u0275\u0275advance(7);
    \u0275\u0275textInterpolate(s_r1.paper);
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate1(" ", s_r1.code, " ");
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate(s_r1.name);
  }
}
function ExamShiftListComponent_div_16_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 19)(1, "div", 20)(2, "table", 21)(3, "thead", 22)(4, "tr")(5, "th", 23);
    \u0275\u0275element(6, "i", 24);
    \u0275\u0275text(7, " Paper ID ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(8, "th", 23);
    \u0275\u0275element(9, "i", 25);
    \u0275\u0275text(10, " Code ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(11, "th", 23);
    \u0275\u0275element(12, "i", 26);
    \u0275\u0275text(13, " Name ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(14, "th", 27);
    \u0275\u0275element(15, "i", 28);
    \u0275\u0275text(16, " Actions ");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(17, "tbody", 29);
    \u0275\u0275template(18, ExamShiftListComponent_div_16_tr_18_Template, 25, 3, "tr", 30);
    \u0275\u0275elementEnd()()()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(18);
    \u0275\u0275property("ngForOf", ctx_r1.shifts);
  }
}
var ExamShiftListComponent = class _ExamShiftListComponent {
  svc;
  shifts = [];
  constructor(svc) {
    this.svc = svc;
  }
  ngOnInit() {
    this.svc.getAll().subscribe((data) => this.shifts = data);
  }
  static \u0275fac = function ExamShiftListComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _ExamShiftListComponent)(\u0275\u0275directiveInject(ExamShiftService));
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _ExamShiftListComponent, selectors: [["app-exam-shift-list"]], decls: 17, vars: 4, consts: [[1, "min-h-screen", "bg-gradient-to-br", "from-purple-50", "to-indigo-100", "p-6"], [1, "max-w-6xl", "mx-auto"], [1, "bg-gradient-to-r", "from-purple-600", "to-indigo-600", "rounded-t-2xl", "px-8", "py-6", "shadow-lg"], [1, "flex", "items-center", "justify-between"], [1, "text-3xl", "font-bold", "text-white", "flex", "items-center", "gap-3"], [1, "fas", "fa-clock"], [1, "text-purple-100", "mt-2"], [1, "inline-flex", "items-center", "px-6", "py-3", "bg-white", "text-purple-600", "font-semibold", "rounded-lg", "hover:bg-purple-50", "focus:outline-none", "focus:ring-2", "focus:ring-offset-2", "focus:ring-white", "transition-all", "duration-200", "transform", "hover:scale-105", "shadow-lg", 3, "routerLink"], [1, "fas", "fa-plus", "mr-2"], [1, "bg-white", "rounded-b-2xl", "shadow-xl", "overflow-hidden"], [1, "p-8"], ["class", "text-center py-16", 4, "ngIf"], ["class", "overflow-hidden", 4, "ngIf"], [1, "text-center", "py-16"], [1, "bg-gray-50", "border", "border-gray-200", "rounded-lg", "p-8", "max-w-md", "mx-auto"], [1, "fas", "fa-clock", "text-gray-400", "text-4xl", "mb-4"], [1, "text-xl", "font-semibold", "text-gray-700", "mb-2"], [1, "text-gray-500", "mb-6"], [1, "inline-flex", "items-center", "px-6", "py-3", "bg-purple-600", "text-white", "font-semibold", "rounded-lg", "hover:bg-purple-700", "focus:outline-none", "focus:ring-2", "focus:ring-offset-2", "focus:ring-purple-500", "transition-colors", "duration-200", 3, "routerLink"], [1, "overflow-hidden"], [1, "overflow-x-auto", "shadow-lg", "rounded-lg", "border", "border-gray-200"], [1, "min-w-full", "divide-y", "divide-gray-200"], [1, "bg-gradient-to-r", "from-gray-50", "to-gray-100"], [1, "px-6", "py-4", "text-left", "text-xs", "font-semibold", "text-gray-700", "uppercase", "tracking-wider", "border-b", "border-gray-200"], [1, "fas", "fa-file-alt", "mr-2", "text-purple-500"], [1, "fas", "fa-barcode", "mr-2", "text-purple-500"], [1, "fas", "fa-tag", "mr-2", "text-purple-500"], [1, "px-6", "py-4", "text-center", "text-xs", "font-semibold", "text-gray-700", "uppercase", "tracking-wider", "border-b", "border-gray-200"], [1, "fas", "fa-cogs", "mr-2", "text-purple-500"], [1, "bg-white", "divide-y", "divide-gray-200"], ["class", "hover:bg-purple-50 transition-colors duration-200", 4, "ngFor", "ngForOf"], [1, "hover:bg-purple-50", "transition-colors", "duration-200"], [1, "px-6", "py-4", "whitespace-nowrap"], [1, "flex", "items-center"], [1, "flex-shrink-0", "w-10", "h-10", "bg-purple-100", "rounded-full", "flex", "items-center", "justify-center"], [1, "fas", "fa-file-alt", "text-purple-600"], [1, "ml-4"], [1, "text-sm", "font-medium", "text-gray-900"], [1, "inline-flex", "items-center", "px-3", "py-1", "rounded-full", "text-xs", "font-medium", "bg-indigo-100", "text-indigo-800"], [1, "px-6", "py-4", "whitespace-nowrap", "text-center"], [1, "flex", "items-center", "justify-center", "space-x-2"], ["title", "View Details", 1, "inline-flex", "items-center", "px-3", "py-1.5", "border", "border-blue-300", "text-xs", "font-medium", "rounded-md", "text-blue-700", "bg-blue-50", "hover:bg-blue-100", "focus:outline-none", "focus:ring-2", "focus:ring-offset-2", "focus:ring-blue-500", "transition-colors", "duration-200"], [1, "fas", "fa-eye", "mr-1"], ["title", "Edit Shift", 1, "inline-flex", "items-center", "px-3", "py-1.5", "border", "border-green-300", "text-xs", "font-medium", "rounded-md", "text-green-700", "bg-green-50", "hover:bg-green-100", "focus:outline-none", "focus:ring-2", "focus:ring-offset-2", "focus:ring-green-500", "transition-colors", "duration-200"], [1, "fas", "fa-edit", "mr-1"], ["title", "Delete Shift", 1, "inline-flex", "items-center", "px-3", "py-1.5", "border", "border-red-300", "text-xs", "font-medium", "rounded-md", "text-red-700", "bg-red-50", "hover:bg-red-100", "focus:outline-none", "focus:ring-2", "focus:ring-offset-2", "focus:ring-red-500", "transition-colors", "duration-200"], [1, "fas", "fa-trash", "mr-1"]], template: function ExamShiftListComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1)(2, "div", 2)(3, "div", 3)(4, "div")(5, "h2", 4);
      \u0275\u0275element(6, "i", 5);
      \u0275\u0275text(7, " Exam Shifts ");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "p", 6);
      \u0275\u0275text(9, "Manage exam shift schedules and timings");
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(10, "button", 7);
      \u0275\u0275element(11, "i", 8);
      \u0275\u0275text(12, " Add Shift ");
      \u0275\u0275elementEnd()()();
      \u0275\u0275elementStart(13, "div", 9)(14, "div", 10);
      \u0275\u0275template(15, ExamShiftListComponent_div_15_Template, 10, 2, "div", 11)(16, ExamShiftListComponent_div_16_Template, 19, 1, "div", 12);
      \u0275\u0275elementEnd()()()();
    }
    if (rf & 2) {
      \u0275\u0275advance(10);
      \u0275\u0275property("routerLink", \u0275\u0275pureFunction0(3, _c010));
      \u0275\u0275advance(5);
      \u0275\u0275property("ngIf", !ctx.shifts || ctx.shifts.length === 0);
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", ctx.shifts && ctx.shifts.length > 0);
    }
  }, dependencies: [CommonModule, NgForOf, NgIf, RouterModule, RouterLink], encapsulation: 2 });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ExamShiftListComponent, [{
    type: Component,
    args: [{ standalone: true, selector: "app-exam-shift-list", imports: [CommonModule, RouterModule], template: `<div class="min-h-screen bg-gradient-to-br from-purple-50 to-indigo-100 p-6">\r
  <div class="max-w-6xl mx-auto">\r
    <!-- Header Section -->\r
    <div class="bg-gradient-to-r from-purple-600 to-indigo-600 rounded-t-2xl px-8 py-6 shadow-lg">\r
      <div class="flex items-center justify-between">\r
        <div>\r
          <h2 class="text-3xl font-bold text-white flex items-center gap-3">\r
            <i class="fas fa-clock"></i>\r
            Exam Shifts\r
          </h2>\r
          <p class="text-purple-100 mt-2">Manage exam shift schedules and timings</p>\r
        </div>\r
        \r
        <button \r
          [routerLink]="['/exam-shifts','new']" \r
          class="inline-flex items-center px-6 py-3 bg-white text-purple-600 font-semibold rounded-lg hover:bg-purple-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-white transition-all duration-200 transform hover:scale-105 shadow-lg">\r
          <i class="fas fa-plus mr-2"></i>\r
          Add Shift\r
        </button>\r
      </div>\r
    </div>\r
\r
    <!-- Content Card -->\r
    <div class="bg-white rounded-b-2xl shadow-xl overflow-hidden">\r
      <div class="p-8">\r
        <!-- Empty State -->\r
        <div *ngIf="!shifts || shifts.length === 0" class="text-center py-16">\r
          <div class="bg-gray-50 border border-gray-200 rounded-lg p-8 max-w-md mx-auto">\r
            <i class="fas fa-clock text-gray-400 text-4xl mb-4"></i>\r
            <h3 class="text-xl font-semibold text-gray-700 mb-2">No Exam Shifts</h3>\r
            <p class="text-gray-500 mb-6">Get started by creating your first exam shift</p>\r
            <button \r
              [routerLink]="['/exam-shifts','new']"\r
              class="inline-flex items-center px-6 py-3 bg-purple-600 text-white font-semibold rounded-lg hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500 transition-colors duration-200">\r
              <i class="fas fa-plus mr-2"></i>\r
              Create First Shift\r
            </button>\r
          </div>\r
        </div>\r
\r
        <!-- Shifts Table -->\r
        <div *ngIf="shifts && shifts.length > 0" class="overflow-hidden">\r
          <div class="overflow-x-auto shadow-lg rounded-lg border border-gray-200">\r
            <table class="min-w-full divide-y divide-gray-200">\r
              <thead class="bg-gradient-to-r from-gray-50 to-gray-100">\r
                <tr>\r
                  <th class="px-6 py-4 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider border-b border-gray-200">\r
                    <i class="fas fa-file-alt mr-2 text-purple-500"></i>\r
                    Paper ID\r
                  </th>\r
                  <th class="px-6 py-4 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider border-b border-gray-200">\r
                    <i class="fas fa-barcode mr-2 text-purple-500"></i>\r
                    Code\r
                  </th>\r
                  <th class="px-6 py-4 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider border-b border-gray-200">\r
                    <i class="fas fa-tag mr-2 text-purple-500"></i>\r
                    Name\r
                  </th>\r
                  <th class="px-6 py-4 text-center text-xs font-semibold text-gray-700 uppercase tracking-wider border-b border-gray-200">\r
                    <i class="fas fa-cogs mr-2 text-purple-500"></i>\r
                    Actions\r
                  </th>\r
                </tr>\r
              </thead>\r
              <tbody class="bg-white divide-y divide-gray-200">\r
                <tr *ngFor="let s of shifts; let i = index" class="hover:bg-purple-50 transition-colors duration-200">\r
                  <td class="px-6 py-4 whitespace-nowrap">\r
                    <div class="flex items-center">\r
                      <div class="flex-shrink-0 w-10 h-10 bg-purple-100 rounded-full flex items-center justify-center">\r
                        <i class="fas fa-file-alt text-purple-600"></i>\r
                      </div>\r
                      <div class="ml-4">\r
                        <div class="text-sm font-medium text-gray-900">{{ s.paper }}</div>\r
                      </div>\r
                    </div>\r
                  </td>\r
                  <td class="px-6 py-4 whitespace-nowrap">\r
                    <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-indigo-100 text-indigo-800">\r
                      {{ s.code }}\r
                    </span>\r
                  </td>\r
                  <td class="px-6 py-4 whitespace-nowrap">\r
                    <div class="text-sm font-medium text-gray-900">{{ s.name }}</div>\r
                  </td>\r
                  <td class="px-6 py-4 whitespace-nowrap text-center">\r
                    <div class="flex items-center justify-center space-x-2">\r
                      <button \r
                        class="inline-flex items-center px-3 py-1.5 border border-blue-300 text-xs font-medium rounded-md text-blue-700 bg-blue-50 hover:bg-blue-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200"\r
                        title="View Details">\r
                        <i class="fas fa-eye mr-1"></i>\r
                        View\r
                      </button>\r
                      <button \r
                        class="inline-flex items-center px-3 py-1.5 border border-green-300 text-xs font-medium rounded-md text-green-700 bg-green-50 hover:bg-green-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition-colors duration-200"\r
                        title="Edit Shift">\r
                        <i class="fas fa-edit mr-1"></i>\r
                        Edit\r
                      </button>\r
                      <button \r
                        class="inline-flex items-center px-3 py-1.5 border border-red-300 text-xs font-medium rounded-md text-red-700 bg-red-50 hover:bg-red-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition-colors duration-200"\r
                        title="Delete Shift">\r
                        <i class="fas fa-trash mr-1"></i>\r
                        Delete\r
                      </button>\r
                    </div>\r
                  </td>\r
                </tr>\r
              </tbody>\r
            </table>\r
          </div>\r
        </div>\r
      </div>\r
    </div>\r
  </div>\r
</div>\r
` }]
  }], () => [{ type: ExamShiftService }], null);
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(ExamShiftListComponent, { className: "ExamShiftListComponent", filePath: "src/app/components/exam-shift/exam-shift-list/exam-shift-list.component.ts", lineNumber: 13 });
})();

// src/app/components/exam-shift/add-exam-shift/add-exam-shift.component.ts
function AddExamShiftComponent_option_18_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "option", 26);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const p_r1 = ctx.$implicit;
    \u0275\u0275property("value", p_r1._id);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(p_r1.name);
  }
}
function AddExamShiftComponent_div_19_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 27);
    \u0275\u0275element(1, "i", 28);
    \u0275\u0275text(2, " Please select a paper ");
    \u0275\u0275elementEnd();
  }
}
function AddExamShiftComponent_div_25_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 27);
    \u0275\u0275element(1, "i", 28);
    \u0275\u0275text(2, " Code is required ");
    \u0275\u0275elementEnd();
  }
}
function AddExamShiftComponent_div_31_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 27);
    \u0275\u0275element(1, "i", 28);
    \u0275\u0275text(2, " Name is required ");
    \u0275\u0275elementEnd();
  }
}
var AddExamShiftComponent = class _AddExamShiftComponent {
  fb;
  shiftSvc;
  paperSvc;
  router;
  form;
  papers = [];
  constructor(fb, shiftSvc, paperSvc, router) {
    this.fb = fb;
    this.shiftSvc = shiftSvc;
    this.paperSvc = paperSvc;
    this.router = router;
  }
  ngOnInit() {
    this.form = this.fb.group({
      paper: ["", Validators.required],
      code: ["", Validators.required],
      name: ["", Validators.required]
    });
    this.paperSvc.getAll().subscribe((list) => this.papers = list);
  }
  onSubmit() {
    if (this.form.invalid)
      return;
    this.shiftSvc.create(this.form.value).subscribe({
      next: (shift) => {
        window.alert(`\u2705 Shift "${shift.name}" added.`);
        this.router.navigate(["/exam-shifts"]);
      },
      error: (err) => {
        const msg = err.error?.message || err.message || "Unknown error";
        window.alert(`\u274C Failed to add shift: ${msg}`);
      }
    });
  }
  onCancel() {
    this.router.navigate(["/exam-shifts"]);
  }
  static \u0275fac = function AddExamShiftComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AddExamShiftComponent)(\u0275\u0275directiveInject(FormBuilder), \u0275\u0275directiveInject(ExamShiftService), \u0275\u0275directiveInject(ExamPaperService), \u0275\u0275directiveInject(Router));
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _AddExamShiftComponent, selectors: [["app-add-exam-shift"]], decls: 39, vars: 30, consts: [[1, "min-h-screen", "bg-gradient-to-br", "from-purple-50", "to-indigo-100", "p-6"], [1, "max-w-2xl", "mx-auto"], [1, "bg-gradient-to-r", "from-purple-600", "to-indigo-600", "rounded-t-2xl", "px-8", "py-6", "shadow-lg"], [1, "text-3xl", "font-bold", "text-white", "text-center", "flex", "items-center", "justify-center", "gap-3"], [1, "fas", "fa-plus-circle"], [1, "text-purple-100", "text-center", "mt-2"], [1, "bg-white", "rounded-b-2xl", "shadow-xl", "overflow-hidden"], [1, "p-8"], [1, "space-y-6", 3, "ngSubmit", "formGroup"], ["for", "paper", 1, "block", "text-sm", "font-semibold", "text-gray-700", "mb-2"], [1, "fas", "fa-file-alt", "mr-2", "text-purple-500"], ["id", "paper", "formControlName", "paper", 1, "w-full", "px-4", "py-3", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-purple-500", "focus:border-purple-500", "transition-colors", "duration-200", "bg-white"], ["value", "", "disabled", ""], [3, "value", 4, "ngFor", "ngForOf"], ["class", "mt-1 text-sm text-red-600", 4, "ngIf"], ["for", "code", 1, "block", "text-sm", "font-semibold", "text-gray-700", "mb-2"], [1, "fas", "fa-barcode", "mr-2", "text-purple-500"], ["id", "code", "formControlName", "code", "type", "text", "placeholder", "e.g. shift-1", 1, "w-full", "px-4", "py-3", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-purple-500", "focus:border-purple-500", "transition-colors", "duration-200", "placeholder-gray-400"], ["for", "name", 1, "block", "text-sm", "font-semibold", "text-gray-700", "mb-2"], [1, "fas", "fa-tag", "mr-2", "text-purple-500"], ["id", "name", "formControlName", "name", "type", "text", "placeholder", "Shift Name", 1, "w-full", "px-4", "py-3", "border", "border-gray-300", "rounded-lg", "focus:ring-2", "focus:ring-purple-500", "focus:border-purple-500", "transition-colors", "duration-200", "placeholder-gray-400"], [1, "flex", "gap-4", "pt-6"], ["type", "submit", 1, "flex-1", "bg-gradient-to-r", "from-purple-600", "to-indigo-600", "text-white", "font-semibold", "py-3", "px-6", "rounded-lg", "hover:from-purple-700", "hover:to-indigo-700", "focus:outline-none", "focus:ring-2", "focus:ring-offset-2", "focus:ring-purple-500", "transition-all", "duration-200", "transform", "hover:scale-[1.02]", "disabled:opacity-50", "disabled:cursor-not-allowed", "disabled:transform-none", 3, "disabled"], [1, "fas", "fa-save", "mr-2"], ["type", "button", 1, "px-6", "py-3", "border", "border-gray-300", "text-gray-700", "font-semibold", "rounded-lg", "hover:bg-gray-50", "focus:outline-none", "focus:ring-2", "focus:ring-offset-2", "focus:ring-gray-500", "transition-colors", "duration-200", 3, "click"], [1, "fas", "fa-times", "mr-2"], [3, "value"], [1, "mt-1", "text-sm", "text-red-600"], [1, "fas", "fa-exclamation-circle", "mr-1"]], template: function AddExamShiftComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1)(2, "div", 2)(3, "h2", 3);
      \u0275\u0275element(4, "i", 4);
      \u0275\u0275text(5, " Add Exam Shift ");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(6, "p", 5);
      \u0275\u0275text(7, "Create a new exam shift schedule");
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(8, "div", 6)(9, "div", 7)(10, "form", 8);
      \u0275\u0275listener("ngSubmit", function AddExamShiftComponent_Template_form_ngSubmit_10_listener() {
        return ctx.onSubmit();
      });
      \u0275\u0275elementStart(11, "div")(12, "label", 9);
      \u0275\u0275element(13, "i", 10);
      \u0275\u0275text(14, " Paper ");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(15, "select", 11)(16, "option", 12);
      \u0275\u0275text(17, "Select Paper");
      \u0275\u0275elementEnd();
      \u0275\u0275template(18, AddExamShiftComponent_option_18_Template, 2, 2, "option", 13);
      \u0275\u0275elementEnd();
      \u0275\u0275template(19, AddExamShiftComponent_div_19_Template, 3, 0, "div", 14);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(20, "div")(21, "label", 15);
      \u0275\u0275element(22, "i", 16);
      \u0275\u0275text(23, " Code ");
      \u0275\u0275elementEnd();
      \u0275\u0275element(24, "input", 17);
      \u0275\u0275template(25, AddExamShiftComponent_div_25_Template, 3, 0, "div", 14);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(26, "div")(27, "label", 18);
      \u0275\u0275element(28, "i", 19);
      \u0275\u0275text(29, " Name ");
      \u0275\u0275elementEnd();
      \u0275\u0275element(30, "input", 20);
      \u0275\u0275template(31, AddExamShiftComponent_div_31_Template, 3, 0, "div", 14);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(32, "div", 21)(33, "button", 22);
      \u0275\u0275element(34, "i", 23);
      \u0275\u0275text(35, " Save Exam Shift ");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(36, "button", 24);
      \u0275\u0275listener("click", function AddExamShiftComponent_Template_button_click_36_listener() {
        return ctx.onCancel();
      });
      \u0275\u0275element(37, "i", 25);
      \u0275\u0275text(38, " Cancel ");
      \u0275\u0275elementEnd()()()()()()();
    }
    if (rf & 2) {
      let tmp_1_0;
      let tmp_2_0;
      let tmp_3_0;
      let tmp_4_0;
      let tmp_6_0;
      let tmp_7_0;
      let tmp_8_0;
      let tmp_9_0;
      let tmp_10_0;
      let tmp_11_0;
      let tmp_12_0;
      let tmp_13_0;
      let tmp_14_0;
      let tmp_15_0;
      let tmp_16_0;
      \u0275\u0275advance(10);
      \u0275\u0275property("formGroup", ctx.form);
      \u0275\u0275advance(5);
      \u0275\u0275classProp("border-red-500", ((tmp_1_0 = ctx.form.get("paper")) == null ? null : tmp_1_0.invalid) && ((tmp_1_0 = ctx.form.get("paper")) == null ? null : tmp_1_0.touched))("focus:ring-red-500", ((tmp_2_0 = ctx.form.get("paper")) == null ? null : tmp_2_0.invalid) && ((tmp_2_0 = ctx.form.get("paper")) == null ? null : tmp_2_0.touched))("border-green-500", ((tmp_3_0 = ctx.form.get("paper")) == null ? null : tmp_3_0.valid) && ((tmp_3_0 = ctx.form.get("paper")) == null ? null : tmp_3_0.touched))("focus:ring-green-500", ((tmp_4_0 = ctx.form.get("paper")) == null ? null : tmp_4_0.valid) && ((tmp_4_0 = ctx.form.get("paper")) == null ? null : tmp_4_0.touched));
      \u0275\u0275advance(3);
      \u0275\u0275property("ngForOf", ctx.papers);
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", ((tmp_6_0 = ctx.form.get("paper")) == null ? null : tmp_6_0.invalid) && ((tmp_6_0 = ctx.form.get("paper")) == null ? null : tmp_6_0.touched));
      \u0275\u0275advance(5);
      \u0275\u0275classProp("border-red-500", ((tmp_7_0 = ctx.form.get("code")) == null ? null : tmp_7_0.invalid) && ((tmp_7_0 = ctx.form.get("code")) == null ? null : tmp_7_0.touched))("focus:ring-red-500", ((tmp_8_0 = ctx.form.get("code")) == null ? null : tmp_8_0.invalid) && ((tmp_8_0 = ctx.form.get("code")) == null ? null : tmp_8_0.touched))("border-green-500", ((tmp_9_0 = ctx.form.get("code")) == null ? null : tmp_9_0.valid) && ((tmp_9_0 = ctx.form.get("code")) == null ? null : tmp_9_0.touched))("focus:ring-green-500", ((tmp_10_0 = ctx.form.get("code")) == null ? null : tmp_10_0.valid) && ((tmp_10_0 = ctx.form.get("code")) == null ? null : tmp_10_0.touched));
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", ((tmp_11_0 = ctx.form.get("code")) == null ? null : tmp_11_0.invalid) && ((tmp_11_0 = ctx.form.get("code")) == null ? null : tmp_11_0.touched));
      \u0275\u0275advance(5);
      \u0275\u0275classProp("border-red-500", ((tmp_12_0 = ctx.form.get("name")) == null ? null : tmp_12_0.invalid) && ((tmp_12_0 = ctx.form.get("name")) == null ? null : tmp_12_0.touched))("focus:ring-red-500", ((tmp_13_0 = ctx.form.get("name")) == null ? null : tmp_13_0.invalid) && ((tmp_13_0 = ctx.form.get("name")) == null ? null : tmp_13_0.touched))("border-green-500", ((tmp_14_0 = ctx.form.get("name")) == null ? null : tmp_14_0.valid) && ((tmp_14_0 = ctx.form.get("name")) == null ? null : tmp_14_0.touched))("focus:ring-green-500", ((tmp_15_0 = ctx.form.get("name")) == null ? null : tmp_15_0.valid) && ((tmp_15_0 = ctx.form.get("name")) == null ? null : tmp_15_0.touched));
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", ((tmp_16_0 = ctx.form.get("name")) == null ? null : tmp_16_0.invalid) && ((tmp_16_0 = ctx.form.get("name")) == null ? null : tmp_16_0.touched));
      \u0275\u0275advance(2);
      \u0275\u0275property("disabled", ctx.form.invalid);
    }
  }, dependencies: [CommonModule, NgForOf, NgIf, ReactiveFormsModule, \u0275NgNoValidate, NgSelectOption, \u0275NgSelectMultipleOption, DefaultValueAccessor, SelectControlValueAccessor, NgControlStatus, NgControlStatusGroup, FormGroupDirective, FormControlName, RouterModule], styles: [`

[_nghost-%COMP%]     input:focus, 
[_nghost-%COMP%]     select:focus {
  outline: 2px solid transparent;
  outline-offset: 2px;
}
[_nghost-%COMP%]     input, 
[_nghost-%COMP%]     select {
  transition: all 0.2s ease-in-out;
}
[_nghost-%COMP%]     .ng-invalid.ng-touched {
  animation: _ngcontent-%COMP%_shake 0.5s ease-in-out;
}
@keyframes _ngcontent-%COMP%_shake {
  0%, 100% {
    transform: translateX(0);
  }
  25% {
    transform: translateX(-5px);
  }
  75% {
    transform: translateX(5px);
  }
}
.form-row[_ngcontent-%COMP%] {
  display: flex;
  gap: 1rem;
  margin-bottom: 1rem;
}
@media (max-width: 768px) {
  .form-row[_ngcontent-%COMP%] {
    flex-direction: column;
    gap: 0;
  }
}
.form-group[_ngcontent-%COMP%] {
  flex: 1;
  margin-bottom: 1.5rem;
}
label[_ngcontent-%COMP%] {
  display: block;
  margin-bottom: 0.5rem;
  font-weight: 500;
  color: #1f2937;
}
input[_ngcontent-%COMP%], 
select[_ngcontent-%COMP%], 
textarea[_ngcontent-%COMP%] {
  width: 100%;
  padding: 0.75rem 1rem;
  border: 1px solid #d1d5db;
  border-radius: 8px;
  font-family: inherit;
  font-size: 1rem;
  margin-bottom: 0.5rem;
  transition: border-color 0.2s ease, box-shadow 0.2s ease;
}
input[_ngcontent-%COMP%]:focus, 
select[_ngcontent-%COMP%]:focus, 
textarea[_ngcontent-%COMP%]:focus {
  outline: none;
  border-color: #3b82f6;
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.3);
}
input[_ngcontent-%COMP%]::placeholder, 
select[_ngcontent-%COMP%]::placeholder, 
textarea[_ngcontent-%COMP%]::placeholder {
  color: #6b7280;
  opacity: 0.7;
}
select[_ngcontent-%COMP%] {
  appearance: none;
  background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6 9 12 15 18 9'%3e%3c/polyline%3e%3c/svg%3e");
  background-repeat: no-repeat;
  background-position: right 1rem center;
  background-size: 1em;
}
.field-error[_ngcontent-%COMP%] {
  color: #dc2626;
  font-size: 0.85rem;
  margin-top: 0.25rem;
}
.actions[_ngcontent-%COMP%] {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-top: 1rem;
}
@media (max-width: 768px) {
  .actions[_ngcontent-%COMP%] {
    flex-direction: column;
    gap: 1rem;
  }
}
.actions[_ngcontent-%COMP%]   .cancel[_ngcontent-%COMP%] {
  background-color: transparent;
  color: #6b7280;
  border: 1px solid #d1d5db;
  padding: 0.75rem 1.5rem;
  border-radius: 8px;
  cursor: pointer;
  transition: all 0.2s ease;
}
.actions[_ngcontent-%COMP%]   .cancel[_ngcontent-%COMP%]:hover {
  background-color: #f9fafb;
  color: #1f2937;
}
.actions[_ngcontent-%COMP%]   button[type=submit][_ngcontent-%COMP%] {
  background-color: #3b82f6;
  color: white;
  border: none;
  border-radius: 8px;
  padding: 0.75rem 1.5rem;
  font-size: 1rem;
  font-weight: 500;
  cursor: pointer;
  transition: background-color 0.2s ease, transform 0.2s ease;
}
.actions[_ngcontent-%COMP%]   button[type=submit][_ngcontent-%COMP%]:hover:not(:disabled) {
  background-color: #2563eb;
  transform: translateY(-2px);
}
.actions[_ngcontent-%COMP%]   button[type=submit][_ngcontent-%COMP%]:disabled {
  background-color: #d1d5db;
  cursor: not-allowed;
  opacity: 0.7;
}
p[_ngcontent-%COMP%] {
  display: none;
}
@media (max-width: 768px) {
  form[_ngcontent-%COMP%] {
    padding: 1.5rem;
  }
}
/*# sourceMappingURL=add-exam-shift.component.css.map */`] });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AddExamShiftComponent, [{
    type: Component,
    args: [{ standalone: true, selector: "app-add-exam-shift", imports: [CommonModule, ReactiveFormsModule, RouterModule], template: `<div class="min-h-screen bg-gradient-to-br from-purple-50 to-indigo-100 p-6">\r
  <div class="max-w-2xl mx-auto">\r
    <!-- Header Section -->\r
    <div class="bg-gradient-to-r from-purple-600 to-indigo-600 rounded-t-2xl px-8 py-6 shadow-lg">\r
      <h2 class="text-3xl font-bold text-white text-center flex items-center justify-center gap-3">\r
        <i class="fas fa-plus-circle"></i>\r
        Add Exam Shift\r
      </h2>\r
      <p class="text-purple-100 text-center mt-2">Create a new exam shift schedule</p>\r
    </div>\r
\r
    <!-- Form Card -->\r
    <div class="bg-white rounded-b-2xl shadow-xl overflow-hidden">\r
      <div class="p-8">\r
        <form [formGroup]="form" (ngSubmit)="onSubmit()" class="space-y-6">\r
          <!-- Paper Selection -->\r
          <div>\r
            <label for="paper" class="block text-sm font-semibold text-gray-700 mb-2">\r
              <i class="fas fa-file-alt mr-2 text-purple-500"></i>\r
              Paper\r
            </label>\r
            <select \r
              id="paper"\r
              formControlName="paper"\r
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-colors duration-200 bg-white"\r
              [class.border-red-500]="form.get('paper')?.invalid && form.get('paper')?.touched"\r
              [class.focus:ring-red-500]="form.get('paper')?.invalid && form.get('paper')?.touched"\r
              [class.border-green-500]="form.get('paper')?.valid && form.get('paper')?.touched"\r
              [class.focus:ring-green-500]="form.get('paper')?.valid && form.get('paper')?.touched">\r
              <option value="" disabled>Select Paper</option>\r
              <option *ngFor="let p of papers" [value]="p._id">{{ p.name }}</option>\r
            </select>\r
            <div *ngIf="form.get('paper')?.invalid && form.get('paper')?.touched" class="mt-1 text-sm text-red-600">\r
              <i class="fas fa-exclamation-circle mr-1"></i>\r
              Please select a paper\r
            </div>\r
          </div>\r
\r
          <!-- Code Field -->\r
          <div>\r
            <label for="code" class="block text-sm font-semibold text-gray-700 mb-2">\r
              <i class="fas fa-barcode mr-2 text-purple-500"></i>\r
              Code\r
            </label>\r
            <input \r
              id="code"\r
              formControlName="code" \r
              type="text"\r
              placeholder="e.g. shift-1"\r
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-colors duration-200 placeholder-gray-400"\r
              [class.border-red-500]="form.get('code')?.invalid && form.get('code')?.touched"\r
              [class.focus:ring-red-500]="form.get('code')?.invalid && form.get('code')?.touched"\r
              [class.border-green-500]="form.get('code')?.valid && form.get('code')?.touched"\r
              [class.focus:ring-green-500]="form.get('code')?.valid && form.get('code')?.touched"\r
            />\r
            <div *ngIf="form.get('code')?.invalid && form.get('code')?.touched" class="mt-1 text-sm text-red-600">\r
              <i class="fas fa-exclamation-circle mr-1"></i>\r
              Code is required\r
            </div>\r
          </div>\r
\r
          <!-- Name Field -->\r
          <div>\r
            <label for="name" class="block text-sm font-semibold text-gray-700 mb-2">\r
              <i class="fas fa-tag mr-2 text-purple-500"></i>\r
              Name\r
            </label>\r
            <input \r
              id="name"\r
              formControlName="name" \r
              type="text"\r
              placeholder="Shift Name"\r
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-colors duration-200 placeholder-gray-400"\r
              [class.border-red-500]="form.get('name')?.invalid && form.get('name')?.touched"\r
              [class.focus:ring-red-500]="form.get('name')?.invalid && form.get('name')?.touched"\r
              [class.border-green-500]="form.get('name')?.valid && form.get('name')?.touched"\r
              [class.focus:ring-green-500]="form.get('name')?.valid && form.get('name')?.touched"\r
            />\r
            <div *ngIf="form.get('name')?.invalid && form.get('name')?.touched" class="mt-1 text-sm text-red-600">\r
              <i class="fas fa-exclamation-circle mr-1"></i>\r
              Name is required\r
            </div>\r
          </div>\r
\r
          <!-- Submit Button -->\r
          <div class="flex gap-4 pt-6">\r
            <button \r
              type="submit" \r
              [disabled]="form.invalid"\r
              class="flex-1 bg-gradient-to-r from-purple-600 to-indigo-600 text-white font-semibold py-3 px-6 rounded-lg hover:from-purple-700 hover:to-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500 transition-all duration-200 transform hover:scale-[1.02] disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none">\r
              <i class="fas fa-save mr-2"></i>\r
              Save Exam Shift\r
            </button>\r
            \r
            <button \r
              type="button" \r
              (click)="onCancel()"\r
              class="px-6 py-3 border border-gray-300 text-gray-700 font-semibold rounded-lg hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 transition-colors duration-200">\r
              <i class="fas fa-times mr-2"></i>\r
              Cancel\r
            </button>\r
          </div>\r
        </form>\r
      </div>\r
    </div>\r
  </div>\r
</div>\r
`, styles: [`/* src/app/components/exam-shift/add-exam-shift/add-exam-shift.component.scss */
:host ::ng-deep input:focus,
:host ::ng-deep select:focus {
  outline: 2px solid transparent;
  outline-offset: 2px;
}
:host ::ng-deep input,
:host ::ng-deep select {
  transition: all 0.2s ease-in-out;
}
:host ::ng-deep .ng-invalid.ng-touched {
  animation: shake 0.5s ease-in-out;
}
@keyframes shake {
  0%, 100% {
    transform: translateX(0);
  }
  25% {
    transform: translateX(-5px);
  }
  75% {
    transform: translateX(5px);
  }
}
.form-row {
  display: flex;
  gap: 1rem;
  margin-bottom: 1rem;
}
@media (max-width: 768px) {
  .form-row {
    flex-direction: column;
    gap: 0;
  }
}
.form-group {
  flex: 1;
  margin-bottom: 1.5rem;
}
label {
  display: block;
  margin-bottom: 0.5rem;
  font-weight: 500;
  color: #1f2937;
}
input,
select,
textarea {
  width: 100%;
  padding: 0.75rem 1rem;
  border: 1px solid #d1d5db;
  border-radius: 8px;
  font-family: inherit;
  font-size: 1rem;
  margin-bottom: 0.5rem;
  transition: border-color 0.2s ease, box-shadow 0.2s ease;
}
input:focus,
select:focus,
textarea:focus {
  outline: none;
  border-color: #3b82f6;
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.3);
}
input::placeholder,
select::placeholder,
textarea::placeholder {
  color: #6b7280;
  opacity: 0.7;
}
select {
  appearance: none;
  background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6 9 12 15 18 9'%3e%3c/polyline%3e%3c/svg%3e");
  background-repeat: no-repeat;
  background-position: right 1rem center;
  background-size: 1em;
}
.field-error {
  color: #dc2626;
  font-size: 0.85rem;
  margin-top: 0.25rem;
}
.actions {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-top: 1rem;
}
@media (max-width: 768px) {
  .actions {
    flex-direction: column;
    gap: 1rem;
  }
}
.actions .cancel {
  background-color: transparent;
  color: #6b7280;
  border: 1px solid #d1d5db;
  padding: 0.75rem 1.5rem;
  border-radius: 8px;
  cursor: pointer;
  transition: all 0.2s ease;
}
.actions .cancel:hover {
  background-color: #f9fafb;
  color: #1f2937;
}
.actions button[type=submit] {
  background-color: #3b82f6;
  color: white;
  border: none;
  border-radius: 8px;
  padding: 0.75rem 1.5rem;
  font-size: 1rem;
  font-weight: 500;
  cursor: pointer;
  transition: background-color 0.2s ease, transform 0.2s ease;
}
.actions button[type=submit]:hover:not(:disabled) {
  background-color: #2563eb;
  transform: translateY(-2px);
}
.actions button[type=submit]:disabled {
  background-color: #d1d5db;
  cursor: not-allowed;
  opacity: 0.7;
}
p {
  display: none;
}
@media (max-width: 768px) {
  form {
    padding: 1.5rem;
  }
}
/*# sourceMappingURL=add-exam-shift.component.css.map */
`] }]
  }], () => [{ type: FormBuilder }, { type: ExamShiftService }, { type: ExamPaperService }, { type: Router }], null);
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(AddExamShiftComponent, { className: "AddExamShiftComponent", filePath: "src/app/components/exam-shift/add-exam-shift/add-exam-shift.component.ts", lineNumber: 18 });
})();

// src/app/services/user.service.ts
var UserService = class _UserService {
  http;
  authService;
  // private apiUrl = '/api/users'; // Old configuration
  apiUrl = environment.apiUrl + "/users";
  // Corrected: Use environment.apiUrl consistent with AuthService
  constructor(http, authService) {
    this.http = http;
    this.authService = authService;
  }
  getAuthHeaders() {
    const token = this.authService.getToken();
    return new HttpHeaders().set("Authorization", `Bearer ${token}`);
  }
  getAllUsers() {
    return this.http.get(`${this.apiUrl}`, { headers: this.getAuthHeaders() });
  }
  updateUserAccountSettings(userId, settings) {
    return this.http.put(`${this.apiUrl}/${userId}/account-settings`, settings, { headers: this.getAuthHeaders() });
  }
  static \u0275fac = function UserService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _UserService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(AuthService));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _UserService, factory: _UserService.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(UserService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{ type: HttpClient }, { type: AuthService }], null);
})();

// src/app/components/user-management/user-management.component.ts
var _c011 = (a0, a1, a2) => ({ "bg-purple-100 text-purple-800": a0, "bg-blue-100 text-blue-800": a1, "bg-green-100 text-green-800": a2 });
var _c13 = (a0, a1, a2) => ({ "bg-red-100 text-red-800": a0, "bg-yellow-100 text-yellow-800": a1, "bg-green-100 text-green-800": a2 });
function UserManagementComponent_div_7_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 9)(1, "div", 10);
    \u0275\u0275element(2, "div", 11);
    \u0275\u0275elementStart(3, "p", 12);
    \u0275\u0275text(4, "Loading users...");
    \u0275\u0275elementEnd()()();
  }
}
function UserManagementComponent_div_8_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 13)(1, "div", 14);
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(2, "svg", 15);
    \u0275\u0275element(3, "path", 16);
    \u0275\u0275elementEnd();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(4, "p", 17);
    \u0275\u0275text(5);
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(5);
    \u0275\u0275textInterpolate(ctx_r0.errorMessage);
  }
}
function UserManagementComponent_div_9_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 18);
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(1, "svg", 19);
    \u0275\u0275element(2, "path", 20);
    \u0275\u0275elementEnd();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(3, "h3", 21);
    \u0275\u0275text(4, "Access Restricted");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(5, "p", 22);
    \u0275\u0275text(6, "You do not have permission to view this page. Contact your administrator for access.");
    \u0275\u0275elementEnd()();
  }
}
function UserManagementComponent_div_10_tr_23_Template(rf, ctx) {
  if (rf & 1) {
    const _r2 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "tr", 40)(1, "td", 41)(2, "div", 14)(3, "div", 42)(4, "div", 43)(5, "span", 44);
    \u0275\u0275text(6);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(7, "div", 45)(8, "div", 46);
    \u0275\u0275text(9);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(10, "div", 47);
    \u0275\u0275text(11);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(12, "div", 48);
    \u0275\u0275text(13);
    \u0275\u0275elementEnd()()()();
    \u0275\u0275elementStart(14, "td", 41)(15, "span", 49);
    \u0275\u0275text(16);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(17, "td", 41)(18, "input", 50);
    \u0275\u0275twoWayListener("ngModelChange", function UserManagementComponent_div_10_tr_23_Template_input_ngModelChange_18_listener($event) {
      const user_r3 = \u0275\u0275restoreView(_r2).$implicit;
      const ctx_r0 = \u0275\u0275nextContext(2);
      \u0275\u0275twoWayBindingSet(ctx_r0.userEditModels[user_r3._id].formAccountExpiresAt, $event) || (ctx_r0.userEditModels[user_r3._id].formAccountExpiresAt = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(19, "td", 41)(20, "span", 49);
    \u0275\u0275text(21);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(22, "td", 41)(23, "input", 50);
    \u0275\u0275twoWayListener("ngModelChange", function UserManagementComponent_div_10_tr_23_Template_input_ngModelChange_23_listener($event) {
      const user_r3 = \u0275\u0275restoreView(_r2).$implicit;
      const ctx_r0 = \u0275\u0275nextContext(2);
      \u0275\u0275twoWayBindingSet(ctx_r0.userEditModels[user_r3._id].formFreeTrialEndsAt, $event) || (ctx_r0.userEditModels[user_r3._id].formFreeTrialEndsAt = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(24, "td", 41)(25, "div", 51)(26, "button", 52);
    \u0275\u0275listener("click", function UserManagementComponent_div_10_tr_23_Template_button_click_26_listener() {
      const user_r3 = \u0275\u0275restoreView(_r2).$implicit;
      const ctx_r0 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r0.saveUserSettings(user_r3));
    });
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(27, "svg", 53);
    \u0275\u0275element(28, "path", 54);
    \u0275\u0275elementEnd();
    \u0275\u0275text(29, " Save ");
    \u0275\u0275elementEnd();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(30, "div", 55)(31, "button", 56);
    \u0275\u0275listener("click", function UserManagementComponent_div_10_tr_23_Template_button_click_31_listener() {
      const user_r3 = \u0275\u0275restoreView(_r2).$implicit;
      const ctx_r0 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r0.addExpiryDays(user_r3, 30));
    });
    \u0275\u0275text(32, " +30d ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(33, "button", 57);
    \u0275\u0275listener("click", function UserManagementComponent_div_10_tr_23_Template_button_click_33_listener() {
      const user_r3 = \u0275\u0275restoreView(_r2).$implicit;
      const ctx_r0 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r0.addExpiryDays(user_r3, 180));
    });
    \u0275\u0275text(34, " +180d ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(35, "button", 58);
    \u0275\u0275listener("click", function UserManagementComponent_div_10_tr_23_Template_button_click_35_listener() {
      const user_r3 = \u0275\u0275restoreView(_r2).$implicit;
      const ctx_r0 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r0.addExpiryDays(user_r3, 360));
    });
    \u0275\u0275text(36, " +360d ");
    \u0275\u0275elementEnd()()()()();
  }
  if (rf & 2) {
    const user_r3 = ctx.$implicit;
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(6);
    \u0275\u0275textInterpolate(user_r3.name.charAt(0).toUpperCase());
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate(user_r3.name);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate("@" + user_r3.username);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(user_r3.email || "No email");
    \u0275\u0275advance(2);
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction3(16, _c011, user_r3.role === "superadmin", user_r3.role === "admin", user_r3.role === "student"));
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", user_r3.role, " ");
    \u0275\u0275advance(2);
    \u0275\u0275classProp("bg-gray-100", !ctx_r0.isSuperAdmin);
    \u0275\u0275twoWayProperty("ngModel", ctx_r0.userEditModels[user_r3._id].formAccountExpiresAt);
    \u0275\u0275property("readonly", !ctx_r0.isSuperAdmin);
    \u0275\u0275advance(2);
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction3(20, _c13, ctx_r0.getDaysLeftNumber(ctx_r0.userEditModels[user_r3._id].formAccountExpiresAt) <= 7, ctx_r0.getDaysLeftNumber(ctx_r0.userEditModels[user_r3._id].formAccountExpiresAt) > 7 && ctx_r0.getDaysLeftNumber(ctx_r0.userEditModels[user_r3._id].formAccountExpiresAt) <= 30, ctx_r0.getDaysLeftNumber(ctx_r0.userEditModels[user_r3._id].formAccountExpiresAt) > 30));
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.getDaysLeft(ctx_r0.userEditModels[user_r3._id].formAccountExpiresAt), " ");
    \u0275\u0275advance(2);
    \u0275\u0275classProp("bg-gray-100", !ctx_r0.isSuperAdmin);
    \u0275\u0275twoWayProperty("ngModel", ctx_r0.userEditModels[user_r3._id].formFreeTrialEndsAt);
    \u0275\u0275property("readonly", !ctx_r0.isSuperAdmin);
  }
}
function UserManagementComponent_div_10_tr_24_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "tr")(1, "td", 59)(2, "div", 60);
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(3, "svg", 61);
    \u0275\u0275element(4, "path", 27);
    \u0275\u0275elementEnd();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(5, "p", 62);
    \u0275\u0275text(6, "No users found");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(7, "p", 63);
    \u0275\u0275text(8, "No user accounts are currently available to manage.");
    \u0275\u0275elementEnd()()()();
  }
}
function UserManagementComponent_div_10_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 23)(1, "div", 24)(2, "h2", 25);
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(3, "svg", 26);
    \u0275\u0275element(4, "path", 27);
    \u0275\u0275elementEnd();
    \u0275\u0275text(5);
    \u0275\u0275elementEnd()();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(6, "div", 28)(7, "table", 29)(8, "thead", 30)(9, "tr")(10, "th", 31);
    \u0275\u0275text(11, "User Info");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(12, "th", 31);
    \u0275\u0275text(13, "Role");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(14, "th", 31);
    \u0275\u0275text(15, "Account Expires");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(16, "th", 31);
    \u0275\u0275text(17, "Days Left");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(18, "th", 31);
    \u0275\u0275text(19, "Free Trial Ends");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(20, "th", 31);
    \u0275\u0275text(21, "Actions");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(22, "tbody", 32);
    \u0275\u0275template(23, UserManagementComponent_div_10_tr_23_Template, 37, 24, "tr", 33)(24, UserManagementComponent_div_10_tr_24_Template, 9, 0, "tr", 34);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(25, "div", 35)(26, "div", 36)(27, "div", 14);
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(28, "svg", 37);
    \u0275\u0275element(29, "path", 38);
    \u0275\u0275elementEnd();
    \u0275\u0275namespaceHTML();
    \u0275\u0275elementStart(30, "span");
    \u0275\u0275text(31, "Click on date fields to modify user expiry dates");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(32, "div", 14)(33, "span", 39);
    \u0275\u0275text(34);
    \u0275\u0275elementEnd()()()()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(5);
    \u0275\u0275textInterpolate1(" User Accounts (", ctx_r0.users.length, ") ");
    \u0275\u0275advance(18);
    \u0275\u0275property("ngForOf", ctx_r0.users);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.users.length === 0);
    \u0275\u0275advance(10);
    \u0275\u0275textInterpolate1("Total Users: ", ctx_r0.users.length, "");
  }
}
var UserManagementComponent = class _UserManagementComponent {
  userService;
  authService;
  users = [];
  currentUserRole = null;
  isLoading = true;
  errorMessage = null;
  isSuperAdmin = false;
  // Added property
  // To store temporary edits for each user
  userEditModels = {};
  constructor(userService, authService) {
    this.userService = userService;
    this.authService = authService;
  }
  ngOnInit() {
    this.currentUserRole = this.authService.getRole();
    this.isSuperAdmin = this.currentUserRole === "superadmin";
    if (this.currentUserRole === "superadmin" || this.currentUserRole === "admin") {
      this.loadUsers();
    } else {
      this.isLoading = false;
      this.errorMessage = "You do not have permission to view this page.";
    }
  }
  loadUsers() {
    this.isLoading = true;
    this.errorMessage = null;
    this.userService.getAllUsers().subscribe({
      next: (data) => {
        this.users = data;
        this.users.forEach((user) => {
          this.userEditModels[user._id] = {
            formAccountExpiresAt: this.formatDateForInput(user.accountExpiresAt),
            formFreeTrialEndsAt: this.formatDateForInput(user.freeTrialEndsAt)
          };
        });
        this.isLoading = false;
      },
      error: (err) => {
        console.error("Error fetching users:", err);
        this.errorMessage = "Failed to load users. You may not have permission to view this page or the server encountered an error.";
        this.isLoading = false;
      }
    });
  }
  formatDateForInput(dateString) {
    if (dateString) {
      try {
        const date = new Date(dateString);
        if (isNaN(date.getTime())) {
          return "";
        }
        const year = date.getFullYear();
        const month = ("0" + (date.getMonth() + 1)).slice(-2);
        const day = ("0" + date.getDate()).slice(-2);
        return `${year}-${month}-${day}`;
      } catch (e) {
        return "";
      }
    }
    return "";
  }
  getDaysLeft(dateString) {
    if (!dateString) {
      return "N/A";
    }
    const expiryDate = new Date(dateString);
    const today = /* @__PURE__ */ new Date();
    expiryDate.setHours(0, 0, 0, 0);
    today.setHours(0, 0, 0, 0);
    if (isNaN(expiryDate.getTime())) {
      return "Invalid Date";
    }
    const diffTime = expiryDate.getTime() - today.getTime();
    const diffDays = Math.ceil(diffTime / (1e3 * 60 * 60 * 24));
    if (diffDays < 0) {
      return "Expired";
    }
    return `${diffDays} days left`;
  }
  getDaysLeftNumber(dateString) {
    if (!dateString) {
      return -1;
    }
    const expiryDate = new Date(dateString);
    const today = /* @__PURE__ */ new Date();
    expiryDate.setHours(0, 0, 0, 0);
    today.setHours(0, 0, 0, 0);
    if (isNaN(expiryDate.getTime())) {
      return -1;
    }
    const diffTime = expiryDate.getTime() - today.getTime();
    const diffDays = Math.ceil(diffTime / (1e3 * 60 * 60 * 24));
    return diffDays;
  }
  addExpiryDays(user, days) {
    console.log("[UserManagement] addExpiryDays called.");
    console.log("[UserManagement] Current user role:", this.currentUserRole);
    console.log("[UserManagement] Is SuperAdmin flag:", this.isSuperAdmin);
    if (!this.isSuperAdmin) {
      console.log("[UserManagement] Not a SuperAdmin. Action blocked for addExpiryDays.");
      alert("Action blocked: Only Superadmins can modify user expiry dates.");
      return;
    }
    console.log("[UserManagement] Is SuperAdmin. Proceeding with addExpiryDays.");
    const today = /* @__PURE__ */ new Date();
    const newExpiryDate = new Date(today.setDate(today.getDate() + days));
    this.userEditModels[user._id].formAccountExpiresAt = this.formatDateForInput(newExpiryDate.toISOString());
    this.saveUserSettings(user);
  }
  saveUserSettings(user) {
    console.log("[UserManagement] saveUserSettings called.");
    console.log("[UserManagement] Current user role:", this.currentUserRole);
    console.log("[UserManagement] Is SuperAdmin flag:", this.isSuperAdmin);
    if (!this.isSuperAdmin) {
      console.log("[UserManagement] Not a SuperAdmin. Showing alert and returning.");
      alert("Action blocked: Only Superadmins can modify user settings.");
      return;
    }
    console.log("[UserManagement] Is SuperAdmin. Proceeding with save.");
    if (!this.userEditModels[user._id]) {
      alert("Cannot save settings: edit model not found.");
      return;
    }
    const editModel = this.userEditModels[user._id];
    const settings = {};
    settings.accountExpiresAt = editModel.formAccountExpiresAt ? editModel.formAccountExpiresAt : null;
    settings.freeTrialEndsAt = editModel.formFreeTrialEndsAt ? editModel.formFreeTrialEndsAt : null;
    const dateRegex = /^\d{4}-\d{2}-\d{2}$/;
    if (settings.accountExpiresAt && !dateRegex.test(settings.accountExpiresAt)) {
      alert("Invalid format for Account Expiry Date. Please use YYYY-MM-DD.");
      return;
    }
    if (settings.freeTrialEndsAt && !dateRegex.test(settings.freeTrialEndsAt)) {
      alert("Invalid format for Free Trial End Date. Please use YYYY-MM-DD.");
      return;
    }
    this.userService.updateUserAccountSettings(user._id, settings).subscribe({
      next: () => {
        alert("User settings updated successfully!");
        this.loadUsers();
      },
      error: (err) => {
        console.error("Error updating user settings:", err);
        alert(`Failed to update settings: ${err.error?.message || "Server error"}`);
      }
    });
  }
  static \u0275fac = function UserManagementComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _UserManagementComponent)(\u0275\u0275directiveInject(UserService), \u0275\u0275directiveInject(AuthService));
  };
  static \u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _UserManagementComponent, selectors: [["app-user-management"]], decls: 11, vars: 4, consts: [[1, "min-h-screen", "bg-gray-50", "py-6", "px-4", "sm:px-6", "lg:px-8"], [1, "max-w-7xl", "mx-auto"], [1, "mb-8"], [1, "text-3xl", "font-bold", "text-gray-900", "mb-2"], [1, "text-gray-600"], ["class", "bg-white rounded-xl shadow-sm border border-gray-200 p-8", 4, "ngIf"], ["class", "bg-red-50 border border-red-200 rounded-xl p-6 mb-6", 4, "ngIf"], ["class", "bg-yellow-50 border border-yellow-200 rounded-xl p-8 text-center", 4, "ngIf"], ["class", "bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden", 4, "ngIf"], [1, "bg-white", "rounded-xl", "shadow-sm", "border", "border-gray-200", "p-8"], [1, "flex", "items-center", "justify-center"], [1, "animate-spin", "rounded-full", "h-8", "w-8", "border-b-2", "border-primary-600"], [1, "ml-3", "text-gray-600"], [1, "bg-red-50", "border", "border-red-200", "rounded-xl", "p-6", "mb-6"], [1, "flex", "items-center"], ["fill", "none", "stroke", "currentColor", "viewBox", "0 0 24 24", 1, "w-5", "h-5", "text-red-400", "mr-3"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16c-.77.833.192 2.5 1.732 2.5z"], [1, "text-red-800", "font-medium"], [1, "bg-yellow-50", "border", "border-yellow-200", "rounded-xl", "p-8", "text-center"], ["fill", "none", "stroke", "currentColor", "viewBox", "0 0 24 24", 1, "w-16", "h-16", "text-yellow-400", "mx-auto", "mb-4"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"], [1, "text-lg", "font-semibold", "text-yellow-800", "mb-2"], [1, "text-yellow-700"], [1, "bg-white", "rounded-xl", "shadow-sm", "border", "border-gray-200", "overflow-hidden"], [1, "px-6", "py-4", "border-b", "border-gray-200", "bg-gray-50"], [1, "text-xl", "font-semibold", "text-gray-900", "flex", "items-center"], ["fill", "none", "stroke", "currentColor", "viewBox", "0 0 24 24", 1, "w-5", "h-5", "mr-2", "text-primary-600"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"], [1, "overflow-x-auto"], [1, "min-w-full", "divide-y", "divide-gray-200"], [1, "bg-gray-50"], [1, "px-6", "py-3", "text-left", "text-xs", "font-medium", "text-gray-500", "uppercase", "tracking-wider"], [1, "bg-white", "divide-y", "divide-gray-200"], ["class", "hover:bg-gray-50 transition-colors", 4, "ngFor", "ngForOf"], [4, "ngIf"], [1, "bg-gray-50", "px-6", "py-3", "border-t", "border-gray-200"], [1, "flex", "items-center", "justify-between", "text-sm", "text-gray-600"], ["fill", "none", "stroke", "currentColor", "viewBox", "0 0 24 24", 1, "w-4", "h-4", "mr-1"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"], [1, "font-medium"], [1, "hover:bg-gray-50", "transition-colors"], [1, "px-6", "py-4"], [1, "flex-shrink-0", "h-10", "w-10"], [1, "h-10", "w-10", "rounded-full", "bg-primary-100", "flex", "items-center", "justify-center"], [1, "text-sm", "font-medium", "text-primary-700"], [1, "ml-4"], [1, "text-sm", "font-medium", "text-gray-900"], [1, "text-sm", "text-gray-500"], [1, "text-xs", "text-gray-400"], [1, "inline-flex", "items-center", "px-2.5", "py-0.5", "rounded-full", "text-xs", "font-medium", 3, "ngClass"], ["type", "date", 1, "form-input", "text-sm", "px-3", "py-2", "border", "border-gray-300", "rounded-md", "focus:ring-2", "focus:ring-primary-500", "focus:border-primary-500", "disabled:bg-gray-100", 3, "ngModelChange", "ngModel", "readonly"], [1, "flex", "flex-col", "space-y-2"], [1, "inline-flex", "items-center", "px-3", "py-1.5", "text-xs", "font-medium", "rounded-md", "text-white", "bg-primary-600", "hover:bg-primary-700", "focus:outline-none", "focus:ring-2", "focus:ring-primary-500", "focus:ring-offset-2", "transition-colors", 3, "click"], ["fill", "none", "stroke", "currentColor", "viewBox", "0 0 24 24", 1, "w-3", "h-3", "mr-1"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M5 13l4 4L19 7"], [1, "flex", "flex-wrap", "gap-1"], ["title", "Add 30 days", 1, "inline-flex", "items-center", "px-2", "py-1", "text-xs", "font-medium", "rounded", "bg-green-100", "text-green-700", "hover:bg-green-200", "transition-colors", 3, "click"], ["title", "Add 180 days", 1, "inline-flex", "items-center", "px-2", "py-1", "text-xs", "font-medium", "rounded", "bg-blue-100", "text-blue-700", "hover:bg-blue-200", "transition-colors", 3, "click"], ["title", "Add 360 days", 1, "inline-flex", "items-center", "px-2", "py-1", "text-xs", "font-medium", "rounded", "bg-purple-100", "text-purple-700", "hover:bg-purple-200", "transition-colors", 3, "click"], ["colspan", "6", 1, "px-6", "py-12", "text-center", "text-gray-500"], [1, "flex", "flex-col", "items-center"], ["fill", "none", "stroke", "currentColor", "viewBox", "0 0 24 24", 1, "w-12", "h-12", "text-gray-300", "mb-4"], [1, "text-lg", "font-medium"], [1, "text-sm"]], template: function UserManagementComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1)(2, "div", 2)(3, "h1", 3);
      \u0275\u0275text(4, "User Management");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(5, "p", 4);
      \u0275\u0275text(6, "Manage user accounts, roles, and permissions");
      \u0275\u0275elementEnd()();
      \u0275\u0275template(7, UserManagementComponent_div_7_Template, 5, 0, "div", 5)(8, UserManagementComponent_div_8_Template, 6, 1, "div", 6)(9, UserManagementComponent_div_9_Template, 7, 0, "div", 7)(10, UserManagementComponent_div_10_Template, 35, 4, "div", 8);
      \u0275\u0275elementEnd()();
    }
    if (rf & 2) {
      \u0275\u0275advance(7);
      \u0275\u0275property("ngIf", ctx.isLoading);
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", ctx.errorMessage && !ctx.isLoading);
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", !ctx.isLoading && !ctx.errorMessage && ctx.currentUserRole !== "superadmin" && ctx.currentUserRole !== "admin");
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", !ctx.isLoading && !ctx.errorMessage && (ctx.currentUserRole === "superadmin" || ctx.currentUserRole === "admin"));
    }
  }, dependencies: [CommonModule, NgClass, NgForOf, NgIf, FormsModule, DefaultValueAccessor, NgControlStatus, NgModel], styles: ["\n\n.user-avatar-transition[_ngcontent-%COMP%] {\n  transition-property: all;\n  transition-duration: 200ms;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n}\n.enhanced-focus[_ngcontent-%COMP%]:focus {\n  --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);\n  --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color);\n  box-shadow:\n    var(--tw-ring-offset-shadow),\n    var(--tw-ring-shadow),\n    var(--tw-shadow, 0 0 #0000);\n  --tw-ring-color: rgb(14 165 233 / var(--tw-ring-opacity, 1));\n  --tw-ring-opacity: 0.5 ;\n}\n/*# sourceMappingURL=user-management.component.css.map */"] });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(UserManagementComponent, [{
    type: Component,
    args: [{ selector: "app-user-management", standalone: true, imports: [CommonModule, FormsModule], template: `<!-- Modern User Management with Tailwind CSS -->\r
<div class="min-h-screen bg-gray-50 py-6 px-4 sm:px-6 lg:px-8">\r
  <div class="max-w-7xl mx-auto">\r
    \r
    <!-- Page Header -->\r
    <div class="mb-8">\r
      <h1 class="text-3xl font-bold text-gray-900 mb-2">User Management</h1>\r
      <p class="text-gray-600">Manage user accounts, roles, and permissions</p>\r
    </div>\r
\r
    <!-- Loading State -->\r
    <div *ngIf="isLoading" class="bg-white rounded-xl shadow-sm border border-gray-200 p-8">\r
      <div class="flex items-center justify-center">\r
        <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600"></div>\r
        <p class="ml-3 text-gray-600">Loading users...</p>\r
      </div>\r
    </div>\r
\r
    <!-- Error State -->\r
    <div *ngIf="errorMessage && !isLoading" class="bg-red-50 border border-red-200 rounded-xl p-6 mb-6">\r
      <div class="flex items-center">\r
        <svg class="w-5 h-5 text-red-400 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16c-.77.833.192 2.5 1.732 2.5z"></path>\r
        </svg>\r
        <p class="text-red-800 font-medium">{{ errorMessage }}</p>\r
      </div>\r
    </div>\r
\r
    <!-- Permission Denied -->\r
    <div *ngIf="!isLoading && !errorMessage && currentUserRole !== 'superadmin' && currentUserRole !== 'admin'" \r
         class="bg-yellow-50 border border-yellow-200 rounded-xl p-8 text-center">\r
      <svg class="w-16 h-16 text-yellow-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"></path>\r
      </svg>\r
      <h3 class="text-lg font-semibold text-yellow-800 mb-2">Access Restricted</h3>\r
      <p class="text-yellow-700">You do not have permission to view this page. Contact your administrator for access.</p>\r
    </div>\r
\r
    <!-- Users Table -->\r
    <div *ngIf="!isLoading && !errorMessage && (currentUserRole === 'superadmin' || currentUserRole === 'admin')" \r
         class="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">\r
      \r
      <!-- Table Header -->\r
      <div class="px-6 py-4 border-b border-gray-200 bg-gray-50">\r
        <h2 class="text-xl font-semibold text-gray-900 flex items-center">\r
          <svg class="w-5 h-5 mr-2 text-primary-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"></path>\r
          </svg>\r
          User Accounts ({{ users.length }})\r
        </h2>\r
      </div>\r
\r
      <!-- Table Content -->\r
      <div class="overflow-x-auto">\r
        <table class="min-w-full divide-y divide-gray-200">\r
          <thead class="bg-gray-50">\r
            <tr>\r
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">User Info</th>\r
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Role</th>\r
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Account Expires</th>\r
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Days Left</th>\r
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Free Trial Ends</th>\r
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>\r
            </tr>\r
          </thead>\r
          <tbody class="bg-white divide-y divide-gray-200">\r
            <tr *ngFor="let user of users; let i = index" class="hover:bg-gray-50 transition-colors">\r
              \r
              <!-- User Info -->\r
              <td class="px-6 py-4">\r
                <div class="flex items-center">\r
                  <div class="flex-shrink-0 h-10 w-10">\r
                    <div class="h-10 w-10 rounded-full bg-primary-100 flex items-center justify-center">\r
                      <span class="text-sm font-medium text-primary-700">{{ user.name.charAt(0).toUpperCase() }}</span>\r
                    </div>\r
                  </div>\r
                  <div class="ml-4">\r
                    <div class="text-sm font-medium text-gray-900">{{ user.name }}</div>\r
                    <div class="text-sm text-gray-500">{{ '@' + user.username }}</div>\r
                    <div class="text-xs text-gray-400">{{ user.email || 'No email' }}</div>\r
                  </div>\r
                </div>\r
              </td>\r
\r
              <!-- Role -->\r
              <td class="px-6 py-4">                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium"\r
                      [ngClass]="{\r
                        'bg-purple-100 text-purple-800': user.role === 'superadmin',\r
                        'bg-blue-100 text-blue-800': user.role === 'admin',\r
                        'bg-green-100 text-green-800': user.role === 'student'\r
                      }">\r
                  {{ user.role }}\r
                </span>\r
              </td>\r
\r
              <!-- Account Expires -->\r
              <td class="px-6 py-4">\r
                <input \r
                  type="date" \r
                  [(ngModel)]="userEditModels[user._id].formAccountExpiresAt" \r
                  [readonly]="!isSuperAdmin"\r
                  class="form-input text-sm px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-primary-500 focus:border-primary-500 disabled:bg-gray-100"\r
                  [class.bg-gray-100]="!isSuperAdmin"\r
                />\r
              </td>\r
\r
              <!-- Days Left -->\r
              <td class="px-6 py-4">                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium"\r
                      [ngClass]="{\r
                        'bg-red-100 text-red-800': getDaysLeftNumber(userEditModels[user._id].formAccountExpiresAt) <= 7,\r
                        'bg-yellow-100 text-yellow-800': getDaysLeftNumber(userEditModels[user._id].formAccountExpiresAt) > 7 && getDaysLeftNumber(userEditModels[user._id].formAccountExpiresAt) <= 30,\r
                        'bg-green-100 text-green-800': getDaysLeftNumber(userEditModels[user._id].formAccountExpiresAt) > 30\r
                      }">\r
                  {{ getDaysLeft(userEditModels[user._id].formAccountExpiresAt) }}\r
                </span>\r
              </td>\r
\r
              <!-- Free Trial Ends -->\r
              <td class="px-6 py-4">\r
                <input \r
                  type="date" \r
                  [(ngModel)]="userEditModels[user._id].formFreeTrialEndsAt" \r
                  [readonly]="!isSuperAdmin"\r
                  class="form-input text-sm px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-primary-500 focus:border-primary-500 disabled:bg-gray-100"\r
                  [class.bg-gray-100]="!isSuperAdmin"\r
                />\r
              </td>\r
\r
              <!-- Actions -->\r
              <td class="px-6 py-4">\r
                <div class="flex flex-col space-y-2">\r
                  <!-- Save Button -->\r
                  <button \r
                    (click)="saveUserSettings(user)"\r
                    class="inline-flex items-center px-3 py-1.5 text-xs font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 transition-colors"\r
                  >\r
                    <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>\r
                    </svg>\r
                    Save\r
                  </button>\r
                  \r
                  <!-- Quick Actions -->\r
                  <div class="flex flex-wrap gap-1">\r
                    <button \r
                      (click)="addExpiryDays(user, 30)"\r
                      class="inline-flex items-center px-2 py-1 text-xs font-medium rounded bg-green-100 text-green-700 hover:bg-green-200 transition-colors"\r
                      title="Add 30 days"\r
                    >\r
                      +30d\r
                    </button>\r
                    <button \r
                      (click)="addExpiryDays(user, 180)"\r
                      class="inline-flex items-center px-2 py-1 text-xs font-medium rounded bg-blue-100 text-blue-700 hover:bg-blue-200 transition-colors"\r
                      title="Add 180 days"\r
                    >\r
                      +180d\r
                    </button>\r
                    <button \r
                      (click)="addExpiryDays(user, 360)"\r
                      class="inline-flex items-center px-2 py-1 text-xs font-medium rounded bg-purple-100 text-purple-700 hover:bg-purple-200 transition-colors"\r
                      title="Add 360 days"\r
                    >\r
                      +360d\r
                    </button>\r
                  </div>\r
                </div>\r
              </td>\r
            </tr>\r
            \r
            <!-- Empty State -->\r
            <tr *ngIf="users.length === 0">\r
              <td colspan="6" class="px-6 py-12 text-center text-gray-500">\r
                <div class="flex flex-col items-center">\r
                  <svg class="w-12 h-12 text-gray-300 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"></path>\r
                  </svg>\r
                  <p class="text-lg font-medium">No users found</p>\r
                  <p class="text-sm">No user accounts are currently available to manage.</p>\r
                </div>\r
              </td>\r
            </tr>\r
          </tbody>\r
        </table>\r
      </div>\r
\r
      <!-- Table Footer -->\r
      <div class="bg-gray-50 px-6 py-3 border-t border-gray-200">\r
        <div class="flex items-center justify-between text-sm text-gray-600">\r
          <div class="flex items-center">\r
            <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">\r
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>\r
            </svg>\r
            <span>Click on date fields to modify user expiry dates</span>\r
          </div>\r
          <div class="flex items-center">\r
            <span class="font-medium">Total Users: {{ users.length }}</span>\r
          </div>\r
        </div>\r
      </div>\r
    </div>\r
  </div>\r
</div>\r
`, styles: ["/* src/app/components/user-management/user-management.component.scss */\n.user-avatar-transition {\n  transition-property: all;\n  transition-duration: 200ms;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n}\n.enhanced-focus:focus {\n  --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);\n  --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color);\n  box-shadow:\n    var(--tw-ring-offset-shadow),\n    var(--tw-ring-shadow),\n    var(--tw-shadow, 0 0 #0000);\n  --tw-ring-color: rgb(14 165 233 / var(--tw-ring-opacity, 1));\n  --tw-ring-opacity: 0.5 ;\n}\n/*# sourceMappingURL=user-management.component.css.map */\n"] }]
  }], () => [{ type: UserService }, { type: AuthService }], null);
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(UserManagementComponent, { className: "UserManagementComponent", filePath: "src/app/components/user-management/user-management.component.ts", lineNumber: 14 });
})();

// src/app/guards/admin.guard.ts
var AdminGuard = class _AdminGuard {
  auth;
  router;
  constructor(auth, router) {
    this.auth = auth;
    this.router = router;
  }
  canActivate() {
    console.log("AdminGuard \u2794 token=", this.auth.getToken(), "role=", this.auth.getRole());
    if (this.auth.isLoggedIn() && ["admin", "superadmin"].includes(this.auth.getRole())) {
      return true;
    }
    this.router.navigate(["/login"]);
    return false;
  }
  static \u0275fac = function AdminGuard_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AdminGuard)(\u0275\u0275inject(AuthService), \u0275\u0275inject(Router));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _AdminGuard, factory: _AdminGuard.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AdminGuard, [{
    type: Injectable,
    args: [{ providedIn: "root" }]
  }], () => [{ type: AuthService }, { type: Router }], null);
})();

// src/app/guards/student.guard.ts
var StudentGuard = class _StudentGuard {
  auth;
  router;
  constructor(auth, router) {
    this.auth = auth;
    this.router = router;
  }
  canActivate() {
    if (this.auth.isLoggedIn() && this.auth.getRole() === "student") {
      return true;
    }
    this.router.navigate(["/login"]);
    return false;
  }
  static \u0275fac = function StudentGuard_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _StudentGuard)(\u0275\u0275inject(AuthService), \u0275\u0275inject(Router));
  };
  static \u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _StudentGuard, factory: _StudentGuard.\u0275fac, providedIn: "root" });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(StudentGuard, [{
    type: Injectable,
    args: [{ providedIn: "root" }]
  }], () => [{ type: AuthService }, { type: Router }], null);
})();

// src/app/guards/superadmin.guard.ts
var superadminGuard = (route, state) => {
  const authService = inject(AuthService);
  const router = inject(Router);
  const userRole = authService.getUserRole();
  if (authService.isLoggedIn() && userRole === "superadmin") {
    return true;
  } else {
    router.navigate(["/auth/login"]);
    return false;
  }
};

// src/app/app-routing.module.ts
var routes = [
  // Public
  { path: "", redirectTo: "home", pathMatch: "full" },
  // Default route now redirects to home
  { path: "login", component: LoginComponent },
  { path: "register", component: RegisterComponent },
  { path: "logout", component: LogoutComponent },
  { path: "home", component: HomeComponent, canActivate: [AdminGuard] },
  // Add route for HomeComponent
  // Analytics (per-series) at top level
  {
    path: "series/:seriesId/analytics",
    component: SeriesAnalyticsComponent,
    canActivate: [AdminGuard]
  },
  // Student-only
  {
    path: "student-dashboard",
    component: StudentDashboardComponent,
    canActivate: [StudentGuard]
  },
  // Admin-only block
  {
    path: "",
    canActivate: [AdminGuard],
    children: [
      // Test Series
      { path: "test-series", component: TestSeriesListComponent },
      { path: "test-series/create", component: BuildPaperComponent },
      { path: "build-paper", component: BuildPaperComponent },
      // Question bank
      { path: "questions", component: QuestionListComponent },
      { path: "add-question", component: AddQuestionComponent },
      { path: "question-editor", component: QuestionEditorComponent },
      // NEW: Enhanced question editor with math and image support
      { path: "questions/edit/:id", component: EditQuestionComponent },
      { path: "questions/:id/view", component: QuestionDetailComponent, canActivate: [AdminGuard] },
      // ADDED
      { path: "questions/review", component: QuestionReviewComponent, canActivate: [superadminGuard] },
      // Protected by superadminGuard
      // Hierarchy CRUD
      { path: "branches", component: HomeComponent, data: { hierarchySection: "branches" } },
      { path: "branches/new", component: AddBranchComponent },
      { path: "subjects", component: HomeComponent, data: { hierarchySection: "subjects" } },
      { path: "subjects/new", component: AddSubjectComponent },
      { path: "topics", component: HomeComponent, data: { hierarchySection: "topics" } },
      { path: "topics/new", component: AddTopicComponent },
      { path: "subtopics", component: HomeComponent, data: { hierarchySection: "subtopics" } },
      { path: "subtopics/new", component: AddSubtopicComponent },
      { path: "csv-import", component: CsvUploadComponent },
      // Exam Families
      { path: "exam-families", component: ExamFamilyListComponent },
      { path: "exam-families/new", component: AddExamFamilyComponent },
      // Exam Streams
      { path: "exam-streams", component: ExamStreamListComponent },
      { path: "exam-streams/new", component: AddExamStreamComponent },
      // Exam Papers
      { path: "exam-papers", component: ExamPaperListComponent },
      { path: "exam-papers/new", component: AddExamPaperComponent },
      // Exam Shifts
      { path: "exam-shifts", component: ExamShiftListComponent },
      { path: "exam-shifts/new", component: AddExamShiftComponent },
      // User Management (Superadmin only)
      { path: "user-management", component: UserManagementComponent, canActivate: [AdminGuard] },
      // Added route for UserManagement
      { path: "leaderboard", loadComponent: () => import("./chunk-RPVJZOK6.js").then((m) => m.LeaderboardComponent), canActivate: [AdminGuard] }
      // Route for Leaderboard
    ]
  },
  // Catch-all
  { path: "**", pathMatch: "full", redirectTo: "login", data: { reason: "no-match" } }
];
var AppRoutingModule = class _AppRoutingModule {
  static \u0275fac = function AppRoutingModule_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AppRoutingModule)();
  };
  static \u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({ type: _AppRoutingModule });
  static \u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({ imports: [RouterModule.forRoot(routes), RouterModule] });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AppRoutingModule, [{
    type: NgModule,
    args: [{
      imports: [RouterModule.forRoot(routes)],
      exports: [RouterModule]
    }]
  }], null, null);
})();

// src/main.ts
bootstrapApplication(AppComponent, {
  providers: [
    provideHttpClient(withInterceptorsFromDi()),
    { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true },
    provideRouter(routes)
  ]
}).catch((err) => console.error(err));
/*! Bundled license information:

papaparse/papaparse.min.js:
  (* @license
  Papa Parse
  v5.5.3
  https://github.com/mholt/PapaParse
  License: MIT
  *)

@angular/compiler/fesm2022/compiler.mjs:
@angular/platform-browser/fesm2022/dom_renderer-DGKzginR.mjs:
@angular/platform-browser/fesm2022/browser-D-u-fknz.mjs:
@angular/platform-browser/fesm2022/platform-browser.mjs:
@angular/router/fesm2022/router-Dwfin5Au.mjs:
@angular/router/fesm2022/router_module-DTJgGWLd.mjs:
@angular/router/fesm2022/router.mjs:
  (**
   * @license Angular v19.2.14
   * (c) 2010-2025 Google LLC. https://angular.io/
   * License: MIT
   *)

@angular/compiler/fesm2022/compiler.mjs:
  (*!
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)
  (**
   *
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)

@angular/compiler/fesm2022/compiler.mjs:
  (*!
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.dev/license
   *)
*/
//# sourceMappingURL=main.js.map
